
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018170  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b40  08018320  08018320  00028320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be60  0801be60  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801be60  0801be60  0002be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be68  0801be68  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be68  0801be68  0002be68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be6c  0801be6c  0002be6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801be70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f2f4  20000084  0801bef4  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f378  0801bef4  0003f378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045260  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007dc6  00000000  00000000  00075314  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024a8  00000000  00000000  0007d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022f0  00000000  00000000  0007f588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035ae8  00000000  00000000  00081878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002dfd4  00000000  00000000  000b7360  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100fb5  00000000  00000000  000e5334  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e62e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d8c  00000000  00000000  001e6364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018308 	.word	0x08018308

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08018308 	.word	0x08018308

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	200000f4 	.word	0x200000f4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fc63 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f81f 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8df 	bl	8000794 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d6:	f000 f885 	bl	80006e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005da:	f000 f8ad 	bl	8000738 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <main+0x44>)
 80005e0:	1d3c      	adds	r4, r7, #4
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fc44 	bl	8004e82 <osThreadCreate>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <main+0x48>)
 80005fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f004 fc28 	bl	8004e54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x40>
 8000606:	bf00      	nop
 8000608:	0801832c 	.word	0x0801832c
 800060c:	200085f0 	.word	0x200085f0

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f016 ff4a 	bl	80174b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	; 0xa8
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 f9c9 	bl	8002a2c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f944 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fc22 	bl	8002f0c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f92d 	bl	800092c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART3_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800071c:	f003 f858 	bl	80037d0 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f901 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200085f4 	.word	0x200085f4
 8000734:	40004800 	.word	0x40004800

08000738 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000742:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000746:	2204      	movs	r2, #4
 8000748:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074c:	2202      	movs	r2, #2
 800074e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000758:	2202      	movs	r2, #2
 800075a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2201      	movs	r2, #1
 8000760:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2201      	movs	r2, #1
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	f002 f839 	bl	80027f2 <HAL_PCD_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 f8d1 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20008634 	.word	0x20008634

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b4b      	ldr	r3, [pc, #300]	; (80008dc <MX_GPIO_Init+0x148>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a4a      	ldr	r2, [pc, #296]	; (80008dc <MX_GPIO_Init+0x148>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b48      	ldr	r3, [pc, #288]	; (80008dc <MX_GPIO_Init+0x148>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b44      	ldr	r3, [pc, #272]	; (80008dc <MX_GPIO_Init+0x148>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a43      	ldr	r2, [pc, #268]	; (80008dc <MX_GPIO_Init+0x148>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b41      	ldr	r3, [pc, #260]	; (80008dc <MX_GPIO_Init+0x148>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <MX_GPIO_Init+0x148>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a3c      	ldr	r2, [pc, #240]	; (80008dc <MX_GPIO_Init+0x148>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <MX_GPIO_Init+0x148>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <MX_GPIO_Init+0x148>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a35      	ldr	r2, [pc, #212]	; (80008dc <MX_GPIO_Init+0x148>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <MX_GPIO_Init+0x148>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <MX_GPIO_Init+0x148>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <MX_GPIO_Init+0x148>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_GPIO_Init+0x148>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_GPIO_Init+0x148>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a27      	ldr	r2, [pc, #156]	; (80008dc <MX_GPIO_Init+0x148>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_GPIO_Init+0x148>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f244 0181 	movw	r1, #16513	; 0x4081
 8000858:	4821      	ldr	r0, [pc, #132]	; (80008e0 <MX_GPIO_Init+0x14c>)
 800085a:	f001 ffb1 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	4820      	ldr	r0, [pc, #128]	; (80008e4 <MX_GPIO_Init+0x150>)
 8000864:	f001 ffac 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_GPIO_Init+0x154>)
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	481b      	ldr	r0, [pc, #108]	; (80008ec <MX_GPIO_Init+0x158>)
 800087e:	f001 fdf5 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000882:	f244 0381 	movw	r3, #16513	; 0x4081
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_GPIO_Init+0x14c>)
 800089c:	f001 fde6 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	480b      	ldr	r0, [pc, #44]	; (80008e4 <MX_GPIO_Init+0x150>)
 80008b8:	f001 fdd8 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0x150>)
 80008d0:	f001 fdcc 	bl	800246c <HAL_GPIO_Init>

}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40021800 	.word	0x40021800
 80008e8:	10110000 	.word	0x10110000
 80008ec:	40020800 	.word	0x40020800

080008f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008f8:	f003 fdea 	bl	80044d0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 80008fc:	f000 fa8c 	bl	8000e18 <tcpecho_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000900:	2001      	movs	r0, #1
 8000902:	f004 fb0a 	bl	8004f1a <osDelay>
 8000906:	e7fb      	b.n	8000900 <StartDefaultTask+0x10>

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 fadd 	bl	8000ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40002000 	.word	0x40002000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <HAL_MspInit+0x4c>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d12c      	bne.n	8000a08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009f8:	2307      	movs	r3, #7
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_UART_MspInit+0x8c>)
 8000a04:	f001 fd32 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40004800 	.word	0x40004800
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a3c:	d13f      	bne.n	8000abe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <HAL_PCD_MspInit+0xac>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <HAL_PCD_MspInit+0xac>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <HAL_PCD_MspInit+0xac>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a5a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4815      	ldr	r0, [pc, #84]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000a78:	f001 fcf8 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480e      	ldr	r0, [pc, #56]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000a92:	f001 fceb 	bl	800246c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_PCD_MspInit+0xac>)
 8000a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_PCD_MspInit+0xac>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6353      	str	r3, [r2, #52]	; 0x34
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_PCD_MspInit+0xac>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_PCD_MspInit+0xac>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_PCD_MspInit+0xac>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	202d      	movs	r0, #45	; 0x2d
 8000ae6:	f000 faf1 	bl	80010cc <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000aea:	202d      	movs	r0, #45	; 0x2d
 8000aec:	f000 fb0a 	bl	8001104 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <HAL_InitTick+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <HAL_InitTick+0xa4>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_InitTick+0xa4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b0c:	f107 0210 	add.w	r2, r7, #16
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 fbea 	bl	80032f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b1c:	f002 fbc0 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 8000b20:	4603      	mov	r3, r0
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0c9b      	lsrs	r3, r3, #18
 8000b30:	3b01      	subs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_InitTick+0xac>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <HAL_InitTick+0xb0>)
 8000b38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_InitTick+0xac>)
 8000b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b40:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_InitTick+0xac>)
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_InitTick+0xac>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_InitTick+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <HAL_InitTick+0xac>)
 8000b56:	f002 fbfd 	bl	8003354 <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d104      	bne.n	8000b6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_InitTick+0xac>)
 8000b62:	f002 fc2c 	bl	80033be <HAL_TIM_Base_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3730      	adds	r7, #48	; 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	20008a3c 	.word	0x20008a3c
 8000b80:	40002000 	.word	0x40002000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000bbe:	f002 fc22 	bl	8003406 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20008a3c 	.word	0x20008a3c

08000bcc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <ETH_IRQHandler+0x10>)
 8000bd2:	f000 fe8b 	bl	80018ec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000a39c 	.word	0x2000a39c

08000be0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e00a      	b.n	8000c08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bf2:	f3af 8000 	nop.w
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	b2ca      	uxtb	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf0      	blt.n	8000bf2 <_read+0x12>
	}

return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e009      	b.n	8000c40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf1      	blt.n	8000c2c <_write+0x12>
	}
	return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_close>:

int _close(int file)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	return -1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_isatty>:

int _isatty(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	return 1;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
	return 0;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d205      	bcs.n	8000cf8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <_sbrk+0x6c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	20030000 	.word	0x20030000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	200002f4 	.word	0x200002f4
 8000d24:	2000f378 	.word	0x2000f378
 8000d28:	2000f370 	.word	0x2000f370

08000d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <SystemInit+0x28>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <SystemInit+0x28>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SystemInit+0x28>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d46:	609a      	str	r2, [r3, #8]
#endif
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2010      	movs	r0, #16
 8000d66:	f006 ffff 	bl	8007d68 <netconn_new_with_proto_and_callback>
 8000d6a:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d04e      	beq.n	8000e10 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d72:	2207      	movs	r2, #7
 8000d74:	2100      	movs	r1, #0
 8000d76:	69f8      	ldr	r0, [r7, #28]
 8000d78:	f007 f8b0 	bl	8007edc <netconn_bind>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d80:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d13f      	bne.n	8000e08 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	69f8      	ldr	r0, [r7, #28]
 8000d8c:	f007 f8de 	bl	8007f4c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	69f8      	ldr	r0, [r7, #28]
 8000d98:	f007 f904 	bl	8007fa4 <netconn_accept>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000da0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f3      	bne.n	8000d90 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000da8:	e01b      	b.n	8000de2 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	f107 020a 	add.w	r2, r7, #10
 8000db0:	f107 010c 	add.w	r1, r7, #12
 8000db4:	4618      	mov	r0, r3
 8000db6:	f009 f891 	bl	8009edc <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	68f9      	ldr	r1, [r7, #12]
 8000dbe:	897b      	ldrh	r3, [r7, #10]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f007 fb6e 	bl	80084a8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f009 f8ce 	bl	8009f70 <netbuf_next>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	dae7      	bge.n	8000daa <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f009 f85d 	bl	8009e9c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f107 0210 	add.w	r2, r7, #16
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 fae2 	bl	80083b4 <netconn_recv>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0d9      	beq.n	8000daa <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f007 fc57 	bl	80086ac <netconn_close>
          netconn_delete(newconn);
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f007 f84f 	bl	8007ea4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e06:	e7c3      	b.n	8000d90 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f007 f84a 	bl	8007ea4 <netconn_delete>
    }
  }
}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e1e:	2304      	movs	r3, #4
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	2200      	movs	r2, #0
 8000e28:	4903      	ldr	r1, [pc, #12]	; (8000e38 <tcpecho_init+0x20>)
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <tcpecho_init+0x24>)
 8000e2c:	f016 fac2 	bl	80173b4 <sys_thread_new>
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	08000d59 	.word	0x08000d59
 8000e3c:	08018348 	.word	0x08018348

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e46:	e003      	b.n	8000e50 <LoopCopyDataInit>

08000e48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e4e:	3104      	adds	r1, #4

08000e50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e58:	d3f6      	bcc.n	8000e48 <CopyDataInit>
  ldr  r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e5c:	e002      	b.n	8000e64 <LoopFillZerobss>

08000e5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e60:	f842 3b04 	str.w	r3, [r2], #4

08000e64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e68:	d3f9      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ff5f 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f016 fae5 	bl	801743c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fba7 	bl	80005c4 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e78:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e7c:	0801be70 	.word	0x0801be70
  ldr  r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e84:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000e88:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000e8c:	2000f378 	.word	0x2000f378

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f8fa 	bl	80010b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fe04 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fd38 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20008a7c 	.word	0x20008a7c

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20008a7c 	.word	0x20008a7c

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_Delay+0x40>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000008 	.word	0x20000008

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff4c 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010de:	f7ff ff61 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	6978      	ldr	r0, [r7, #20]
 80010ea:	f7ff ffb1 	bl	8001050 <NVIC_EncodePriority>
 80010ee:	4602      	mov	r2, r0
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff80 	bl	8000ffc <__NVIC_SetPriority>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff54 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001130:	4baa      	ldr	r3, [pc, #680]	; (80013dc <HAL_ETH_Init+0x2bc>)
 8001132:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e185      	b.n	8001452 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f003 fa28 	bl	80045b0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b9e      	ldr	r3, [pc, #632]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	4a9d      	ldr	r2, [pc, #628]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	6453      	str	r3, [r2, #68]	; 0x44
 8001170:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800117c:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a98      	ldr	r2, [pc, #608]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 8001182:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001186:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001188:	4b96      	ldr	r3, [pc, #600]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4994      	ldr	r1, [pc, #592]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ae:	f7ff fea7 	bl	8000f00 <HAL_GetTick>
 80011b2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011b4:	e011      	b.n	80011da <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011b6:	f7ff fea3 	bl	8000f00 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011c4:	d909      	bls.n	80011da <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2203      	movs	r2, #3
 80011ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e13b      	b.n	8001452 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e4      	bne.n	80011b6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f023 031c 	bic.w	r3, r3, #28
 80011fa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011fc:	f002 f844 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 8001200:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4a78      	ldr	r2, [pc, #480]	; (80013e8 <HAL_ETH_Init+0x2c8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d908      	bls.n	800121c <HAL_ETH_Init+0xfc>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_ETH_Init+0x2cc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d804      	bhi.n	800121c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e027      	b.n	800126c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4a73      	ldr	r2, [pc, #460]	; (80013ec <HAL_ETH_Init+0x2cc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d908      	bls.n	8001236 <HAL_ETH_Init+0x116>
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <HAL_ETH_Init+0x2d0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d804      	bhi.n	8001236 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f043 030c 	orr.w	r3, r3, #12
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	e01a      	b.n	800126c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4a6d      	ldr	r2, [pc, #436]	; (80013f0 <HAL_ETH_Init+0x2d0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d903      	bls.n	8001246 <HAL_ETH_Init+0x126>
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <HAL_ETH_Init+0x2d4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d911      	bls.n	800126a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4a6a      	ldr	r2, [pc, #424]	; (80013f4 <HAL_ETH_Init+0x2d4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d908      	bls.n	8001260 <HAL_ETH_Init+0x140>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4a69      	ldr	r2, [pc, #420]	; (80013f8 <HAL_ETH_Init+0x2d8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d804      	bhi.n	8001260 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	e005      	b.n	800126c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	e000      	b.n	800126c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800126a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001278:	2100      	movs	r1, #0
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fc19 	bl	8001ab2 <HAL_ETH_WritePHYRegister>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800128a:	6939      	ldr	r1, [r7, #16]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fdcf 	bl	8001e30 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0d9      	b.n	8001452 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800129e:	20ff      	movs	r0, #255	; 0xff
 80012a0:	f7ff fe3a 	bl	8000f18 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a7 	beq.w	80013fc <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ae:	f7ff fe27 	bl	8000f00 <HAL_GetTick>
 80012b2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	461a      	mov	r2, r3
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fb90 	bl	80019e2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012c2:	f7ff fe1d 	bl	8000f00 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d90f      	bls.n	80012f4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fda8 	bl	8001e30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0ae      	b.n	8001452 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0da      	beq.n	80012b4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001302:	2100      	movs	r1, #0
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fbd4 	bl	8001ab2 <HAL_ETH_WritePHYRegister>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fd8a 	bl	8001e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001324:	2301      	movs	r3, #1
 8001326:	e094      	b.n	8001452 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001328:	f7ff fdea 	bl	8000f00 <HAL_GetTick>
 800132c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	461a      	mov	r2, r3
 8001334:	2101      	movs	r1, #1
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fb53 	bl	80019e2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800133c:	f7ff fde0 	bl	8000f00 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d90f      	bls.n	800136e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001352:	6939      	ldr	r1, [r7, #16]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fd6b 	bl	8001e30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e071      	b.n	8001452 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0da      	beq.n	800132e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	461a      	mov	r2, r3
 800137e:	211f      	movs	r1, #31
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fb2e 	bl	80019e2 <HAL_ETH_ReadPHYRegister>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00b      	beq.n	80013a4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fd4c 	bl	8001e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013a0:	2301      	movs	r3, #1
 80013a2:	e056      	b.n	8001452 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	e002      	b.n	80013be <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	e037      	b.n	8001440 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	e032      	b.n	8001440 <HAL_ETH_Init+0x320>
 80013da:	bf00      	nop
 80013dc:	03938700 	.word	0x03938700
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	01312cff 	.word	0x01312cff
 80013ec:	02160ebf 	.word	0x02160ebf
 80013f0:	039386ff 	.word	0x039386ff
 80013f4:	05f5e0ff 	.word	0x05f5e0ff
 80013f8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800140c:	4313      	orrs	r3, r2
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	2100      	movs	r1, #0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fb4c 	bl	8001ab2 <HAL_ETH_WritePHYRegister>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001424:	6939      	ldr	r1, [r7, #16]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fd02 	bl	8001e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e00c      	b.n	8001452 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001438:	f640 70ff 	movw	r0, #4095	; 0xfff
 800143c:	f7ff fd6c 	bl	8000f18 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001440:	6939      	ldr	r1, [r7, #16]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fcf4 	bl	8001e30 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop

0800145c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_ETH_DMATxDescListInit+0x20>
 8001478:	2302      	movs	r3, #2
 800147a:	e052      	b.n	8001522 <HAL_ETH_DMATxDescListInit+0xc6>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2202      	movs	r2, #2
 8001488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e030      	b.n	80014fa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	015b      	lsls	r3, r3, #5
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	4413      	add	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014a8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d105      	bne.n	80014d2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d208      	bcs.n	80014ee <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	015b      	lsls	r3, r3, #5
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	4413      	add	r3, r2
 80014e6:	461a      	mov	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	e002      	b.n	80014f4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3ca      	bcc.n	8001498 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150c:	3310      	adds	r3, #16
 800150e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800152e:	b480      	push	{r7}
 8001530:	b087      	sub	sp, #28
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_ETH_DMARxDescListInit+0x20>
 800154a:	2302      	movs	r3, #2
 800154c:	e056      	b.n	80015fc <HAL_ETH_DMARxDescListInit+0xce>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2202      	movs	r2, #2
 800155a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e034      	b.n	80015d4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	015b      	lsls	r3, r3, #5
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	4413      	add	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800157a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001582:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	461a      	mov	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d105      	bne.n	80015ac <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d208      	bcs.n	80015c8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	4413      	add	r3, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	e002      	b.n	80015ce <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d3c6      	bcc.n	800156a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	330c      	adds	r3, #12
 80015e8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_ETH_TransmitFrame+0x24>
 8001628:	2302      	movs	r3, #2
 800162a:	e0cd      	b.n	80017c8 <HAL_ETH_TransmitFrame+0x1c0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001652:	2301      	movs	r3, #1
 8001654:	e0b8      	b.n	80017c8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	da09      	bge.n	8001674 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2212      	movs	r2, #18
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0a9      	b.n	80017c8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800167a:	4293      	cmp	r3, r2
 800167c:	d915      	bls.n	80016aa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	4a54      	ldr	r2, [pc, #336]	; (80017d4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0a9b      	lsrs	r3, r3, #10
 8001688:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <HAL_ETH_TransmitFrame+0x1cc>)
 800168e:	fba3 1302 	umull	r1, r3, r3, r2
 8001692:	0a9b      	lsrs	r3, r3, #10
 8001694:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e001      	b.n	80016ae <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80016aa:	2301      	movs	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11c      	bne.n	80016ee <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016c2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016ce:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016de:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ec:	e04b      	b.n	8001786 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e044      	b.n	800177e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001702:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001718:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001722:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3b01      	subs	r3, #1
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	429a      	cmp	r2, r3
 800172c:	d116      	bne.n	800175c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800173c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001742:	fb02 f203 	mul.w	r2, r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800174e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800175a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800176a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	3301      	adds	r3, #1
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	429a      	cmp	r2, r3
 8001784:	d3b6      	bcc.n	80016f4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178e:	3314      	adds	r3, #20
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00d      	beq.n	80017b6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a2:	3314      	adds	r3, #20
 80017a4:	2204      	movs	r2, #4
 80017a6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b0:	3304      	adds	r3, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	ac02b00b 	.word	0xac02b00b
 80017d8:	fffffa0c 	.word	0xfffffa0c

080017dc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e074      	b.n	80018e0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2202      	movs	r2, #2
 8001802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001806:	e05a      	b.n	80018be <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800181c:	d10d      	bne.n	800183a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	461a      	mov	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
 8001838:	e041      	b.n	80018be <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10b      	bne.n	8001860 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
 800185e:	e02e      	b.n	80018be <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	2b01      	cmp	r3, #1
 8001878:	d103      	bne.n	8001882 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800188e:	1f1a      	subs	r2, r3, #4
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e010      	b.n	80018e0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db02      	blt.n	80018ce <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d99c      	bls.n	8001808 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fc:	3314      	adds	r3, #20
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001904:	2b40      	cmp	r3, #64	; 0x40
 8001906:	d112      	bne.n	800192e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f002 ff1f 	bl	800474c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	3314      	adds	r3, #20
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800192c:	e01b      	b.n	8001966 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001936:	3314      	adds	r3, #20
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d111      	bne.n	8001966 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f839 	bl	80019ba <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001950:	3314      	adds	r3, #20
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196e:	3314      	adds	r3, #20
 8001970:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001974:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197e:	3314      	adds	r3, #20
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800198a:	d112      	bne.n	80019b2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f81e 	bl	80019ce <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199a:	3314      	adds	r3, #20
 800199c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019a0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	460b      	mov	r3, r1
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b82      	cmp	r3, #130	; 0x82
 8001a02:	d101      	bne.n	8001a08 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
 8001a06:	e050      	b.n	8001aaa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2282      	movs	r2, #130	; 0x82
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 031c 	and.w	r3, r3, #28
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8a1b      	ldrh	r3, [r3, #16]
 8001a24:	02db      	lsls	r3, r3, #11
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001a2e:	897b      	ldrh	r3, [r7, #10]
 8001a30:	019b      	lsls	r3, r3, #6
 8001a32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f023 0302 	bic.w	r3, r3, #2
 8001a42:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a54:	f7ff fa54 	bl	8000f00 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a5a:	e015      	b.n	8001a88 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001a5c:	f7ff fa50 	bl	8000f00 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6a:	d309      	bcc.n	8001a80 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e014      	b.n	8001aaa <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1e4      	bne.n	8001a5c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	460b      	mov	r3, r1
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b42      	cmp	r3, #66	; 0x42
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e04e      	b.n	8001b76 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2242      	movs	r2, #66	; 0x42
 8001adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 031c 	and.w	r3, r3, #28
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8a1b      	ldrh	r3, [r3, #16]
 8001af4:	02db      	lsls	r3, r3, #11
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	019b      	lsls	r3, r3, #6
 8001b02:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b2e:	f7ff f9e7 	bl	8000f00 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b34:	e015      	b.n	8001b62 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001b36:	f7ff f9e3 	bl	8000f00 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d309      	bcc.n	8001b5a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e00d      	b.n	8001b76 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e4      	bne.n	8001b36 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_ETH_Start+0x16>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e01f      	b.n	8001bd4 <HAL_ETH_Start+0x56>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fb45 	bl	8002234 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fb7c 	bl	80022a8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 fc13 	bl	80023dc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fbb0 	bl	800231c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fbdd 	bl	800237c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ETH_Stop+0x16>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e01f      	b.n	8001c32 <HAL_ETH_Stop+0x56>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fba2 	bl	800234c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fbcf 	bl	80023ac <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fb67 	bl	80022e2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fbe1 	bl	80023dc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fb27 	bl	800226e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_ETH_ConfigMAC+0x1c>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e0e4      	b.n	8001e22 <HAL_ETH_ConfigMAC+0x1e6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80b1 	beq.w	8001dd2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4b6c      	ldr	r3, [pc, #432]	; (8001e2c <HAL_ETH_ConfigMAC+0x1f0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c88:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c8e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c94:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001c9a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ca0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ca6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001cac:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001cb2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001cb8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001cbe:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001cc4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001cca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff f918 	bl	8000f18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cf8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001cfe:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d04:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d0a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001d10:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001d16:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001d22:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d24:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff f8f2 	bl	8000f18 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d44:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d4e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d6c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d72:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d78:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001d7e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d84:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff f8bb 	bl	8000f18 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff f8a8 	bl	8000f18 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	61da      	str	r2, [r3, #28]
 8001dd0:	e01e      	b.n	8001e10 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001de0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff f888 	bl	8000f18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	ff20810f 	.word	0xff20810f

08001e30 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0b0      	sub	sp, #192	; 0xc0
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e4c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e54:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e7c:	e001      	b.n	8001e82 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e86:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e9c:	2340      	movs	r3, #64	; 0x40
 8001e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f08:	4bac      	ldr	r3, [pc, #688]	; (80021bc <ETH_MACDMAConfig+0x38c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f14:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f18:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f1c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f22:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f26:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f2a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f30:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f34:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f38:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f3c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f40:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f44:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f58:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7fe ffd7 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f72:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f78:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f7c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f82:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f88:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f8e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f94:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f98:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001fa0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fa2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7fe ffb2 	bl	8000f18 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fbc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fc6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fd0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ff0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ff4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ffa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002000:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002006:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002008:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800200c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800200e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002020:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800202c:	2001      	movs	r0, #1
 800202e:	f7fe ff73 	bl	8000f18 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800203c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002040:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002056:	2001      	movs	r0, #1
 8002058:	f7fe ff5e 	bl	8000f18 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002064:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800206a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002074:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002078:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800208a:	2304      	movs	r3, #4
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800208e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800209a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ba:	3318      	adds	r3, #24
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <ETH_MACDMAConfig+0x390>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020ce:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020d0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020d2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020d4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020d6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020d8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020da:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020dc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020de:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020e0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020e2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020e4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020e6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020ea:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020ee:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002102:	3318      	adds	r3, #24
 8002104:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002108:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002112:	3318      	adds	r3, #24
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800211a:	2001      	movs	r0, #1
 800211c:	f7fe fefc 	bl	8000f18 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002128:	3318      	adds	r3, #24
 800212a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800212e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002134:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002138:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800213c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800213e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002140:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002144:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002146:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800214a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002158:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002168:	2001      	movs	r0, #1
 800216a:	f7fe fed5 	bl	8000f18 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800217a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d10f      	bne.n	80021a4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218c:	331c      	adds	r3, #28
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	331c      	adds	r3, #28
 80021a2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	461a      	mov	r2, r3
 80021aa:	2100      	movs	r1, #0
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f809 	bl	80021c4 <ETH_MACAddressConfig>
}
 80021b2:	bf00      	nop
 80021b4:	37c0      	adds	r7, #192	; 0xc0
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	ff20810f 	.word	0xff20810f
 80021c0:	f8de3f23 	.word	0xf8de3f23

080021c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3305      	adds	r3, #5
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	3204      	adds	r2, #4
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <ETH_MACAddressConfig+0x68>)
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3303      	adds	r3, #3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	061a      	lsls	r2, r3, #24
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3302      	adds	r3, #2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	4313      	orrs	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <ETH_MACAddressConfig+0x6c>)
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6013      	str	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40028040 	.word	0x40028040
 8002230:	40028044 	.word	0x40028044

08002234 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0208 	orr.w	r2, r2, #8
 800224e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002258:	2001      	movs	r0, #1
 800225a:	f000 f8e9 	bl	8002430 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0208 	bic.w	r2, r2, #8
 8002288:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002292:	2001      	movs	r0, #1
 8002294:	f000 f8cc 	bl	8002430 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0204 	orr.w	r2, r2, #4
 80022c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f000 f8af 	bl	8002430 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0204 	bic.w	r2, r2, #4
 80022fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002306:	2001      	movs	r0, #1
 8002308:	f000 f892 	bl	8002430 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232c:	3318      	adds	r3, #24
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233c:	3318      	adds	r3, #24
 800233e:	601a      	str	r2, [r3, #0]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235c:	3318      	adds	r3, #24
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236c:	3318      	adds	r3, #24
 800236e:	601a      	str	r2, [r3, #0]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	3318      	adds	r3, #24
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0202 	orr.w	r2, r2, #2
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	3318      	adds	r3, #24
 800239e:	601a      	str	r2, [r3, #0]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023bc:	3318      	adds	r3, #24
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0202 	bic.w	r2, r2, #2
 80023c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023cc:	3318      	adds	r3, #24
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f0:	3318      	adds	r3, #24
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002400:	3318      	adds	r3, #24
 8002402:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240c:	3318      	adds	r3, #24
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002412:	2001      	movs	r0, #1
 8002414:	f000 f80c 	bl	8002430 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002422:	3318      	adds	r3, #24
 8002424:	601a      	str	r2, [r3, #0]
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <ETH_Delay+0x34>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <ETH_Delay+0x38>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0a5b      	lsrs	r3, r3, #9
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800244c:	bf00      	nop
  } 
  while (Delay --);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	60fa      	str	r2, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f9      	bne.n	800244c <ETH_Delay+0x1c>
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	20000000 	.word	0x20000000
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e177      	b.n	8002778 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002488:	2201      	movs	r2, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f040 8166 	bne.w	8002772 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d00b      	beq.n	80024c6 <HAL_GPIO_Init+0x5a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d130      	bne.n	8002528 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	2203      	movs	r2, #3
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0201 	and.w	r2, r3, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0xfc>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b12      	cmp	r3, #18
 8002566:	d123      	bne.n	80025b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	08da      	lsrs	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3208      	adds	r2, #8
 8002570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80c0 	beq.w	8002772 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_GPIO_Init+0x320>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a64      	ldr	r2, [pc, #400]	; (800278c <HAL_GPIO_Init+0x320>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b62      	ldr	r3, [pc, #392]	; (800278c <HAL_GPIO_Init+0x320>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260e:	4a60      	ldr	r2, [pc, #384]	; (8002790 <HAL_GPIO_Init+0x324>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <HAL_GPIO_Init+0x328>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d037      	beq.n	80026aa <HAL_GPIO_Init+0x23e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a56      	ldr	r2, [pc, #344]	; (8002798 <HAL_GPIO_Init+0x32c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d031      	beq.n	80026a6 <HAL_GPIO_Init+0x23a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a55      	ldr	r2, [pc, #340]	; (800279c <HAL_GPIO_Init+0x330>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <HAL_GPIO_Init+0x236>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a54      	ldr	r2, [pc, #336]	; (80027a0 <HAL_GPIO_Init+0x334>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x232>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a53      	ldr	r2, [pc, #332]	; (80027a4 <HAL_GPIO_Init+0x338>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x22e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_GPIO_Init+0x33c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x22a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a51      	ldr	r2, [pc, #324]	; (80027ac <HAL_GPIO_Init+0x340>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x226>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a50      	ldr	r2, [pc, #320]	; (80027b0 <HAL_GPIO_Init+0x344>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x222>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4f      	ldr	r2, [pc, #316]	; (80027b4 <HAL_GPIO_Init+0x348>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x21e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4e      	ldr	r2, [pc, #312]	; (80027b8 <HAL_GPIO_Init+0x34c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x21a>
 8002682:	2309      	movs	r3, #9
 8002684:	e012      	b.n	80026ac <HAL_GPIO_Init+0x240>
 8002686:	230a      	movs	r3, #10
 8002688:	e010      	b.n	80026ac <HAL_GPIO_Init+0x240>
 800268a:	2308      	movs	r3, #8
 800268c:	e00e      	b.n	80026ac <HAL_GPIO_Init+0x240>
 800268e:	2307      	movs	r3, #7
 8002690:	e00c      	b.n	80026ac <HAL_GPIO_Init+0x240>
 8002692:	2306      	movs	r3, #6
 8002694:	e00a      	b.n	80026ac <HAL_GPIO_Init+0x240>
 8002696:	2305      	movs	r3, #5
 8002698:	e008      	b.n	80026ac <HAL_GPIO_Init+0x240>
 800269a:	2304      	movs	r3, #4
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x240>
 800269e:	2303      	movs	r3, #3
 80026a0:	e004      	b.n	80026ac <HAL_GPIO_Init+0x240>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x240>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x240>
 80026aa:	2300      	movs	r3, #0
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f002 0203 	and.w	r2, r2, #3
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4093      	lsls	r3, r2
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026bc:	4934      	ldr	r1, [pc, #208]	; (8002790 <HAL_GPIO_Init+0x324>)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ca:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <HAL_GPIO_Init+0x350>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ee:	4a33      	ldr	r2, [pc, #204]	; (80027bc <HAL_GPIO_Init+0x350>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_GPIO_Init+0x350>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002718:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_GPIO_Init+0x350>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271e:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_GPIO_Init+0x350>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_GPIO_Init+0x350>)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_GPIO_Init+0x350>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800276c:	4a13      	ldr	r2, [pc, #76]	; (80027bc <HAL_GPIO_Init+0x350>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3301      	adds	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b0f      	cmp	r3, #15
 800277c:	f67f ae84 	bls.w	8002488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002780:	bf00      	nop
 8002782:	3724      	adds	r7, #36	; 0x24
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40023800 	.word	0x40023800
 8002790:	40013800 	.word	0x40013800
 8002794:	40020000 	.word	0x40020000
 8002798:	40020400 	.word	0x40020400
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40021800 	.word	0x40021800
 80027b0:	40021c00 	.word	0x40021c00
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40022400 	.word	0x40022400
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f4:	b08f      	sub	sp, #60	; 0x3c
 80027f6:	af0a      	add	r7, sp, #40	; 0x28
 80027f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e10f      	b.n	8002a24 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe f8fc 	bl	8000a1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2203      	movs	r2, #3
 8002828:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fbef 	bl	8004026 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	687e      	ldr	r6, [r7, #4]
 8002850:	466d      	mov	r5, sp
 8002852:	f106 0410 	add.w	r4, r6, #16
 8002856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002862:	e885 0003 	stmia.w	r5, {r0, r1}
 8002866:	1d33      	adds	r3, r6, #4
 8002868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286a:	6838      	ldr	r0, [r7, #0]
 800286c:	f001 fb7a 	bl	8003f64 <USB_CoreInit>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0d0      	b.n	8002a24 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f001 fbdd 	bl	8004048 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e04a      	b.n	800292a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	333d      	adds	r3, #61	; 0x3d
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	333c      	adds	r3, #60	; 0x3c
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	b298      	uxth	r0, r3
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3342      	adds	r3, #66	; 0x42
 80028d0:	4602      	mov	r2, r0
 80028d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	333f      	adds	r3, #63	; 0x3f
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	3344      	adds	r3, #68	; 0x44
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3348      	adds	r3, #72	; 0x48
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3350      	adds	r3, #80	; 0x50
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	3301      	adds	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d3af      	bcc.n	8002894 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e044      	b.n	80029c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	3301      	adds	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d3b5      	bcc.n	800293a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	687e      	ldr	r6, [r7, #4]
 80029d6:	466d      	mov	r5, sp
 80029d8:	f106 0410 	add.w	r4, r6, #16
 80029dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ec:	1d33      	adds	r3, r6, #4
 80029ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	f001 fb53 	bl	800409c <USB_DevInit>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e00d      	b.n	8002a24 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 fd02 	bl	8004426 <USB_DevDisconnect>

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e25b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d075      	beq.n	8002b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4a:	4ba3      	ldr	r3, [pc, #652]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d00c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4ba0      	ldr	r3, [pc, #640]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d112      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b9d      	ldr	r3, [pc, #628]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	4b99      	ldr	r3, [pc, #612]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05b      	beq.n	8002b34 <HAL_RCC_OscConfig+0x108>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d157      	bne.n	8002b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e236      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x74>
 8002a92:	4b91      	ldr	r3, [pc, #580]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a90      	ldr	r2, [pc, #576]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a8a      	ldr	r2, [pc, #552]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a87      	ldr	r2, [pc, #540]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002ac4:	4b84      	ldr	r3, [pc, #528]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a83      	ldr	r2, [pc, #524]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a80      	ldr	r2, [pc, #512]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fa0c 	bl	8000f00 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fa08 	bl	8000f00 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1fb      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xc0>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f9f8 	bl	8000f00 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe f9f4 	bl	8000f00 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1e7      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b6c      	ldr	r3, [pc, #432]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0xe8>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b42:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1bb      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4952      	ldr	r1, [pc, #328]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b4f      	ldr	r3, [pc, #316]	; (8002cdc <HAL_RCC_OscConfig+0x2b0>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe f9ad 	bl	8000f00 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe f9a9 	bl	8000f00 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e19c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4940      	ldr	r1, [pc, #256]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <HAL_RCC_OscConfig+0x2b0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe f98c 	bl	8000f00 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bec:	f7fe f988 	bl	8000f00 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e17b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d030      	beq.n	8002c78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <HAL_RCC_OscConfig+0x2b4>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe f96c 	bl	8000f00 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe f968 	bl	8000f00 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e15b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x200>
 8002c4a:	e015      	b.n	8002c78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x2b4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7fe f955 	bl	8000f00 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5a:	f7fe f951 	bl	8000f00 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e144      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a0 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_OscConfig+0x2b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d121      	bne.n	8002d06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_RCC_OscConfig+0x2b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_RCC_OscConfig+0x2b8>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7fe f917 	bl	8000f00 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	e011      	b.n	8002cfa <HAL_RCC_OscConfig+0x2ce>
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	42470000 	.word	0x42470000
 8002ce0:	42470e80 	.word	0x42470e80
 8002ce4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce8:	f7fe f90a 	bl	8000f00 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0fd      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x4d4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
 8002d0e:	4b7d      	ldr	r3, [pc, #500]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a7c      	ldr	r2, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1a:	e01c      	b.n	8002d56 <HAL_RCC_OscConfig+0x32a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d10c      	bne.n	8002d3e <HAL_RCC_OscConfig+0x312>
 8002d24:	4b77      	ldr	r3, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4a76      	ldr	r2, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d30:	4b74      	ldr	r3, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a73      	ldr	r2, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	e00b      	b.n	8002d56 <HAL_RCC_OscConfig+0x32a>
 8002d3e:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a70      	ldr	r2, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4a:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a6d      	ldr	r2, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d015      	beq.n	8002d8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f8cf 	bl	8000f00 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe f8cb 	bl	8000f00 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0bc      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ee      	beq.n	8002d66 <HAL_RCC_OscConfig+0x33a>
 8002d88:	e014      	b.n	8002db4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe f8b9 	bl	8000f00 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fe f8b5 	bl	8000f00 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0a6      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da8:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ee      	bne.n	8002d92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a51      	ldr	r2, [pc, #324]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8092 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d05c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d141      	bne.n	8002e68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <HAL_RCC_OscConfig+0x4dc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fe f889 	bl	8000f00 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fe f885 	bl	8000f00 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e078      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	4933      	ldr	r1, [pc, #204]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3a:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_RCC_OscConfig+0x4dc>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe f85e 	bl	8000f00 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f85a 	bl	8000f00 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x41c>
 8002e66:	e045      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x4dc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f847 	bl	8000f00 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe f843 	bl	8000f00 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e036      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x44a>
 8002e94:	e02e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e029      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d115      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eca:	4013      	ands	r3, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40007000 	.word	0x40007000
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470060 	.word	0x42470060

08002f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0cc      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d90c      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0b8      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a58      	ldr	r2, [pc, #352]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a52      	ldr	r2, [pc, #328]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	494d      	ldr	r1, [pc, #308]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d044      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d119      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e07f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e067      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4934      	ldr	r1, [pc, #208]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7fd ff80 	bl	8000f00 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fd ff7c 	bl	8000f00 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e04f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d20c      	bcs.n	8003054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e032      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4916      	ldr	r1, [pc, #88]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003092:	f000 f821 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8003096:	4601      	mov	r1, r0
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	5cd3      	ldrb	r3, [r2, r3]
 80030a6:	fa21 f303 	lsr.w	r3, r1, r3
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fd0c 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023c00 	.word	0x40023c00
 80030c8:	40023800 	.word	0x40023800
 80030cc:	0801bc6c 	.word	0x0801bc6c
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d007      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x32>
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d008      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x38>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 80b4 	bne.w	800326c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003106:	60bb      	str	r3, [r7, #8]
       break;
 8003108:	e0b3      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310a:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800310c:	60bb      	str	r3, [r7, #8]
      break;
 800310e:	e0b0      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003110:	4b5a      	ldr	r3, [pc, #360]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003118:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311a:	4b58      	ldr	r3, [pc, #352]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d04a      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b55      	ldr	r3, [pc, #340]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	f04f 0400 	mov.w	r4, #0
 8003130:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	ea03 0501 	and.w	r5, r3, r1
 800313c:	ea04 0602 	and.w	r6, r4, r2
 8003140:	4629      	mov	r1, r5
 8003142:	4632      	mov	r2, r6
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	0154      	lsls	r4, r2, #5
 800314e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003152:	014b      	lsls	r3, r1, #5
 8003154:	4619      	mov	r1, r3
 8003156:	4622      	mov	r2, r4
 8003158:	1b49      	subs	r1, r1, r5
 800315a:	eb62 0206 	sbc.w	r2, r2, r6
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	0194      	lsls	r4, r2, #6
 8003168:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800316c:	018b      	lsls	r3, r1, #6
 800316e:	1a5b      	subs	r3, r3, r1
 8003170:	eb64 0402 	sbc.w	r4, r4, r2
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	00e2      	lsls	r2, r4, #3
 800317e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003182:	00d9      	lsls	r1, r3, #3
 8003184:	460b      	mov	r3, r1
 8003186:	4614      	mov	r4, r2
 8003188:	195b      	adds	r3, r3, r5
 800318a:	eb44 0406 	adc.w	r4, r4, r6
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	0262      	lsls	r2, r4, #9
 8003198:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800319c:	0259      	lsls	r1, r3, #9
 800319e:	460b      	mov	r3, r1
 80031a0:	4614      	mov	r4, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	4621      	mov	r1, r4
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f04f 0400 	mov.w	r4, #0
 80031ac:	461a      	mov	r2, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	f7fd f86e 	bl	8000290 <__aeabi_uldivmod>
 80031b4:	4603      	mov	r3, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e049      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	f04f 0400 	mov.w	r4, #0
 80031c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	ea03 0501 	and.w	r5, r3, r1
 80031d2:	ea04 0602 	and.w	r6, r4, r2
 80031d6:	4629      	mov	r1, r5
 80031d8:	4632      	mov	r2, r6
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	f04f 0400 	mov.w	r4, #0
 80031e2:	0154      	lsls	r4, r2, #5
 80031e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031e8:	014b      	lsls	r3, r1, #5
 80031ea:	4619      	mov	r1, r3
 80031ec:	4622      	mov	r2, r4
 80031ee:	1b49      	subs	r1, r1, r5
 80031f0:	eb62 0206 	sbc.w	r2, r2, r6
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	f04f 0400 	mov.w	r4, #0
 80031fc:	0194      	lsls	r4, r2, #6
 80031fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003202:	018b      	lsls	r3, r1, #6
 8003204:	1a5b      	subs	r3, r3, r1
 8003206:	eb64 0402 	sbc.w	r4, r4, r2
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	00e2      	lsls	r2, r4, #3
 8003214:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003218:	00d9      	lsls	r1, r3, #3
 800321a:	460b      	mov	r3, r1
 800321c:	4614      	mov	r4, r2
 800321e:	195b      	adds	r3, r3, r5
 8003220:	eb44 0406 	adc.w	r4, r4, r6
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	02a2      	lsls	r2, r4, #10
 800322e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003232:	0299      	lsls	r1, r3, #10
 8003234:	460b      	mov	r3, r1
 8003236:	4614      	mov	r4, r2
 8003238:	4618      	mov	r0, r3
 800323a:	4621      	mov	r1, r4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f04f 0400 	mov.w	r4, #0
 8003242:	461a      	mov	r2, r3
 8003244:	4623      	mov	r3, r4
 8003246:	f7fd f823 	bl	8000290 <__aeabi_uldivmod>
 800324a:	4603      	mov	r3, r0
 800324c:	460c      	mov	r4, r1
 800324e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	60bb      	str	r3, [r7, #8]
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800326e:	60bb      	str	r3, [r7, #8]
      break;
 8003270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003272:	68bb      	ldr	r3, [r7, #8]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	00f42400 	.word	0x00f42400
 8003284:	007a1200 	.word	0x007a1200

08003288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_RCC_GetHCLKFreq+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a4:	f7ff fff0 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 80032a8:	4601      	mov	r1, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0a9b      	lsrs	r3, r3, #10
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b6:	5cd3      	ldrb	r3, [r2, r3]
 80032b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	0801bc7c 	.word	0x0801bc7c

080032c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032cc:	f7ff ffdc 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 80032d0:	4601      	mov	r1, r0
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	0b5b      	lsrs	r3, r3, #13
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4a03      	ldr	r2, [pc, #12]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
 80032e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40023800 	.word	0x40023800
 80032ec:	0801bc7c 	.word	0x0801bc7c

080032f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	220f      	movs	r2, #15
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_GetClockConfig+0x5c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0203 	and.w	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_RCC_GetClockConfig+0x5c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_RCC_GetClockConfig+0x5c>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_RCC_GetClockConfig+0x5c>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	08db      	lsrs	r3, r3, #3
 800332a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_RCC_GetClockConfig+0x60>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	601a      	str	r2, [r3, #0]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	40023c00 	.word	0x40023c00

08003354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e01d      	b.n	80033a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f815 	bl	80033aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f000 f968 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d122      	bne.n	8003462 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d11b      	bne.n	8003462 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0202 	mvn.w	r2, #2
 8003432:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f8ee 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 800344e:	e005      	b.n	800345c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8e0 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8f1 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d122      	bne.n	80034b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d11b      	bne.n	80034b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0204 	mvn.w	r2, #4
 8003486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f8c4 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80034a2:	e005      	b.n	80034b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8b6 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8c7 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d122      	bne.n	800350a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d11b      	bne.n	800350a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0208 	mvn.w	r2, #8
 80034da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2204      	movs	r2, #4
 80034e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f89a 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80034f6:	e005      	b.n	8003504 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f88c 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f89d 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b10      	cmp	r3, #16
 8003516:	d122      	bne.n	800355e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b10      	cmp	r3, #16
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0210 	mvn.w	r2, #16
 800352e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2208      	movs	r2, #8
 8003534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f870 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f862 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f873 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10e      	bne.n	800358a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d107      	bne.n	800358a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0201 	mvn.w	r2, #1
 8003582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd f9bf 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d10e      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f903 	bl	80037bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d10e      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d107      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f838 	bl	8003652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d10e      	bne.n	800360e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d107      	bne.n	800360e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0220 	mvn.w	r2, #32
 8003606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f8cd 	bl	80037a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a40      	ldr	r2, [pc, #256]	; (800377c <TIM_Base_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3d      	ldr	r2, [pc, #244]	; (8003780 <TIM_Base_SetConfig+0x118>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3c      	ldr	r2, [pc, #240]	; (8003784 <TIM_Base_SetConfig+0x11c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3b      	ldr	r2, [pc, #236]	; (8003788 <TIM_Base_SetConfig+0x120>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3a      	ldr	r2, [pc, #232]	; (800378c <TIM_Base_SetConfig+0x124>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2f      	ldr	r2, [pc, #188]	; (800377c <TIM_Base_SetConfig+0x114>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d027      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2c      	ldr	r2, [pc, #176]	; (8003780 <TIM_Base_SetConfig+0x118>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d023      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2b      	ldr	r2, [pc, #172]	; (8003784 <TIM_Base_SetConfig+0x11c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <TIM_Base_SetConfig+0x120>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a29      	ldr	r2, [pc, #164]	; (800378c <TIM_Base_SetConfig+0x124>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d017      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a28      	ldr	r2, [pc, #160]	; (8003790 <TIM_Base_SetConfig+0x128>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <TIM_Base_SetConfig+0x12c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <TIM_Base_SetConfig+0x130>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a25      	ldr	r2, [pc, #148]	; (800379c <TIM_Base_SetConfig+0x134>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <TIM_Base_SetConfig+0x138>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <TIM_Base_SetConfig+0x13c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <TIM_Base_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0xf8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <TIM_Base_SetConfig+0x124>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	615a      	str	r2, [r3, #20]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40010400 	.word	0x40010400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800
 800379c:	40001800 	.word	0x40001800
 80037a0:	40001c00 	.word	0x40001c00
 80037a4:	40002000 	.word	0x40002000

080037a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e03f      	b.n	8003862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd f8c8 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	; 0x24
 8003800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f829 	bl	800386c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800386c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038ae:	f023 030c 	bic.w	r3, r3, #12
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	430b      	orrs	r3, r1
 80038ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038da:	f040 818b 	bne.w	8003bf4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4ac1      	ldr	r2, [pc, #772]	; (8003be8 <UART_SetConfig+0x37c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d005      	beq.n	80038f4 <UART_SetConfig+0x88>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4abf      	ldr	r2, [pc, #764]	; (8003bec <UART_SetConfig+0x380>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	f040 80bd 	bne.w	8003a6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038f4:	f7ff fce8 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 80038f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	461d      	mov	r5, r3
 80038fe:	f04f 0600 	mov.w	r6, #0
 8003902:	46a8      	mov	r8, r5
 8003904:	46b1      	mov	r9, r6
 8003906:	eb18 0308 	adds.w	r3, r8, r8
 800390a:	eb49 0409 	adc.w	r4, r9, r9
 800390e:	4698      	mov	r8, r3
 8003910:	46a1      	mov	r9, r4
 8003912:	eb18 0805 	adds.w	r8, r8, r5
 8003916:	eb49 0906 	adc.w	r9, r9, r6
 800391a:	f04f 0100 	mov.w	r1, #0
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003926:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800392a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800392e:	4688      	mov	r8, r1
 8003930:	4691      	mov	r9, r2
 8003932:	eb18 0005 	adds.w	r0, r8, r5
 8003936:	eb49 0106 	adc.w	r1, r9, r6
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	461d      	mov	r5, r3
 8003940:	f04f 0600 	mov.w	r6, #0
 8003944:	196b      	adds	r3, r5, r5
 8003946:	eb46 0406 	adc.w	r4, r6, r6
 800394a:	461a      	mov	r2, r3
 800394c:	4623      	mov	r3, r4
 800394e:	f7fc fc9f 	bl	8000290 <__aeabi_uldivmod>
 8003952:	4603      	mov	r3, r0
 8003954:	460c      	mov	r4, r1
 8003956:	461a      	mov	r2, r3
 8003958:	4ba5      	ldr	r3, [pc, #660]	; (8003bf0 <UART_SetConfig+0x384>)
 800395a:	fba3 2302 	umull	r2, r3, r3, r2
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	461d      	mov	r5, r3
 8003968:	f04f 0600 	mov.w	r6, #0
 800396c:	46a9      	mov	r9, r5
 800396e:	46b2      	mov	sl, r6
 8003970:	eb19 0309 	adds.w	r3, r9, r9
 8003974:	eb4a 040a 	adc.w	r4, sl, sl
 8003978:	4699      	mov	r9, r3
 800397a:	46a2      	mov	sl, r4
 800397c:	eb19 0905 	adds.w	r9, r9, r5
 8003980:	eb4a 0a06 	adc.w	sl, sl, r6
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003990:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003998:	4689      	mov	r9, r1
 800399a:	4692      	mov	sl, r2
 800399c:	eb19 0005 	adds.w	r0, r9, r5
 80039a0:	eb4a 0106 	adc.w	r1, sl, r6
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	461d      	mov	r5, r3
 80039aa:	f04f 0600 	mov.w	r6, #0
 80039ae:	196b      	adds	r3, r5, r5
 80039b0:	eb46 0406 	adc.w	r4, r6, r6
 80039b4:	461a      	mov	r2, r3
 80039b6:	4623      	mov	r3, r4
 80039b8:	f7fc fc6a 	bl	8000290 <__aeabi_uldivmod>
 80039bc:	4603      	mov	r3, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b8b      	ldr	r3, [pc, #556]	; (8003bf0 <UART_SetConfig+0x384>)
 80039c4:	fba3 1302 	umull	r1, r3, r3, r2
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	2164      	movs	r1, #100	; 0x64
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	3332      	adds	r3, #50	; 0x32
 80039d6:	4a86      	ldr	r2, [pc, #536]	; (8003bf0 <UART_SetConfig+0x384>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039e4:	4498      	add	r8, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	461d      	mov	r5, r3
 80039ea:	f04f 0600 	mov.w	r6, #0
 80039ee:	46a9      	mov	r9, r5
 80039f0:	46b2      	mov	sl, r6
 80039f2:	eb19 0309 	adds.w	r3, r9, r9
 80039f6:	eb4a 040a 	adc.w	r4, sl, sl
 80039fa:	4699      	mov	r9, r3
 80039fc:	46a2      	mov	sl, r4
 80039fe:	eb19 0905 	adds.w	r9, r9, r5
 8003a02:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a1a:	4689      	mov	r9, r1
 8003a1c:	4692      	mov	sl, r2
 8003a1e:	eb19 0005 	adds.w	r0, r9, r5
 8003a22:	eb4a 0106 	adc.w	r1, sl, r6
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	f04f 0600 	mov.w	r6, #0
 8003a30:	196b      	adds	r3, r5, r5
 8003a32:	eb46 0406 	adc.w	r4, r6, r6
 8003a36:	461a      	mov	r2, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	f7fc fc29 	bl	8000290 <__aeabi_uldivmod>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <UART_SetConfig+0x384>)
 8003a46:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2164      	movs	r1, #100	; 0x64
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a65      	ldr	r2, [pc, #404]	; (8003bf0 <UART_SetConfig+0x384>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	f003 0207 	and.w	r2, r3, #7
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4442      	add	r2, r8
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	e26f      	b.n	8003f4e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a6e:	f7ff fc17 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 8003a72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	461d      	mov	r5, r3
 8003a78:	f04f 0600 	mov.w	r6, #0
 8003a7c:	46a8      	mov	r8, r5
 8003a7e:	46b1      	mov	r9, r6
 8003a80:	eb18 0308 	adds.w	r3, r8, r8
 8003a84:	eb49 0409 	adc.w	r4, r9, r9
 8003a88:	4698      	mov	r8, r3
 8003a8a:	46a1      	mov	r9, r4
 8003a8c:	eb18 0805 	adds.w	r8, r8, r5
 8003a90:	eb49 0906 	adc.w	r9, r9, r6
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003aa0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003aa4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003aa8:	4688      	mov	r8, r1
 8003aaa:	4691      	mov	r9, r2
 8003aac:	eb18 0005 	adds.w	r0, r8, r5
 8003ab0:	eb49 0106 	adc.w	r1, r9, r6
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	461d      	mov	r5, r3
 8003aba:	f04f 0600 	mov.w	r6, #0
 8003abe:	196b      	adds	r3, r5, r5
 8003ac0:	eb46 0406 	adc.w	r4, r6, r6
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	f7fc fbe2 	bl	8000290 <__aeabi_uldivmod>
 8003acc:	4603      	mov	r3, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <UART_SetConfig+0x384>)
 8003ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	461d      	mov	r5, r3
 8003ae2:	f04f 0600 	mov.w	r6, #0
 8003ae6:	46a9      	mov	r9, r5
 8003ae8:	46b2      	mov	sl, r6
 8003aea:	eb19 0309 	adds.w	r3, r9, r9
 8003aee:	eb4a 040a 	adc.w	r4, sl, sl
 8003af2:	4699      	mov	r9, r3
 8003af4:	46a2      	mov	sl, r4
 8003af6:	eb19 0905 	adds.w	r9, r9, r5
 8003afa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003afe:	f04f 0100 	mov.w	r1, #0
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b12:	4689      	mov	r9, r1
 8003b14:	4692      	mov	sl, r2
 8003b16:	eb19 0005 	adds.w	r0, r9, r5
 8003b1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	461d      	mov	r5, r3
 8003b24:	f04f 0600 	mov.w	r6, #0
 8003b28:	196b      	adds	r3, r5, r5
 8003b2a:	eb46 0406 	adc.w	r4, r6, r6
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4623      	mov	r3, r4
 8003b32:	f7fc fbad 	bl	8000290 <__aeabi_uldivmod>
 8003b36:	4603      	mov	r3, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <UART_SetConfig+0x384>)
 8003b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2164      	movs	r1, #100	; 0x64
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <UART_SetConfig+0x384>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b5e:	4498      	add	r8, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	461d      	mov	r5, r3
 8003b64:	f04f 0600 	mov.w	r6, #0
 8003b68:	46a9      	mov	r9, r5
 8003b6a:	46b2      	mov	sl, r6
 8003b6c:	eb19 0309 	adds.w	r3, r9, r9
 8003b70:	eb4a 040a 	adc.w	r4, sl, sl
 8003b74:	4699      	mov	r9, r3
 8003b76:	46a2      	mov	sl, r4
 8003b78:	eb19 0905 	adds.w	r9, r9, r5
 8003b7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b94:	4689      	mov	r9, r1
 8003b96:	4692      	mov	sl, r2
 8003b98:	eb19 0005 	adds.w	r0, r9, r5
 8003b9c:	eb4a 0106 	adc.w	r1, sl, r6
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	f04f 0600 	mov.w	r6, #0
 8003baa:	196b      	adds	r3, r5, r5
 8003bac:	eb46 0406 	adc.w	r4, r6, r6
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	f7fc fb6c 	bl	8000290 <__aeabi_uldivmod>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <UART_SetConfig+0x384>)
 8003bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2164      	movs	r1, #100	; 0x64
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	3332      	adds	r3, #50	; 0x32
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <UART_SetConfig+0x384>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 0207 	and.w	r2, r3, #7
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4442      	add	r2, r8
 8003be4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003be6:	e1b2      	b.n	8003f4e <UART_SetConfig+0x6e2>
 8003be8:	40011000 	.word	0x40011000
 8003bec:	40011400 	.word	0x40011400
 8003bf0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4ad7      	ldr	r2, [pc, #860]	; (8003f58 <UART_SetConfig+0x6ec>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d005      	beq.n	8003c0a <UART_SetConfig+0x39e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4ad6      	ldr	r2, [pc, #856]	; (8003f5c <UART_SetConfig+0x6f0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	f040 80d1 	bne.w	8003dac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c0a:	f7ff fb5d 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 8003c0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	469a      	mov	sl, r3
 8003c14:	f04f 0b00 	mov.w	fp, #0
 8003c18:	46d0      	mov	r8, sl
 8003c1a:	46d9      	mov	r9, fp
 8003c1c:	eb18 0308 	adds.w	r3, r8, r8
 8003c20:	eb49 0409 	adc.w	r4, r9, r9
 8003c24:	4698      	mov	r8, r3
 8003c26:	46a1      	mov	r9, r4
 8003c28:	eb18 080a 	adds.w	r8, r8, sl
 8003c2c:	eb49 090b 	adc.w	r9, r9, fp
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c44:	4688      	mov	r8, r1
 8003c46:	4691      	mov	r9, r2
 8003c48:	eb1a 0508 	adds.w	r5, sl, r8
 8003c4c:	eb4b 0609 	adc.w	r6, fp, r9
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	f04f 0400 	mov.w	r4, #0
 8003c62:	0094      	lsls	r4, r2, #2
 8003c64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c68:	008b      	lsls	r3, r1, #2
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	4628      	mov	r0, r5
 8003c70:	4631      	mov	r1, r6
 8003c72:	f7fc fb0d 	bl	8000290 <__aeabi_uldivmod>
 8003c76:	4603      	mov	r3, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4bb8      	ldr	r3, [pc, #736]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	469b      	mov	fp, r3
 8003c8c:	f04f 0c00 	mov.w	ip, #0
 8003c90:	46d9      	mov	r9, fp
 8003c92:	46e2      	mov	sl, ip
 8003c94:	eb19 0309 	adds.w	r3, r9, r9
 8003c98:	eb4a 040a 	adc.w	r4, sl, sl
 8003c9c:	4699      	mov	r9, r3
 8003c9e:	46a2      	mov	sl, r4
 8003ca0:	eb19 090b 	adds.w	r9, r9, fp
 8003ca4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cbc:	4689      	mov	r9, r1
 8003cbe:	4692      	mov	sl, r2
 8003cc0:	eb1b 0509 	adds.w	r5, fp, r9
 8003cc4:	eb4c 060a 	adc.w	r6, ip, sl
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	f04f 0400 	mov.w	r4, #0
 8003cda:	0094      	lsls	r4, r2, #2
 8003cdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ce0:	008b      	lsls	r3, r1, #2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	4631      	mov	r1, r6
 8003cea:	f7fc fad1 	bl	8000290 <__aeabi_uldivmod>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b9a      	ldr	r3, [pc, #616]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2164      	movs	r1, #100	; 0x64
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	3332      	adds	r3, #50	; 0x32
 8003d08:	4a95      	ldr	r2, [pc, #596]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d14:	4498      	add	r8, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	469b      	mov	fp, r3
 8003d1a:	f04f 0c00 	mov.w	ip, #0
 8003d1e:	46d9      	mov	r9, fp
 8003d20:	46e2      	mov	sl, ip
 8003d22:	eb19 0309 	adds.w	r3, r9, r9
 8003d26:	eb4a 040a 	adc.w	r4, sl, sl
 8003d2a:	4699      	mov	r9, r3
 8003d2c:	46a2      	mov	sl, r4
 8003d2e:	eb19 090b 	adds.w	r9, r9, fp
 8003d32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d36:	f04f 0100 	mov.w	r1, #0
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d4a:	4689      	mov	r9, r1
 8003d4c:	4692      	mov	sl, r2
 8003d4e:	eb1b 0509 	adds.w	r5, fp, r9
 8003d52:	eb4c 060a 	adc.w	r6, ip, sl
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	f04f 0400 	mov.w	r4, #0
 8003d68:	0094      	lsls	r4, r2, #2
 8003d6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d6e:	008b      	lsls	r3, r1, #2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	4628      	mov	r0, r5
 8003d76:	4631      	mov	r1, r6
 8003d78:	f7fc fa8a 	bl	8000290 <__aeabi_uldivmod>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b77      	ldr	r3, [pc, #476]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003d84:	fba3 1302 	umull	r1, r3, r3, r2
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	2164      	movs	r1, #100	; 0x64
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	3332      	adds	r3, #50	; 0x32
 8003d96:	4a72      	ldr	r2, [pc, #456]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4442      	add	r2, r8
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	e0d0      	b.n	8003f4e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dac:	f7ff fa78 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 8003db0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	469a      	mov	sl, r3
 8003db6:	f04f 0b00 	mov.w	fp, #0
 8003dba:	46d0      	mov	r8, sl
 8003dbc:	46d9      	mov	r9, fp
 8003dbe:	eb18 0308 	adds.w	r3, r8, r8
 8003dc2:	eb49 0409 	adc.w	r4, r9, r9
 8003dc6:	4698      	mov	r8, r3
 8003dc8:	46a1      	mov	r9, r4
 8003dca:	eb18 080a 	adds.w	r8, r8, sl
 8003dce:	eb49 090b 	adc.w	r9, r9, fp
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003de2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003de6:	4688      	mov	r8, r1
 8003de8:	4691      	mov	r9, r2
 8003dea:	eb1a 0508 	adds.w	r5, sl, r8
 8003dee:	eb4b 0609 	adc.w	r6, fp, r9
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4619      	mov	r1, r3
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	f04f 0400 	mov.w	r4, #0
 8003e04:	0094      	lsls	r4, r2, #2
 8003e06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e0a:	008b      	lsls	r3, r1, #2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	4628      	mov	r0, r5
 8003e12:	4631      	mov	r1, r6
 8003e14:	f7fc fa3c 	bl	8000290 <__aeabi_uldivmod>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b50      	ldr	r3, [pc, #320]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003e20:	fba3 2302 	umull	r2, r3, r3, r2
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	469b      	mov	fp, r3
 8003e2e:	f04f 0c00 	mov.w	ip, #0
 8003e32:	46d9      	mov	r9, fp
 8003e34:	46e2      	mov	sl, ip
 8003e36:	eb19 0309 	adds.w	r3, r9, r9
 8003e3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e3e:	4699      	mov	r9, r3
 8003e40:	46a2      	mov	sl, r4
 8003e42:	eb19 090b 	adds.w	r9, r9, fp
 8003e46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e5e:	4689      	mov	r9, r1
 8003e60:	4692      	mov	sl, r2
 8003e62:	eb1b 0509 	adds.w	r5, fp, r9
 8003e66:	eb4c 060a 	adc.w	r6, ip, sl
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	f04f 0400 	mov.w	r4, #0
 8003e7c:	0094      	lsls	r4, r2, #2
 8003e7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e82:	008b      	lsls	r3, r1, #2
 8003e84:	461a      	mov	r2, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	4628      	mov	r0, r5
 8003e8a:	4631      	mov	r1, r6
 8003e8c:	f7fc fa00 	bl	8000290 <__aeabi_uldivmod>
 8003e90:	4603      	mov	r3, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	2164      	movs	r1, #100	; 0x64
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	3332      	adds	r3, #50	; 0x32
 8003eaa:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb6:	4498      	add	r8, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	469b      	mov	fp, r3
 8003ebc:	f04f 0c00 	mov.w	ip, #0
 8003ec0:	46d9      	mov	r9, fp
 8003ec2:	46e2      	mov	sl, ip
 8003ec4:	eb19 0309 	adds.w	r3, r9, r9
 8003ec8:	eb4a 040a 	adc.w	r4, sl, sl
 8003ecc:	4699      	mov	r9, r3
 8003ece:	46a2      	mov	sl, r4
 8003ed0:	eb19 090b 	adds.w	r9, r9, fp
 8003ed4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ee8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eec:	4689      	mov	r9, r1
 8003eee:	4692      	mov	sl, r2
 8003ef0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ef4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f04f 0400 	mov.w	r4, #0
 8003f0a:	0094      	lsls	r4, r2, #2
 8003f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f10:	008b      	lsls	r3, r1, #2
 8003f12:	461a      	mov	r2, r3
 8003f14:	4623      	mov	r3, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	4631      	mov	r1, r6
 8003f1a:	f7fc f9b9 	bl	8000290 <__aeabi_uldivmod>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003f26:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2164      	movs	r1, #100	; 0x64
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	3332      	adds	r3, #50	; 0x32
 8003f38:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <UART_SetConfig+0x6f4>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4442      	add	r2, r8
 8003f4a:	609a      	str	r2, [r3, #8]
}
 8003f4c:	e7ff      	b.n	8003f4e <UART_SetConfig+0x6e2>
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f58:	40011000 	.word	0x40011000
 8003f5c:	40011400 	.word	0x40011400
 8003f60:	51eb851f 	.word	0x51eb851f

08003f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f64:	b084      	sub	sp, #16
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	f107 001c 	add.w	r0, r7, #28
 8003f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d122      	bne.n	8003fc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d105      	bne.n	8003fb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fa56 	bl	8004468 <USB_CoreReset>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	73fb      	strb	r3, [r7, #15]
 8003fc0:	e01a      	b.n	8003ff8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa4a 	bl	8004468 <USB_CoreReset>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8003fea:	e005      	b.n	8003ff8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10b      	bne.n	8004016 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f043 0206 	orr.w	r2, r3, #6
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004022:	b004      	add	sp, #16
 8004024:	4770      	bx	lr

08004026 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d106      	bne.n	8004074 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	e00b      	b.n	800408c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	e001      	b.n	800408c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e003      	b.n	8004094 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800408c:	2032      	movs	r0, #50	; 0x32
 800408e:	f7fc ff43 	bl	8000f18 <HAL_Delay>

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800409c:	b084      	sub	sp, #16
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	e009      	b.n	80040d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3340      	adds	r3, #64	; 0x40
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	2200      	movs	r2, #0
 80040c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	3301      	adds	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b0e      	cmp	r3, #14
 80040d4:	d9f2      	bls.n	80040bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d11c      	bne.n	8004116 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ea:	f043 0302 	orr.w	r3, r3, #2
 80040ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
 8004114:	e00b      	b.n	800412e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004134:	461a      	mov	r2, r3
 8004136:	2300      	movs	r3, #0
 8004138:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004140:	4619      	mov	r1, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004148:	461a      	mov	r2, r3
 800414a:	680b      	ldr	r3, [r1, #0]
 800414c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10c      	bne.n	800416e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800415a:	2100      	movs	r1, #0
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f949 	bl	80043f4 <USB_SetDevSpeed>
 8004162:	e008      	b.n	8004176 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004164:	2101      	movs	r1, #1
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f944 	bl	80043f4 <USB_SetDevSpeed>
 800416c:	e003      	b.n	8004176 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800416e:	2103      	movs	r1, #3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f93f 	bl	80043f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004176:	2110      	movs	r1, #16
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8f3 	bl	8004364 <USB_FlushTxFifo>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f911 	bl	80043b0 <USB_FlushRxFifo>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	461a      	mov	r2, r3
 80041a0:	2300      	movs	r3, #0
 80041a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	461a      	mov	r2, r3
 80041ac:	2300      	movs	r3, #0
 80041ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	461a      	mov	r2, r3
 80041b8:	2300      	movs	r3, #0
 80041ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e043      	b.n	800424a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041d8:	d118      	bne.n	800420c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	461a      	mov	r2, r3
 80041ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	e013      	b.n	800421e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004202:	461a      	mov	r2, r3
 8004204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e008      	b.n	800421e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	461a      	mov	r2, r3
 800421a:	2300      	movs	r3, #0
 800421c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422a:	461a      	mov	r2, r3
 800422c:	2300      	movs	r3, #0
 800422e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	461a      	mov	r2, r3
 800423e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3301      	adds	r3, #1
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	429a      	cmp	r2, r3
 8004250:	d3b7      	bcc.n	80041c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	e043      	b.n	80042e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800426a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800426e:	d118      	bne.n	80042a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004282:	461a      	mov	r2, r3
 8004284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e013      	b.n	80042b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	461a      	mov	r2, r3
 800429a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e008      	b.n	80042b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c0:	461a      	mov	r2, r3
 80042c2:	2300      	movs	r3, #0
 80042c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	461a      	mov	r2, r3
 80042d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3301      	adds	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d3b7      	bcc.n	8004258 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f043 0210 	orr.w	r2, r3, #16
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699a      	ldr	r2, [r3, #24]
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <USB_DevInit+0x2c4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f043 0208 	orr.w	r2, r3, #8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800433a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d107      	bne.n	8004350 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800435c:	b004      	add	sp, #16
 800435e:	4770      	bx	lr
 8004360:	803c3800 	.word	0x803c3800

08004364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	019b      	lsls	r3, r3, #6
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3301      	adds	r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a09      	ldr	r2, [pc, #36]	; (80043ac <USB_FlushTxFifo+0x48>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e006      	b.n	800439e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b20      	cmp	r3, #32
 800439a:	d0f0      	beq.n	800437e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	00030d40 	.word	0x00030d40

080043b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2210      	movs	r2, #16
 80043c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <USB_FlushRxFifo+0x40>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e006      	b.n	80043e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d0f0      	beq.n	80043c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	00030d40 	.word	0x00030d40

080043f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004440:	f023 0303 	bic.w	r3, r3, #3
 8004444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <USB_CoreReset+0x64>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e01b      	b.n	80044be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	daf2      	bge.n	8004474 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <USB_CoreReset+0x64>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e006      	b.n	80044be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d0f0      	beq.n	800449e <USB_CoreReset+0x36>

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	00030d40 	.word	0x00030d40

080044d0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80044d6:	2100      	movs	r1, #0
 80044d8:	2000      	movs	r0, #0
 80044da:	f005 fee3 	bl	800a2a4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <MX_LWIP_Init+0xb8>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80044e4:	4b29      	ldr	r3, [pc, #164]	; (800458c <MX_LWIP_Init+0xbc>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80044ea:	4b29      	ldr	r3, [pc, #164]	; (8004590 <MX_LWIP_Init+0xc0>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80044f0:	4b28      	ldr	r3, [pc, #160]	; (8004594 <MX_LWIP_Init+0xc4>)
 80044f2:	9302      	str	r3, [sp, #8]
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <MX_LWIP_Init+0xc8>)
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	4b24      	ldr	r3, [pc, #144]	; (8004590 <MX_LWIP_Init+0xc0>)
 80044fe:	4a23      	ldr	r2, [pc, #140]	; (800458c <MX_LWIP_Init+0xbc>)
 8004500:	4921      	ldr	r1, [pc, #132]	; (8004588 <MX_LWIP_Init+0xb8>)
 8004502:	4826      	ldr	r0, [pc, #152]	; (800459c <MX_LWIP_Init+0xcc>)
 8004504:	f006 fc52 	bl	800adac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004508:	4824      	ldr	r0, [pc, #144]	; (800459c <MX_LWIP_Init+0xcc>)
 800450a:	f006 fe09 	bl	800b120 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <MX_LWIP_Init+0xcc>)
 8004510:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004520:	481e      	ldr	r0, [pc, #120]	; (800459c <MX_LWIP_Init+0xcc>)
 8004522:	f006 fe0d 	bl	800b140 <netif_set_up>
 8004526:	e002      	b.n	800452e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004528:	481c      	ldr	r0, [pc, #112]	; (800459c <MX_LWIP_Init+0xcc>)
 800452a:	f006 fe75 	bl	800b218 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800452e:	491c      	ldr	r1, [pc, #112]	; (80045a0 <MX_LWIP_Init+0xd0>)
 8004530:	481a      	ldr	r0, [pc, #104]	; (800459c <MX_LWIP_Init+0xcc>)
 8004532:	f006 ff0b 	bl	800b34c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004536:	2300      	movs	r3, #0
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800453e:	f107 0320 	add.w	r3, r7, #32
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fd99 	bl	800507c <osSemaphoreCreate>
 800454a:	4602      	mov	r2, r0
 800454c:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <MX_LWIP_Init+0xd4>)
 800454e:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8004550:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <MX_LWIP_Init+0xd8>)
 8004552:	4a12      	ldr	r2, [pc, #72]	; (800459c <MX_LWIP_Init+0xcc>)
 8004554:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <MX_LWIP_Init+0xd4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <MX_LWIP_Init+0xd8>)
 800455c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <MX_LWIP_Init+0xdc>)
 8004560:	1d3c      	adds	r4, r7, #4
 8004562:	461d      	mov	r5, r3
 8004564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800456c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	490d      	ldr	r1, [pc, #52]	; (80045a8 <MX_LWIP_Init+0xd8>)
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fc84 	bl	8004e82 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800457a:	4808      	ldr	r0, [pc, #32]	; (800459c <MX_LWIP_Init+0xcc>)
 800457c:	f00e ff7a 	bl	8013474 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004580:	bf00      	nop
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bdb0      	pop	{r4, r5, r7, pc}
 8004588:	20008ac0 	.word	0x20008ac0
 800458c:	20008ac4 	.word	0x20008ac4
 8004590:	20008ac8 	.word	0x20008ac8
 8004594:	0800a1b5 	.word	0x0800a1b5
 8004598:	08004c11 	.word	0x08004c11
 800459c:	20008a88 	.word	0x20008a88
 80045a0:	08004cf5 	.word	0x08004cf5
 80045a4:	200002f8 	.word	0x200002f8
 80045a8:	20008a80 	.word	0x20008a80
 80045ac:	08018360 	.word	0x08018360

080045b0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08e      	sub	sp, #56	; 0x38
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a59      	ldr	r2, [pc, #356]	; (8004734 <HAL_ETH_MspInit+0x184>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f040 80ac 	bne.w	800472c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	4b57      	ldr	r3, [pc, #348]	; (8004738 <HAL_ETH_MspInit+0x188>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	4a56      	ldr	r2, [pc, #344]	; (8004738 <HAL_ETH_MspInit+0x188>)
 80045de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045e2:	6313      	str	r3, [r2, #48]	; 0x30
 80045e4:	4b54      	ldr	r3, [pc, #336]	; (8004738 <HAL_ETH_MspInit+0x188>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	4b50      	ldr	r3, [pc, #320]	; (8004738 <HAL_ETH_MspInit+0x188>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	4a4f      	ldr	r2, [pc, #316]	; (8004738 <HAL_ETH_MspInit+0x188>)
 80045fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004600:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	4b49      	ldr	r3, [pc, #292]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	4a48      	ldr	r2, [pc, #288]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800461a:	6313      	str	r3, [r2, #48]	; 0x30
 800461c:	4b46      	ldr	r3, [pc, #280]	; (8004738 <HAL_ETH_MspInit+0x188>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	4b42      	ldr	r3, [pc, #264]	; (8004738 <HAL_ETH_MspInit+0x188>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	4a41      	ldr	r2, [pc, #260]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	6313      	str	r3, [r2, #48]	; 0x30
 8004638:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <HAL_ETH_MspInit+0x188>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_ETH_MspInit+0x188>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	4a3a      	ldr	r2, [pc, #232]	; (8004738 <HAL_ETH_MspInit+0x188>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6313      	str	r3, [r2, #48]	; 0x30
 8004654:	4b38      	ldr	r3, [pc, #224]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	4b34      	ldr	r3, [pc, #208]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	4a33      	ldr	r2, [pc, #204]	; (8004738 <HAL_ETH_MspInit+0x188>)
 800466a:	f043 0302 	orr.w	r3, r3, #2
 800466e:	6313      	str	r3, [r2, #48]	; 0x30
 8004670:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800467c:	2300      	movs	r3, #0
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	4a2c      	ldr	r2, [pc, #176]	; (8004738 <HAL_ETH_MspInit+0x188>)
 8004686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800468a:	6313      	str	r3, [r2, #48]	; 0x30
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_ETH_MspInit+0x188>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004698:	2332      	movs	r3, #50	; 0x32
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a4:	2303      	movs	r3, #3
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046a8:	230b      	movs	r3, #11
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b0:	4619      	mov	r1, r3
 80046b2:	4822      	ldr	r0, [pc, #136]	; (800473c <HAL_ETH_MspInit+0x18c>)
 80046b4:	f7fd feda 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80046b8:	2386      	movs	r3, #134	; 0x86
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046bc:	2302      	movs	r3, #2
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c4:	2303      	movs	r3, #3
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046c8:	230b      	movs	r3, #11
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d0:	4619      	mov	r1, r3
 80046d2:	481b      	ldr	r0, [pc, #108]	; (8004740 <HAL_ETH_MspInit+0x190>)
 80046d4:	f7fd feca 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80046d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	2302      	movs	r3, #2
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e6:	2303      	movs	r3, #3
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046ea:	230b      	movs	r3, #11
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80046ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f2:	4619      	mov	r1, r3
 80046f4:	4813      	ldr	r0, [pc, #76]	; (8004744 <HAL_ETH_MspInit+0x194>)
 80046f6:	f7fd feb9 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80046fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004708:	2303      	movs	r3, #3
 800470a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800470c:	230b      	movs	r3, #11
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004714:	4619      	mov	r1, r3
 8004716:	480c      	ldr	r0, [pc, #48]	; (8004748 <HAL_ETH_MspInit+0x198>)
 8004718:	f7fd fea8 	bl	800246c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800471c:	2200      	movs	r2, #0
 800471e:	2100      	movs	r1, #0
 8004720:	203d      	movs	r0, #61	; 0x3d
 8004722:	f7fc fcd3 	bl	80010cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004726:	203d      	movs	r0, #61	; 0x3d
 8004728:	f7fc fcec 	bl	8001104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800472c:	bf00      	nop
 800472e:	3738      	adds	r7, #56	; 0x38
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40028000 	.word	0x40028000
 8004738:	40023800 	.word	0x40023800
 800473c:	40020800 	.word	0x40020800
 8004740:	40020000 	.word	0x40020000
 8004744:	40020400 	.word	0x40020400
 8004748:	40021800 	.word	0x40021800

0800474c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_ETH_RxCpltCallback+0x1c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fd11 	bl	8005180 <osSemaphoreRelease>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	200002fc 	.word	0x200002fc

0800476c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b090      	sub	sp, #64	; 0x40
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004778:	4b5c      	ldr	r3, [pc, #368]	; (80048ec <low_level_init+0x180>)
 800477a:	4a5d      	ldr	r2, [pc, #372]	; (80048f0 <low_level_init+0x184>)
 800477c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800477e:	4b5b      	ldr	r3, [pc, #364]	; (80048ec <low_level_init+0x180>)
 8004780:	2201      	movs	r2, #1
 8004782:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004784:	4b59      	ldr	r3, [pc, #356]	; (80048ec <low_level_init+0x180>)
 8004786:	2200      	movs	r2, #0
 8004788:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800478a:	2300      	movs	r3, #0
 800478c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004796:	23e1      	movs	r3, #225	; 0xe1
 8004798:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 800479c:	23fe      	movs	r3, #254	; 0xfe
 800479e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 80047a2:	23ec      	movs	r3, #236	; 0xec
 80047a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 80047a8:	2371      	movs	r3, #113	; 0x71
 80047aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80047ae:	4a4f      	ldr	r2, [pc, #316]	; (80048ec <low_level_init+0x180>)
 80047b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047b4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80047b6:	4b4d      	ldr	r3, [pc, #308]	; (80048ec <low_level_init+0x180>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80047bc:	4b4b      	ldr	r3, [pc, #300]	; (80048ec <low_level_init+0x180>)
 80047be:	2200      	movs	r2, #0
 80047c0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80047c2:	4b4a      	ldr	r3, [pc, #296]	; (80048ec <low_level_init+0x180>)
 80047c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047c8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80047ca:	4848      	ldr	r0, [pc, #288]	; (80048ec <low_level_init+0x180>)
 80047cc:	f7fc fca8 	bl	8001120 <HAL_ETH_Init>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80047d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d108      	bne.n	80047f0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80047f0:	2304      	movs	r3, #4
 80047f2:	4a40      	ldr	r2, [pc, #256]	; (80048f4 <low_level_init+0x188>)
 80047f4:	4940      	ldr	r1, [pc, #256]	; (80048f8 <low_level_init+0x18c>)
 80047f6:	483d      	ldr	r0, [pc, #244]	; (80048ec <low_level_init+0x180>)
 80047f8:	f7fc fe30 	bl	800145c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80047fc:	2304      	movs	r3, #4
 80047fe:	4a3f      	ldr	r2, [pc, #252]	; (80048fc <low_level_init+0x190>)
 8004800:	493f      	ldr	r1, [pc, #252]	; (8004900 <low_level_init+0x194>)
 8004802:	483a      	ldr	r0, [pc, #232]	; (80048ec <low_level_init+0x180>)
 8004804:	f7fc fe93 	bl	800152e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2206      	movs	r2, #6
 800480c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004810:	4b36      	ldr	r3, [pc, #216]	; (80048ec <low_level_init+0x180>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800481c:	4b33      	ldr	r3, [pc, #204]	; (80048ec <low_level_init+0x180>)
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	785a      	ldrb	r2, [r3, #1]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004828:	4b30      	ldr	r3, [pc, #192]	; (80048ec <low_level_init+0x180>)
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	789a      	ldrb	r2, [r3, #2]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004834:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <low_level_init+0x180>)
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	78da      	ldrb	r2, [r3, #3]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004840:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <low_level_init+0x180>)
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	791a      	ldrb	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <low_level_init+0x180>)
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	795a      	ldrb	r2, [r3, #5]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004866:	f043 030a 	orr.w	r3, r3, #10
 800486a:	b2da      	uxtb	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004872:	2300      	movs	r3, #0
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800487a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800487e:	2101      	movs	r1, #1
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fbfb 	bl	800507c <osSemaphoreCreate>
 8004886:	4602      	mov	r2, r0
 8004888:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <low_level_init+0x198>)
 800488a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800488c:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <low_level_init+0x19c>)
 800488e:	f107 040c 	add.w	r4, r7, #12
 8004892:	461d      	mov	r5, r3
 8004894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004898:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800489c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 faeb 	bl	8004e82 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80048ac:	480f      	ldr	r0, [pc, #60]	; (80048ec <low_level_init+0x180>)
 80048ae:	f7fd f966 	bl	8001b7e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80048b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048b6:	461a      	mov	r2, r3
 80048b8:	211d      	movs	r1, #29
 80048ba:	480c      	ldr	r0, [pc, #48]	; (80048ec <low_level_init+0x180>)
 80048bc:	f7fd f891 	bl	80019e2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	f043 030b 	orr.w	r3, r3, #11
 80048c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	461a      	mov	r2, r3
 80048cc:	211d      	movs	r1, #29
 80048ce:	4807      	ldr	r0, [pc, #28]	; (80048ec <low_level_init+0x180>)
 80048d0:	f7fd f8ef 	bl	8001ab2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80048d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048d8:	461a      	mov	r2, r3
 80048da:	211d      	movs	r1, #29
 80048dc:	4803      	ldr	r0, [pc, #12]	; (80048ec <low_level_init+0x180>)
 80048de:	f7fd f880 	bl	80019e2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80048e2:	bf00      	nop
 80048e4:	3740      	adds	r7, #64	; 0x40
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bdb0      	pop	{r4, r5, r7, pc}
 80048ea:	bf00      	nop
 80048ec:	2000a39c 	.word	0x2000a39c
 80048f0:	40028000 	.word	0x40028000
 80048f4:	2000a3e4 	.word	0x2000a3e4
 80048f8:	20008acc 	.word	0x20008acc
 80048fc:	20008b4c 	.word	0x20008b4c
 8004900:	2000a31c 	.word	0x2000a31c
 8004904:	200002fc 	.word	0x200002fc
 8004908:	08018384 	.word	0x08018384

0800490c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004916:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <low_level_output+0x138>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800492e:	4b45      	ldr	r3, [pc, #276]	; (8004a44 <low_level_output+0x138>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	e05a      	b.n	80049f4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	da03      	bge.n	800494e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004946:	23f8      	movs	r3, #248	; 0xf8
 8004948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800494c:	e05c      	b.n	8004a08 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	895b      	ldrh	r3, [r3, #10]
 8004952:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004958:	e02f      	b.n	80049ba <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	18d0      	adds	r0, r2, r3
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	18d1      	adds	r1, r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800496e:	3304      	adds	r3, #4
 8004970:	461a      	mov	r2, r3
 8004972:	f012 fd96 	bl	80174a2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	da03      	bge.n	800498c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004984:	23f8      	movs	r3, #248	; 0xf8
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800498a:	e03d      	b.n	8004a08 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800499c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80049a8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80049b4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4413      	add	r3, r2
 80049c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d8c8      	bhi.n	800495a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	18d0      	adds	r0, r2, r3
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4619      	mov	r1, r3
 80049da:	f012 fd62 	bl	80174a2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1a1      	bne.n	800493e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80049fa:	6979      	ldr	r1, [r7, #20]
 80049fc:	4811      	ldr	r0, [pc, #68]	; (8004a44 <low_level_output+0x138>)
 80049fe:	f7fc fe03 	bl	8001608 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <low_level_output+0x138>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a10:	3314      	adds	r3, #20
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00d      	beq.n	8004a38 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <low_level_output+0x138>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a24:	3314      	adds	r3, #20
 8004a26:	2220      	movs	r2, #32
 8004a28:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <low_level_output+0x138>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a32:	3304      	adds	r3, #4
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004a38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3728      	adds	r7, #40	; 0x28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	2000a39c 	.word	0x2000a39c

08004a48 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004a6c:	484f      	ldr	r0, [pc, #316]	; (8004bac <low_level_input+0x164>)
 8004a6e:	f7fc feb5 	bl	80017dc <HAL_ETH_GetReceivedFrame_IT>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <low_level_input+0x34>

    return NULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e092      	b.n	8004ba2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004a7c:	4b4b      	ldr	r3, [pc, #300]	; (8004bac <low_level_input+0x164>)
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004a82:	4b4a      	ldr	r3, [pc, #296]	; (8004bac <low_level_input+0x164>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004a88:	89fb      	ldrh	r3, [r7, #14]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004a8e:	89fb      	ldrh	r3, [r7, #14]
 8004a90:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004a94:	4619      	mov	r1, r3
 8004a96:	2000      	movs	r0, #0
 8004a98:	f006 fd22 	bl	800b4e0 <pbuf_alloc>
 8004a9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d04b      	beq.n	8004b3c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004aa4:	4b41      	ldr	r3, [pc, #260]	; (8004bac <low_level_input+0x164>)
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab2:	e040      	b.n	8004b36 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	895b      	ldrh	r3, [r3, #10]
 8004ab8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004abe:	e021      	b.n	8004b04 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	18d0      	adds	r0, r2, r3
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	18d1      	adds	r1, r2, r3
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f012 fce3 	bl	80174a2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	4413      	add	r3, r2
 8004aee:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004af2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004afe:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d8d6      	bhi.n	8004ac0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	18d0      	adds	r0, r2, r3
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4619      	mov	r1, r3
 8004b24:	f012 fcbd 	bl	80174a2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1bb      	bne.n	8004ab4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <low_level_input+0x164>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	e00b      	b.n	8004b60 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	4b12      	ldr	r3, [pc, #72]	; (8004bac <low_level_input+0x164>)
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d3ee      	bcc.n	8004b48 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <low_level_input+0x164>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004b70:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <low_level_input+0x164>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b78:	3314      	adds	r3, #20
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <low_level_input+0x164>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8c:	3314      	adds	r3, #20
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <low_level_input+0x164>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3730      	adds	r7, #48	; 0x30
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	2000a39c 	.word	0x2000a39c

08004bb0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <ethernetif_input+0x58>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fa8d 	bl	80050e4 <osSemaphoreWait>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f5      	bne.n	8004bbc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004bd0:	480e      	ldr	r0, [pc, #56]	; (8004c0c <ethernetif_input+0x5c>)
 8004bd2:	f012 fbd3 	bl	801737c <sys_mutex_lock>
        p = low_level_input( netif );
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff ff36 	bl	8004a48 <low_level_input>
 8004bdc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	68b8      	ldr	r0, [r7, #8]
 8004bec:	4798      	blx	r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004bf4:	68b8      	ldr	r0, [r7, #8]
 8004bf6:	f006 ff53 	bl	800baa0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004bfa:	4804      	ldr	r0, [pc, #16]	; (8004c0c <ethernetif_input+0x5c>)
 8004bfc:	f012 fbcd 	bl	801739a <sys_mutex_unlock>
      } while(p!=NULL);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e4      	bne.n	8004bd0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004c06:	e7d9      	b.n	8004bbc <ethernetif_input+0xc>
 8004c08:	200002fc 	.word	0x200002fc
 8004c0c:	2000bbf4 	.word	0x2000bbf4

08004c10 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <ethernetif_init+0x1c>
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <ethernetif_init+0x48>)
 8004c20:	f240 2233 	movw	r2, #563	; 0x233
 8004c24:	490d      	ldr	r1, [pc, #52]	; (8004c5c <ethernetif_init+0x4c>)
 8004c26:	480e      	ldr	r0, [pc, #56]	; (8004c60 <ethernetif_init+0x50>)
 8004c28:	f012 fc4e 	bl	80174c8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2273      	movs	r2, #115	; 0x73
 8004c30:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2274      	movs	r2, #116	; 0x74
 8004c38:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <ethernetif_init+0x54>)
 8004c40:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <ethernetif_init+0x58>)
 8004c46:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fd8f 	bl	800476c <low_level_init>

  return ERR_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	080183a0 	.word	0x080183a0
 8004c5c:	080183bc 	.word	0x080183bc
 8004c60:	080183cc 	.word	0x080183cc
 8004c64:	08015361 	.word	0x08015361
 8004c68:	0800490d 	.word	0x0800490d

08004c6c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004c70:	f7fc f946 	bl	8000f00 <HAL_GetTick>
 8004c74:	4603      	mov	r3, r0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004c8c:	f107 0308 	add.w	r3, r7, #8
 8004c90:	461a      	mov	r2, r3
 8004c92:	2101      	movs	r1, #1
 8004c94:	4816      	ldr	r0, [pc, #88]	; (8004cf0 <ethernetif_set_link+0x74>)
 8004c96:	f7fc fea4 	bl	80019e2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <ethernetif_set_link+0x48>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f006 fadd 	bl	800b27c <netif_set_link_up>
 8004cc2:	e011      	b.n	8004ce8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <ethernetif_set_link+0x6c>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f006 fb02 	bl	800b2ec <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004ce8:	20c8      	movs	r0, #200	; 0xc8
 8004cea:	f000 f916 	bl	8004f1a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004cee:	e7cd      	b.n	8004c8c <ethernetif_set_link+0x10>
 8004cf0:	2000a39c 	.word	0x2000a39c

08004cf4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d05d      	beq.n	8004dd2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004d16:	4b34      	ldr	r3, [pc, #208]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d03f      	beq.n	8004d9e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004d1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d22:	2100      	movs	r1, #0
 8004d24:	4830      	ldr	r0, [pc, #192]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004d26:	f7fc fec4 	bl	8001ab2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004d2a:	f7fc f8e9 	bl	8000f00 <HAL_GetTick>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004d32:	f107 0308 	add.w	r3, r7, #8
 8004d36:	461a      	mov	r2, r3
 8004d38:	2101      	movs	r1, #1
 8004d3a:	482b      	ldr	r0, [pc, #172]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004d3c:	f7fc fe51 	bl	80019e2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004d40:	f7fc f8de 	bl	8000f00 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d4e:	d828      	bhi.n	8004da2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0eb      	beq.n	8004d32 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004d5a:	f107 0308 	add.w	r3, r7, #8
 8004d5e:	461a      	mov	r2, r3
 8004d60:	211f      	movs	r1, #31
 8004d62:	4821      	ldr	r0, [pc, #132]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004d64:	f7fc fe3d 	bl	80019e2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	e002      	b.n	8004d82 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
 8004d92:	e016      	b.n	8004dc2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004d94:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	e011      	b.n	8004dc2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004d9e:	bf00      	nop
 8004da0:	e000      	b.n	8004da4 <ethernetif_update_config+0xb0>
          goto error;
 8004da2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	2100      	movs	r1, #0
 8004dbc:	480a      	ldr	r0, [pc, #40]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004dbe:	f7fc fe78 	bl	8001ab2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4808      	ldr	r0, [pc, #32]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004dc6:	f7fc ff39 	bl	8001c3c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004dca:	4807      	ldr	r0, [pc, #28]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004dcc:	f7fc fed7 	bl	8001b7e <HAL_ETH_Start>
 8004dd0:	e002      	b.n	8004dd8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004dd2:	4805      	ldr	r0, [pc, #20]	; (8004de8 <ethernetif_update_config+0xf4>)
 8004dd4:	f7fc ff02 	bl	8001bdc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f807 	bl	8004dec <ethernetif_notify_conn_changed>
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	2000a39c 	.word	0x2000a39c

08004dec <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e12:	2b84      	cmp	r3, #132	; 0x84
 8004e14:	d005      	beq.n	8004e22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3303      	adds	r3, #3
 8004e20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e22:	68fb      	ldr	r3, [r7, #12]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e36:	f3ef 8305 	mrs	r3, IPSR
 8004e3a:	607b      	str	r3, [r7, #4]
  return(result);
 8004e3c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e58:	f001 fd08 	bl	800686c <vTaskStartScheduler>
  
  return osOK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004e66:	f7ff ffe3 	bl	8004e30 <inHandlerMode>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004e70:	f001 fe14 	bl	8006a9c <xTaskGetTickCountFromISR>
 8004e74:	4603      	mov	r3, r0
 8004e76:	e002      	b.n	8004e7e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004e78:	f001 fe00 	bl	8006a7c <xTaskGetTickCount>
 8004e7c:	4603      	mov	r3, r0
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e84:	b089      	sub	sp, #36	; 0x24
 8004e86:	af04      	add	r7, sp, #16
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d020      	beq.n	8004ed6 <osThreadCreate+0x54>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01c      	beq.n	8004ed6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685c      	ldr	r4, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681d      	ldr	r5, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691e      	ldr	r6, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ffa6 	bl	8004e00 <makeFreeRtosPriority>
 8004eb4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ebe:	9202      	str	r2, [sp, #8]
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	9100      	str	r1, [sp, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4632      	mov	r2, r6
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f001 fb0a 	bl	80064e4 <xTaskCreateStatic>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e01c      	b.n	8004f10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685c      	ldr	r4, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee2:	b29e      	uxth	r6, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ff88 	bl	8004e00 <makeFreeRtosPriority>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	f107 030c 	add.w	r3, r7, #12
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	9200      	str	r2, [sp, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	4632      	mov	r2, r6
 8004efe:	4629      	mov	r1, r5
 8004f00:	4620      	mov	r0, r4
 8004f02:	f001 fb49 	bl	8006598 <xTaskCreate>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d001      	beq.n	8004f10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f10:	68fb      	ldr	r3, [r7, #12]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <osDelay+0x16>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	e000      	b.n	8004f32 <osDelay+0x18>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 fc66 	bl	8006804 <vTaskDelay>
  
  return osOK;
 8004f38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4619      	mov	r1, r3
 8004f58:	2001      	movs	r0, #1
 8004f5a:	f000 fc80 	bl	800585e <xQueueCreateMutexStatic>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	e003      	b.n	8004f6a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004f62:	2001      	movs	r0, #1
 8004f64:	f000 fc63 	bl	800582e <xQueueCreateMutex>
 8004f68:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <osMutexWait+0x18>
    return osErrorParameter;
 8004f88:	2380      	movs	r3, #128	; 0x80
 8004f8a:	e03a      	b.n	8005002 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d103      	bne.n	8004fa0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e009      	b.n	8004fb4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d006      	beq.n	8004fb4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <osMutexWait+0x40>
      ticks = 1;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004fb4:	f7ff ff3c 	bl	8004e30 <inHandlerMode>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d017      	beq.n	8004fee <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004fbe:	f107 0308 	add.w	r3, r7, #8
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 f860 	bl	800608c <xQueueReceiveFromISR>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d001      	beq.n	8004fd6 <osMutexWait+0x62>
      return osErrorOS;
 8004fd2:	23ff      	movs	r3, #255	; 0xff
 8004fd4:	e015      	b.n	8005002 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d011      	beq.n	8005000 <osMutexWait+0x8c>
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <osMutexWait+0x98>)
 8004fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	e008      	b.n	8005000 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 ff43 	bl	8005e7c <xQueueSemaphoreTake>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d001      	beq.n	8005000 <osMutexWait+0x8c>
    return osErrorOS;
 8004ffc:	23ff      	movs	r3, #255	; 0xff
 8004ffe:	e000      	b.n	8005002 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	e000ed04 	.word	0xe000ed04

08005010 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800501c:	2300      	movs	r3, #0
 800501e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005020:	f7ff ff06 	bl	8004e30 <inHandlerMode>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800502a:	f107 0308 	add.w	r3, r7, #8
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fdbd 	bl	8005bb0 <xQueueGiveFromISR>
 8005036:	4603      	mov	r3, r0
 8005038:	2b01      	cmp	r3, #1
 800503a:	d001      	beq.n	8005040 <osMutexRelease+0x30>
      return osErrorOS;
 800503c:	23ff      	movs	r3, #255	; 0xff
 800503e:	e017      	b.n	8005070 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d013      	beq.n	800506e <osMutexRelease+0x5e>
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <osMutexRelease+0x68>)
 8005048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	e00a      	b.n	800506e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005058:	2300      	movs	r3, #0
 800505a:	2200      	movs	r2, #0
 800505c:	2100      	movs	r1, #0
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fc18 	bl	8005894 <xQueueGenericSend>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d001      	beq.n	800506e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800506a:	23ff      	movs	r3, #255	; 0xff
 800506c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af02      	add	r7, sp, #8
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d010      	beq.n	80050b0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d10b      	bne.n	80050ac <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	2303      	movs	r3, #3
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	2100      	movs	r1, #0
 80050a2:	2001      	movs	r0, #1
 80050a4:	f000 fad8 	bl	8005658 <xQueueGenericCreateStatic>
 80050a8:	4603      	mov	r3, r0
 80050aa:	e016      	b.n	80050da <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e014      	b.n	80050da <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d110      	bne.n	80050d8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80050b6:	2203      	movs	r2, #3
 80050b8:	2100      	movs	r1, #0
 80050ba:	2001      	movs	r0, #1
 80050bc:	f000 fb3f 	bl	800573e <xQueueGenericCreate>
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <osSemaphoreCreate+0x58>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2200      	movs	r2, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fbe0 	bl	8005894 <xQueueGenericSend>
      return sema;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	e000      	b.n	80050da <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80050d8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	e03a      	b.n	8005172 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d103      	bne.n	8005110 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005108:	f04f 33ff 	mov.w	r3, #4294967295
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e009      	b.n	8005124 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <osSemaphoreWait+0x40>
      ticks = 1;
 8005120:	2301      	movs	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005124:	f7ff fe84 	bl	8004e30 <inHandlerMode>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d017      	beq.n	800515e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800512e:	f107 0308 	add.w	r3, r7, #8
 8005132:	461a      	mov	r2, r3
 8005134:	2100      	movs	r1, #0
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 ffa8 	bl	800608c <xQueueReceiveFromISR>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005142:	23ff      	movs	r3, #255	; 0xff
 8005144:	e015      	b.n	8005172 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d011      	beq.n	8005170 <osSemaphoreWait+0x8c>
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <osSemaphoreWait+0x98>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	e008      	b.n	8005170 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fe8b 	bl	8005e7c <xQueueSemaphoreTake>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d001      	beq.n	8005170 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800516c:	23ff      	movs	r3, #255	; 0xff
 800516e:	e000      	b.n	8005172 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005190:	f7ff fe4e 	bl	8004e30 <inHandlerMode>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d016      	beq.n	80051c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800519a:	f107 0308 	add.w	r3, r7, #8
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fd05 	bl	8005bb0 <xQueueGiveFromISR>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80051ac:	23ff      	movs	r3, #255	; 0xff
 80051ae:	e017      	b.n	80051e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d013      	beq.n	80051de <osSemaphoreRelease+0x5e>
 80051b6:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <osSemaphoreRelease+0x68>)
 80051b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	e00a      	b.n	80051de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80051c8:	2300      	movs	r3, #0
 80051ca:	2200      	movs	r2, #0
 80051cc:	2100      	movs	r1, #0
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fb60 	bl	8005894 <xQueueGenericSend>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d001      	beq.n	80051de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80051da:	23ff      	movs	r3, #255	; 0xff
 80051dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80051f4:	f7ff fe1c 	bl	8004e30 <inHandlerMode>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80051fe:	2382      	movs	r3, #130	; 0x82
 8005200:	e003      	b.n	800520a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fff9 	bl	80061fa <vQueueDelete>

  return osOK; 
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005212:	b590      	push	{r4, r7, lr}
 8005214:	b085      	sub	sp, #20
 8005216:	af02      	add	r7, sp, #8
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d012      	beq.n	800524a <osMessageCreate+0x38>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6859      	ldr	r1, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68dc      	ldr	r4, [r3, #12]
 800523c:	2300      	movs	r3, #0
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	4623      	mov	r3, r4
 8005242:	f000 fa09 	bl	8005658 <xQueueGenericCreateStatic>
 8005246:	4603      	mov	r3, r0
 8005248:	e008      	b.n	800525c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	4619      	mov	r1, r3
 8005256:	f000 fa72 	bl	800573e <xQueueGenericCreate>
 800525a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bd90      	pop	{r4, r7, pc}

08005264 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <osMessagePut+0x1e>
    ticks = 1;
 800527e:	2301      	movs	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005282:	f7ff fdd5 	bl	8004e30 <inHandlerMode>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d018      	beq.n	80052be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800528c:	f107 0210 	add.w	r2, r7, #16
 8005290:	f107 0108 	add.w	r1, r7, #8
 8005294:	2300      	movs	r3, #0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fbf6 	bl	8005a88 <xQueueGenericSendFromISR>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d001      	beq.n	80052a6 <osMessagePut+0x42>
      return osErrorOS;
 80052a2:	23ff      	movs	r3, #255	; 0xff
 80052a4:	e018      	b.n	80052d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d014      	beq.n	80052d6 <osMessagePut+0x72>
 80052ac:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <osMessagePut+0x7c>)
 80052ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	e00b      	b.n	80052d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80052be:	f107 0108 	add.w	r1, r7, #8
 80052c2:	2300      	movs	r3, #0
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fae4 	bl	8005894 <xQueueGenericSend>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d001      	beq.n	80052d6 <osMessagePut+0x72>
      return osErrorOS;
 80052d2:	23ff      	movs	r3, #255	; 0xff
 80052d4:	e000      	b.n	80052d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b08b      	sub	sp, #44	; 0x2c
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	617b      	str	r3, [r7, #20]
    return event;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	461c      	mov	r4, r3
 8005306:	f107 0314 	add.w	r3, r7, #20
 800530a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800530e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005312:	e054      	b.n	80053be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d103      	bne.n	800532c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005324:	f04f 33ff 	mov.w	r3, #4294967295
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
 800532a:	e009      	b.n	8005340 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d006      	beq.n	8005340 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <osMessageGet+0x5c>
      ticks = 1;
 800533c:	2301      	movs	r3, #1
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005340:	f7ff fd76 	bl	8004e30 <inHandlerMode>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01c      	beq.n	8005384 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800534a:	f107 0220 	add.w	r2, r7, #32
 800534e:	f107 0314 	add.w	r3, r7, #20
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	68b8      	ldr	r0, [r7, #8]
 8005358:	f000 fe98 	bl	800608c <xQueueReceiveFromISR>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d102      	bne.n	8005368 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005362:	2310      	movs	r3, #16
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e001      	b.n	800536c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01d      	beq.n	80053ae <osMessageGet+0xca>
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <osMessageGet+0xe4>)
 8005374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	e014      	b.n	80053ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005384:	f107 0314 	add.w	r3, r7, #20
 8005388:	3304      	adds	r3, #4
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	4619      	mov	r1, r3
 800538e:	68b8      	ldr	r0, [r7, #8]
 8005390:	f000 fc98 	bl	8005cc4 <xQueueReceive>
 8005394:	4603      	mov	r3, r0
 8005396:	2b01      	cmp	r3, #1
 8005398:	d102      	bne.n	80053a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800539a:	2310      	movs	r3, #16
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e006      	b.n	80053ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <osMessageGet+0xc6>
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <osMessageGet+0xc8>
 80053aa:	2340      	movs	r3, #64	; 0x40
 80053ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	461c      	mov	r4, r3
 80053b2:	f107 0314 	add.w	r3, r7, #20
 80053b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	372c      	adds	r7, #44	; 0x2c
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd90      	pop	{r4, r7, pc}
 80053c6:	bf00      	nop
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80053d4:	f7ff fd2c 	bl	8004e30 <inHandlerMode>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 feee 	bl	80061c0 <uxQueueMessagesWaitingFromISR>
 80053e4:	4603      	mov	r3, r0
 80053e6:	e003      	b.n	80053f0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fecc 	bl	8006186 <uxQueueMessagesWaiting>
 80053ee:	4603      	mov	r3, r0
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005400:	f7ff fd16 	bl	8004e30 <inHandlerMode>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <osMessageDelete+0x16>
    return osErrorISR;
 800540a:	2382      	movs	r3, #130	; 0x82
 800540c:	e003      	b.n	8005416 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fef3 	bl	80061fa <vQueueDelete>

  return osOK; 
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f103 0208 	add.w	r2, r3, #8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f04f 32ff 	mov.w	r2, #4294967295
 8005436:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f103 0208 	add.w	r2, r3, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f103 0208 	add.w	r2, r3, #8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d103      	bne.n	80054e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e00c      	b.n	80054fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3308      	adds	r3, #8
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e002      	b.n	80054ee <vListInsert+0x2e>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d2f6      	bcs.n	80054e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005532:	b480      	push	{r7}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6892      	ldr	r2, [r2, #8]
 8005548:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6852      	ldr	r2, [r2, #4]
 8005552:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	429a      	cmp	r2, r3
 800555c:	d103      	bne.n	8005566 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	1e5a      	subs	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	e7fe      	b.n	80055ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80055b0:	f002 f8cc 	bl	800774c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	68f9      	ldr	r1, [r7, #12]
 80055be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	441a      	add	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e0:	3b01      	subs	r3, #1
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	441a      	add	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	22ff      	movs	r2, #255	; 0xff
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	22ff      	movs	r2, #255	; 0xff
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d114      	bne.n	8005630 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01a      	beq.n	8005644 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3310      	adds	r3, #16
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fb8a 	bl	8006d2c <xTaskRemoveFromEventList>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d012      	beq.n	8005644 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800561e:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <xQueueGenericReset+0xcc>)
 8005620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	e009      	b.n	8005644 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3310      	adds	r3, #16
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fef2 	bl	800541e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3324      	adds	r3, #36	; 0x24
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff feed 	bl	800541e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005644:	f002 f8b0 	bl	80077a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005648:	2301      	movs	r3, #1
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08e      	sub	sp, #56	; 0x38
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <xQueueGenericCreateStatic+0x28>
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
 800567e:	e7fe      	b.n	800567e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <xQueueGenericCreateStatic+0x42>
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	e7fe      	b.n	8005698 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <xQueueGenericCreateStatic+0x4e>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <xQueueGenericCreateStatic+0x52>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueGenericCreateStatic+0x54>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <xQueueGenericCreateStatic+0x6c>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	623b      	str	r3, [r7, #32]
 80056c2:	e7fe      	b.n	80056c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <xQueueGenericCreateStatic+0x78>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <xQueueGenericCreateStatic+0x7c>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <xQueueGenericCreateStatic+0x7e>
 80056d4:	2300      	movs	r3, #0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <xQueueGenericCreateStatic+0x96>
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056ee:	2348      	movs	r3, #72	; 0x48
 80056f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b48      	cmp	r3, #72	; 0x48
 80056f6:	d009      	beq.n	800570c <xQueueGenericCreateStatic+0xb4>
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	e7fe      	b.n	800570a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800570c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005720:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f844 	bl	80057bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005736:	4618      	mov	r0, r3
 8005738:	3730      	adds	r7, #48	; 0x30
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800573e:	b580      	push	{r7, lr}
 8005740:	b08a      	sub	sp, #40	; 0x28
 8005742:	af02      	add	r7, sp, #8
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	4613      	mov	r3, r2
 800574a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <xQueueGenericCreate+0x28>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	e7fe      	b.n	8005764 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	e004      	b.n	800577c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3348      	adds	r3, #72	; 0x48
 8005780:	4618      	mov	r0, r3
 8005782:	f002 f8fd 	bl	8007980 <pvPortMalloc>
 8005786:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d011      	beq.n	80057b2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	3348      	adds	r3, #72	; 0x48
 8005796:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057a0:	79fa      	ldrb	r2, [r7, #7]
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4613      	mov	r3, r2
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f805 	bl	80057bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057b2:	69bb      	ldr	r3, [r7, #24]
	}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	e002      	b.n	80057de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057ea:	2101      	movs	r1, #1
 80057ec:	69b8      	ldr	r0, [r7, #24]
 80057ee:	f7ff fecb 	bl	8005588 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00e      	beq.n	8005826 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800581a:	2300      	movs	r3, #0
 800581c:	2200      	movs	r2, #0
 800581e:	2100      	movs	r1, #0
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f837 	bl	8005894 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	4603      	mov	r3, r0
 8005836:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005838:	2301      	movs	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	461a      	mov	r2, r3
 8005844:	6939      	ldr	r1, [r7, #16]
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f7ff ff79 	bl	800573e <xQueueGenericCreate>
 800584c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff ffd3 	bl	80057fa <prvInitialiseMutex>

		return xNewQueue;
 8005854:	68fb      	ldr	r3, [r7, #12]
	}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800585e:	b580      	push	{r7, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	af02      	add	r7, sp, #8
 8005864:	4603      	mov	r3, r0
 8005866:	6039      	str	r1, [r7, #0]
 8005868:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800586a:	2301      	movs	r3, #1
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2200      	movs	r2, #0
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	6978      	ldr	r0, [r7, #20]
 800587e:	f7ff feeb 	bl	8005658 <xQueueGenericCreateStatic>
 8005882:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ffb8 	bl	80057fa <prvInitialiseMutex>

		return xNewQueue;
 800588a:	68fb      	ldr	r3, [r7, #12]
	}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08e      	sub	sp, #56	; 0x38
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058a2:	2300      	movs	r3, #0
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <xQueueGenericSend+0x30>
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c2:	e7fe      	b.n	80058c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d103      	bne.n	80058d2 <xQueueGenericSend+0x3e>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <xQueueGenericSend+0x42>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <xQueueGenericSend+0x44>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <xQueueGenericSend+0x5c>
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
 80058ee:	e7fe      	b.n	80058ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d103      	bne.n	80058fe <xQueueGenericSend+0x6a>
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <xQueueGenericSend+0x6e>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <xQueueGenericSend+0x70>
 8005902:	2300      	movs	r3, #0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <xQueueGenericSend+0x88>
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	e7fe      	b.n	800591a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800591c:	f001 fbbc 	bl	8007098 <xTaskGetSchedulerState>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <xQueueGenericSend+0x98>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <xQueueGenericSend+0x9c>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <xQueueGenericSend+0x9e>
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <xQueueGenericSend+0xb6>
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	e7fe      	b.n	8005948 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800594a:	f001 feff 	bl	800774c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	429a      	cmp	r2, r3
 8005958:	d302      	bcc.n	8005960 <xQueueGenericSend+0xcc>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d129      	bne.n	80059b4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005966:	f000 fc82 	bl	800626e <prvCopyDataToQueue>
 800596a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d010      	beq.n	8005996 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	3324      	adds	r3, #36	; 0x24
 8005978:	4618      	mov	r0, r3
 800597a:	f001 f9d7 	bl	8006d2c <xTaskRemoveFromEventList>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d013      	beq.n	80059ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005984:	4b3f      	ldr	r3, [pc, #252]	; (8005a84 <xQueueGenericSend+0x1f0>)
 8005986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	e00a      	b.n	80059ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800599c:	4b39      	ldr	r3, [pc, #228]	; (8005a84 <xQueueGenericSend+0x1f0>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059ac:	f001 fefc 	bl	80077a8 <vPortExitCritical>
				return pdPASS;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e063      	b.n	8005a7c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ba:	f001 fef5 	bl	80077a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	e05c      	b.n	8005a7c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059c8:	f107 0314 	add.w	r3, r7, #20
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 fa0f 	bl	8006df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059d2:	2301      	movs	r3, #1
 80059d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059d6:	f001 fee7 	bl	80077a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059da:	f000 ffa5 	bl	8006928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059de:	f001 feb5 	bl	800774c <vPortEnterCritical>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059e8:	b25b      	sxtb	r3, r3
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d103      	bne.n	80059f8 <xQueueGenericSend+0x164>
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d103      	bne.n	8005a0e <xQueueGenericSend+0x17a>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a0e:	f001 fecb 	bl	80077a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a12:	1d3a      	adds	r2, r7, #4
 8005a14:	f107 0314 	add.w	r3, r7, #20
 8005a18:	4611      	mov	r1, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 f9fe 	bl	8006e1c <xTaskCheckForTimeOut>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d124      	bne.n	8005a70 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a28:	f000 fd19 	bl	800645e <prvIsQueueFull>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d018      	beq.n	8005a64 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	3310      	adds	r3, #16
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 f952 	bl	8006ce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a42:	f000 fca4 	bl	800638e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a46:	f000 ff7d 	bl	8006944 <xTaskResumeAll>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f47f af7c 	bne.w	800594a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005a52:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <xQueueGenericSend+0x1f0>)
 8005a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	e772      	b.n	800594a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a66:	f000 fc92 	bl	800638e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a6a:	f000 ff6b 	bl	8006944 <xTaskResumeAll>
 8005a6e:	e76c      	b.n	800594a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a72:	f000 fc8c 	bl	800638e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a76:	f000 ff65 	bl	8006944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3738      	adds	r7, #56	; 0x38
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08e      	sub	sp, #56	; 0x38
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <xQueueGenericSendFromISR+0x2c>
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	e7fe      	b.n	8005ab2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <xQueueGenericSendFromISR+0x3a>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <xQueueGenericSendFromISR+0x3e>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <xQueueGenericSendFromISR+0x40>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <xQueueGenericSendFromISR+0x58>
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	623b      	str	r3, [r7, #32]
 8005ade:	e7fe      	b.n	8005ade <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d103      	bne.n	8005aee <xQueueGenericSendFromISR+0x66>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <xQueueGenericSendFromISR+0x6a>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <xQueueGenericSendFromISR+0x6c>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <xQueueGenericSendFromISR+0x84>
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	e7fe      	b.n	8005b0a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b0c:	f001 fefa 	bl	8007904 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b10:	f3ef 8211 	mrs	r2, BASEPRI
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	61ba      	str	r2, [r7, #24]
 8005b26:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <xQueueGenericSendFromISR+0xb6>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d12c      	bne.n	8005b98 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b4e:	f000 fb8e 	bl	800626e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b52:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d112      	bne.n	8005b82 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d016      	beq.n	8005b92 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	3324      	adds	r3, #36	; 0x24
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 f8df 	bl	8006d2c <xTaskRemoveFromEventList>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00e      	beq.n	8005b92 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e007      	b.n	8005b92 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b86:	3301      	adds	r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	b25a      	sxtb	r2, r3
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b92:	2301      	movs	r3, #1
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b96:	e001      	b.n	8005b9c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3738      	adds	r7, #56	; 0x38
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08e      	sub	sp, #56	; 0x38
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	e7fe      	b.n	8005bd6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <xQueueGiveFromISR+0x44>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	e7fe      	b.n	8005bf2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <xQueueGiveFromISR+0x54>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <xQueueGiveFromISR+0x58>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <xQueueGiveFromISR+0x5a>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <xQueueGiveFromISR+0x72>
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	e7fe      	b.n	8005c20 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c22:	f001 fe6f 	bl	8007904 <vPortValidateInterruptPriority>
	__asm volatile
 8005c26:	f3ef 8211 	mrs	r2, BASEPRI
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	617a      	str	r2, [r7, #20]
 8005c3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005c3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d22b      	bcs.n	8005caa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d112      	bne.n	8005c94 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d016      	beq.n	8005ca4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	3324      	adds	r3, #36	; 0x24
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 f856 	bl	8006d2c <xTaskRemoveFromEventList>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00e      	beq.n	8005ca4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	e007      	b.n	8005ca4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c98:	3301      	adds	r3, #1
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	b25a      	sxtb	r2, r3
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca8:	e001      	b.n	8005cae <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3738      	adds	r7, #56	; 0x38
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	; 0x30
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <xQueueReceive+0x2e>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	623b      	str	r3, [r7, #32]
 8005cf0:	e7fe      	b.n	8005cf0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <xQueueReceive+0x3c>
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <xQueueReceive+0x40>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <xQueueReceive+0x42>
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <xQueueReceive+0x5a>
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e7fe      	b.n	8005d1c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d1e:	f001 f9bb 	bl	8007098 <xTaskGetSchedulerState>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <xQueueReceive+0x6a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <xQueueReceive+0x6e>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <xQueueReceive+0x70>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <xQueueReceive+0x88>
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e7fe      	b.n	8005d4a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d4c:	f001 fcfe 	bl	800774c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01f      	beq.n	8005d9c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d60:	f000 faef 	bl	8006342 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	1e5a      	subs	r2, r3, #1
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00f      	beq.n	8005d94 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	3310      	adds	r3, #16
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 ffd7 	bl	8006d2c <xTaskRemoveFromEventList>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d84:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <xQueueReceive+0x1b4>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d94:	f001 fd08 	bl	80077a8 <vPortExitCritical>
				return pdPASS;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e069      	b.n	8005e70 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d103      	bne.n	8005daa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005da2:	f001 fd01 	bl	80077a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e062      	b.n	8005e70 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005db0:	f107 0310 	add.w	r3, r7, #16
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 f81b 	bl	8006df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dbe:	f001 fcf3 	bl	80077a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dc2:	f000 fdb1 	bl	8006928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dc6:	f001 fcc1 	bl	800774c <vPortEnterCritical>
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dd0:	b25b      	sxtb	r3, r3
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d103      	bne.n	8005de0 <xQueueReceive+0x11c>
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005de6:	b25b      	sxtb	r3, r3
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d103      	bne.n	8005df6 <xQueueReceive+0x132>
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005df6:	f001 fcd7 	bl	80077a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dfa:	1d3a      	adds	r2, r7, #4
 8005dfc:	f107 0310 	add.w	r3, r7, #16
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f80a 	bl	8006e1c <xTaskCheckForTimeOut>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d123      	bne.n	8005e56 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e10:	f000 fb0f 	bl	8006432 <prvIsQueueEmpty>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d017      	beq.n	8005e4a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	3324      	adds	r3, #36	; 0x24
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4611      	mov	r1, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 ff5e 	bl	8006ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2a:	f000 fab0 	bl	800638e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e2e:	f000 fd89 	bl	8006944 <xTaskResumeAll>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d189      	bne.n	8005d4c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <xQueueReceive+0x1b4>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	e780      	b.n	8005d4c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4c:	f000 fa9f 	bl	800638e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e50:	f000 fd78 	bl	8006944 <xTaskResumeAll>
 8005e54:	e77a      	b.n	8005d4c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e58:	f000 fa99 	bl	800638e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e5c:	f000 fd72 	bl	8006944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e62:	f000 fae6 	bl	8006432 <prvIsQueueEmpty>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f43f af6f 	beq.w	8005d4c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3730      	adds	r7, #48	; 0x30
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08e      	sub	sp, #56	; 0x38
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <xQueueSemaphoreTake+0x30>
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	e7fe      	b.n	8005eaa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <xQueueSemaphoreTake+0x4c>
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e7fe      	b.n	8005ec6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ec8:	f001 f8e6 	bl	8007098 <xTaskGetSchedulerState>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <xQueueSemaphoreTake+0x5c>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <xQueueSemaphoreTake+0x60>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <xQueueSemaphoreTake+0x62>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <xQueueSemaphoreTake+0x7a>
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	e7fe      	b.n	8005ef4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ef6:	f001 fc29 	bl	800774c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d024      	beq.n	8005f50 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005f16:	f001 fa79 	bl	800740c <pvTaskIncrementMutexHeldCount>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00f      	beq.n	8005f48 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fefd 	bl	8006d2c <xTaskRemoveFromEventList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f38:	4b53      	ldr	r3, [pc, #332]	; (8006088 <xQueueSemaphoreTake+0x20c>)
 8005f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f48:	f001 fc2e 	bl	80077a8 <vPortExitCritical>
				return pdPASS;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e096      	b.n	800607e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d110      	bne.n	8005f78 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <xQueueSemaphoreTake+0xf4>
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e7fe      	b.n	8005f6e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f70:	f001 fc1a 	bl	80077a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e082      	b.n	800607e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 ff34 	bl	8006df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f8c:	f001 fc0c 	bl	80077a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f90:	f000 fcca 	bl	8006928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f94:	f001 fbda 	bl	800774c <vPortEnterCritical>
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d103      	bne.n	8005fae <xQueueSemaphoreTake+0x132>
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fb4:	b25b      	sxtb	r3, r3
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d103      	bne.n	8005fc4 <xQueueSemaphoreTake+0x148>
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fc4:	f001 fbf0 	bl	80077a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fc8:	463a      	mov	r2, r7
 8005fca:	f107 030c 	add.w	r3, r7, #12
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 ff23 	bl	8006e1c <xTaskCheckForTimeOut>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d132      	bne.n	8006042 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fde:	f000 fa28 	bl	8006432 <prvIsQueueEmpty>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d026      	beq.n	8006036 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005ff0:	f001 fbac 	bl	800774c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 f86b 	bl	80070d4 <xTaskPriorityInherit>
 8005ffe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006000:	f001 fbd2 	bl	80077a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	3324      	adds	r3, #36	; 0x24
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	4611      	mov	r1, r2
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fe69 	bl	8006ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006014:	f000 f9bb 	bl	800638e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006018:	f000 fc94 	bl	8006944 <xTaskResumeAll>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	f47f af69 	bne.w	8005ef6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006024:	4b18      	ldr	r3, [pc, #96]	; (8006088 <xQueueSemaphoreTake+0x20c>)
 8006026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	e75f      	b.n	8005ef6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006038:	f000 f9a9 	bl	800638e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800603c:	f000 fc82 	bl	8006944 <xTaskResumeAll>
 8006040:	e759      	b.n	8005ef6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006044:	f000 f9a3 	bl	800638e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006048:	f000 fc7c 	bl	8006944 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800604c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800604e:	f000 f9f0 	bl	8006432 <prvIsQueueEmpty>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	f43f af4e 	beq.w	8005ef6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006060:	f001 fb74 	bl	800774c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006066:	f000 f8ea 	bl	800623e <prvGetDisinheritPriorityAfterTimeout>
 800606a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006072:	4618      	mov	r0, r3
 8006074:	f001 f932 	bl	80072dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006078:	f001 fb96 	bl	80077a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800607c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800607e:	4618      	mov	r0, r3
 8006080:	3738      	adds	r7, #56	; 0x38
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08e      	sub	sp, #56	; 0x38
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <xQueueReceiveFromISR+0x2a>
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	e7fe      	b.n	80060b4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d103      	bne.n	80060c4 <xQueueReceiveFromISR+0x38>
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <xQueueReceiveFromISR+0x3c>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <xQueueReceiveFromISR+0x3e>
 80060c8:	2300      	movs	r3, #0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <xQueueReceiveFromISR+0x56>
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	e7fe      	b.n	80060e0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060e2:	f001 fc0f 	bl	8007904 <vPortValidateInterruptPriority>
	__asm volatile
 80060e6:	f3ef 8211 	mrs	r2, BASEPRI
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	61ba      	str	r2, [r7, #24]
 80060fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80060fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02f      	beq.n	800616e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800611c:	f000 f911 	bl	8006342 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	1e5a      	subs	r2, r3, #1
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006128:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d112      	bne.n	8006158 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d016      	beq.n	8006168 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	3310      	adds	r3, #16
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fdf4 	bl	8006d2c <xTaskRemoveFromEventList>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e007      	b.n	8006168 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615c:	3301      	adds	r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	b25a      	sxtb	r2, r3
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006168:	2301      	movs	r3, #1
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
 800616c:	e001      	b.n	8006172 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800616e:	2300      	movs	r3, #0
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800617e:	4618      	mov	r0, r3
 8006180:	3738      	adds	r7, #56	; 0x38
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	e7fe      	b.n	80061a6 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80061a8:	f001 fad0 	bl	800774c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80061b2:	f001 faf9 	bl	80077a8 <vPortExitCritical>

	return uxReturn;
 80061b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <uxQueueMessagesWaitingFromISR+0x26>
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e7fe      	b.n	80061e4 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80061ec:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80061ee:	4618      	mov	r0, r3
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <vQueueDelete+0x26>
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	e7fe      	b.n	800621e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f935 	bl	8006490 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f001 fc67 	bl	8007b04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d006      	beq.n	800625c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f1c3 0307 	rsb	r3, r3, #7
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e001      	b.n	8006260 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006260:	68fb      	ldr	r3, [r7, #12]
	}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b086      	sub	sp, #24
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10d      	bne.n	80062a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d14d      	bne.n	8006330 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 ff9b 	bl	80071d4 <xTaskPriorityDisinherit>
 800629e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
 80062a6:	e043      	b.n	8006330 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d119      	bne.n	80062e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6858      	ldr	r0, [r3, #4]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	461a      	mov	r2, r3
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	f011 f8f2 	bl	80174a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	441a      	add	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d32b      	bcc.n	8006330 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	e026      	b.n	8006330 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68d8      	ldr	r0, [r3, #12]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	461a      	mov	r2, r3
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	f011 f8d8 	bl	80174a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	425b      	negs	r3, r3
 80062fc:	441a      	add	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d207      	bcs.n	800631e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	425b      	negs	r3, r3
 8006318:	441a      	add	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d105      	bne.n	8006330 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3b01      	subs	r3, #1
 800632e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006338:	697b      	ldr	r3, [r7, #20]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d018      	beq.n	8006386 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	441a      	add	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	429a      	cmp	r2, r3
 800636c:	d303      	bcc.n	8006376 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68d9      	ldr	r1, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	461a      	mov	r2, r3
 8006380:	6838      	ldr	r0, [r7, #0]
 8006382:	f011 f88e 	bl	80174a2 <memcpy>
	}
}
 8006386:	bf00      	nop
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006396:	f001 f9d9 	bl	800774c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063a2:	e011      	b.n	80063c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d012      	beq.n	80063d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3324      	adds	r3, #36	; 0x24
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fcbb 	bl	8006d2c <xTaskRemoveFromEventList>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063bc:	f000 fd8e 	bl	8006edc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dce9      	bgt.n	80063a4 <prvUnlockQueue+0x16>
 80063d0:	e000      	b.n	80063d4 <prvUnlockQueue+0x46>
					break;
 80063d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	22ff      	movs	r2, #255	; 0xff
 80063d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063dc:	f001 f9e4 	bl	80077a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063e0:	f001 f9b4 	bl	800774c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ec:	e011      	b.n	8006412 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d012      	beq.n	800641c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3310      	adds	r3, #16
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fc96 	bl	8006d2c <xTaskRemoveFromEventList>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006406:	f000 fd69 	bl	8006edc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	3b01      	subs	r3, #1
 800640e:	b2db      	uxtb	r3, r3
 8006410:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006416:	2b00      	cmp	r3, #0
 8006418:	dce9      	bgt.n	80063ee <prvUnlockQueue+0x60>
 800641a:	e000      	b.n	800641e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800641c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006426:	f001 f9bf 	bl	80077a8 <vPortExitCritical>
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800643a:	f001 f987 	bl	800774c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006446:	2301      	movs	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e001      	b.n	8006450 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006450:	f001 f9aa 	bl	80077a8 <vPortExitCritical>

	return xReturn;
 8006454:	68fb      	ldr	r3, [r7, #12]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006466:	f001 f971 	bl	800774c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	429a      	cmp	r2, r3
 8006474:	d102      	bne.n	800647c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e001      	b.n	8006480 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006480:	f001 f992 	bl	80077a8 <vPortExitCritical>

	return xReturn;
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e016      	b.n	80064cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800649e:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <vQueueUnregisterQueue+0x50>)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d10b      	bne.n	80064c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80064ae:	4a0c      	ldr	r2, [pc, #48]	; (80064e0 <vQueueUnregisterQueue+0x50>)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2100      	movs	r1, #0
 80064b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80064b8:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <vQueueUnregisterQueue+0x50>)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	2200      	movs	r2, #0
 80064c2:	605a      	str	r2, [r3, #4]
				break;
 80064c4:	e005      	b.n	80064d2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3301      	adds	r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b07      	cmp	r3, #7
 80064d0:	d9e5      	bls.n	800649e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	2000bbb4 	.word	0x2000bbb4

080064e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08e      	sub	sp, #56	; 0x38
 80064e8:	af04      	add	r7, sp, #16
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <xTaskCreateStatic+0x28>
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	623b      	str	r3, [r7, #32]
 800650a:	e7fe      	b.n	800650a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <xTaskCreateStatic+0x42>
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	e7fe      	b.n	8006524 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006526:	2354      	movs	r3, #84	; 0x54
 8006528:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b54      	cmp	r3, #84	; 0x54
 800652e:	d009      	beq.n	8006544 <xTaskCreateStatic+0x60>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	e7fe      	b.n	8006542 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006544:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01e      	beq.n	800658a <xTaskCreateStatic+0xa6>
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01b      	beq.n	800658a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800655a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006564:	2300      	movs	r3, #0
 8006566:	9303      	str	r3, [sp, #12]
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	9302      	str	r3, [sp, #8]
 800656c:	f107 0314 	add.w	r3, r7, #20
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f850 	bl	8006622 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006584:	f000 f8d4 	bl	8006730 <prvAddNewTaskToReadyList>
 8006588:	e001      	b.n	800658e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800658e:	697b      	ldr	r3, [r7, #20]
	}
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	; 0x30
 800659c:	af04      	add	r7, sp, #16
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065a8:	88fb      	ldrh	r3, [r7, #6]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 f9e7 	bl	8007980 <pvPortMalloc>
 80065b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00e      	beq.n	80065d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065ba:	2054      	movs	r0, #84	; 0x54
 80065bc:	f001 f9e0 	bl	8007980 <pvPortMalloc>
 80065c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
 80065ce:	e005      	b.n	80065dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065d0:	6978      	ldr	r0, [r7, #20]
 80065d2:	f001 fa97 	bl	8007b04 <vPortFree>
 80065d6:	e001      	b.n	80065dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d017      	beq.n	8006612 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065ea:	88fa      	ldrh	r2, [r7, #6]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9303      	str	r3, [sp, #12]
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	9302      	str	r3, [sp, #8]
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 f80e 	bl	8006622 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006606:	69f8      	ldr	r0, [r7, #28]
 8006608:	f000 f892 	bl	8006730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800660c:	2301      	movs	r3, #1
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	e002      	b.n	8006618 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006618:	69bb      	ldr	r3, [r7, #24]
	}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b088      	sub	sp, #32
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800663a:	3b01      	subs	r3, #1
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f023 0307 	bic.w	r3, r3, #7
 8006648:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <prvInitialiseNewTask+0x46>
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e7fe      	b.n	8006666 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01f      	beq.n	80066ae <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800666e:	2300      	movs	r3, #0
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	e012      	b.n	800669a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	7819      	ldrb	r1, [r3, #0]
 800667c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	3334      	adds	r3, #52	; 0x34
 8006684:	460a      	mov	r2, r1
 8006686:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d006      	beq.n	80066a2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3301      	adds	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d9e9      	bls.n	8006674 <prvInitialiseNewTask+0x52>
 80066a0:	e000      	b.n	80066a4 <prvInitialiseNewTask+0x82>
			{
				break;
 80066a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066ac:	e003      	b.n	80066b6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	2b06      	cmp	r3, #6
 80066ba:	d901      	bls.n	80066c0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066bc:	2306      	movs	r3, #6
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	2200      	movs	r2, #0
 80066d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	3304      	adds	r3, #4
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fec1 	bl	800545e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	3318      	adds	r3, #24
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe febc 	bl	800545e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	f1c3 0207 	rsb	r2, r3, #7
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	2200      	movs	r2, #0
 8006700:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	68f9      	ldr	r1, [r7, #12]
 800670e:	69b8      	ldr	r0, [r7, #24]
 8006710:	f000 fef6 	bl	8007500 <pxPortInitialiseStack>
 8006714:	4602      	mov	r2, r0
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006726:	bf00      	nop
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006738:	f001 f808 	bl	800774c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800673c:	4b2a      	ldr	r3, [pc, #168]	; (80067e8 <prvAddNewTaskToReadyList+0xb8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <prvAddNewTaskToReadyList+0xb8>)
 8006744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006746:	4b29      	ldr	r3, [pc, #164]	; (80067ec <prvAddNewTaskToReadyList+0xbc>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <prvAddNewTaskToReadyList+0xbc>)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <prvAddNewTaskToReadyList+0xb8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d110      	bne.n	800677e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800675c:	f000 fbe2 	bl	8006f24 <prvInitialiseTaskLists>
 8006760:	e00d      	b.n	800677e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006762:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <prvAddNewTaskToReadyList+0xc0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800676a:	4b20      	ldr	r3, [pc, #128]	; (80067ec <prvAddNewTaskToReadyList+0xbc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	429a      	cmp	r2, r3
 8006776:	d802      	bhi.n	800677e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006778:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <prvAddNewTaskToReadyList+0xbc>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800677e:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <prvAddNewTaskToReadyList+0xc4>)
 8006786:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	2201      	movs	r2, #1
 800678e:	409a      	lsls	r2, r3
 8006790:	4b19      	ldr	r3, [pc, #100]	; (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4313      	orrs	r3, r2
 8006796:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <prvAddNewTaskToReadyList+0xc8>)
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4a15      	ldr	r2, [pc, #84]	; (80067fc <prvAddNewTaskToReadyList+0xcc>)
 80067a8:	441a      	add	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7fe fe61 	bl	8005478 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067b6:	f000 fff7 	bl	80077a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067ba:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <prvAddNewTaskToReadyList+0xc0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <prvAddNewTaskToReadyList+0xbc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d207      	bcs.n	80067e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <prvAddNewTaskToReadyList+0xd0>)
 80067d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000400 	.word	0x20000400
 80067ec:	20000300 	.word	0x20000300
 80067f0:	2000040c 	.word	0x2000040c
 80067f4:	2000041c 	.word	0x2000041c
 80067f8:	20000408 	.word	0x20000408
 80067fc:	20000304 	.word	0x20000304
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <vTaskDelay+0x60>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <vTaskDelay+0x2e>
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	e7fe      	b.n	8006830 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006832:	f000 f879 	bl	8006928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006836:	2100      	movs	r1, #0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fdfb 	bl	8007434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800683e:	f000 f881 	bl	8006944 <xTaskResumeAll>
 8006842:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d107      	bne.n	800685a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800684a:	4b07      	ldr	r3, [pc, #28]	; (8006868 <vTaskDelay+0x64>)
 800684c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000428 	.word	0x20000428
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800687a:	463a      	mov	r2, r7
 800687c:	1d39      	adds	r1, r7, #4
 800687e:	f107 0308 	add.w	r3, r7, #8
 8006882:	4618      	mov	r0, r3
 8006884:	f7f9 fe84 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	9202      	str	r2, [sp, #8]
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	2300      	movs	r3, #0
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	2300      	movs	r3, #0
 8006898:	460a      	mov	r2, r1
 800689a:	491d      	ldr	r1, [pc, #116]	; (8006910 <vTaskStartScheduler+0xa4>)
 800689c:	481d      	ldr	r0, [pc, #116]	; (8006914 <vTaskStartScheduler+0xa8>)
 800689e:	f7ff fe21 	bl	80064e4 <xTaskCreateStatic>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <vTaskStartScheduler+0xac>)
 80068a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068a8:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <vTaskStartScheduler+0xac>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e001      	b.n	80068ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d115      	bne.n	80068ec <vTaskStartScheduler+0x80>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068d2:	4b12      	ldr	r3, [pc, #72]	; (800691c <vTaskStartScheduler+0xb0>)
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295
 80068d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068da:	4b11      	ldr	r3, [pc, #68]	; (8006920 <vTaskStartScheduler+0xb4>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068e0:	4b10      	ldr	r3, [pc, #64]	; (8006924 <vTaskStartScheduler+0xb8>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068e6:	f000 fe93 	bl	8007610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068ea:	e00d      	b.n	8006908 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d109      	bne.n	8006908 <vTaskStartScheduler+0x9c>
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e7fe      	b.n	8006906 <vTaskStartScheduler+0x9a>
}
 8006908:	bf00      	nop
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	080183f4 	.word	0x080183f4
 8006914:	08006ef5 	.word	0x08006ef5
 8006918:	20000424 	.word	0x20000424
 800691c:	20000420 	.word	0x20000420
 8006920:	2000040c 	.word	0x2000040c
 8006924:	20000404 	.word	0x20000404

08006928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <vTaskSuspendAll+0x18>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	4a03      	ldr	r2, [pc, #12]	; (8006940 <vTaskSuspendAll+0x18>)
 8006934:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006936:	bf00      	nop
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	20000428 	.word	0x20000428

08006944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006952:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <xTaskResumeAll+0x114>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <xTaskResumeAll+0x2a>
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	e7fe      	b.n	800696c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800696e:	f000 feed 	bl	800774c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006972:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <xTaskResumeAll+0x114>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4a37      	ldr	r2, [pc, #220]	; (8006a58 <xTaskResumeAll+0x114>)
 800697a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <xTaskResumeAll+0x114>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d161      	bne.n	8006a48 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006984:	4b35      	ldr	r3, [pc, #212]	; (8006a5c <xTaskResumeAll+0x118>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d05d      	beq.n	8006a48 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800698c:	e02e      	b.n	80069ec <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698e:	4b34      	ldr	r3, [pc, #208]	; (8006a60 <xTaskResumeAll+0x11c>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3318      	adds	r3, #24
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe fdc9 	bl	8005532 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fdc4 	bl	8005532 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	2201      	movs	r2, #1
 80069b0:	409a      	lsls	r2, r3
 80069b2:	4b2c      	ldr	r3, [pc, #176]	; (8006a64 <xTaskResumeAll+0x120>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	4a2a      	ldr	r2, [pc, #168]	; (8006a64 <xTaskResumeAll+0x120>)
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4a27      	ldr	r2, [pc, #156]	; (8006a68 <xTaskResumeAll+0x124>)
 80069ca:	441a      	add	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7fe fd50 	bl	8005478 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	4b23      	ldr	r3, [pc, #140]	; (8006a6c <xTaskResumeAll+0x128>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d302      	bcc.n	80069ec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80069e6:	4b22      	ldr	r3, [pc, #136]	; (8006a70 <xTaskResumeAll+0x12c>)
 80069e8:	2201      	movs	r2, #1
 80069ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069ec:	4b1c      	ldr	r3, [pc, #112]	; (8006a60 <xTaskResumeAll+0x11c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1cc      	bne.n	800698e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069fa:	f000 fb2d 	bl	8007058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <xTaskResumeAll+0x130>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d010      	beq.n	8006a2c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a0a:	f000 f859 	bl	8006ac0 <xTaskIncrementTick>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006a14:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <xTaskResumeAll+0x12c>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1f1      	bne.n	8006a0a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <xTaskResumeAll+0x130>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <xTaskResumeAll+0x12c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d009      	beq.n	8006a48 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a38:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <xTaskResumeAll+0x134>)
 8006a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a48:	f000 feae 	bl	80077a8 <vPortExitCritical>

	return xAlreadyYielded;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000428 	.word	0x20000428
 8006a5c:	20000400 	.word	0x20000400
 8006a60:	200003c0 	.word	0x200003c0
 8006a64:	20000408 	.word	0x20000408
 8006a68:	20000304 	.word	0x20000304
 8006a6c:	20000300 	.word	0x20000300
 8006a70:	20000414 	.word	0x20000414
 8006a74:	20000410 	.word	0x20000410
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <xTaskGetTickCount+0x1c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a88:	687b      	ldr	r3, [r7, #4]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	20000404 	.word	0x20000404

08006a9c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006aa2:	f000 ff2f 	bl	8007904 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006aaa:	4b04      	ldr	r3, [pc, #16]	; (8006abc <xTaskGetTickCountFromISR+0x20>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ab0:	683b      	ldr	r3, [r7, #0]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000404 	.word	0x20000404

08006ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b4e      	ldr	r3, [pc, #312]	; (8006c04 <xTaskIncrementTick+0x144>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8087 	bne.w	8006be2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ad4:	4b4c      	ldr	r3, [pc, #304]	; (8006c08 <xTaskIncrementTick+0x148>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006adc:	4a4a      	ldr	r2, [pc, #296]	; (8006c08 <xTaskIncrementTick+0x148>)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11f      	bne.n	8006b28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ae8:	4b48      	ldr	r3, [pc, #288]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <xTaskIncrementTick+0x46>
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	e7fe      	b.n	8006b04 <xTaskIncrementTick+0x44>
 8006b06:	4b41      	ldr	r3, [pc, #260]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3e      	ldr	r2, [pc, #248]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	4a3e      	ldr	r2, [pc, #248]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	4b3e      	ldr	r3, [pc, #248]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	4a3c      	ldr	r2, [pc, #240]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	f000 fa98 	bl	8007058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b28:	4b3b      	ldr	r3, [pc, #236]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d348      	bcc.n	8006bc4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b32:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3c:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	601a      	str	r2, [r3, #0]
					break;
 8006b44:	e03e      	b.n	8006bc4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b46:	4b31      	ldr	r3, [pc, #196]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d203      	bcs.n	8006b66 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b5e:	4a2e      	ldr	r2, [pc, #184]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b64:	e02e      	b.n	8006bc4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe fce1 	bl	8005532 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3318      	adds	r3, #24
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fcd8 	bl	8005532 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	2201      	movs	r2, #1
 8006b88:	409a      	lsls	r2, r3
 8006b8a:	4b24      	ldr	r3, [pc, #144]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	4a22      	ldr	r2, [pc, #136]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006ba2:	441a      	add	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4610      	mov	r0, r2
 8006bac:	f7fe fc64 	bl	8005478 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d3b9      	bcc.n	8006b32 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc2:	e7b6      	b.n	8006b32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bc4:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bca:	4915      	ldr	r1, [pc, #84]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d907      	bls.n	8006bec <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e004      	b.n	8006bec <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006be2:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <xTaskIncrementTick+0x168>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3301      	adds	r3, #1
 8006be8:	4a0f      	ldr	r2, [pc, #60]	; (8006c28 <xTaskIncrementTick+0x168>)
 8006bea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006bec:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <xTaskIncrementTick+0x16c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bf8:	697b      	ldr	r3, [r7, #20]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000428 	.word	0x20000428
 8006c08:	20000404 	.word	0x20000404
 8006c0c:	200003b8 	.word	0x200003b8
 8006c10:	200003bc 	.word	0x200003bc
 8006c14:	20000418 	.word	0x20000418
 8006c18:	20000420 	.word	0x20000420
 8006c1c:	20000408 	.word	0x20000408
 8006c20:	20000304 	.word	0x20000304
 8006c24:	20000300 	.word	0x20000300
 8006c28:	20000410 	.word	0x20000410
 8006c2c:	20000414 	.word	0x20000414

08006c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c36:	4b26      	ldr	r3, [pc, #152]	; (8006cd0 <vTaskSwitchContext+0xa0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c3e:	4b25      	ldr	r3, [pc, #148]	; (8006cd4 <vTaskSwitchContext+0xa4>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c44:	e03e      	b.n	8006cc4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006c46:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <vTaskSwitchContext+0xa4>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <vTaskSwitchContext+0xa8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	fab3 f383 	clz	r3, r3
 8006c58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	f1c3 031f 	rsb	r3, r3, #31
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	491e      	ldr	r1, [pc, #120]	; (8006cdc <vTaskSwitchContext+0xac>)
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	e7fe      	b.n	8006c88 <vTaskSwitchContext+0x58>
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4a11      	ldr	r2, [pc, #68]	; (8006cdc <vTaskSwitchContext+0xac>)
 8006c96:	4413      	add	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	605a      	str	r2, [r3, #4]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	3308      	adds	r3, #8
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d104      	bne.n	8006cba <vTaskSwitchContext+0x8a>
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	605a      	str	r2, [r3, #4]
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4a07      	ldr	r2, [pc, #28]	; (8006ce0 <vTaskSwitchContext+0xb0>)
 8006cc2:	6013      	str	r3, [r2, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	20000428 	.word	0x20000428
 8006cd4:	20000414 	.word	0x20000414
 8006cd8:	20000408 	.word	0x20000408
 8006cdc:	20000304 	.word	0x20000304
 8006ce0:	20000300 	.word	0x20000300

08006ce4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <vTaskPlaceOnEventList+0x24>
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e7fe      	b.n	8006d06 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d08:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <vTaskPlaceOnEventList+0x44>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3318      	adds	r3, #24
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fe fbd5 	bl	80054c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d16:	2101      	movs	r1, #1
 8006d18:	6838      	ldr	r0, [r7, #0]
 8006d1a:	f000 fb8b 	bl	8007434 <prvAddCurrentTaskToDelayedList>
}
 8006d1e:	bf00      	nop
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000300 	.word	0x20000300

08006d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <xTaskRemoveFromEventList+0x2a>
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e7fe      	b.n	8006d54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	3318      	adds	r3, #24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fbe9 	bl	8005532 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d60:	4b1d      	ldr	r3, [pc, #116]	; (8006dd8 <xTaskRemoveFromEventList+0xac>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d11c      	bne.n	8006da2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fbe0 	bl	8005532 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	2201      	movs	r2, #1
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <xTaskRemoveFromEventList+0xb0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <xTaskRemoveFromEventList+0xb0>)
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4a13      	ldr	r2, [pc, #76]	; (8006de0 <xTaskRemoveFromEventList+0xb4>)
 8006d92:	441a      	add	r2, r3
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	f7fe fb6c 	bl	8005478 <vListInsertEnd>
 8006da0:	e005      	b.n	8006dae <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	3318      	adds	r3, #24
 8006da6:	4619      	mov	r1, r3
 8006da8:	480e      	ldr	r0, [pc, #56]	; (8006de4 <xTaskRemoveFromEventList+0xb8>)
 8006daa:	f7fe fb65 	bl	8005478 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <xTaskRemoveFromEventList+0xbc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d905      	bls.n	8006dc8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <xTaskRemoveFromEventList+0xc0>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e001      	b.n	8006dcc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dcc:	697b      	ldr	r3, [r7, #20]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000428 	.word	0x20000428
 8006ddc:	20000408 	.word	0x20000408
 8006de0:	20000304 	.word	0x20000304
 8006de4:	200003c0 	.word	0x200003c0
 8006de8:	20000300 	.word	0x20000300
 8006dec:	20000414 	.word	0x20000414

08006df0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006df8:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <vTaskInternalSetTimeOutState+0x24>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e00:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <vTaskInternalSetTimeOutState+0x28>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	605a      	str	r2, [r3, #4]
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	20000418 	.word	0x20000418
 8006e18:	20000404 	.word	0x20000404

08006e1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d109      	bne.n	8006e40 <xTaskCheckForTimeOut+0x24>
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	e7fe      	b.n	8006e3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <xTaskCheckForTimeOut+0x3e>
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	e7fe      	b.n	8006e58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006e5a:	f000 fc77 	bl	800774c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <xTaskCheckForTimeOut+0xb8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d102      	bne.n	8006e7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	e023      	b.n	8006ec6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <xTaskCheckForTimeOut+0xbc>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d007      	beq.n	8006e9a <xTaskCheckForTimeOut+0x7e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d302      	bcc.n	8006e9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	e015      	b.n	8006ec6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d20b      	bcs.n	8006ebc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	1ad2      	subs	r2, r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff ff9d 	bl	8006df0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	e004      	b.n	8006ec6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ec6:	f000 fc6f 	bl	80077a8 <vPortExitCritical>

	return xReturn;
 8006eca:	69fb      	ldr	r3, [r7, #28]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20000404 	.word	0x20000404
 8006ed8:	20000418 	.word	0x20000418

08006edc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ee0:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <vTaskMissedYield+0x14>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]
}
 8006ee6:	bf00      	nop
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	20000414 	.word	0x20000414

08006ef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006efc:	f000 f852 	bl	8006fa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f00:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <prvIdleTask+0x28>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d9f9      	bls.n	8006efc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <prvIdleTask+0x2c>)
 8006f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f18:	e7f0      	b.n	8006efc <prvIdleTask+0x8>
 8006f1a:	bf00      	nop
 8006f1c:	20000304 	.word	0x20000304
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	607b      	str	r3, [r7, #4]
 8006f2e:	e00c      	b.n	8006f4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4a12      	ldr	r2, [pc, #72]	; (8006f84 <prvInitialiseTaskLists+0x60>)
 8006f3c:	4413      	add	r3, r2
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fa6d 	bl	800541e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3301      	adds	r3, #1
 8006f48:	607b      	str	r3, [r7, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b06      	cmp	r3, #6
 8006f4e:	d9ef      	bls.n	8006f30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f50:	480d      	ldr	r0, [pc, #52]	; (8006f88 <prvInitialiseTaskLists+0x64>)
 8006f52:	f7fe fa64 	bl	800541e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f56:	480d      	ldr	r0, [pc, #52]	; (8006f8c <prvInitialiseTaskLists+0x68>)
 8006f58:	f7fe fa61 	bl	800541e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f5c:	480c      	ldr	r0, [pc, #48]	; (8006f90 <prvInitialiseTaskLists+0x6c>)
 8006f5e:	f7fe fa5e 	bl	800541e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f62:	480c      	ldr	r0, [pc, #48]	; (8006f94 <prvInitialiseTaskLists+0x70>)
 8006f64:	f7fe fa5b 	bl	800541e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f68:	480b      	ldr	r0, [pc, #44]	; (8006f98 <prvInitialiseTaskLists+0x74>)
 8006f6a:	f7fe fa58 	bl	800541e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f6e:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <prvInitialiseTaskLists+0x78>)
 8006f70:	4a05      	ldr	r2, [pc, #20]	; (8006f88 <prvInitialiseTaskLists+0x64>)
 8006f72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f74:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <prvInitialiseTaskLists+0x7c>)
 8006f76:	4a05      	ldr	r2, [pc, #20]	; (8006f8c <prvInitialiseTaskLists+0x68>)
 8006f78:	601a      	str	r2, [r3, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000304 	.word	0x20000304
 8006f88:	20000390 	.word	0x20000390
 8006f8c:	200003a4 	.word	0x200003a4
 8006f90:	200003c0 	.word	0x200003c0
 8006f94:	200003d4 	.word	0x200003d4
 8006f98:	200003ec 	.word	0x200003ec
 8006f9c:	200003b8 	.word	0x200003b8
 8006fa0:	200003bc 	.word	0x200003bc

08006fa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006faa:	e019      	b.n	8006fe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fac:	f000 fbce 	bl	800774c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <prvCheckTasksWaitingTermination+0x4c>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe fab8 	bl	8005532 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <prvCheckTasksWaitingTermination+0x50>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <prvCheckTasksWaitingTermination+0x50>)
 8006fca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <prvCheckTasksWaitingTermination+0x54>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <prvCheckTasksWaitingTermination+0x54>)
 8006fd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fd6:	f000 fbe7 	bl	80077a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f80e 	bl	8006ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <prvCheckTasksWaitingTermination+0x54>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e1      	bne.n	8006fac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fe8:	bf00      	nop
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	200003d4 	.word	0x200003d4
 8006ff4:	20000400 	.word	0x20000400
 8006ff8:	200003e8 	.word	0x200003e8

08006ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800700a:	2b00      	cmp	r3, #0
 800700c:	d108      	bne.n	8007020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fd76 	bl	8007b04 <vPortFree>
				vPortFree( pxTCB );
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fd73 	bl	8007b04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800701e:	e017      	b.n	8007050 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007026:	2b01      	cmp	r3, #1
 8007028:	d103      	bne.n	8007032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fd6a 	bl	8007b04 <vPortFree>
	}
 8007030:	e00e      	b.n	8007050 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007038:	2b02      	cmp	r3, #2
 800703a:	d009      	beq.n	8007050 <prvDeleteTCB+0x54>
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	e7fe      	b.n	800704e <prvDeleteTCB+0x52>
	}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800705e:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <prvResetNextTaskUnblockTime+0x38>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <prvResetNextTaskUnblockTime+0x3c>)
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007070:	e008      	b.n	8007084 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <prvResetNextTaskUnblockTime+0x38>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a04      	ldr	r2, [pc, #16]	; (8007094 <prvResetNextTaskUnblockTime+0x3c>)
 8007082:	6013      	str	r3, [r2, #0]
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	200003b8 	.word	0x200003b8
 8007094:	20000420 	.word	0x20000420

08007098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800709e:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <xTaskGetSchedulerState+0x34>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070a6:	2301      	movs	r3, #1
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	e008      	b.n	80070be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ac:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <xTaskGetSchedulerState+0x38>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070b4:	2302      	movs	r3, #2
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	e001      	b.n	80070be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070ba:	2300      	movs	r3, #0
 80070bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070be:	687b      	ldr	r3, [r7, #4]
	}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	2000040c 	.word	0x2000040c
 80070d0:	20000428 	.word	0x20000428

080070d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d069      	beq.n	80071be <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ee:	4b36      	ldr	r3, [pc, #216]	; (80071c8 <xTaskPriorityInherit+0xf4>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d259      	bcs.n	80071ac <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	db06      	blt.n	800710e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007100:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <xTaskPriorityInherit+0xf4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	f1c3 0207 	rsb	r2, r3, #7
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6959      	ldr	r1, [r3, #20]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <xTaskPriorityInherit+0xf8>)
 8007120:	4413      	add	r3, r2
 8007122:	4299      	cmp	r1, r3
 8007124:	d13a      	bne.n	800719c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	3304      	adds	r3, #4
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fa01 	bl	8005532 <uxListRemove>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d115      	bne.n	8007162 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	4924      	ldr	r1, [pc, #144]	; (80071cc <xTaskPriorityInherit+0xf8>)
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <xTaskPriorityInherit+0x8e>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	2201      	movs	r2, #1
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	43da      	mvns	r2, r3
 8007158:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <xTaskPriorityInherit+0xfc>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4013      	ands	r3, r2
 800715e:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <xTaskPriorityInherit+0xfc>)
 8007160:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007162:	4b19      	ldr	r3, [pc, #100]	; (80071c8 <xTaskPriorityInherit+0xf4>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	2201      	movs	r2, #1
 8007172:	409a      	lsls	r2, r3
 8007174:	4b16      	ldr	r3, [pc, #88]	; (80071d0 <xTaskPriorityInherit+0xfc>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4313      	orrs	r3, r2
 800717a:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <xTaskPriorityInherit+0xfc>)
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	4613      	mov	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4a10      	ldr	r2, [pc, #64]	; (80071cc <xTaskPriorityInherit+0xf8>)
 800718c:	441a      	add	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	3304      	adds	r3, #4
 8007192:	4619      	mov	r1, r3
 8007194:	4610      	mov	r0, r2
 8007196:	f7fe f96f 	bl	8005478 <vListInsertEnd>
 800719a:	e004      	b.n	80071a6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <xTaskPriorityInherit+0xf4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80071a6:	2301      	movs	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	e008      	b.n	80071be <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <xTaskPriorityInherit+0xf4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d201      	bcs.n	80071be <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071be:	68fb      	ldr	r3, [r7, #12]
	}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20000300 	.word	0x20000300
 80071cc:	20000304 	.word	0x20000304
 80071d0:	20000408 	.word	0x20000408

080071d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d06c      	beq.n	80072c4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071ea:	4b39      	ldr	r3, [pc, #228]	; (80072d0 <xTaskPriorityDisinherit+0xfc>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d009      	beq.n	8007208 <xTaskPriorityDisinherit+0x34>
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	e7fe      	b.n	8007206 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720c:	2b00      	cmp	r3, #0
 800720e:	d109      	bne.n	8007224 <xTaskPriorityDisinherit+0x50>
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	e7fe      	b.n	8007222 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007228:	1e5a      	subs	r2, r3, #1
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007236:	429a      	cmp	r2, r3
 8007238:	d044      	beq.n	80072c4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723e:	2b00      	cmp	r3, #0
 8007240:	d140      	bne.n	80072c4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	3304      	adds	r3, #4
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe f973 	bl	8005532 <uxListRemove>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d115      	bne.n	800727e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	491f      	ldr	r1, [pc, #124]	; (80072d4 <xTaskPriorityDisinherit+0x100>)
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <xTaskPriorityDisinherit+0xaa>
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	2201      	movs	r2, #1
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	43da      	mvns	r2, r3
 8007274:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <xTaskPriorityDisinherit+0x104>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4013      	ands	r3, r2
 800727a:	4a17      	ldr	r2, [pc, #92]	; (80072d8 <xTaskPriorityDisinherit+0x104>)
 800727c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	f1c3 0207 	rsb	r2, r3, #7
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	2201      	movs	r2, #1
 8007298:	409a      	lsls	r2, r3
 800729a:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <xTaskPriorityDisinherit+0x104>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4313      	orrs	r3, r2
 80072a0:	4a0d      	ldr	r2, [pc, #52]	; (80072d8 <xTaskPriorityDisinherit+0x104>)
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4a08      	ldr	r2, [pc, #32]	; (80072d4 <xTaskPriorityDisinherit+0x100>)
 80072b2:	441a      	add	r2, r3
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7fe f8dc 	bl	8005478 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072c4:	697b      	ldr	r3, [r7, #20]
	}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000300 	.word	0x20000300
 80072d4:	20000304 	.word	0x20000304
 80072d8:	20000408 	.word	0x20000408

080072dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072ea:	2301      	movs	r3, #1
 80072ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8081 	beq.w	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e7fe      	b.n	8007310 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d902      	bls.n	8007322 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	61fb      	str	r3, [r7, #28]
 8007320:	e002      	b.n	8007328 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	69fa      	ldr	r2, [r7, #28]
 800732e:	429a      	cmp	r2, r3
 8007330:	d062      	beq.n	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	429a      	cmp	r2, r3
 800733a:	d15d      	bne.n	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800733c:	4b30      	ldr	r3, [pc, #192]	; (8007400 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	429a      	cmp	r2, r3
 8007344:	d109      	bne.n	800735a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60bb      	str	r3, [r7, #8]
 8007358:	e7fe      	b.n	8007358 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	2b00      	cmp	r3, #0
 800736c:	db04      	blt.n	8007378 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f1c3 0207 	rsb	r2, r3, #7
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	6959      	ldr	r1, [r3, #20]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007388:	4413      	add	r3, r2
 800738a:	4299      	cmp	r1, r3
 800738c:	d134      	bne.n	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	3304      	adds	r3, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe f8cd 	bl	8005532 <uxListRemove>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d115      	bne.n	80073ca <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	4918      	ldr	r1, [pc, #96]	; (8007404 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <vTaskPriorityDisinheritAfterTimeout+0xee>
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	2201      	movs	r2, #1
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	43da      	mvns	r2, r3
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4013      	ands	r3, r2
 80073c6:	4a10      	ldr	r2, [pc, #64]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80073c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	2201      	movs	r2, #1
 80073d0:	409a      	lsls	r2, r3
 80073d2:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	4a0b      	ldr	r2, [pc, #44]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4a06      	ldr	r2, [pc, #24]	; (8007404 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80073ea:	441a      	add	r2, r3
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7fe f840 	bl	8005478 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073f8:	bf00      	nop
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000300 	.word	0x20000300
 8007404:	20000304 	.word	0x20000304
 8007408:	20000408 	.word	0x20000408

0800740c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <pvTaskIncrementMutexHeldCount+0x24>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007418:	4b05      	ldr	r3, [pc, #20]	; (8007430 <pvTaskIncrementMutexHeldCount+0x24>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800741e:	3201      	adds	r2, #1
 8007420:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007422:	4b03      	ldr	r3, [pc, #12]	; (8007430 <pvTaskIncrementMutexHeldCount+0x24>)
 8007424:	681b      	ldr	r3, [r3, #0]
	}
 8007426:	4618      	mov	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	20000300 	.word	0x20000300

08007434 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800743e:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007444:	4b28      	ldr	r3, [pc, #160]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3304      	adds	r3, #4
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe f871 	bl	8005532 <uxListRemove>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007456:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	2201      	movs	r2, #1
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	43da      	mvns	r2, r3
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4013      	ands	r3, r2
 800746a:	4a20      	ldr	r2, [pc, #128]	; (80074ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800746c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d10a      	bne.n	800748c <prvAddCurrentTaskToDelayedList+0x58>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747c:	4b1a      	ldr	r3, [pc, #104]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3304      	adds	r3, #4
 8007482:	4619      	mov	r1, r3
 8007484:	481a      	ldr	r0, [pc, #104]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007486:	f7fd fff7 	bl	8005478 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800748a:	e026      	b.n	80074da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007494:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d209      	bcs.n	80074b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a4:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	4b0f      	ldr	r3, [pc, #60]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f7fe f805 	bl	80054c0 <vListInsert>
}
 80074b6:	e010      	b.n	80074da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7fd fffb 	bl	80054c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074ca:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d202      	bcs.n	80074da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074d4:	4a09      	ldr	r2, [pc, #36]	; (80074fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6013      	str	r3, [r2, #0]
}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000404 	.word	0x20000404
 80074e8:	20000300 	.word	0x20000300
 80074ec:	20000408 	.word	0x20000408
 80074f0:	200003ec 	.word	0x200003ec
 80074f4:	200003bc 	.word	0x200003bc
 80074f8:	200003b8 	.word	0x200003b8
 80074fc:	20000420 	.word	0x20000420

08007500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3b04      	subs	r3, #4
 8007510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3b04      	subs	r3, #4
 800751e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f023 0201 	bic.w	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3b04      	subs	r3, #4
 800752e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007530:	4a0c      	ldr	r2, [pc, #48]	; (8007564 <pxPortInitialiseStack+0x64>)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3b14      	subs	r3, #20
 800753a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3b04      	subs	r3, #4
 8007546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f06f 0202 	mvn.w	r2, #2
 800754e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3b20      	subs	r3, #32
 8007554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007556:	68fb      	ldr	r3, [r7, #12]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	08007569 	.word	0x08007569

08007568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007572:	4b11      	ldr	r3, [pc, #68]	; (80075b8 <prvTaskExitError+0x50>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d009      	beq.n	8007590 <prvTaskExitError+0x28>
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	e7fe      	b.n	800758e <prvTaskExitError+0x26>
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075a2:	bf00      	nop
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0fc      	beq.n	80075a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075aa:	bf00      	nop
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	2000000c 	.word	0x2000000c
 80075bc:	00000000 	.word	0x00000000

080075c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <pxCurrentTCBConst2>)
 80075c2:	6819      	ldr	r1, [r3, #0]
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f380 8809 	msr	PSP, r0
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8811 	msr	BASEPRI, r0
 80075da:	4770      	bx	lr
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst2>:
 80075e0:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075e8:	4808      	ldr	r0, [pc, #32]	; (800760c <prvPortStartFirstTask+0x24>)
 80075ea:	6800      	ldr	r0, [r0, #0]
 80075ec:	6800      	ldr	r0, [r0, #0]
 80075ee:	f380 8808 	msr	MSP, r0
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f380 8814 	msr	CONTROL, r0
 80075fa:	b662      	cpsie	i
 80075fc:	b661      	cpsie	f
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	df00      	svc	0
 8007608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800760a:	bf00      	nop
 800760c:	e000ed08 	.word	0xe000ed08

08007610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007616:	4b44      	ldr	r3, [pc, #272]	; (8007728 <xPortStartScheduler+0x118>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a44      	ldr	r2, [pc, #272]	; (800772c <xPortStartScheduler+0x11c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d109      	bne.n	8007634 <xPortStartScheduler+0x24>
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	e7fe      	b.n	8007632 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007634:	4b3c      	ldr	r3, [pc, #240]	; (8007728 <xPortStartScheduler+0x118>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a3d      	ldr	r2, [pc, #244]	; (8007730 <xPortStartScheduler+0x120>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d109      	bne.n	8007652 <xPortStartScheduler+0x42>
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	e7fe      	b.n	8007650 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007652:	4b38      	ldr	r3, [pc, #224]	; (8007734 <xPortStartScheduler+0x124>)
 8007654:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	22ff      	movs	r2, #255	; 0xff
 8007662:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007674:	b2da      	uxtb	r2, r3
 8007676:	4b30      	ldr	r3, [pc, #192]	; (8007738 <xPortStartScheduler+0x128>)
 8007678:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <xPortStartScheduler+0x12c>)
 800767c:	2207      	movs	r2, #7
 800767e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007680:	e009      	b.n	8007696 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007682:	4b2e      	ldr	r3, [pc, #184]	; (800773c <xPortStartScheduler+0x12c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3b01      	subs	r3, #1
 8007688:	4a2c      	ldr	r2, [pc, #176]	; (800773c <xPortStartScheduler+0x12c>)
 800768a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	d0ef      	beq.n	8007682 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <xPortStartScheduler+0x12c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1c3 0307 	rsb	r3, r3, #7
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d009      	beq.n	80076c2 <xPortStartScheduler+0xb2>
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	60bb      	str	r3, [r7, #8]
 80076c0:	e7fe      	b.n	80076c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076c2:	4b1e      	ldr	r3, [pc, #120]	; (800773c <xPortStartScheduler+0x12c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	4a1c      	ldr	r2, [pc, #112]	; (800773c <xPortStartScheduler+0x12c>)
 80076ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076cc:	4b1b      	ldr	r3, [pc, #108]	; (800773c <xPortStartScheduler+0x12c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076d4:	4a19      	ldr	r2, [pc, #100]	; (800773c <xPortStartScheduler+0x12c>)
 80076d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <xPortStartScheduler+0x130>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a16      	ldr	r2, [pc, #88]	; (8007740 <xPortStartScheduler+0x130>)
 80076e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <xPortStartScheduler+0x130>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a13      	ldr	r2, [pc, #76]	; (8007740 <xPortStartScheduler+0x130>)
 80076f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076f8:	f000 f8d6 	bl	80078a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076fc:	4b11      	ldr	r3, [pc, #68]	; (8007744 <xPortStartScheduler+0x134>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007702:	f000 f8f5 	bl	80078f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <xPortStartScheduler+0x138>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a0f      	ldr	r2, [pc, #60]	; (8007748 <xPortStartScheduler+0x138>)
 800770c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007710:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007712:	f7ff ff69 	bl	80075e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007716:	f7ff fa8b 	bl	8006c30 <vTaskSwitchContext>
	prvTaskExitError();
 800771a:	f7ff ff25 	bl	8007568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	e000ed00 	.word	0xe000ed00
 800772c:	410fc271 	.word	0x410fc271
 8007730:	410fc270 	.word	0x410fc270
 8007734:	e000e400 	.word	0xe000e400
 8007738:	2000042c 	.word	0x2000042c
 800773c:	20000430 	.word	0x20000430
 8007740:	e000ed20 	.word	0xe000ed20
 8007744:	2000000c 	.word	0x2000000c
 8007748:	e000ef34 	.word	0xe000ef34

0800774c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <vPortEnterCritical+0x54>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	4a0d      	ldr	r2, [pc, #52]	; (80077a0 <vPortEnterCritical+0x54>)
 800776c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800776e:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <vPortEnterCritical+0x54>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10e      	bne.n	8007794 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007776:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <vPortEnterCritical+0x58>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <vPortEnterCritical+0x48>
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	603b      	str	r3, [r7, #0]
 8007792:	e7fe      	b.n	8007792 <vPortEnterCritical+0x46>
	}
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	2000000c 	.word	0x2000000c
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <vPortExitCritical+0x4c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <vPortExitCritical+0x22>
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	e7fe      	b.n	80077c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80077ca:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <vPortExitCritical+0x4c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	4a08      	ldr	r2, [pc, #32]	; (80077f4 <vPortExitCritical+0x4c>)
 80077d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077d4:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <vPortExitCritical+0x4c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <vPortExitCritical+0x3e>
 80077dc:	2300      	movs	r3, #0
 80077de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000000c 	.word	0x2000000c
	...

08007800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007800:	f3ef 8009 	mrs	r0, PSP
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <pxCurrentTCBConst>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	f01e 0f10 	tst.w	lr, #16
 8007810:	bf08      	it	eq
 8007812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007824:	f380 8811 	msr	BASEPRI, r0
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f7ff f9fe 	bl	8006c30 <vTaskSwitchContext>
 8007834:	f04f 0000 	mov.w	r0, #0
 8007838:	f380 8811 	msr	BASEPRI, r0
 800783c:	bc09      	pop	{r0, r3}
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	6808      	ldr	r0, [r1, #0]
 8007842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007846:	f01e 0f10 	tst.w	lr, #16
 800784a:	bf08      	it	eq
 800784c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007850:	f380 8809 	msr	PSP, r0
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst>:
 8007860:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007880:	f7ff f91e 	bl	8006ac0 <xTaskIncrementTick>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800788a:	4b06      	ldr	r3, [pc, #24]	; (80078a4 <SysTick_Handler+0x3c>)
 800788c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	2300      	movs	r3, #0
 8007894:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078ac:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <vPortSetupTimerInterrupt+0x34>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078b2:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <vPortSetupTimerInterrupt+0x38>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <vPortSetupTimerInterrupt+0x3c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a0a      	ldr	r2, [pc, #40]	; (80078e8 <vPortSetupTimerInterrupt+0x40>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	4a09      	ldr	r2, [pc, #36]	; (80078ec <vPortSetupTimerInterrupt+0x44>)
 80078c6:	3b01      	subs	r3, #1
 80078c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <vPortSetupTimerInterrupt+0x34>)
 80078cc:	2207      	movs	r2, #7
 80078ce:	601a      	str	r2, [r3, #0]
}
 80078d0:	bf00      	nop
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	e000e010 	.word	0xe000e010
 80078e0:	e000e018 	.word	0xe000e018
 80078e4:	20000000 	.word	0x20000000
 80078e8:	10624dd3 	.word	0x10624dd3
 80078ec:	e000e014 	.word	0xe000e014

080078f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007900 <vPortEnableVFP+0x10>
 80078f4:	6801      	ldr	r1, [r0, #0]
 80078f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078fa:	6001      	str	r1, [r0, #0]
 80078fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078fe:	bf00      	nop
 8007900:	e000ed88 	.word	0xe000ed88

08007904 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800790a:	f3ef 8305 	mrs	r3, IPSR
 800790e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b0f      	cmp	r3, #15
 8007914:	d913      	bls.n	800793e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007916:	4a16      	ldr	r2, [pc, #88]	; (8007970 <vPortValidateInterruptPriority+0x6c>)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007920:	4b14      	ldr	r3, [pc, #80]	; (8007974 <vPortValidateInterruptPriority+0x70>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	7afa      	ldrb	r2, [r7, #11]
 8007926:	429a      	cmp	r2, r3
 8007928:	d209      	bcs.n	800793e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	607b      	str	r3, [r7, #4]
 800793c:	e7fe      	b.n	800793c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800793e:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <vPortValidateInterruptPriority+0x74>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007946:	4b0d      	ldr	r3, [pc, #52]	; (800797c <vPortValidateInterruptPriority+0x78>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d909      	bls.n	8007962 <vPortValidateInterruptPriority+0x5e>
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	e7fe      	b.n	8007960 <vPortValidateInterruptPriority+0x5c>
	}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	e000e3f0 	.word	0xe000e3f0
 8007974:	2000042c 	.word	0x2000042c
 8007978:	e000ed0c 	.word	0xe000ed0c
 800797c:	20000430 	.word	0x20000430

08007980 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800798c:	f7fe ffcc 	bl	8006928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007990:	4b57      	ldr	r3, [pc, #348]	; (8007af0 <pvPortMalloc+0x170>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007998:	f000 f90c 	bl	8007bb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800799c:	4b55      	ldr	r3, [pc, #340]	; (8007af4 <pvPortMalloc+0x174>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4013      	ands	r3, r2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 808c 	bne.w	8007ac2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01c      	beq.n	80079ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80079b0:	2208      	movs	r2, #8
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d013      	beq.n	80079ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f023 0307 	bic.w	r3, r3, #7
 80079c8:	3308      	adds	r3, #8
 80079ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <pvPortMalloc+0x6a>
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e7fe      	b.n	80079e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d068      	beq.n	8007ac2 <pvPortMalloc+0x142>
 80079f0:	4b41      	ldr	r3, [pc, #260]	; (8007af8 <pvPortMalloc+0x178>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d863      	bhi.n	8007ac2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079fa:	4b40      	ldr	r3, [pc, #256]	; (8007afc <pvPortMalloc+0x17c>)
 80079fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079fe:	4b3f      	ldr	r3, [pc, #252]	; (8007afc <pvPortMalloc+0x17c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a04:	e004      	b.n	8007a10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d903      	bls.n	8007a22 <pvPortMalloc+0xa2>
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f1      	bne.n	8007a06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a22:	4b33      	ldr	r3, [pc, #204]	; (8007af0 <pvPortMalloc+0x170>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d04a      	beq.n	8007ac2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2208      	movs	r2, #8
 8007a32:	4413      	add	r3, r2
 8007a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	1ad2      	subs	r2, r2, r3
 8007a46:	2308      	movs	r3, #8
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d91e      	bls.n	8007a8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <pvPortMalloc+0xf4>
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	e7fe      	b.n	8007a72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a86:	69b8      	ldr	r0, [r7, #24]
 8007a88:	f000 f8f6 	bl	8007c78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a8c:	4b1a      	ldr	r3, [pc, #104]	; (8007af8 <pvPortMalloc+0x178>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	4a18      	ldr	r2, [pc, #96]	; (8007af8 <pvPortMalloc+0x178>)
 8007a98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a9a:	4b17      	ldr	r3, [pc, #92]	; (8007af8 <pvPortMalloc+0x178>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <pvPortMalloc+0x180>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d203      	bcs.n	8007aae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <pvPortMalloc+0x178>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <pvPortMalloc+0x180>)
 8007aac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <pvPortMalloc+0x174>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ac2:	f7fe ff3f 	bl	8006944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <pvPortMalloc+0x164>
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e7fe      	b.n	8007ae2 <pvPortMalloc+0x162>
	return pvReturn;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3728      	adds	r7, #40	; 0x28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	2000843c 	.word	0x2000843c
 8007af4:	20008448 	.word	0x20008448
 8007af8:	20008440 	.word	0x20008440
 8007afc:	20008434 	.word	0x20008434
 8007b00:	20008444 	.word	0x20008444

08007b04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d046      	beq.n	8007ba4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b16:	2308      	movs	r3, #8
 8007b18:	425b      	negs	r3, r3
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	4b20      	ldr	r3, [pc, #128]	; (8007bac <vPortFree+0xa8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <vPortFree+0x42>
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e7fe      	b.n	8007b44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <vPortFree+0x5e>
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	60bb      	str	r3, [r7, #8]
 8007b60:	e7fe      	b.n	8007b60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	4b11      	ldr	r3, [pc, #68]	; (8007bac <vPortFree+0xa8>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d019      	beq.n	8007ba4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d115      	bne.n	8007ba4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <vPortFree+0xa8>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	43db      	mvns	r3, r3
 8007b82:	401a      	ands	r2, r3
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b88:	f7fe fece 	bl	8006928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <vPortFree+0xac>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4413      	add	r3, r2
 8007b96:	4a06      	ldr	r2, [pc, #24]	; (8007bb0 <vPortFree+0xac>)
 8007b98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b9a:	6938      	ldr	r0, [r7, #16]
 8007b9c:	f000 f86c 	bl	8007c78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ba0:	f7fe fed0 	bl	8006944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ba4:	bf00      	nop
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20008448 	.word	0x20008448
 8007bb0:	20008440 	.word	0x20008440

08007bb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007bc0:	4b27      	ldr	r3, [pc, #156]	; (8007c60 <prvHeapInit+0xac>)
 8007bc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00c      	beq.n	8007be8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3307      	adds	r3, #7
 8007bd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0307 	bic.w	r3, r3, #7
 8007bda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	4a1f      	ldr	r2, [pc, #124]	; (8007c60 <prvHeapInit+0xac>)
 8007be4:	4413      	add	r3, r2
 8007be6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bec:	4a1d      	ldr	r2, [pc, #116]	; (8007c64 <prvHeapInit+0xb0>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bf2:	4b1c      	ldr	r3, [pc, #112]	; (8007c64 <prvHeapInit+0xb0>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c00:	2208      	movs	r2, #8
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1a9b      	subs	r3, r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0307 	bic.w	r3, r3, #7
 8007c0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <prvHeapInit+0xb4>)
 8007c14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c16:	4b14      	ldr	r3, [pc, #80]	; (8007c68 <prvHeapInit+0xb4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c1e:	4b12      	ldr	r3, [pc, #72]	; (8007c68 <prvHeapInit+0xb4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	1ad2      	subs	r2, r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c34:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <prvHeapInit+0xb4>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	4a0a      	ldr	r2, [pc, #40]	; (8007c6c <prvHeapInit+0xb8>)
 8007c42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	4a09      	ldr	r2, [pc, #36]	; (8007c70 <prvHeapInit+0xbc>)
 8007c4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c4c:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <prvHeapInit+0xc0>)
 8007c4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c52:	601a      	str	r2, [r3, #0]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	20000434 	.word	0x20000434
 8007c64:	20008434 	.word	0x20008434
 8007c68:	2000843c 	.word	0x2000843c
 8007c6c:	20008444 	.word	0x20008444
 8007c70:	20008440 	.word	0x20008440
 8007c74:	20008448 	.word	0x20008448

08007c78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c80:	4b28      	ldr	r3, [pc, #160]	; (8007d24 <prvInsertBlockIntoFreeList+0xac>)
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e002      	b.n	8007c8c <prvInsertBlockIntoFreeList+0x14>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d8f7      	bhi.n	8007c86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d108      	bne.n	8007cba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	441a      	add	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	441a      	add	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d118      	bne.n	8007d00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <prvInsertBlockIntoFreeList+0xb0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d00d      	beq.n	8007cf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	441a      	add	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e008      	b.n	8007d08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <prvInsertBlockIntoFreeList+0xb0>)
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e003      	b.n	8007d08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d002      	beq.n	8007d16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d16:	bf00      	nop
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20008434 	.word	0x20008434
 8007d28:	2000843c 	.word	0x2000843c

08007d2c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f002 fa99 	bl	800a278 <tcpip_send_msg_wait_sem>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007d58:	e001      	b.n	8007d5e <netconn_apimsg+0x32>
  }
  return err;
 8007d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08c      	sub	sp, #48	; 0x30
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	603a      	str	r2, [r7, #0]
 8007d72:	71fb      	strb	r3, [r7, #7]
 8007d74:	460b      	mov	r3, r1
 8007d76:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f91f 	bl	8008fc0 <netconn_alloc>
 8007d82:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d054      	beq.n	8007e34 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007d8a:	79bb      	ldrb	r3, [r7, #6]
 8007d8c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007d92:	f107 0308 	add.w	r3, r7, #8
 8007d96:	4619      	mov	r1, r3
 8007d98:	4829      	ldr	r0, [pc, #164]	; (8007e40 <netconn_new_with_proto_and_callback+0xd8>)
 8007d9a:	f7ff ffc7 	bl	8007d2c <netconn_apimsg>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007da4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d043      	beq.n	8007e34 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <netconn_new_with_proto_and_callback+0x58>
 8007db4:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <netconn_new_with_proto_and_callback+0xdc>)
 8007db6:	22a3      	movs	r2, #163	; 0xa3
 8007db8:	4923      	ldr	r1, [pc, #140]	; (8007e48 <netconn_new_with_proto_and_callback+0xe0>)
 8007dba:	4824      	ldr	r0, [pc, #144]	; (8007e4c <netconn_new_with_proto_and_callback+0xe4>)
 8007dbc:	f00f fb84 	bl	80174c8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	3310      	adds	r3, #16
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f00f fa00 	bl	80171ca <sys_mbox_valid>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d105      	bne.n	8007ddc <netconn_new_with_proto_and_callback+0x74>
 8007dd0:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <netconn_new_with_proto_and_callback+0xdc>)
 8007dd2:	22a4      	movs	r2, #164	; 0xa4
 8007dd4:	491e      	ldr	r1, [pc, #120]	; (8007e50 <netconn_new_with_proto_and_callback+0xe8>)
 8007dd6:	481d      	ldr	r0, [pc, #116]	; (8007e4c <netconn_new_with_proto_and_callback+0xe4>)
 8007dd8:	f00f fb76 	bl	80174c8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	3314      	adds	r3, #20
 8007de0:	4618      	mov	r0, r3
 8007de2:	f00f f9f2 	bl	80171ca <sys_mbox_valid>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <netconn_new_with_proto_and_callback+0x90>
 8007dec:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <netconn_new_with_proto_and_callback+0xdc>)
 8007dee:	22a6      	movs	r2, #166	; 0xa6
 8007df0:	4918      	ldr	r1, [pc, #96]	; (8007e54 <netconn_new_with_proto_and_callback+0xec>)
 8007df2:	4816      	ldr	r0, [pc, #88]	; (8007e4c <netconn_new_with_proto_and_callback+0xe4>)
 8007df4:	f00f fb68 	bl	80174c8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f00f fa75 	bl	80172ec <sys_sem_valid>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d105      	bne.n	8007e14 <netconn_new_with_proto_and_callback+0xac>
 8007e08:	4b0e      	ldr	r3, [pc, #56]	; (8007e44 <netconn_new_with_proto_and_callback+0xdc>)
 8007e0a:	22a9      	movs	r2, #169	; 0xa9
 8007e0c:	4912      	ldr	r1, [pc, #72]	; (8007e58 <netconn_new_with_proto_and_callback+0xf0>)
 8007e0e:	480f      	ldr	r0, [pc, #60]	; (8007e4c <netconn_new_with_proto_and_callback+0xe4>)
 8007e10:	f00f fb5a 	bl	80174c8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	330c      	adds	r3, #12
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f00f fa5a 	bl	80172d2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e20:	3310      	adds	r3, #16
 8007e22:	4618      	mov	r0, r3
 8007e24:	f00f f94a 	bl	80170bc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e2a:	2007      	movs	r0, #7
 8007e2c:	f002 ff8c 	bl	800ad48 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e000      	b.n	8007e36 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3730      	adds	r7, #48	; 0x30
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	08008f95 	.word	0x08008f95
 8007e44:	080183fc 	.word	0x080183fc
 8007e48:	08018430 	.word	0x08018430
 8007e4c:	08018454 	.word	0x08018454
 8007e50:	0801847c 	.word	0x0801847c
 8007e54:	08018494 	.word	0x08018494
 8007e58:	080184b8 	.word	0x080184b8

08007e5c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08c      	sub	sp, #48	; 0x30
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e014      	b.n	8007e98 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007e72:	2329      	movs	r3, #41	; 0x29
 8007e74:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007e76:	f107 030c 	add.w	r3, r7, #12
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4808      	ldr	r0, [pc, #32]	; (8007ea0 <netconn_prepare_delete+0x44>)
 8007e7e:	f7ff ff55 	bl	8007d2c <netconn_apimsg>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007e88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <netconn_prepare_delete+0x3a>
    return err;
 8007e90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e94:	e000      	b.n	8007e98 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3730      	adds	r7, #48	; 0x30
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	080094f9 	.word	0x080094f9

08007ea4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <netconn_delete+0x12>
    return ERR_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e00d      	b.n	8007ed2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff ffd0 	bl	8007e5c <netconn_prepare_delete>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <netconn_delete+0x2a>
    netconn_free(conn);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 f8e7 	bl	800909c <netconn_free>
  }
  return err;
 8007ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08e      	sub	sp, #56	; 0x38
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d109      	bne.n	8007f04 <netconn_bind+0x28>
 8007ef0:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <netconn_bind+0x5c>)
 8007ef2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007ef6:	4911      	ldr	r1, [pc, #68]	; (8007f3c <netconn_bind+0x60>)
 8007ef8:	4811      	ldr	r0, [pc, #68]	; (8007f40 <netconn_bind+0x64>)
 8007efa:	f00f fae5 	bl	80174c8 <iprintf>
 8007efe:	f06f 030f 	mvn.w	r3, #15
 8007f02:	e015      	b.n	8007f30 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007f0a:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <netconn_bind+0x68>)
 8007f0c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007f1a:	f107 0314 	add.w	r3, r7, #20
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4809      	ldr	r0, [pc, #36]	; (8007f48 <netconn_bind+0x6c>)
 8007f22:	f7ff ff03 	bl	8007d2c <netconn_apimsg>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007f2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3738      	adds	r7, #56	; 0x38
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	080183fc 	.word	0x080183fc
 8007f3c:	08018534 	.word	0x08018534
 8007f40:	08018454 	.word	0x08018454
 8007f44:	0801bda8 	.word	0x0801bda8
 8007f48:	080096c1 	.word	0x080096c1

08007f4c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08c      	sub	sp, #48	; 0x30
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <netconn_listen_with_backlog+0x26>
 8007f5e:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <netconn_listen_with_backlog+0x48>)
 8007f60:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007f64:	490c      	ldr	r1, [pc, #48]	; (8007f98 <netconn_listen_with_backlog+0x4c>)
 8007f66:	480d      	ldr	r0, [pc, #52]	; (8007f9c <netconn_listen_with_backlog+0x50>)
 8007f68:	f00f faae 	bl	80174c8 <iprintf>
 8007f6c:	f06f 030f 	mvn.w	r3, #15
 8007f70:	e00c      	b.n	8007f8c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007f76:	f107 030c 	add.w	r3, r7, #12
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4808      	ldr	r0, [pc, #32]	; (8007fa0 <netconn_listen_with_backlog+0x54>)
 8007f7e:	f7ff fed5 	bl	8007d2c <netconn_apimsg>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007f88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3730      	adds	r7, #48	; 0x30
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	080183fc 	.word	0x080183fc
 8007f98:	080185b4 	.word	0x080185b4
 8007f9c:	08018454 	.word	0x08018454
 8007fa0:	08009739 	.word	0x08009739

08007fa4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d109      	bne.n	8007fc8 <netconn_accept+0x24>
 8007fb4:	4b3d      	ldr	r3, [pc, #244]	; (80080ac <netconn_accept+0x108>)
 8007fb6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007fba:	493d      	ldr	r1, [pc, #244]	; (80080b0 <netconn_accept+0x10c>)
 8007fbc:	483d      	ldr	r0, [pc, #244]	; (80080b4 <netconn_accept+0x110>)
 8007fbe:	f00f fa83 	bl	80174c8 <iprintf>
 8007fc2:	f06f 030f 	mvn.w	r3, #15
 8007fc6:	e06c      	b.n	80080a2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <netconn_accept+0x44>
 8007fd4:	4b35      	ldr	r3, [pc, #212]	; (80080ac <netconn_accept+0x108>)
 8007fd6:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007fda:	4937      	ldr	r1, [pc, #220]	; (80080b8 <netconn_accept+0x114>)
 8007fdc:	4835      	ldr	r0, [pc, #212]	; (80080b4 <netconn_accept+0x110>)
 8007fde:	f00f fa73 	bl	80174c8 <iprintf>
 8007fe2:	f06f 030f 	mvn.w	r3, #15
 8007fe6:	e05c      	b.n	80080a2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fb6c 	bl	80086c6 <netconn_err>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007ff2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007ffa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ffe:	e050      	b.n	80080a2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3314      	adds	r3, #20
 8008004:	4618      	mov	r0, r3
 8008006:	f00f f8e0 	bl	80171ca <sys_mbox_valid>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <netconn_accept+0x78>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	7f1b      	ldrb	r3, [r3, #28]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800801c:	f06f 030e 	mvn.w	r3, #14
 8008020:	e03f      	b.n	80080a2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7f1b      	ldrb	r3, [r3, #28]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00e      	beq.n	800804c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3314      	adds	r3, #20
 8008032:	f107 020c 	add.w	r2, r7, #12
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f00f f8aa 	bl	8017192 <sys_arch_mbox_tryfetch>
 800803e:	4603      	mov	r3, r0
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d10a      	bne.n	800805c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008046:	f06f 0306 	mvn.w	r3, #6
 800804a:	e02a      	b.n	80080a2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3314      	adds	r3, #20
 8008050:	f107 010c 	add.w	r1, r7, #12
 8008054:	2200      	movs	r2, #0
 8008056:	4618      	mov	r0, r3
 8008058:	f00f f85c 	bl	8017114 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <netconn_accept+0xcc>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	2200      	movs	r2, #0
 800806a:	2101      	movs	r1, #1
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f107 0213 	add.w	r2, r7, #19
 8008076:	4611      	mov	r1, r2
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fb71 	bl	8008760 <lwip_netconn_is_err_msg>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008084:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008088:	e00b      	b.n	80080a2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008090:	f06f 030e 	mvn.w	r3, #14
 8008094:	e005      	b.n	80080a2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80080a0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	080183fc 	.word	0x080183fc
 80080b0:	080185d4 	.word	0x080185d4
 80080b4:	08018454 	.word	0x08018454
 80080b8:	080185f4 	.word	0x080185f4

080080bc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <netconn_recv_data+0x2c>
 80080d4:	4b58      	ldr	r3, [pc, #352]	; (8008238 <netconn_recv_data+0x17c>)
 80080d6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80080da:	4958      	ldr	r1, [pc, #352]	; (800823c <netconn_recv_data+0x180>)
 80080dc:	4858      	ldr	r0, [pc, #352]	; (8008240 <netconn_recv_data+0x184>)
 80080de:	f00f f9f3 	bl	80174c8 <iprintf>
 80080e2:	f06f 030f 	mvn.w	r3, #15
 80080e6:	e0a2      	b.n	800822e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d109      	bne.n	8008108 <netconn_recv_data+0x4c>
 80080f4:	4b50      	ldr	r3, [pc, #320]	; (8008238 <netconn_recv_data+0x17c>)
 80080f6:	f240 224a 	movw	r2, #586	; 0x24a
 80080fa:	4952      	ldr	r1, [pc, #328]	; (8008244 <netconn_recv_data+0x188>)
 80080fc:	4850      	ldr	r0, [pc, #320]	; (8008240 <netconn_recv_data+0x184>)
 80080fe:	f00f f9e3 	bl	80174c8 <iprintf>
 8008102:	f06f 030f 	mvn.w	r3, #15
 8008106:	e092      	b.n	800822e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3310      	adds	r3, #16
 800810c:	4618      	mov	r0, r3
 800810e:	f00f f85c 	bl	80171ca <sys_mbox_valid>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10e      	bne.n	8008136 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fad4 	bl	80086c6 <netconn_err>
 800811e:	4603      	mov	r3, r0
 8008120:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008122:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800812a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800812e:	e07e      	b.n	800822e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008130:	f06f 030a 	mvn.w	r3, #10
 8008134:	e07b      	b.n	800822e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	7f1b      	ldrb	r3, [r3, #28]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10f      	bne.n	8008162 <netconn_recv_data+0xa6>
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	7f1b      	ldrb	r3, [r3, #28]
 8008150:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d023      	beq.n	80081aa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3310      	adds	r3, #16
 8008166:	f107 0218 	add.w	r2, r7, #24
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f00f f810 	bl	8017192 <sys_arch_mbox_tryfetch>
 8008172:	4603      	mov	r3, r0
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d11f      	bne.n	80081ba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 faa3 	bl	80086c6 <netconn_err>
 8008180:	4603      	mov	r3, r0
 8008182:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008184:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800818c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008190:	e04d      	b.n	800822e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	7f1b      	ldrb	r3, [r3, #28]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800819e:	f06f 030a 	mvn.w	r3, #10
 80081a2:	e044      	b.n	800822e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80081a4:	f06f 0306 	mvn.w	r3, #6
 80081a8:	e041      	b.n	800822e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3310      	adds	r3, #16
 80081ae:	f107 0118 	add.w	r1, r7, #24
 80081b2:	2200      	movs	r2, #0
 80081b4:	4618      	mov	r0, r3
 80081b6:	f00e ffad 	bl	8017114 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081c2:	2b10      	cmp	r3, #16
 80081c4:	d117      	bne.n	80081f6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	f107 0217 	add.w	r2, r7, #23
 80081cc:	4611      	mov	r1, r2
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fac6 	bl	8008760 <lwip_netconn_is_err_msg>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80081da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081de:	f113 0f0f 	cmn.w	r3, #15
 80081e2:	d101      	bne.n	80081e8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	e022      	b.n	800822e <netconn_recv_data+0x172>
      }
      return err;
 80081e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081ec:	e01f      	b.n	800822e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	891b      	ldrh	r3, [r3, #8]
 80081f2:	83fb      	strh	r3, [r7, #30]
 80081f4:	e00d      	b.n	8008212 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d106      	bne.n	800820a <netconn_recv_data+0x14e>
 80081fc:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <netconn_recv_data+0x17c>)
 80081fe:	f240 2291 	movw	r2, #657	; 0x291
 8008202:	4911      	ldr	r1, [pc, #68]	; (8008248 <netconn_recv_data+0x18c>)
 8008204:	480e      	ldr	r0, [pc, #56]	; (8008240 <netconn_recv_data+0x184>)
 8008206:	f00f f95f 	bl	80174c8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	891b      	ldrh	r3, [r3, #8]
 8008210:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <netconn_recv_data+0x16a>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	8bfa      	ldrh	r2, [r7, #30]
 8008220:	2101      	movs	r1, #1
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	080183fc 	.word	0x080183fc
 800823c:	08018614 	.word	0x08018614
 8008240:	08018454 	.word	0x08018454
 8008244:	08018634 	.word	0x08018634
 8008248:	08018650 	.word	0x08018650

0800824c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <netconn_tcp_recvd_msg+0x1e>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008266:	2b10      	cmp	r3, #16
 8008268:	d009      	beq.n	800827e <netconn_tcp_recvd_msg+0x32>
 800826a:	4b0c      	ldr	r3, [pc, #48]	; (800829c <netconn_tcp_recvd_msg+0x50>)
 800826c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008270:	490b      	ldr	r1, [pc, #44]	; (80082a0 <netconn_tcp_recvd_msg+0x54>)
 8008272:	480c      	ldr	r0, [pc, #48]	; (80082a4 <netconn_tcp_recvd_msg+0x58>)
 8008274:	f00f f928 	bl	80174c8 <iprintf>
 8008278:	f06f 030f 	mvn.w	r3, #15
 800827c:	e00a      	b.n	8008294 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4806      	ldr	r0, [pc, #24]	; (80082a8 <netconn_tcp_recvd_msg+0x5c>)
 800828e:	f7ff fd4d 	bl	8007d2c <netconn_apimsg>
 8008292:	4603      	mov	r3, r0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	080183fc 	.word	0x080183fc
 80082a0:	0801865c 	.word	0x0801865c
 80082a4:	08018454 	.word	0x08018454
 80082a8:	08009869 	.word	0x08009869

080082ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b090      	sub	sp, #64	; 0x40
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	4613      	mov	r3, r2
 80082b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3310      	adds	r3, #16
 80082be:	4618      	mov	r0, r3
 80082c0:	f00e ff83 	bl	80171ca <sys_mbox_valid>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80082ca:	f06f 030a 	mvn.w	r3, #10
 80082ce:	e06d      	b.n	80083ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	7f1b      	ldrb	r3, [r3, #28]
 80082d4:	b25b      	sxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da07      	bge.n	80082ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	7f1b      	ldrb	r3, [r3, #28]
 80082de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80082e8:	e039      	b.n	800835e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	461a      	mov	r2, r3
 80082ee:	68b9      	ldr	r1, [r7, #8]
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff fee3 	bl	80080bc <netconn_recv_data>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80082fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008304:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008308:	e050      	b.n	80083ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10e      	bne.n	8008338 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <netconn_recv_data_tcp+0x7a>
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	891b      	ldrh	r3, [r3, #8]
 8008324:	e000      	b.n	8008328 <netconn_recv_data_tcp+0x7c>
 8008326:	2301      	movs	r3, #1
 8008328:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800832a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800832c:	f107 0214 	add.w	r2, r7, #20
 8008330:	4619      	mov	r1, r3
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff ff8a 	bl	800824c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	2b00      	cmp	r3, #0
 800833c:	d134      	bne.n	80083a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	f003 0310 	and.w	r3, r3, #16
 8008344:	2b00      	cmp	r3, #0
 8008346:	d009      	beq.n	800835c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	7f1b      	ldrb	r3, [r3, #28]
 800834c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008350:	b2da      	uxtb	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008356:	f06f 0306 	mvn.w	r3, #6
 800835a:	e027      	b.n	80083ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800835c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <netconn_recv_data_tcp+0xc6>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2200      	movs	r2, #0
 800836c:	2101      	movs	r1, #1
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10f      	bne.n	800839a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f9a3 	bl	80086c6 <netconn_err>
 8008380:	4603      	mov	r3, r0
 8008382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008386:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <netconn_recv_data_tcp+0xe8>
          return err;
 800838e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008392:	e00b      	b.n	80083ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008394:	f06f 030d 	mvn.w	r3, #13
 8008398:	e008      	b.n	80083ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800839a:	2101      	movs	r1, #1
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f955 	bl	800864c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80083a2:	f06f 030e 	mvn.w	r3, #14
 80083a6:	e001      	b.n	80083ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80083a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3740      	adds	r7, #64	; 0x40
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d109      	bne.n	80083dc <netconn_recv+0x28>
 80083c8:	4b32      	ldr	r3, [pc, #200]	; (8008494 <netconn_recv+0xe0>)
 80083ca:	f240 3263 	movw	r2, #867	; 0x363
 80083ce:	4932      	ldr	r1, [pc, #200]	; (8008498 <netconn_recv+0xe4>)
 80083d0:	4832      	ldr	r0, [pc, #200]	; (800849c <netconn_recv+0xe8>)
 80083d2:	f00f f879 	bl	80174c8 <iprintf>
 80083d6:	f06f 030f 	mvn.w	r3, #15
 80083da:	e056      	b.n	800848a <netconn_recv+0xd6>
  *new_buf = NULL;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <netconn_recv+0x48>
 80083e8:	4b2a      	ldr	r3, [pc, #168]	; (8008494 <netconn_recv+0xe0>)
 80083ea:	f240 3265 	movw	r2, #869	; 0x365
 80083ee:	492c      	ldr	r1, [pc, #176]	; (80084a0 <netconn_recv+0xec>)
 80083f0:	482a      	ldr	r0, [pc, #168]	; (800849c <netconn_recv+0xe8>)
 80083f2:	f00f f869 	bl	80174c8 <iprintf>
 80083f6:	f06f 030f 	mvn.w	r3, #15
 80083fa:	e046      	b.n	800848a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008404:	2b10      	cmp	r3, #16
 8008406:	d13a      	bne.n	800847e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800840c:	2006      	movs	r0, #6
 800840e:	f002 fc49 	bl	800aca4 <memp_malloc>
 8008412:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <netconn_recv+0x6c>
      return ERR_MEM;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295
 800841e:	e034      	b.n	800848a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008420:	f107 030c 	add.w	r3, r7, #12
 8008424:	2200      	movs	r2, #0
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff ff3f 	bl	80082ac <netconn_recv_data_tcp>
 800842e:	4603      	mov	r3, r0
 8008430:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008432:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d006      	beq.n	8008448 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800843a:	6979      	ldr	r1, [r7, #20]
 800843c:	2006      	movs	r0, #6
 800843e:	f002 fc83 	bl	800ad48 <memp_free>
      return err;
 8008442:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008446:	e020      	b.n	800848a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <netconn_recv+0xa8>
 800844e:	4b11      	ldr	r3, [pc, #68]	; (8008494 <netconn_recv+0xe0>)
 8008450:	f240 3279 	movw	r2, #889	; 0x379
 8008454:	4913      	ldr	r1, [pc, #76]	; (80084a4 <netconn_recv+0xf0>)
 8008456:	4811      	ldr	r0, [pc, #68]	; (800849c <netconn_recv+0xe8>)
 8008458:	f00f f836 	bl	80174c8 <iprintf>

    buf->p = p;
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2200      	movs	r2, #0
 800846c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2200      	movs	r2, #0
 8008472:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	e005      	b.n	800848a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800847e:	2200      	movs	r2, #0
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fe1a 	bl	80080bc <netconn_recv_data>
 8008488:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	080183fc 	.word	0x080183fc
 8008498:	08018614 	.word	0x08018614
 800849c:	08018454 	.word	0x08018454
 80084a0:	08018634 	.word	0x08018634
 80084a4:	080186ac 	.word	0x080186ac

080084a8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	f107 0110 	add.w	r1, r7, #16
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	4613      	mov	r3, r2
 80084ca:	2201      	movs	r2, #1
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f805 	bl	80084dc <netconn_write_vectors_partly>
 80084d2:	4603      	mov	r3, r0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b092      	sub	sp, #72	; 0x48
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4611      	mov	r1, r2
 80084e8:	461a      	mov	r2, r3
 80084ea:	460b      	mov	r3, r1
 80084ec:	80fb      	strh	r3, [r7, #6]
 80084ee:	4613      	mov	r3, r2
 80084f0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <netconn_write_vectors_partly+0x30>
 80084f8:	4b4e      	ldr	r3, [pc, #312]	; (8008634 <netconn_write_vectors_partly+0x158>)
 80084fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80084fe:	494e      	ldr	r1, [pc, #312]	; (8008638 <netconn_write_vectors_partly+0x15c>)
 8008500:	484e      	ldr	r0, [pc, #312]	; (800863c <netconn_write_vectors_partly+0x160>)
 8008502:	f00e ffe1 	bl	80174c8 <iprintf>
 8008506:	f06f 030f 	mvn.w	r3, #15
 800850a:	e08e      	b.n	800862a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008514:	2b10      	cmp	r3, #16
 8008516:	d009      	beq.n	800852c <netconn_write_vectors_partly+0x50>
 8008518:	4b46      	ldr	r3, [pc, #280]	; (8008634 <netconn_write_vectors_partly+0x158>)
 800851a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800851e:	4948      	ldr	r1, [pc, #288]	; (8008640 <netconn_write_vectors_partly+0x164>)
 8008520:	4846      	ldr	r0, [pc, #280]	; (800863c <netconn_write_vectors_partly+0x160>)
 8008522:	f00e ffd1 	bl	80174c8 <iprintf>
 8008526:	f06f 0305 	mvn.w	r3, #5
 800852a:	e07e      	b.n	800862a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	7f1b      	ldrb	r3, [r3, #28]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d104      	bne.n	8008542 <netconn_write_vectors_partly+0x66>
 8008538:	797b      	ldrb	r3, [r7, #5]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <netconn_write_vectors_partly+0x6a>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <netconn_write_vectors_partly+0x6c>
 8008546:	2300      	movs	r3, #0
 8008548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800854c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008550:	2b00      	cmp	r3, #0
 8008552:	d005      	beq.n	8008560 <netconn_write_vectors_partly+0x84>
 8008554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800855a:	f06f 0305 	mvn.w	r3, #5
 800855e:	e064      	b.n	800862a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008564:	2300      	movs	r3, #0
 8008566:	643b      	str	r3, [r7, #64]	; 0x40
 8008568:	e015      	b.n	8008596 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800856a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	4413      	add	r3, r2
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008576:	4413      	add	r3, r2
 8008578:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800857a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	4413      	add	r3, r2
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008586:	429a      	cmp	r2, r3
 8008588:	d202      	bcs.n	8008590 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800858a:	f06f 0305 	mvn.w	r3, #5
 800858e:	e04c      	b.n	800862a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008592:	3301      	adds	r3, #1
 8008594:	643b      	str	r3, [r7, #64]	; 0x40
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800859a:	429a      	cmp	r2, r3
 800859c:	dbe5      	blt.n	800856a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800859e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e040      	b.n	800862a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80085a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da0a      	bge.n	80085c4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80085ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80085b4:	f06f 0305 	mvn.w	r3, #5
 80085b8:	e037      	b.n	800862a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80085ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80085be:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80085cc:	88fb      	ldrh	r3, [r7, #6]
 80085ce:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80085d4:	797b      	ldrb	r3, [r7, #5]
 80085d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80085da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80085e2:	f107 0314 	add.w	r3, r7, #20
 80085e6:	4619      	mov	r1, r3
 80085e8:	4816      	ldr	r0, [pc, #88]	; (8008644 <netconn_write_vectors_partly+0x168>)
 80085ea:	f7ff fb9f 	bl	8007d2c <netconn_apimsg>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80085f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d114      	bne.n	8008626 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80085fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008606:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008608:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008614:	429a      	cmp	r2, r3
 8008616:	d006      	beq.n	8008626 <netconn_write_vectors_partly+0x14a>
 8008618:	4b06      	ldr	r3, [pc, #24]	; (8008634 <netconn_write_vectors_partly+0x158>)
 800861a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800861e:	490a      	ldr	r1, [pc, #40]	; (8008648 <netconn_write_vectors_partly+0x16c>)
 8008620:	4806      	ldr	r0, [pc, #24]	; (800863c <netconn_write_vectors_partly+0x160>)
 8008622:	f00e ff51 	bl	80174c8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008626:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800862a:	4618      	mov	r0, r3
 800862c:	3748      	adds	r7, #72	; 0x48
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	080183fc 	.word	0x080183fc
 8008638:	080186d4 	.word	0x080186d4
 800863c:	08018454 	.word	0x08018454
 8008640:	080186f0 	.word	0x080186f0
 8008644:	08009c6d 	.word	0x08009c6d
 8008648:	08018714 	.word	0x08018714

0800864c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08c      	sub	sp, #48	; 0x30
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d109      	bne.n	8008672 <netconn_close_shutdown+0x26>
 800865e:	4b0f      	ldr	r3, [pc, #60]	; (800869c <netconn_close_shutdown+0x50>)
 8008660:	f240 4247 	movw	r2, #1095	; 0x447
 8008664:	490e      	ldr	r1, [pc, #56]	; (80086a0 <netconn_close_shutdown+0x54>)
 8008666:	480f      	ldr	r0, [pc, #60]	; (80086a4 <netconn_close_shutdown+0x58>)
 8008668:	f00e ff2e 	bl	80174c8 <iprintf>
 800866c:	f06f 030f 	mvn.w	r3, #15
 8008670:	e010      	b.n	8008694 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800867a:	2329      	movs	r3, #41	; 0x29
 800867c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800867e:	f107 030c 	add.w	r3, r7, #12
 8008682:	4619      	mov	r1, r3
 8008684:	4808      	ldr	r0, [pc, #32]	; (80086a8 <netconn_close_shutdown+0x5c>)
 8008686:	f7ff fb51 	bl	8007d2c <netconn_apimsg>
 800868a:	4603      	mov	r3, r0
 800868c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008690:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008694:	4618      	mov	r0, r3
 8008696:	3730      	adds	r7, #48	; 0x30
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	080183fc 	.word	0x080183fc
 80086a0:	08018738 	.word	0x08018738
 80086a4:	08018454 	.word	0x08018454
 80086a8:	08009d85 	.word	0x08009d85

080086ac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80086b4:	2103      	movs	r1, #3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff ffc8 	bl	800864c <netconn_close_shutdown>
 80086bc:	4603      	mov	r3, r0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <netconn_err+0x12>
    return ERR_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	e00d      	b.n	80086f4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80086d8:	f00e fe92 	bl	8017400 <sys_arch_protect>
 80086dc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	7a1b      	ldrb	r3, [r3, #8]
 80086e2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f00e fe96 	bl	801741c <sys_arch_unprotect>
  return err;
 80086f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800870a:	f113 0f0e 	cmn.w	r3, #14
 800870e:	d008      	beq.n	8008722 <lwip_netconn_err_to_msg+0x26>
 8008710:	f113 0f0d 	cmn.w	r3, #13
 8008714:	d003      	beq.n	800871e <lwip_netconn_err_to_msg+0x22>
 8008716:	f113 0f0f 	cmn.w	r3, #15
 800871a:	d004      	beq.n	8008726 <lwip_netconn_err_to_msg+0x2a>
 800871c:	e005      	b.n	800872a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800871e:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <lwip_netconn_err_to_msg+0x4c>)
 8008720:	e00e      	b.n	8008740 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008722:	4b0a      	ldr	r3, [pc, #40]	; (800874c <lwip_netconn_err_to_msg+0x50>)
 8008724:	e00c      	b.n	8008740 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008726:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <lwip_netconn_err_to_msg+0x54>)
 8008728:	e00a      	b.n	8008740 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800872a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <lwip_netconn_err_to_msg+0x42>
 8008732:	4b08      	ldr	r3, [pc, #32]	; (8008754 <lwip_netconn_err_to_msg+0x58>)
 8008734:	227d      	movs	r2, #125	; 0x7d
 8008736:	4908      	ldr	r1, [pc, #32]	; (8008758 <lwip_netconn_err_to_msg+0x5c>)
 8008738:	4808      	ldr	r0, [pc, #32]	; (800875c <lwip_netconn_err_to_msg+0x60>)
 800873a:	f00e fec5 	bl	80174c8 <iprintf>
      return NULL;
 800873e:	2300      	movs	r3, #0
  }
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	0801bc84 	.word	0x0801bc84
 800874c:	0801bc85 	.word	0x0801bc85
 8008750:	0801bc86 	.word	0x0801bc86
 8008754:	08018754 	.word	0x08018754
 8008758:	08018788 	.word	0x08018788
 800875c:	08018798 	.word	0x08018798

08008760 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d105      	bne.n	800877c <lwip_netconn_is_err_msg+0x1c>
 8008770:	4b12      	ldr	r3, [pc, #72]	; (80087bc <lwip_netconn_is_err_msg+0x5c>)
 8008772:	2285      	movs	r2, #133	; 0x85
 8008774:	4912      	ldr	r1, [pc, #72]	; (80087c0 <lwip_netconn_is_err_msg+0x60>)
 8008776:	4813      	ldr	r0, [pc, #76]	; (80087c4 <lwip_netconn_is_err_msg+0x64>)
 8008778:	f00e fea6 	bl	80174c8 <iprintf>

  if (msg == &netconn_aborted) {
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a12      	ldr	r2, [pc, #72]	; (80087c8 <lwip_netconn_is_err_msg+0x68>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d104      	bne.n	800878e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	22f3      	movs	r2, #243	; 0xf3
 8008788:	701a      	strb	r2, [r3, #0]
    return 1;
 800878a:	2301      	movs	r3, #1
 800878c:	e012      	b.n	80087b4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a0e      	ldr	r2, [pc, #56]	; (80087cc <lwip_netconn_is_err_msg+0x6c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d104      	bne.n	80087a0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	22f2      	movs	r2, #242	; 0xf2
 800879a:	701a      	strb	r2, [r3, #0]
    return 1;
 800879c:	2301      	movs	r3, #1
 800879e:	e009      	b.n	80087b4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <lwip_netconn_is_err_msg+0x70>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d104      	bne.n	80087b2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	22f1      	movs	r2, #241	; 0xf1
 80087ac:	701a      	strb	r2, [r3, #0]
    return 1;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e000      	b.n	80087b4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	08018754 	.word	0x08018754
 80087c0:	080187c0 	.word	0x080187c0
 80087c4:	08018798 	.word	0x08018798
 80087c8:	0801bc84 	.word	0x0801bc84
 80087cc:	0801bc85 	.word	0x0801bc85
 80087d0:	0801bc86 	.word	0x0801bc86

080087d4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d105      	bne.n	80087f4 <recv_udp+0x20>
 80087e8:	4b34      	ldr	r3, [pc, #208]	; (80088bc <recv_udp+0xe8>)
 80087ea:	22e5      	movs	r2, #229	; 0xe5
 80087ec:	4934      	ldr	r1, [pc, #208]	; (80088c0 <recv_udp+0xec>)
 80087ee:	4835      	ldr	r0, [pc, #212]	; (80088c4 <recv_udp+0xf0>)
 80087f0:	f00e fe6a 	bl	80174c8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d105      	bne.n	8008806 <recv_udp+0x32>
 80087fa:	4b30      	ldr	r3, [pc, #192]	; (80088bc <recv_udp+0xe8>)
 80087fc:	22e6      	movs	r2, #230	; 0xe6
 80087fe:	4932      	ldr	r1, [pc, #200]	; (80088c8 <recv_udp+0xf4>)
 8008800:	4830      	ldr	r0, [pc, #192]	; (80088c4 <recv_udp+0xf0>)
 8008802:	f00e fe61 	bl	80174c8 <iprintf>
  conn = (struct netconn *)arg;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d103      	bne.n	8008818 <recv_udp+0x44>
    pbuf_free(p);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f003 f945 	bl	800baa0 <pbuf_free>
    return;
 8008816:	e04d      	b.n	80088b4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	429a      	cmp	r2, r3
 8008820:	d005      	beq.n	800882e <recv_udp+0x5a>
 8008822:	4b26      	ldr	r3, [pc, #152]	; (80088bc <recv_udp+0xe8>)
 8008824:	22ee      	movs	r2, #238	; 0xee
 8008826:	4929      	ldr	r1, [pc, #164]	; (80088cc <recv_udp+0xf8>)
 8008828:	4826      	ldr	r0, [pc, #152]	; (80088c4 <recv_udp+0xf0>)
 800882a:	f00e fe4d 	bl	80174c8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	3310      	adds	r3, #16
 8008832:	4618      	mov	r0, r3
 8008834:	f00e fcc9 	bl	80171ca <sys_mbox_valid>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f003 f92e 	bl	800baa0 <pbuf_free>
    return;
 8008844:	e036      	b.n	80088b4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008846:	2006      	movs	r0, #6
 8008848:	f002 fa2c 	bl	800aca4 <memp_malloc>
 800884c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <recv_udp+0x88>
    pbuf_free(p);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f003 f923 	bl	800baa0 <pbuf_free>
    return;
 800885a:	e02b      	b.n	80088b4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <recv_udp+0xa0>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	e000      	b.n	8008876 <recv_udp+0xa2>
 8008874:	2300      	movs	r3, #0
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800887e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	891b      	ldrh	r3, [r3, #8]
 8008884:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	3310      	adds	r3, #16
 800888a:	69b9      	ldr	r1, [r7, #24]
 800888c:	4618      	mov	r0, r3
 800888e:	f00e fc27 	bl	80170e0 <sys_mbox_trypost>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008898:	69b8      	ldr	r0, [r7, #24]
 800889a:	f001 faff 	bl	8009e9c <netbuf_delete>
    return;
 800889e:	e009      	b.n	80088b4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <recv_udp+0xe0>
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	8afa      	ldrh	r2, [r7, #22]
 80088ae:	2100      	movs	r1, #0
 80088b0:	69f8      	ldr	r0, [r7, #28]
 80088b2:	4798      	blx	r3
  }
}
 80088b4:	3720      	adds	r7, #32
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	08018754 	.word	0x08018754
 80088c0:	080187cc 	.word	0x080187cc
 80088c4:	08018798 	.word	0x08018798
 80088c8:	080187f0 	.word	0x080187f0
 80088cc:	08018810 	.word	0x08018810

080088d0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <recv_tcp+0x22>
 80088e4:	4b36      	ldr	r3, [pc, #216]	; (80089c0 <recv_tcp+0xf0>)
 80088e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80088ea:	4936      	ldr	r1, [pc, #216]	; (80089c4 <recv_tcp+0xf4>)
 80088ec:	4836      	ldr	r0, [pc, #216]	; (80089c8 <recv_tcp+0xf8>)
 80088ee:	f00e fdeb 	bl	80174c8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <recv_tcp+0x36>
 80088f8:	4b31      	ldr	r3, [pc, #196]	; (80089c0 <recv_tcp+0xf0>)
 80088fa:	f240 122d 	movw	r2, #301	; 0x12d
 80088fe:	4933      	ldr	r1, [pc, #204]	; (80089cc <recv_tcp+0xfc>)
 8008900:	4831      	ldr	r0, [pc, #196]	; (80089c8 <recv_tcp+0xf8>)
 8008902:	f00e fde1 	bl	80174c8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d006      	beq.n	800891c <recv_tcp+0x4c>
 800890e:	4b2c      	ldr	r3, [pc, #176]	; (80089c0 <recv_tcp+0xf0>)
 8008910:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008914:	492e      	ldr	r1, [pc, #184]	; (80089d0 <recv_tcp+0x100>)
 8008916:	482c      	ldr	r0, [pc, #176]	; (80089c8 <recv_tcp+0xf8>)
 8008918:	f00e fdd6 	bl	80174c8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <recv_tcp+0x5c>
    return ERR_VAL;
 8008926:	f06f 0305 	mvn.w	r3, #5
 800892a:	e045      	b.n	80089b8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	429a      	cmp	r2, r3
 8008934:	d006      	beq.n	8008944 <recv_tcp+0x74>
 8008936:	4b22      	ldr	r3, [pc, #136]	; (80089c0 <recv_tcp+0xf0>)
 8008938:	f240 1235 	movw	r2, #309	; 0x135
 800893c:	4925      	ldr	r1, [pc, #148]	; (80089d4 <recv_tcp+0x104>)
 800893e:	4822      	ldr	r0, [pc, #136]	; (80089c8 <recv_tcp+0xf8>)
 8008940:	f00e fdc2 	bl	80174c8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	3310      	adds	r3, #16
 8008948:	4618      	mov	r0, r3
 800894a:	f00e fc3e 	bl	80171ca <sys_mbox_valid>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10d      	bne.n	8008970 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d008      	beq.n	800896c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	891b      	ldrh	r3, [r3, #8]
 800895e:	4619      	mov	r1, r3
 8008960:	68b8      	ldr	r0, [r7, #8]
 8008962:	f004 f85b 	bl	800ca1c <tcp_recved>
      pbuf_free(p);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f003 f89a 	bl	800baa0 <pbuf_free>
    }
    return ERR_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	e023      	b.n	80089b8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <recv_tcp+0xb2>
    msg = p;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	891b      	ldrh	r3, [r3, #8]
 800897e:	83fb      	strh	r3, [r7, #30]
 8008980:	e003      	b.n	800898a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <recv_tcp+0x108>)
 8008984:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	3310      	adds	r3, #16
 800898e:	69b9      	ldr	r1, [r7, #24]
 8008990:	4618      	mov	r0, r3
 8008992:	f00e fba5 	bl	80170e0 <sys_mbox_trypost>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800899c:	f04f 33ff 	mov.w	r3, #4294967295
 80089a0:	e00a      	b.n	80089b8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <recv_tcp+0xe6>
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	8bfa      	ldrh	r2, [r7, #30]
 80089b0:	2100      	movs	r1, #0
 80089b2:	6978      	ldr	r0, [r7, #20]
 80089b4:	4798      	blx	r3
  }

  return ERR_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3720      	adds	r7, #32
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	08018754 	.word	0x08018754
 80089c4:	08018830 	.word	0x08018830
 80089c8:	08018798 	.word	0x08018798
 80089cc:	08018854 	.word	0x08018854
 80089d0:	08018874 	.word	0x08018874
 80089d4:	0801888c 	.word	0x0801888c
 80089d8:	0801bc86 	.word	0x0801bc86

080089dc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d106      	bne.n	80089fe <poll_tcp+0x22>
 80089f0:	4b29      	ldr	r3, [pc, #164]	; (8008a98 <poll_tcp+0xbc>)
 80089f2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80089f6:	4929      	ldr	r1, [pc, #164]	; (8008a9c <poll_tcp+0xc0>)
 80089f8:	4829      	ldr	r0, [pc, #164]	; (8008aa0 <poll_tcp+0xc4>)
 80089fa:	f00e fd65 	bl	80174c8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	785b      	ldrb	r3, [r3, #1]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d104      	bne.n	8008a10 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008a06:	2101      	movs	r1, #1
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 ff63 	bl	80098d4 <lwip_netconn_do_writemore>
 8008a0e:	e016      	b.n	8008a3e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	785b      	ldrb	r3, [r3, #1]
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d112      	bne.n	8008a3e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <poll_tcp+0x5a>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	7a5b      	ldrb	r3, [r3, #9]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	7a5a      	ldrb	r2, [r3, #9]
 8008a30:	3a01      	subs	r2, #1
 8008a32:	b2d2      	uxtb	r2, r2
 8008a34:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008a36:	2101      	movs	r1, #1
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fbf7 	bl	800922c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	7f1b      	ldrb	r3, [r3, #28]
 8008a42:	f003 0310 	and.w	r3, r3, #16
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d021      	beq.n	8008a8e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01d      	beq.n	8008a8e <poll_tcp+0xb2>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008a5a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008a5e:	d316      	bcc.n	8008a8e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d810      	bhi.n	8008a8e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	7f1b      	ldrb	r3, [r3, #28]
 8008a70:	f023 0310 	bic.w	r3, r3, #16
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <poll_tcp+0xb2>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	2200      	movs	r2, #0
 8008a88:	2102      	movs	r1, #2
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	08018754 	.word	0x08018754
 8008a9c:	080188ac 	.word	0x080188ac
 8008aa0:	08018798 	.word	0x08018798

08008aa4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d106      	bne.n	8008aca <sent_tcp+0x26>
 8008abc:	4b20      	ldr	r3, [pc, #128]	; (8008b40 <sent_tcp+0x9c>)
 8008abe:	f240 1293 	movw	r2, #403	; 0x193
 8008ac2:	4920      	ldr	r1, [pc, #128]	; (8008b44 <sent_tcp+0xa0>)
 8008ac4:	4820      	ldr	r0, [pc, #128]	; (8008b48 <sent_tcp+0xa4>)
 8008ac6:	f00e fcff 	bl	80174c8 <iprintf>

  if (conn) {
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d032      	beq.n	8008b36 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	785b      	ldrb	r3, [r3, #1]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d104      	bne.n	8008ae2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008ad8:	2101      	movs	r1, #1
 8008ada:	6978      	ldr	r0, [r7, #20]
 8008adc:	f000 fefa 	bl	80098d4 <lwip_netconn_do_writemore>
 8008ae0:	e007      	b.n	8008af2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d103      	bne.n	8008af2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008aea:	2101      	movs	r1, #1
 8008aec:	6978      	ldr	r0, [r7, #20]
 8008aee:	f000 fb9d 	bl	800922c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d01d      	beq.n	8008b36 <sent_tcp+0x92>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008b02:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008b06:	d316      	bcc.n	8008b36 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d810      	bhi.n	8008b36 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	7f1b      	ldrb	r3, [r3, #28]
 8008b18:	f023 0310 	bic.w	r3, r3, #16
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <sent_tcp+0x92>
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	88fa      	ldrh	r2, [r7, #6]
 8008b30:	2102      	movs	r1, #2
 8008b32:	6978      	ldr	r0, [r7, #20]
 8008b34:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	08018754 	.word	0x08018754
 8008b44:	080188ac 	.word	0x080188ac
 8008b48:	08018798 	.word	0x08018798

08008b4c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <err_tcp+0x24>
 8008b62:	4b5f      	ldr	r3, [pc, #380]	; (8008ce0 <err_tcp+0x194>)
 8008b64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008b68:	495e      	ldr	r1, [pc, #376]	; (8008ce4 <err_tcp+0x198>)
 8008b6a:	485f      	ldr	r0, [pc, #380]	; (8008ce8 <err_tcp+0x19c>)
 8008b6c:	f00e fcac 	bl	80174c8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008b70:	f00e fc46 	bl	8017400 <sys_arch_protect>
 8008b74:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	7f1b      	ldrb	r3, [r3, #28]
 8008b86:	f043 0301 	orr.w	r3, r3, #1
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008b9c:	69b8      	ldr	r0, [r7, #24]
 8008b9e:	f00e fc3d 	bl	801741c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <err_tcp+0x6a>
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	69f8      	ldr	r0, [r7, #28]
 8008bb4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d005      	beq.n	8008bca <err_tcp+0x7e>
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	69f8      	ldr	r0, [r7, #28]
 8008bc8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d005      	beq.n	8008bde <err_tcp+0x92>
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2102      	movs	r1, #2
 8008bda:	69f8      	ldr	r0, [r7, #28]
 8008bdc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff fd8a 	bl	80086fc <lwip_netconn_err_to_msg>
 8008be8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	3310      	adds	r3, #16
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f00e faeb 	bl	80171ca <sys_mbox_valid>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	3310      	adds	r3, #16
 8008bfe:	6939      	ldr	r1, [r7, #16]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f00e fa6d 	bl	80170e0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3314      	adds	r3, #20
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f00e fadd 	bl	80171ca <sys_mbox_valid>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d005      	beq.n	8008c22 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	3314      	adds	r3, #20
 8008c1a:	6939      	ldr	r1, [r7, #16]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f00e fa5f 	bl	80170e0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d005      	beq.n	8008c34 <err_tcp+0xe8>
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d002      	beq.n	8008c34 <err_tcp+0xe8>
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d143      	bne.n	8008cbc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	7f1b      	ldrb	r3, [r3, #28]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bf14      	ite	ne
 8008c40:	2301      	movne	r3, #1
 8008c42:	2300      	moveq	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	7f1b      	ldrb	r3, [r3, #28]
 8008c4c:	f023 0304 	bic.w	r3, r3, #4
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d13b      	bne.n	8008cd4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <err_tcp+0x126>
 8008c64:	4b1e      	ldr	r3, [pc, #120]	; (8008ce0 <err_tcp+0x194>)
 8008c66:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008c6a:	4920      	ldr	r1, [pc, #128]	; (8008cec <err_tcp+0x1a0>)
 8008c6c:	481e      	ldr	r0, [pc, #120]	; (8008ce8 <err_tcp+0x19c>)
 8008c6e:	f00e fc2b 	bl	80174c8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d104      	bne.n	8008c82 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	711a      	strb	r2, [r3, #4]
 8008c80:	e003      	b.n	8008c8a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	78fa      	ldrb	r2, [r7, #3]
 8008c88:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	330c      	adds	r3, #12
 8008c92:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008c94:	68b8      	ldr	r0, [r7, #8]
 8008c96:	f00e fb29 	bl	80172ec <sys_sem_valid>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d106      	bne.n	8008cae <err_tcp+0x162>
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <err_tcp+0x194>)
 8008ca2:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008ca6:	4912      	ldr	r1, [pc, #72]	; (8008cf0 <err_tcp+0x1a4>)
 8008ca8:	480f      	ldr	r0, [pc, #60]	; (8008ce8 <err_tcp+0x19c>)
 8008caa:	f00e fc0d 	bl	80174c8 <iprintf>
      conn->current_msg = NULL;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008cb4:	68b8      	ldr	r0, [r7, #8]
 8008cb6:	f00e faff 	bl	80172b8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008cba:	e00b      	b.n	8008cd4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d008      	beq.n	8008cd6 <err_tcp+0x18a>
 8008cc4:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <err_tcp+0x194>)
 8008cc6:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008cca:	490a      	ldr	r1, [pc, #40]	; (8008cf4 <err_tcp+0x1a8>)
 8008ccc:	4806      	ldr	r0, [pc, #24]	; (8008ce8 <err_tcp+0x19c>)
 8008cce:	f00e fbfb 	bl	80174c8 <iprintf>
  }
}
 8008cd2:	e000      	b.n	8008cd6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008cd4:	bf00      	nop
}
 8008cd6:	bf00      	nop
 8008cd8:	3720      	adds	r7, #32
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	08018754 	.word	0x08018754
 8008ce4:	080188ac 	.word	0x080188ac
 8008ce8:	08018798 	.word	0x08018798
 8008cec:	080188bc 	.word	0x080188bc
 8008cf0:	080188d8 	.word	0x080188d8
 8008cf4:	080188f4 	.word	0x080188f4

08008cf8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f004 fd49 	bl	800d7a0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008d0e:	490a      	ldr	r1, [pc, #40]	; (8008d38 <setup_tcp+0x40>)
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f004 fd57 	bl	800d7c4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008d16:	4909      	ldr	r1, [pc, #36]	; (8008d3c <setup_tcp+0x44>)
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f004 fd75 	bl	800d808 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008d1e:	2202      	movs	r2, #2
 8008d20:	4907      	ldr	r1, [pc, #28]	; (8008d40 <setup_tcp+0x48>)
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f004 fdcc 	bl	800d8c0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008d28:	4906      	ldr	r1, [pc, #24]	; (8008d44 <setup_tcp+0x4c>)
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f004 fd8e 	bl	800d84c <tcp_err>
}
 8008d30:	bf00      	nop
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	080088d1 	.word	0x080088d1
 8008d3c:	08008aa5 	.word	0x08008aa5
 8008d40:	080089dd 	.word	0x080089dd
 8008d44:	08008b4d 	.word	0x08008b4d

08008d48 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008d48:	b590      	push	{r4, r7, lr}
 8008d4a:	b089      	sub	sp, #36	; 0x24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <accept_function+0x1e>
    return ERR_VAL;
 8008d60:	f06f 0305 	mvn.w	r3, #5
 8008d64:	e0a1      	b.n	8008eaa <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	3314      	adds	r3, #20
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f00e fa2d 	bl	80171ca <sys_mbox_valid>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008d76:	f06f 0305 	mvn.w	r3, #5
 8008d7a:	e096      	b.n	8008eaa <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d11b      	bne.n	8008dba <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	f103 0414 	add.w	r4, r3, #20
 8008d88:	f06f 000c 	mvn.w	r0, #12
 8008d8c:	f7ff fcb6 	bl	80086fc <lwip_netconn_err_to_msg>
 8008d90:	4603      	mov	r3, r0
 8008d92:	4619      	mov	r1, r3
 8008d94:	4620      	mov	r0, r4
 8008d96:	f00e f9a3 	bl	80170e0 <sys_mbox_trypost>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <accept_function+0x6c>
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2200      	movs	r2, #0
 8008dae:	2100      	movs	r1, #0
 8008db0:	69f8      	ldr	r0, [r7, #28]
 8008db2:	4798      	blx	r3
    }
    return ERR_VAL;
 8008db4:	f06f 0305 	mvn.w	r3, #5
 8008db8:	e077      	b.n	8008eaa <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d006      	beq.n	8008dd0 <accept_function+0x88>
 8008dc2:	4b3c      	ldr	r3, [pc, #240]	; (8008eb4 <accept_function+0x16c>)
 8008dc4:	f240 222a 	movw	r2, #554	; 0x22a
 8008dc8:	493b      	ldr	r1, [pc, #236]	; (8008eb8 <accept_function+0x170>)
 8008dca:	483c      	ldr	r0, [pc, #240]	; (8008ebc <accept_function+0x174>)
 8008dcc:	f00e fb7c 	bl	80174c8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	781a      	ldrb	r2, [r3, #0]
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	f000 f8f0 	bl	8008fc0 <netconn_alloc>
 8008de0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d11b      	bne.n	8008e20 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	f103 0414 	add.w	r4, r3, #20
 8008dee:	f06f 000c 	mvn.w	r0, #12
 8008df2:	f7ff fc83 	bl	80086fc <lwip_netconn_err_to_msg>
 8008df6:	4603      	mov	r3, r0
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f00e f970 	bl	80170e0 <sys_mbox_trypost>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d109      	bne.n	8008e1a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <accept_function+0xd2>
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	2200      	movs	r2, #0
 8008e14:	2100      	movs	r1, #0
 8008e16:	69f8      	ldr	r0, [r7, #28]
 8008e18:	4798      	blx	r3
    }
    return ERR_MEM;
 8008e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1e:	e044      	b.n	8008eaa <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008e26:	69b8      	ldr	r0, [r7, #24]
 8008e28:	f7ff ff66 	bl	8008cf8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3314      	adds	r3, #20
 8008e30:	69b9      	ldr	r1, [r7, #24]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f00e f954 	bl	80170e0 <sys_mbox_trypost>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d02a      	beq.n	8008e94 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008e44:	2100      	movs	r1, #0
 8008e46:	6978      	ldr	r0, [r7, #20]
 8008e48:	f004 fcaa 	bl	800d7a0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6978      	ldr	r0, [r7, #20]
 8008e50:	f004 fcb8 	bl	800d7c4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008e54:	2100      	movs	r1, #0
 8008e56:	6978      	ldr	r0, [r7, #20]
 8008e58:	f004 fcd6 	bl	800d808 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2100      	movs	r1, #0
 8008e60:	6978      	ldr	r0, [r7, #20]
 8008e62:	f004 fd2d 	bl	800d8c0 <tcp_poll>
    tcp_err(pcb, NULL);
 8008e66:	2100      	movs	r1, #0
 8008e68:	6978      	ldr	r0, [r7, #20]
 8008e6a:	f004 fcef 	bl	800d84c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	2200      	movs	r2, #0
 8008e72:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	3310      	adds	r3, #16
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f00e f91f 	bl	80170bc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	3310      	adds	r3, #16
 8008e82:	4618      	mov	r0, r3
 8008e84:	f00e f9b2 	bl	80171ec <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008e88:	69b8      	ldr	r0, [r7, #24]
 8008e8a:	f000 f907 	bl	800909c <netconn_free>
    return ERR_MEM;
 8008e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e92:	e00a      	b.n	8008eaa <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <accept_function+0x160>
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	69f8      	ldr	r0, [r7, #28]
 8008ea6:	4798      	blx	r3
  }

  return ERR_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3724      	adds	r7, #36	; 0x24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd90      	pop	{r4, r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08018754 	.word	0x08018754
 8008eb8:	08018910 	.word	0x08018910
 8008ebc:	08018798 	.word	0x08018798

08008ec0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008ec0:	b590      	push	{r4, r7, lr}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d006      	beq.n	8008ee4 <pcb_new+0x24>
 8008ed6:	4b2b      	ldr	r3, [pc, #172]	; (8008f84 <pcb_new+0xc4>)
 8008ed8:	f240 2265 	movw	r2, #613	; 0x265
 8008edc:	492a      	ldr	r1, [pc, #168]	; (8008f88 <pcb_new+0xc8>)
 8008ede:	482b      	ldr	r0, [pc, #172]	; (8008f8c <pcb_new+0xcc>)
 8008ee0:	f00e faf2 	bl	80174c8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eee:	2b10      	cmp	r3, #16
 8008ef0:	d022      	beq.n	8008f38 <pcb_new+0x78>
 8008ef2:	2b20      	cmp	r3, #32
 8008ef4:	d133      	bne.n	8008f5e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681c      	ldr	r4, [r3, #0]
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f009 ff00 	bl	8012d02 <udp_new_ip_type>
 8008f02:	4603      	mov	r3, r0
 8008f04:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d02a      	beq.n	8008f66 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b22      	cmp	r3, #34	; 0x22
 8008f18:	d104      	bne.n	8008f24 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6858      	ldr	r0, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	4917      	ldr	r1, [pc, #92]	; (8008f90 <pcb_new+0xd0>)
 8008f32:	f009 fe6d 	bl	8012c10 <udp_recv>
      }
      break;
 8008f36:	e016      	b.n	8008f66 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681c      	ldr	r4, [r3, #0]
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f004 fc20 	bl	800d784 <tcp_new_ip_type>
 8008f44:	4603      	mov	r3, r0
 8008f46:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff fece 	bl	8008cf8 <setup_tcp>
      }
      break;
 8008f5c:	e005      	b.n	8008f6a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	22fa      	movs	r2, #250	; 0xfa
 8008f62:	711a      	strb	r2, [r3, #4]
      return;
 8008f64:	e00a      	b.n	8008f7c <pcb_new+0xbc>
      break;
 8008f66:	bf00      	nop
 8008f68:	e000      	b.n	8008f6c <pcb_new+0xac>
      break;
 8008f6a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d102      	bne.n	8008f7c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	22ff      	movs	r2, #255	; 0xff
 8008f7a:	711a      	strb	r2, [r3, #4]
  }
}
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd90      	pop	{r4, r7, pc}
 8008f82:	bf00      	nop
 8008f84:	08018754 	.word	0x08018754
 8008f88:	08018938 	.word	0x08018938
 8008f8c:	08018798 	.word	0x08018798
 8008f90:	080087d5 	.word	0x080087d5

08008f94 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff ff85 	bl	8008ec0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008fd0:	2007      	movs	r0, #7
 8008fd2:	f001 fe67 	bl	800aca4 <memp_malloc>
 8008fd6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <netconn_alloc+0x22>
    return NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e052      	b.n	8009088 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	79fa      	ldrb	r2, [r7, #7]
 8008fec:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ffa:	2b10      	cmp	r3, #16
 8008ffc:	d004      	beq.n	8009008 <netconn_alloc+0x48>
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	d105      	bne.n	800900e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009002:	2306      	movs	r3, #6
 8009004:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009006:	e00a      	b.n	800901e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009008:	2306      	movs	r3, #6
 800900a:	617b      	str	r3, [r7, #20]
      break;
 800900c:	e007      	b.n	800901e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800900e:	4b20      	ldr	r3, [pc, #128]	; (8009090 <netconn_alloc+0xd0>)
 8009010:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009014:	491f      	ldr	r1, [pc, #124]	; (8009094 <netconn_alloc+0xd4>)
 8009016:	4820      	ldr	r0, [pc, #128]	; (8009098 <netconn_alloc+0xd8>)
 8009018:	f00e fa56 	bl	80174c8 <iprintf>
      goto free_and_return;
 800901c:	e02f      	b.n	800907e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3310      	adds	r3, #16
 8009022:	6979      	ldr	r1, [r7, #20]
 8009024:	4618      	mov	r0, r3
 8009026:	f00e f827 	bl	8017078 <sys_mbox_new>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d125      	bne.n	800907c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	330c      	adds	r3, #12
 8009034:	2100      	movs	r1, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f00e f8e5 	bl	8017206 <sys_sem_new>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d005      	beq.n	800904e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3310      	adds	r3, #16
 8009046:	4618      	mov	r0, r3
 8009048:	f00e f838 	bl	80170bc <sys_mbox_free>
    goto free_and_return;
 800904c:	e017      	b.n	800907e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3314      	adds	r3, #20
 8009052:	4618      	mov	r0, r3
 8009054:	f00e f8ca 	bl	80171ec <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f04f 32ff 	mov.w	r2, #4294967295
 8009064:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	7cfa      	ldrb	r2, [r7, #19]
 8009076:	771a      	strb	r2, [r3, #28]
  return conn;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	e005      	b.n	8009088 <netconn_alloc+0xc8>
    goto free_and_return;
 800907c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	2007      	movs	r0, #7
 8009082:	f001 fe61 	bl	800ad48 <memp_free>
  return NULL;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	08018754 	.word	0x08018754
 8009094:	08018958 	.word	0x08018958
 8009098:	08018798 	.word	0x08018798

0800909c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d006      	beq.n	80090ba <netconn_free+0x1e>
 80090ac:	4b1b      	ldr	r3, [pc, #108]	; (800911c <netconn_free+0x80>)
 80090ae:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80090b2:	491b      	ldr	r1, [pc, #108]	; (8009120 <netconn_free+0x84>)
 80090b4:	481b      	ldr	r0, [pc, #108]	; (8009124 <netconn_free+0x88>)
 80090b6:	f00e fa07 	bl	80174c8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3310      	adds	r3, #16
 80090be:	4618      	mov	r0, r3
 80090c0:	f00e f883 	bl	80171ca <sys_mbox_valid>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d006      	beq.n	80090d8 <netconn_free+0x3c>
 80090ca:	4b14      	ldr	r3, [pc, #80]	; (800911c <netconn_free+0x80>)
 80090cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80090d0:	4915      	ldr	r1, [pc, #84]	; (8009128 <netconn_free+0x8c>)
 80090d2:	4814      	ldr	r0, [pc, #80]	; (8009124 <netconn_free+0x88>)
 80090d4:	f00e f9f8 	bl	80174c8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3314      	adds	r3, #20
 80090dc:	4618      	mov	r0, r3
 80090de:	f00e f874 	bl	80171ca <sys_mbox_valid>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d006      	beq.n	80090f6 <netconn_free+0x5a>
 80090e8:	4b0c      	ldr	r3, [pc, #48]	; (800911c <netconn_free+0x80>)
 80090ea:	f240 3227 	movw	r2, #807	; 0x327
 80090ee:	490f      	ldr	r1, [pc, #60]	; (800912c <netconn_free+0x90>)
 80090f0:	480c      	ldr	r0, [pc, #48]	; (8009124 <netconn_free+0x88>)
 80090f2:	f00e f9e9 	bl	80174c8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	330c      	adds	r3, #12
 80090fa:	4618      	mov	r0, r3
 80090fc:	f00e f8e9 	bl	80172d2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	330c      	adds	r3, #12
 8009104:	4618      	mov	r0, r3
 8009106:	f00e f902 	bl	801730e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	2007      	movs	r0, #7
 800910e:	f001 fe1b 	bl	800ad48 <memp_free>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	08018754 	.word	0x08018754
 8009120:	08018980 	.word	0x08018980
 8009124:	08018798 	.word	0x08018798
 8009128:	080189b0 	.word	0x080189b0
 800912c:	080189ec 	.word	0x080189ec

08009130 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3310      	adds	r3, #16
 800913c:	4618      	mov	r0, r3
 800913e:	f00e f844 	bl	80171ca <sys_mbox_valid>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d02f      	beq.n	80091a8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009148:	e018      	b.n	800917c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009152:	2b10      	cmp	r3, #16
 8009154:	d10e      	bne.n	8009174 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f107 020f 	add.w	r2, r7, #15
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff fafe 	bl	8008760 <lwip_netconn_is_err_msg>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d108      	bne.n	800917c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	4618      	mov	r0, r3
 800916e:	f002 fc97 	bl	800baa0 <pbuf_free>
 8009172:	e003      	b.n	800917c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fe90 	bl	8009e9c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3310      	adds	r3, #16
 8009180:	f107 0210 	add.w	r2, r7, #16
 8009184:	4611      	mov	r1, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f00e f803 	bl	8017192 <sys_arch_mbox_tryfetch>
 800918c:	4603      	mov	r3, r0
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009192:	d1da      	bne.n	800914a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3310      	adds	r3, #16
 8009198:	4618      	mov	r0, r3
 800919a:	f00d ff8f 	bl	80170bc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3310      	adds	r3, #16
 80091a2:	4618      	mov	r0, r3
 80091a4:	f00e f822 	bl	80171ec <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3314      	adds	r3, #20
 80091ac:	4618      	mov	r0, r3
 80091ae:	f00e f80c 	bl	80171ca <sys_mbox_valid>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d034      	beq.n	8009222 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80091b8:	e01d      	b.n	80091f6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f107 020e 	add.w	r2, r7, #14
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff facc 	bl	8008760 <lwip_netconn_is_err_msg>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d113      	bne.n	80091f6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80091d2:	6978      	ldr	r0, [r7, #20]
 80091d4:	f7ff ffac 	bl	8009130 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f003 fa51 	bl	800c68c <tcp_abort>
            newconn->pcb.tcp = NULL;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2200      	movs	r2, #0
 80091ee:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80091f0:	6978      	ldr	r0, [r7, #20]
 80091f2:	f7ff ff53 	bl	800909c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	3314      	adds	r3, #20
 80091fa:	f107 0210 	add.w	r2, r7, #16
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f00d ffc6 	bl	8017192 <sys_arch_mbox_tryfetch>
 8009206:	4603      	mov	r3, r0
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920c:	d1d5      	bne.n	80091ba <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3314      	adds	r3, #20
 8009212:	4618      	mov	r0, r3
 8009214:	f00d ff52 	bl	80170bc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3314      	adds	r3, #20
 800921c:	4618      	mov	r0, r3
 800921e:	f00d ffe5 	bl	80171ec <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009222:	bf00      	nop
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <lwip_netconn_do_close_internal+0x24>
 8009242:	4ba1      	ldr	r3, [pc, #644]	; (80094c8 <lwip_netconn_do_close_internal+0x29c>)
 8009244:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009248:	49a0      	ldr	r1, [pc, #640]	; (80094cc <lwip_netconn_do_close_internal+0x2a0>)
 800924a:	48a1      	ldr	r0, [pc, #644]	; (80094d0 <lwip_netconn_do_close_internal+0x2a4>)
 800924c:	f00e f93c 	bl	80174c8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009258:	2b10      	cmp	r3, #16
 800925a:	d006      	beq.n	800926a <lwip_netconn_do_close_internal+0x3e>
 800925c:	4b9a      	ldr	r3, [pc, #616]	; (80094c8 <lwip_netconn_do_close_internal+0x29c>)
 800925e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009262:	499c      	ldr	r1, [pc, #624]	; (80094d4 <lwip_netconn_do_close_internal+0x2a8>)
 8009264:	489a      	ldr	r0, [pc, #616]	; (80094d0 <lwip_netconn_do_close_internal+0x2a4>)
 8009266:	f00e f92f 	bl	80174c8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	785b      	ldrb	r3, [r3, #1]
 800926e:	2b04      	cmp	r3, #4
 8009270:	d006      	beq.n	8009280 <lwip_netconn_do_close_internal+0x54>
 8009272:	4b95      	ldr	r3, [pc, #596]	; (80094c8 <lwip_netconn_do_close_internal+0x29c>)
 8009274:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009278:	4997      	ldr	r1, [pc, #604]	; (80094d8 <lwip_netconn_do_close_internal+0x2ac>)
 800927a:	4895      	ldr	r0, [pc, #596]	; (80094d0 <lwip_netconn_do_close_internal+0x2a4>)
 800927c:	f00e f924 	bl	80174c8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <lwip_netconn_do_close_internal+0x6a>
 8009288:	4b8f      	ldr	r3, [pc, #572]	; (80094c8 <lwip_netconn_do_close_internal+0x29c>)
 800928a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800928e:	4993      	ldr	r1, [pc, #588]	; (80094dc <lwip_netconn_do_close_internal+0x2b0>)
 8009290:	488f      	ldr	r0, [pc, #572]	; (80094d0 <lwip_netconn_do_close_internal+0x2a4>)
 8009292:	f00e f919 	bl	80174c8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <lwip_netconn_do_close_internal+0x80>
 800929e:	4b8a      	ldr	r3, [pc, #552]	; (80094c8 <lwip_netconn_do_close_internal+0x29c>)
 80092a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80092a4:	498e      	ldr	r1, [pc, #568]	; (80094e0 <lwip_netconn_do_close_internal+0x2b4>)
 80092a6:	488a      	ldr	r0, [pc, #552]	; (80094d0 <lwip_netconn_do_close_internal+0x2a4>)
 80092a8:	f00e f90e 	bl	80174c8 <iprintf>

  tpcb = conn->pcb.tcp;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	7a1b      	ldrb	r3, [r3, #8]
 80092b8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d102      	bne.n	80092d6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80092d0:	2301      	movs	r3, #1
 80092d2:	75bb      	strb	r3, [r7, #22]
 80092d4:	e01f      	b.n	8009316 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00e      	beq.n	80092fa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80092e0:	2b05      	cmp	r3, #5
 80092e2:	d007      	beq.n	80092f4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80092e8:	2b06      	cmp	r3, #6
 80092ea:	d003      	beq.n	80092f4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80092f0:	2b08      	cmp	r3, #8
 80092f2:	d102      	bne.n	80092fa <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80092f4:	2301      	movs	r3, #1
 80092f6:	75bb      	strb	r3, [r7, #22]
 80092f8:	e00d      	b.n	8009316 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80092fa:	7b7b      	ldrb	r3, [r7, #13]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d008      	beq.n	8009312 <lwip_netconn_do_close_internal+0xe6>
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	8b5b      	ldrh	r3, [r3, #26]
 8009304:	f003 0310 	and.w	r3, r3, #16
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800930c:	2301      	movs	r3, #1
 800930e:	75bb      	strb	r3, [r7, #22]
 8009310:	e001      	b.n	8009316 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009316:	7dbb      	ldrb	r3, [r7, #22]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800931c:	2100      	movs	r1, #0
 800931e:	6938      	ldr	r0, [r7, #16]
 8009320:	f004 fa3e 	bl	800d7a0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	7d1b      	ldrb	r3, [r3, #20]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d104      	bne.n	8009336 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800932c:	2100      	movs	r1, #0
 800932e:	6938      	ldr	r0, [r7, #16]
 8009330:	f004 faae 	bl	800d890 <tcp_accept>
 8009334:	e01d      	b.n	8009372 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d007      	beq.n	800934c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800933c:	2100      	movs	r1, #0
 800933e:	6938      	ldr	r0, [r7, #16]
 8009340:	f004 fa40 	bl	800d7c4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009344:	2100      	movs	r1, #0
 8009346:	6938      	ldr	r0, [r7, #16]
 8009348:	f004 faa2 	bl	800d890 <tcp_accept>
    }
    if (shut_tx) {
 800934c:	7b7b      	ldrb	r3, [r7, #13]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009352:	2100      	movs	r1, #0
 8009354:	6938      	ldr	r0, [r7, #16]
 8009356:	f004 fa57 	bl	800d808 <tcp_sent>
    }
    if (shut_close) {
 800935a:	7dbb      	ldrb	r3, [r7, #22]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d008      	beq.n	8009372 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	2100      	movs	r1, #0
 8009364:	6938      	ldr	r0, [r7, #16]
 8009366:	f004 faab 	bl	800d8c0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800936a:	2100      	movs	r1, #0
 800936c:	6938      	ldr	r0, [r7, #16]
 800936e:	f004 fa6d 	bl	800d84c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009372:	7dbb      	ldrb	r3, [r7, #22]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009378:	6938      	ldr	r0, [r7, #16]
 800937a:	f003 f843 	bl	800c404 <tcp_close>
 800937e:	4603      	mov	r3, r0
 8009380:	75fb      	strb	r3, [r7, #23]
 8009382:	e007      	b.n	8009394 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	7b7a      	ldrb	r2, [r7, #13]
 8009388:	4619      	mov	r1, r3
 800938a:	6938      	ldr	r0, [r7, #16]
 800938c:	f003 f866 	bl	800c45c <tcp_shutdown>
 8009390:	4603      	mov	r3, r0
 8009392:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800939c:	2301      	movs	r3, #1
 800939e:	757b      	strb	r3, [r7, #21]
 80093a0:	e016      	b.n	80093d0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80093a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093aa:	d10f      	bne.n	80093cc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	7a5b      	ldrb	r3, [r3, #9]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10c      	bne.n	80093d0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80093b6:	2301      	movs	r3, #1
 80093b8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80093ba:	7dbb      	ldrb	r3, [r7, #22]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d007      	beq.n	80093d0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80093c0:	6938      	ldr	r0, [r7, #16]
 80093c2:	f003 f963 	bl	800c68c <tcp_abort>
          err = ERR_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
 80093ca:	e001      	b.n	80093d0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80093cc:	2301      	movs	r3, #1
 80093ce:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80093d0:	7d7b      	ldrb	r3, [r7, #21]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d044      	beq.n	8009460 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	7dfa      	ldrb	r2, [r7, #23]
 80093e6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80093f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d129      	bne.n	8009450 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80093fc:	7dbb      	ldrb	r3, [r7, #22]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00c      	beq.n	800941c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <lwip_netconn_do_close_internal+0x1f0>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	2200      	movs	r2, #0
 8009416:	2104      	movs	r1, #4
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	4798      	blx	r3
      }
      if (shut_rx) {
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d009      	beq.n	8009436 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <lwip_netconn_do_close_internal+0x20a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	2200      	movs	r2, #0
 8009430:	2100      	movs	r1, #0
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	4798      	blx	r3
      }
      if (shut_tx) {
 8009436:	7b7b      	ldrb	r3, [r7, #13]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d009      	beq.n	8009450 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <lwip_netconn_do_close_internal+0x224>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	2200      	movs	r2, #0
 800944a:	2102      	movs	r1, #2
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009456:	68b8      	ldr	r0, [r7, #8]
 8009458:	f00d ff2e 	bl	80172b8 <sys_sem_signal>
    }
    return ERR_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	e02e      	b.n	80094be <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009460:	7d7b      	ldrb	r3, [r7, #21]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d11e      	bne.n	80094a4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	7d1b      	ldrb	r3, [r3, #20]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d106      	bne.n	800947c <lwip_netconn_do_close_internal+0x250>
 800946e:	4b16      	ldr	r3, [pc, #88]	; (80094c8 <lwip_netconn_do_close_internal+0x29c>)
 8009470:	f240 4241 	movw	r2, #1089	; 0x441
 8009474:	491b      	ldr	r1, [pc, #108]	; (80094e4 <lwip_netconn_do_close_internal+0x2b8>)
 8009476:	4816      	ldr	r0, [pc, #88]	; (80094d0 <lwip_netconn_do_close_internal+0x2a4>)
 8009478:	f00e f826 	bl	80174c8 <iprintf>
    if (shut_tx) {
 800947c:	7b7b      	ldrb	r3, [r7, #13]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009482:	4919      	ldr	r1, [pc, #100]	; (80094e8 <lwip_netconn_do_close_internal+0x2bc>)
 8009484:	6938      	ldr	r0, [r7, #16]
 8009486:	f004 f9bf 	bl	800d808 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800948a:	2201      	movs	r2, #1
 800948c:	4917      	ldr	r1, [pc, #92]	; (80094ec <lwip_netconn_do_close_internal+0x2c0>)
 800948e:	6938      	ldr	r0, [r7, #16]
 8009490:	f004 fa16 	bl	800d8c0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009494:	4916      	ldr	r1, [pc, #88]	; (80094f0 <lwip_netconn_do_close_internal+0x2c4>)
 8009496:	6938      	ldr	r0, [r7, #16]
 8009498:	f004 f9d8 	bl	800d84c <tcp_err>
    tcp_arg(tpcb, conn);
 800949c:	6879      	ldr	r1, [r7, #4]
 800949e:	6938      	ldr	r0, [r7, #16]
 80094a0:	f004 f97e 	bl	800d7a0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80094a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d106      	bne.n	80094ba <lwip_netconn_do_close_internal+0x28e>
 80094ac:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <lwip_netconn_do_close_internal+0x29c>)
 80094ae:	f240 424d 	movw	r2, #1101	; 0x44d
 80094b2:	4910      	ldr	r1, [pc, #64]	; (80094f4 <lwip_netconn_do_close_internal+0x2c8>)
 80094b4:	4806      	ldr	r0, [pc, #24]	; (80094d0 <lwip_netconn_do_close_internal+0x2a4>)
 80094b6:	f00e f807 	bl	80174c8 <iprintf>
  return err;
 80094ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	08018754 	.word	0x08018754
 80094cc:	08018a28 	.word	0x08018a28
 80094d0:	08018798 	.word	0x08018798
 80094d4:	08018a38 	.word	0x08018a38
 80094d8:	08018a58 	.word	0x08018a58
 80094dc:	08018a7c 	.word	0x08018a7c
 80094e0:	080188bc 	.word	0x080188bc
 80094e4:	08018a90 	.word	0x08018a90
 80094e8:	08008aa5 	.word	0x08008aa5
 80094ec:	080089dd 	.word	0x080089dd
 80094f0:	08008b4d 	.word	0x08008b4d
 80094f4:	08018ab4 	.word	0x08018ab4

080094f8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	785b      	ldrb	r3, [r3, #1]
 800950a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800950c:	7afb      	ldrb	r3, [r7, #11]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00d      	beq.n	800952e <lwip_netconn_do_delconn+0x36>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800951c:	2b10      	cmp	r3, #16
 800951e:	d006      	beq.n	800952e <lwip_netconn_do_delconn+0x36>
 8009520:	4b60      	ldr	r3, [pc, #384]	; (80096a4 <lwip_netconn_do_delconn+0x1ac>)
 8009522:	f240 425f 	movw	r2, #1119	; 0x45f
 8009526:	4960      	ldr	r1, [pc, #384]	; (80096a8 <lwip_netconn_do_delconn+0x1b0>)
 8009528:	4860      	ldr	r0, [pc, #384]	; (80096ac <lwip_netconn_do_delconn+0x1b4>)
 800952a:	f00d ffcd 	bl	80174c8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800952e:	7afb      	ldrb	r3, [r7, #11]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d005      	beq.n	8009540 <lwip_netconn_do_delconn+0x48>
 8009534:	7afb      	ldrb	r3, [r7, #11]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d002      	beq.n	8009540 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800953a:	7afb      	ldrb	r3, [r7, #11]
 800953c:	2b03      	cmp	r3, #3
 800953e:	d109      	bne.n	8009554 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009540:	7afb      	ldrb	r3, [r7, #11]
 8009542:	2b03      	cmp	r3, #3
 8009544:	d10a      	bne.n	800955c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	7f1b      	ldrb	r3, [r3, #28]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	d103      	bne.n	800955c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	22fb      	movs	r2, #251	; 0xfb
 8009558:	711a      	strb	r2, [r3, #4]
 800955a:	e097      	b.n	800968c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	2b03      	cmp	r3, #3
 8009560:	d10d      	bne.n	800957e <lwip_netconn_do_delconn+0x86>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	7f1b      	ldrb	r3, [r3, #28]
 8009568:	f003 0304 	and.w	r3, r3, #4
 800956c:	2b00      	cmp	r3, #0
 800956e:	d106      	bne.n	800957e <lwip_netconn_do_delconn+0x86>
 8009570:	4b4c      	ldr	r3, [pc, #304]	; (80096a4 <lwip_netconn_do_delconn+0x1ac>)
 8009572:	f240 427b 	movw	r2, #1147	; 0x47b
 8009576:	494e      	ldr	r1, [pc, #312]	; (80096b0 <lwip_netconn_do_delconn+0x1b8>)
 8009578:	484c      	ldr	r0, [pc, #304]	; (80096ac <lwip_netconn_do_delconn+0x1b4>)
 800957a:	f00d ffa5 	bl	80174c8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4618      	mov	r0, r3
 800958a:	f7ff fdd1 	bl	8009130 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d05f      	beq.n	8009658 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095a2:	2b10      	cmp	r3, #16
 80095a4:	d00e      	beq.n	80095c4 <lwip_netconn_do_delconn+0xcc>
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d000      	beq.n	80095ac <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 80095aa:	e051      	b.n	8009650 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	4618      	mov	r0, r3
 80095be:	f009 fb47 	bl	8012c50 <udp_remove>
          break;
 80095c2:	e045      	b.n	8009650 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d006      	beq.n	80095dc <lwip_netconn_do_delconn+0xe4>
 80095ce:	4b35      	ldr	r3, [pc, #212]	; (80096a4 <lwip_netconn_do_delconn+0x1ac>)
 80095d0:	f240 4294 	movw	r2, #1172	; 0x494
 80095d4:	4937      	ldr	r1, [pc, #220]	; (80096b4 <lwip_netconn_do_delconn+0x1bc>)
 80095d6:	4835      	ldr	r0, [pc, #212]	; (80096ac <lwip_netconn_do_delconn+0x1b4>)
 80095d8:	f00d ff76 	bl	80174c8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2204      	movs	r2, #4
 80095e2:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2203      	movs	r2, #3
 80095e8:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2100      	movs	r1, #0
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff fe17 	bl	800922c <lwip_netconn_do_close_internal>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d04a      	beq.n	800969a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b04      	cmp	r3, #4
 800960c:	d006      	beq.n	800961c <lwip_netconn_do_delconn+0x124>
 800960e:	4b25      	ldr	r3, [pc, #148]	; (80096a4 <lwip_netconn_do_delconn+0x1ac>)
 8009610:	f240 429a 	movw	r2, #1178	; 0x49a
 8009614:	4928      	ldr	r1, [pc, #160]	; (80096b8 <lwip_netconn_do_delconn+0x1c0>)
 8009616:	4825      	ldr	r0, [pc, #148]	; (80096ac <lwip_netconn_do_delconn+0x1b4>)
 8009618:	f00d ff56 	bl	80174c8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800961c:	4827      	ldr	r0, [pc, #156]	; (80096bc <lwip_netconn_do_delconn+0x1c4>)
 800961e:	f00d febc 	bl	801739a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	330c      	adds	r3, #12
 8009628:	2100      	movs	r1, #0
 800962a:	4618      	mov	r0, r3
 800962c:	f00d fe13 	bl	8017256 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009630:	4822      	ldr	r0, [pc, #136]	; (80096bc <lwip_netconn_do_delconn+0x1c4>)
 8009632:	f00d fea3 	bl	801737c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	785b      	ldrb	r3, [r3, #1]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d02c      	beq.n	800969a <lwip_netconn_do_delconn+0x1a2>
 8009640:	4b18      	ldr	r3, [pc, #96]	; (80096a4 <lwip_netconn_do_delconn+0x1ac>)
 8009642:	f240 429e 	movw	r2, #1182	; 0x49e
 8009646:	491c      	ldr	r1, [pc, #112]	; (80096b8 <lwip_netconn_do_delconn+0x1c0>)
 8009648:	4818      	ldr	r0, [pc, #96]	; (80096ac <lwip_netconn_do_delconn+0x1b4>)
 800964a:	f00d ff3d 	bl	80174c8 <iprintf>
          return;
 800964e:	e024      	b.n	800969a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2200      	movs	r2, #0
 8009656:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	d007      	beq.n	8009672 <lwip_netconn_do_delconn+0x17a>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	6810      	ldr	r0, [r2, #0]
 800966c:	2200      	movs	r2, #0
 800966e:	2100      	movs	r1, #0
 8009670:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	2b00      	cmp	r3, #0
 800967a:	d007      	beq.n	800968c <lwip_netconn_do_delconn+0x194>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	6810      	ldr	r0, [r2, #0]
 8009686:	2200      	movs	r2, #0
 8009688:	2102      	movs	r1, #2
 800968a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	330c      	adds	r3, #12
 8009692:	4618      	mov	r0, r3
 8009694:	f00d fe2a 	bl	80172ec <sys_sem_valid>
 8009698:	e000      	b.n	800969c <lwip_netconn_do_delconn+0x1a4>
          return;
 800969a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	08018754 	.word	0x08018754
 80096a8:	08018ac4 	.word	0x08018ac4
 80096ac:	08018798 	.word	0x08018798
 80096b0:	08018ad8 	.word	0x08018ad8
 80096b4:	08018af8 	.word	0x08018af8
 80096b8:	08018b14 	.word	0x08018b14
 80096bc:	2000bbf4 	.word	0x2000bbf4

080096c0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d026      	beq.n	8009724 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d00e      	beq.n	8009702 <lwip_netconn_do_bind+0x42>
 80096e4:	2b20      	cmp	r3, #32
 80096e6:	d119      	bne.n	800971c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6858      	ldr	r0, [r3, #4]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	6899      	ldr	r1, [r3, #8]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	899b      	ldrh	r3, [r3, #12]
 80096f6:	461a      	mov	r2, r3
 80096f8:	f009 f994 	bl	8012a24 <udp_bind>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]
        break;
 8009700:	e012      	b.n	8009728 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6858      	ldr	r0, [r3, #4]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	6899      	ldr	r1, [r3, #8]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	899b      	ldrh	r3, [r3, #12]
 8009710:	461a      	mov	r2, r3
 8009712:	f002 ffc7 	bl	800c6a4 <tcp_bind>
 8009716:	4603      	mov	r3, r0
 8009718:	73fb      	strb	r3, [r7, #15]
        break;
 800971a:	e005      	b.n	8009728 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800971c:	23fa      	movs	r3, #250	; 0xfa
 800971e:	73fb      	strb	r3, [r7, #15]
        break;
 8009720:	bf00      	nop
 8009722:	e001      	b.n	8009728 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8009724:	23fa      	movs	r3, #250	; 0xfa
 8009726:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	7bfa      	ldrb	r2, [r7, #15]
 800972c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d07f      	beq.n	800984e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009758:	2b10      	cmp	r3, #16
 800975a:	d175      	bne.n	8009848 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d165      	bne.n	8009832 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	7d1b      	ldrb	r3, [r3, #20]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009772:	23fa      	movs	r3, #250	; 0xfa
 8009774:	72fb      	strb	r3, [r7, #11]
 8009776:	e06c      	b.n	8009852 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009778:	23ff      	movs	r3, #255	; 0xff
 800977a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f107 020b 	add.w	r2, r7, #11
 8009786:	7cf9      	ldrb	r1, [r7, #19]
 8009788:	4618      	mov	r0, r3
 800978a:	f003 f843 	bl	800c814 <tcp_listen_with_backlog_and_err>
 800978e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d05d      	beq.n	8009852 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3310      	adds	r3, #16
 800979c:	4618      	mov	r0, r3
 800979e:	f00d fd14 	bl	80171ca <sys_mbox_valid>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3310      	adds	r3, #16
 80097ae:	4618      	mov	r0, r3
 80097b0:	f00d fc84 	bl	80170bc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3310      	adds	r3, #16
 80097ba:	4618      	mov	r0, r3
 80097bc:	f00d fd16 	bl	80171ec <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3314      	adds	r3, #20
 80097ca:	4618      	mov	r0, r3
 80097cc:	f00d fcfd 	bl	80171ca <sys_mbox_valid>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d108      	bne.n	80097e8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3314      	adds	r3, #20
 80097dc:	2106      	movs	r1, #6
 80097de:	4618      	mov	r0, r3
 80097e0:	f00d fc4a 	bl	8017078 <sys_mbox_new>
 80097e4:	4603      	mov	r3, r0
 80097e6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80097e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d118      	bne.n	8009822 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2202      	movs	r2, #2
 80097f6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f003 ffc7 	bl	800d7a0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	4912      	ldr	r1, [pc, #72]	; (8009864 <lwip_netconn_do_listen+0x12c>)
 800981a:	4618      	mov	r0, r3
 800981c:	f004 f838 	bl	800d890 <tcp_accept>
 8009820:	e017      	b.n	8009852 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f002 fdee 	bl	800c404 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2200      	movs	r2, #0
 800982e:	605a      	str	r2, [r3, #4]
 8009830:	e00f      	b.n	8009852 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	785b      	ldrb	r3, [r3, #1]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d102      	bne.n	8009842 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	72fb      	strb	r3, [r7, #11]
 8009840:	e007      	b.n	8009852 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009842:	23f5      	movs	r3, #245	; 0xf5
 8009844:	72fb      	strb	r3, [r7, #11]
 8009846:	e004      	b.n	8009852 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009848:	23f0      	movs	r3, #240	; 0xf0
 800984a:	72fb      	strb	r3, [r7, #11]
 800984c:	e001      	b.n	8009852 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800984e:	23f5      	movs	r3, #245	; 0xf5
 8009850:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009852:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800985a:	bf00      	nop
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	08008d49 	.word	0x08008d49

08009868 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2200      	movs	r2, #0
 8009878:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d022      	beq.n	80098ca <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800988e:	2b10      	cmp	r3, #16
 8009890:	d11b      	bne.n	80098ca <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800989e:	d202      	bcs.n	80098a6 <lwip_netconn_do_recv+0x3e>
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	e001      	b.n	80098aa <lwip_netconn_do_recv+0x42>
 80098a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098aa:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	89fa      	ldrh	r2, [r7, #14]
 80098b4:	4611      	mov	r1, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f003 f8b0 	bl	800ca1c <tcp_recved>
        remaining -= recved;
 80098bc:	89fb      	ldrh	r3, [r7, #14]
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e6      	bne.n	8009898 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80098ca:	bf00      	nop
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <lwip_netconn_do_writemore+0x24>
 80098ea:	4b96      	ldr	r3, [pc, #600]	; (8009b44 <lwip_netconn_do_writemore+0x270>)
 80098ec:	f240 6273 	movw	r2, #1651	; 0x673
 80098f0:	4995      	ldr	r1, [pc, #596]	; (8009b48 <lwip_netconn_do_writemore+0x274>)
 80098f2:	4896      	ldr	r0, [pc, #600]	; (8009b4c <lwip_netconn_do_writemore+0x278>)
 80098f4:	f00d fde8 	bl	80174c8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d006      	beq.n	800990e <lwip_netconn_do_writemore+0x3a>
 8009900:	4b90      	ldr	r3, [pc, #576]	; (8009b44 <lwip_netconn_do_writemore+0x270>)
 8009902:	f240 6274 	movw	r2, #1652	; 0x674
 8009906:	4992      	ldr	r1, [pc, #584]	; (8009b50 <lwip_netconn_do_writemore+0x27c>)
 8009908:	4890      	ldr	r0, [pc, #576]	; (8009b4c <lwip_netconn_do_writemore+0x278>)
 800990a:	f00d fddd 	bl	80174c8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d106      	bne.n	8009924 <lwip_netconn_do_writemore+0x50>
 8009916:	4b8b      	ldr	r3, [pc, #556]	; (8009b44 <lwip_netconn_do_writemore+0x270>)
 8009918:	f240 6275 	movw	r2, #1653	; 0x675
 800991c:	498d      	ldr	r1, [pc, #564]	; (8009b54 <lwip_netconn_do_writemore+0x280>)
 800991e:	488b      	ldr	r0, [pc, #556]	; (8009b4c <lwip_netconn_do_writemore+0x278>)
 8009920:	f00d fdd2 	bl	80174c8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <lwip_netconn_do_writemore+0x66>
 800992c:	4b85      	ldr	r3, [pc, #532]	; (8009b44 <lwip_netconn_do_writemore+0x270>)
 800992e:	f240 6276 	movw	r2, #1654	; 0x676
 8009932:	4989      	ldr	r1, [pc, #548]	; (8009b58 <lwip_netconn_do_writemore+0x284>)
 8009934:	4885      	ldr	r0, [pc, #532]	; (8009b4c <lwip_netconn_do_writemore+0x278>)
 8009936:	f00d fdc7 	bl	80174c8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	429a      	cmp	r2, r3
 8009948:	d306      	bcc.n	8009958 <lwip_netconn_do_writemore+0x84>
 800994a:	4b7e      	ldr	r3, [pc, #504]	; (8009b44 <lwip_netconn_do_writemore+0x270>)
 800994c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009950:	4982      	ldr	r1, [pc, #520]	; (8009b5c <lwip_netconn_do_writemore+0x288>)
 8009952:	487e      	ldr	r0, [pc, #504]	; (8009b4c <lwip_netconn_do_writemore+0x278>)
 8009954:	f00d fdb8 	bl	80174c8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	899b      	ldrh	r3, [r3, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <lwip_netconn_do_writemore+0x9c>
 8009962:	4b78      	ldr	r3, [pc, #480]	; (8009b44 <lwip_netconn_do_writemore+0x270>)
 8009964:	f240 6279 	movw	r2, #1657	; 0x679
 8009968:	497d      	ldr	r1, [pc, #500]	; (8009b60 <lwip_netconn_do_writemore+0x28c>)
 800996a:	4878      	ldr	r0, [pc, #480]	; (8009b4c <lwip_netconn_do_writemore+0x278>)
 800996c:	f00d fdac 	bl	80174c8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a1b      	ldr	r3, [r3, #32]
 8009974:	7f1b      	ldrb	r3, [r3, #28]
 8009976:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	7f1b      	ldrb	r3, [r3, #28]
 800997c:	f003 0302 	and.w	r3, r3, #2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d104      	bne.n	800998e <lwip_netconn_do_writemore+0xba>
 8009984:	7ebb      	ldrb	r3, [r7, #26]
 8009986:	f003 0304 	and.w	r3, r3, #4
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <lwip_netconn_do_writemore+0xbe>
 800998e:	2301      	movs	r3, #1
 8009990:	e000      	b.n	8009994 <lwip_netconn_do_writemore+0xc0>
 8009992:	2300      	movs	r3, #0
 8009994:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	4413      	add	r3, r2
 80099a6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c0:	d307      	bcc.n	80099d2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80099c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099c6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80099c8:	7ebb      	ldrb	r3, [r7, #26]
 80099ca:	f043 0302 	orr.w	r3, r3, #2
 80099ce:	76bb      	strb	r3, [r7, #26]
 80099d0:	e001      	b.n	80099d6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80099de:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80099e0:	89fa      	ldrh	r2, [r7, #14]
 80099e2:	8bbb      	ldrh	r3, [r7, #28]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d216      	bcs.n	8009a16 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80099e8:	89fb      	ldrh	r3, [r7, #14]
 80099ea:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80099ec:	7e3b      	ldrb	r3, [r7, #24]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00d      	beq.n	8009a0e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80099f2:	8bbb      	ldrh	r3, [r7, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10e      	bne.n	8009a16 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d102      	bne.n	8009a08 <lwip_netconn_do_writemore+0x134>
 8009a02:	f06f 0306 	mvn.w	r3, #6
 8009a06:	e000      	b.n	8009a0a <lwip_netconn_do_writemore+0x136>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009a0c:	e07d      	b.n	8009b0a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009a0e:	7ebb      	ldrb	r3, [r7, #26]
 8009a10:	f043 0302 	orr.w	r3, r3, #2
 8009a14:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	691a      	ldr	r2, [r3, #16]
 8009a1c:	8bbb      	ldrh	r3, [r7, #28]
 8009a1e:	441a      	add	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d906      	bls.n	8009a3a <lwip_netconn_do_writemore+0x166>
 8009a2c:	4b45      	ldr	r3, [pc, #276]	; (8009b44 <lwip_netconn_do_writemore+0x270>)
 8009a2e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009a32:	494c      	ldr	r1, [pc, #304]	; (8009b64 <lwip_netconn_do_writemore+0x290>)
 8009a34:	4845      	ldr	r0, [pc, #276]	; (8009b4c <lwip_netconn_do_writemore+0x278>)
 8009a36:	f00d fd47 	bl	80174c8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009a3a:	8bbb      	ldrh	r3, [r7, #28]
 8009a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d103      	bne.n	8009a4c <lwip_netconn_do_writemore+0x178>
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4a:	d209      	bcs.n	8009a60 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009a50:	8bba      	ldrh	r2, [r7, #28]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d10b      	bne.n	8009a6e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	899b      	ldrh	r3, [r3, #12]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d906      	bls.n	8009a6e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009a60:	2301      	movs	r3, #1
 8009a62:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009a64:	7ebb      	ldrb	r3, [r7, #26]
 8009a66:	f043 0302 	orr.w	r3, r3, #2
 8009a6a:	76bb      	strb	r3, [r7, #26]
 8009a6c:	e001      	b.n	8009a72 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6858      	ldr	r0, [r3, #4]
 8009a76:	7ebb      	ldrb	r3, [r7, #26]
 8009a78:	8bba      	ldrh	r2, [r7, #28]
 8009a7a:	6979      	ldr	r1, [r7, #20]
 8009a7c:	f006 fdcc 	bl	8010618 <tcp_write>
 8009a80:	4603      	mov	r3, r0
 8009a82:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009a84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d12c      	bne.n	8009ae6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	6999      	ldr	r1, [r3, #24]
 8009a92:	8bba      	ldrh	r2, [r7, #28]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	440a      	add	r2, r1
 8009a9a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	6919      	ldr	r1, [r3, #16]
 8009aa2:	8bba      	ldrh	r2, [r7, #28]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a1b      	ldr	r3, [r3, #32]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a1b      	ldr	r3, [r3, #32]
 8009ab0:	691a      	ldr	r2, [r3, #16]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d113      	bne.n	8009ae6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	899a      	ldrh	r2, [r3, #12]
 8009ac4:	3a01      	subs	r2, #1
 8009ac6:	b292      	uxth	r2, r2
 8009ac8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	899b      	ldrh	r3, [r3, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d008      	beq.n	8009ae6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	689a      	ldr	r2, [r3, #8]
 8009ada:	3208      	adds	r2, #8
 8009adc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009ae6:	7e7b      	ldrb	r3, [r7, #25]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <lwip_netconn_do_writemore+0x222>
 8009aec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f43f af50 	beq.w	8009996 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d004      	beq.n	8009b08 <lwip_netconn_do_writemore+0x234>
 8009afe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d146      	bne.n	8009b96 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009b08:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009b0a:	7e3b      	ldrb	r3, [r7, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d02b      	beq.n	8009b68 <lwip_netconn_do_writemore+0x294>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	699a      	ldr	r2, [r3, #24]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	695b      	ldr	r3, [r3, #20]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d223      	bcs.n	8009b68 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <lwip_netconn_do_writemore+0x260>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2103      	movs	r1, #3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7f1b      	ldrb	r3, [r3, #28]
 8009b38:	f043 0310 	orr.w	r3, r3, #16
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	771a      	strb	r2, [r3, #28]
 8009b42:	e028      	b.n	8009b96 <lwip_netconn_do_writemore+0x2c2>
 8009b44:	08018754 	.word	0x08018754
 8009b48:	080188ac 	.word	0x080188ac
 8009b4c:	08018798 	.word	0x08018798
 8009b50:	08018bb4 	.word	0x08018bb4
 8009b54:	080188bc 	.word	0x080188bc
 8009b58:	08018bd4 	.word	0x08018bd4
 8009b5c:	08018bec 	.word	0x08018bec
 8009b60:	08018c2c 	.word	0x08018c2c
 8009b64:	08018c54 	.word	0x08018c54
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b70:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009b74:	d305      	bcc.n	8009b82 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d909      	bls.n	8009b96 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d005      	beq.n	8009b96 <lwip_netconn_do_writemore+0x2c2>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2103      	movs	r1, #3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009b96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d11d      	bne.n	8009bda <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	699a      	ldr	r2, [r3, #24]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d002      	beq.n	8009bb4 <lwip_netconn_do_writemore+0x2e0>
 8009bae:	7e3b      	ldrb	r3, [r7, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f007 fb17 	bl	80111f0 <tcp_output>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009bc6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009bca:	f113 0f04 	cmn.w	r3, #4
 8009bce:	d12c      	bne.n	8009c2a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009bd0:	7b3b      	ldrb	r3, [r7, #12]
 8009bd2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	76fb      	strb	r3, [r7, #27]
 8009bd8:	e027      	b.n	8009c2a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d120      	bne.n	8009c26 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f007 fb01 	bl	80111f0 <tcp_output>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009bf2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009bf6:	f113 0f04 	cmn.w	r3, #4
 8009bfa:	d104      	bne.n	8009c06 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009bfc:	7b7b      	ldrb	r3, [r7, #13]
 8009bfe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009c00:	2301      	movs	r3, #1
 8009c02:	76fb      	strb	r3, [r7, #27]
 8009c04:	e011      	b.n	8009c2a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009c06:	7e3b      	ldrb	r3, [r7, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00e      	beq.n	8009c2a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <lwip_netconn_do_writemore+0x348>
 8009c16:	f06f 0306 	mvn.w	r3, #6
 8009c1a:	e000      	b.n	8009c1e <lwip_netconn_do_writemore+0x34a>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009c20:	2301      	movs	r3, #1
 8009c22:	76fb      	strb	r3, [r7, #27]
 8009c24:	e001      	b.n	8009c2a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009c26:	2301      	movs	r3, #1
 8009c28:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009c2a:	7efb      	ldrb	r3, [r7, #27]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d015      	beq.n	8009c5c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	330c      	adds	r3, #12
 8009c38:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	7ffa      	ldrb	r2, [r7, #31]
 8009c40:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009c4e:	78fb      	ldrb	r3, [r7, #3]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009c54:	68b8      	ldr	r0, [r7, #8]
 8009c56:	f00d fb2f 	bl	80172b8 <sys_sem_signal>
 8009c5a:	e002      	b.n	8009c62 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c60:	e000      	b.n	8009c64 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fd22 	bl	80086c6 <netconn_err>
 8009c82:	4603      	mov	r3, r0
 8009c84:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d166      	bne.n	8009d5c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	d15d      	bne.n	8009d58 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	785b      	ldrb	r3, [r3, #1]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009ca6:	23fb      	movs	r3, #251	; 0xfb
 8009ca8:	73fb      	strb	r3, [r7, #15]
 8009caa:	e057      	b.n	8009d5c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d04d      	beq.n	8009d52 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d006      	beq.n	8009cd6 <lwip_netconn_do_write+0x6a>
 8009cc8:	4b28      	ldr	r3, [pc, #160]	; (8009d6c <lwip_netconn_do_write+0x100>)
 8009cca:	f240 7223 	movw	r2, #1827	; 0x723
 8009cce:	4928      	ldr	r1, [pc, #160]	; (8009d70 <lwip_netconn_do_write+0x104>)
 8009cd0:	4828      	ldr	r0, [pc, #160]	; (8009d74 <lwip_netconn_do_write+0x108>)
 8009cd2:	f00d fbf9 	bl	80174c8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d106      	bne.n	8009cec <lwip_netconn_do_write+0x80>
 8009cde:	4b23      	ldr	r3, [pc, #140]	; (8009d6c <lwip_netconn_do_write+0x100>)
 8009ce0:	f240 7224 	movw	r2, #1828	; 0x724
 8009ce4:	4924      	ldr	r1, [pc, #144]	; (8009d78 <lwip_netconn_do_write+0x10c>)
 8009ce6:	4823      	ldr	r0, [pc, #140]	; (8009d74 <lwip_netconn_do_write+0x108>)
 8009ce8:	f00d fbee 	bl	80174c8 <iprintf>
        msg->conn->current_msg = msg;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff fdea 	bl	80098d4 <lwip_netconn_do_writemore>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d02e      	beq.n	8009d64 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	785b      	ldrb	r3, [r3, #1]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d006      	beq.n	8009d1e <lwip_netconn_do_write+0xb2>
 8009d10:	4b16      	ldr	r3, [pc, #88]	; (8009d6c <lwip_netconn_do_write+0x100>)
 8009d12:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009d16:	4919      	ldr	r1, [pc, #100]	; (8009d7c <lwip_netconn_do_write+0x110>)
 8009d18:	4816      	ldr	r0, [pc, #88]	; (8009d74 <lwip_netconn_do_write+0x108>)
 8009d1a:	f00d fbd5 	bl	80174c8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009d1e:	4818      	ldr	r0, [pc, #96]	; (8009d80 <lwip_netconn_do_write+0x114>)
 8009d20:	f00d fb3b 	bl	801739a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	330c      	adds	r3, #12
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f00d fa92 	bl	8017256 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009d32:	4813      	ldr	r0, [pc, #76]	; (8009d80 <lwip_netconn_do_write+0x114>)
 8009d34:	f00d fb22 	bl	801737c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	785b      	ldrb	r3, [r3, #1]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d110      	bne.n	8009d64 <lwip_netconn_do_write+0xf8>
 8009d42:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <lwip_netconn_do_write+0x100>)
 8009d44:	f240 722c 	movw	r2, #1836	; 0x72c
 8009d48:	490c      	ldr	r1, [pc, #48]	; (8009d7c <lwip_netconn_do_write+0x110>)
 8009d4a:	480a      	ldr	r0, [pc, #40]	; (8009d74 <lwip_netconn_do_write+0x108>)
 8009d4c:	f00d fbbc 	bl	80174c8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009d50:	e008      	b.n	8009d64 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009d52:	23f5      	movs	r3, #245	; 0xf5
 8009d54:	73fb      	strb	r3, [r7, #15]
 8009d56:	e001      	b.n	8009d5c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009d58:	23fa      	movs	r3, #250	; 0xfa
 8009d5a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	7bfa      	ldrb	r2, [r7, #15]
 8009d60:	711a      	strb	r2, [r3, #4]
 8009d62:	e000      	b.n	8009d66 <lwip_netconn_do_write+0xfa>
        return;
 8009d64:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	08018754 	.word	0x08018754
 8009d70:	08018af8 	.word	0x08018af8
 8009d74:	08018798 	.word	0x08018798
 8009d78:	08018c80 	.word	0x08018c80
 8009d7c:	08018b14 	.word	0x08018b14
 8009d80:	2000bbf4 	.word	0x2000bbf4

08009d84 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	785b      	ldrb	r3, [r3, #1]
 8009d96:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d069      	beq.n	8009e76 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009dac:	2b10      	cmp	r3, #16
 8009dae:	d162      	bne.n	8009e76 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009db4:	2b03      	cmp	r3, #3
 8009db6:	d002      	beq.n	8009dbe <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d05b      	beq.n	8009e76 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009dbe:	7afb      	ldrb	r3, [r7, #11]
 8009dc0:	2b03      	cmp	r3, #3
 8009dc2:	d103      	bne.n	8009dcc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	22f5      	movs	r2, #245	; 0xf5
 8009dc8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009dca:	e059      	b.n	8009e80 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d103      	bne.n	8009dda <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	22fb      	movs	r2, #251	; 0xfb
 8009dd6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009dd8:	e052      	b.n	8009e80 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	7a1b      	ldrb	r3, [r3, #8]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d004      	beq.n	8009df0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7ff f9a0 	bl	8009130 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d006      	beq.n	8009e08 <lwip_netconn_do_close+0x84>
 8009dfa:	4b23      	ldr	r3, [pc, #140]	; (8009e88 <lwip_netconn_do_close+0x104>)
 8009dfc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009e00:	4922      	ldr	r1, [pc, #136]	; (8009e8c <lwip_netconn_do_close+0x108>)
 8009e02:	4823      	ldr	r0, [pc, #140]	; (8009e90 <lwip_netconn_do_close+0x10c>)
 8009e04:	f00d fb60 	bl	80174c8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2204      	movs	r2, #4
 8009e0e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7ff fa04 	bl	800922c <lwip_netconn_do_close_internal>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d029      	beq.n	8009e7e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b04      	cmp	r3, #4
 8009e32:	d006      	beq.n	8009e42 <lwip_netconn_do_close+0xbe>
 8009e34:	4b14      	ldr	r3, [pc, #80]	; (8009e88 <lwip_netconn_do_close+0x104>)
 8009e36:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009e3a:	4916      	ldr	r1, [pc, #88]	; (8009e94 <lwip_netconn_do_close+0x110>)
 8009e3c:	4814      	ldr	r0, [pc, #80]	; (8009e90 <lwip_netconn_do_close+0x10c>)
 8009e3e:	f00d fb43 	bl	80174c8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009e42:	4815      	ldr	r0, [pc, #84]	; (8009e98 <lwip_netconn_do_close+0x114>)
 8009e44:	f00d faa9 	bl	801739a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	2100      	movs	r1, #0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f00d fa00 	bl	8017256 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009e56:	4810      	ldr	r0, [pc, #64]	; (8009e98 <lwip_netconn_do_close+0x114>)
 8009e58:	f00d fa90 	bl	801737c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	785b      	ldrb	r3, [r3, #1]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <lwip_netconn_do_close+0xfa>
 8009e66:	4b08      	ldr	r3, [pc, #32]	; (8009e88 <lwip_netconn_do_close+0x104>)
 8009e68:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009e6c:	4909      	ldr	r1, [pc, #36]	; (8009e94 <lwip_netconn_do_close+0x110>)
 8009e6e:	4808      	ldr	r0, [pc, #32]	; (8009e90 <lwip_netconn_do_close+0x10c>)
 8009e70:	f00d fb2a 	bl	80174c8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009e74:	e003      	b.n	8009e7e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	22f5      	movs	r2, #245	; 0xf5
 8009e7a:	711a      	strb	r2, [r3, #4]
 8009e7c:	e000      	b.n	8009e80 <lwip_netconn_do_close+0xfc>
      return;
 8009e7e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	08018754 	.word	0x08018754
 8009e8c:	08018af8 	.word	0x08018af8
 8009e90:	08018798 	.word	0x08018798
 8009e94:	08018b14 	.word	0x08018b14
 8009e98:	2000bbf4 	.word	0x2000bbf4

08009e9c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d013      	beq.n	8009ed2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00b      	beq.n	8009eca <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 fdf2 	bl	800baa0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	605a      	str	r2, [r3, #4]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	2006      	movs	r0, #6
 8009ece:	f000 ff3b 	bl	800ad48 <memp_free>
  }
}
 8009ed2:	bf00      	nop
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d108      	bne.n	8009f00 <netbuf_data+0x24>
 8009eee:	4b1b      	ldr	r3, [pc, #108]	; (8009f5c <netbuf_data+0x80>)
 8009ef0:	22c6      	movs	r2, #198	; 0xc6
 8009ef2:	491b      	ldr	r1, [pc, #108]	; (8009f60 <netbuf_data+0x84>)
 8009ef4:	481b      	ldr	r0, [pc, #108]	; (8009f64 <netbuf_data+0x88>)
 8009ef6:	f00d fae7 	bl	80174c8 <iprintf>
 8009efa:	f06f 030f 	mvn.w	r3, #15
 8009efe:	e029      	b.n	8009f54 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d108      	bne.n	8009f18 <netbuf_data+0x3c>
 8009f06:	4b15      	ldr	r3, [pc, #84]	; (8009f5c <netbuf_data+0x80>)
 8009f08:	22c7      	movs	r2, #199	; 0xc7
 8009f0a:	4917      	ldr	r1, [pc, #92]	; (8009f68 <netbuf_data+0x8c>)
 8009f0c:	4815      	ldr	r0, [pc, #84]	; (8009f64 <netbuf_data+0x88>)
 8009f0e:	f00d fadb 	bl	80174c8 <iprintf>
 8009f12:	f06f 030f 	mvn.w	r3, #15
 8009f16:	e01d      	b.n	8009f54 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d108      	bne.n	8009f30 <netbuf_data+0x54>
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <netbuf_data+0x80>)
 8009f20:	22c8      	movs	r2, #200	; 0xc8
 8009f22:	4912      	ldr	r1, [pc, #72]	; (8009f6c <netbuf_data+0x90>)
 8009f24:	480f      	ldr	r0, [pc, #60]	; (8009f64 <netbuf_data+0x88>)
 8009f26:	f00d facf 	bl	80174c8 <iprintf>
 8009f2a:	f06f 030f 	mvn.w	r3, #15
 8009f2e:	e011      	b.n	8009f54 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <netbuf_data+0x62>
    return ERR_BUF;
 8009f38:	f06f 0301 	mvn.w	r3, #1
 8009f3c:	e00a      	b.n	8009f54 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	895a      	ldrh	r2, [r3, #10]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	08018cac 	.word	0x08018cac
 8009f60:	08018db4 	.word	0x08018db4
 8009f64:	08018cfc 	.word	0x08018cfc
 8009f68:	08018dd0 	.word	0x08018dd0
 8009f6c:	08018df0 	.word	0x08018df0

08009f70 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d108      	bne.n	8009f90 <netbuf_next+0x20>
 8009f7e:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <netbuf_next+0x54>)
 8009f80:	22e0      	movs	r2, #224	; 0xe0
 8009f82:	4911      	ldr	r1, [pc, #68]	; (8009fc8 <netbuf_next+0x58>)
 8009f84:	4811      	ldr	r0, [pc, #68]	; (8009fcc <netbuf_next+0x5c>)
 8009f86:	f00d fa9f 	bl	80174c8 <iprintf>
 8009f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8e:	e014      	b.n	8009fba <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d102      	bne.n	8009fa0 <netbuf_next+0x30>
    return -1;
 8009f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9e:	e00c      	b.n	8009fba <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <netbuf_next+0x48>
    return 1;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e000      	b.n	8009fba <netbuf_next+0x4a>
  }
  return 0;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	08018cac 	.word	0x08018cac
 8009fc8:	08018e0c 	.word	0x08018e0c
 8009fcc:	08018cfc 	.word	0x08018cfc

08009fd0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009fda:	f008 f9cf 	bl	801237c <sys_timeouts_sleeptime>
 8009fde:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe6:	d10b      	bne.n	800a000 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009fe8:	4813      	ldr	r0, [pc, #76]	; (800a038 <tcpip_timeouts_mbox_fetch+0x68>)
 8009fea:	f00d f9d6 	bl	801739a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009fee:	2200      	movs	r2, #0
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f00d f88e 	bl	8017114 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009ff8:	480f      	ldr	r0, [pc, #60]	; (800a038 <tcpip_timeouts_mbox_fetch+0x68>)
 8009ffa:	f00d f9bf 	bl	801737c <sys_mutex_lock>
    return;
 8009ffe:	e018      	b.n	800a032 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a006:	f008 f97f 	bl	8012308 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a00a:	e7e6      	b.n	8009fda <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a00c:	480a      	ldr	r0, [pc, #40]	; (800a038 <tcpip_timeouts_mbox_fetch+0x68>)
 800a00e:	f00d f9c4 	bl	801739a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f00d f87c 	bl	8017114 <sys_arch_mbox_fetch>
 800a01c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a01e:	4806      	ldr	r0, [pc, #24]	; (800a038 <tcpip_timeouts_mbox_fetch+0x68>)
 800a020:	f00d f9ac 	bl	801737c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02a:	d102      	bne.n	800a032 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a02c:	f008 f96c 	bl	8012308 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a030:	e7d3      	b.n	8009fda <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	2000bbf4 	.word	0x2000bbf4

0800a03c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a044:	4810      	ldr	r0, [pc, #64]	; (800a088 <tcpip_thread+0x4c>)
 800a046:	f00d f999 	bl	801737c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a04a:	4b10      	ldr	r3, [pc, #64]	; (800a08c <tcpip_thread+0x50>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d005      	beq.n	800a05e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a052:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <tcpip_thread+0x50>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a0e      	ldr	r2, [pc, #56]	; (800a090 <tcpip_thread+0x54>)
 800a058:	6812      	ldr	r2, [r2, #0]
 800a05a:	4610      	mov	r0, r2
 800a05c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a05e:	f107 030c 	add.w	r3, r7, #12
 800a062:	4619      	mov	r1, r3
 800a064:	480b      	ldr	r0, [pc, #44]	; (800a094 <tcpip_thread+0x58>)
 800a066:	f7ff ffb3 	bl	8009fd0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d106      	bne.n	800a07e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a070:	4b09      	ldr	r3, [pc, #36]	; (800a098 <tcpip_thread+0x5c>)
 800a072:	2291      	movs	r2, #145	; 0x91
 800a074:	4909      	ldr	r1, [pc, #36]	; (800a09c <tcpip_thread+0x60>)
 800a076:	480a      	ldr	r0, [pc, #40]	; (800a0a0 <tcpip_thread+0x64>)
 800a078:	f00d fa26 	bl	80174c8 <iprintf>
      continue;
 800a07c:	e003      	b.n	800a086 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4618      	mov	r0, r3
 800a082:	f000 f80f 	bl	800a0a4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a086:	e7ea      	b.n	800a05e <tcpip_thread+0x22>
 800a088:	2000bbf4 	.word	0x2000bbf4
 800a08c:	2000844c 	.word	0x2000844c
 800a090:	20008450 	.word	0x20008450
 800a094:	20008454 	.word	0x20008454
 800a098:	08018e44 	.word	0x08018e44
 800a09c:	08018e74 	.word	0x08018e74
 800a0a0:	08018e94 	.word	0x08018e94

0800a0a4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d018      	beq.n	800a0e6 <tcpip_thread_handle_msg+0x42>
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d021      	beq.n	800a0fc <tcpip_thread_handle_msg+0x58>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d126      	bne.n	800a10a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6850      	ldr	r0, [r2, #4]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	6892      	ldr	r2, [r2, #8]
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d004      	beq.n	800a0dc <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 fce2 	bl	800baa0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	2009      	movs	r0, #9
 800a0e0:	f000 fe32 	bl	800ad48 <memp_free>
      break;
 800a0e4:	e018      	b.n	800a118 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6892      	ldr	r2, [r2, #8]
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	2008      	movs	r0, #8
 800a0f6:	f000 fe27 	bl	800ad48 <memp_free>
      break;
 800a0fa:	e00d      	b.n	800a118 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	6892      	ldr	r2, [r2, #8]
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
      break;
 800a108:	e006      	b.n	800a118 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a10a:	4b05      	ldr	r3, [pc, #20]	; (800a120 <tcpip_thread_handle_msg+0x7c>)
 800a10c:	22cf      	movs	r2, #207	; 0xcf
 800a10e:	4905      	ldr	r1, [pc, #20]	; (800a124 <tcpip_thread_handle_msg+0x80>)
 800a110:	4805      	ldr	r0, [pc, #20]	; (800a128 <tcpip_thread_handle_msg+0x84>)
 800a112:	f00d f9d9 	bl	80174c8 <iprintf>
      break;
 800a116:	bf00      	nop
  }
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	08018e44 	.word	0x08018e44
 800a124:	08018e74 	.word	0x08018e74
 800a128:	08018e94 	.word	0x08018e94

0800a12c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a138:	481a      	ldr	r0, [pc, #104]	; (800a1a4 <tcpip_inpkt+0x78>)
 800a13a:	f00d f846 	bl	80171ca <sys_mbox_valid>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d105      	bne.n	800a150 <tcpip_inpkt+0x24>
 800a144:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <tcpip_inpkt+0x7c>)
 800a146:	22fc      	movs	r2, #252	; 0xfc
 800a148:	4918      	ldr	r1, [pc, #96]	; (800a1ac <tcpip_inpkt+0x80>)
 800a14a:	4819      	ldr	r0, [pc, #100]	; (800a1b0 <tcpip_inpkt+0x84>)
 800a14c:	f00d f9bc 	bl	80174c8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a150:	2009      	movs	r0, #9
 800a152:	f000 fda7 	bl	800aca4 <memp_malloc>
 800a156:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a15e:	f04f 33ff 	mov.w	r3, #4294967295
 800a162:	e01a      	b.n	800a19a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a17c:	6979      	ldr	r1, [r7, #20]
 800a17e:	4809      	ldr	r0, [pc, #36]	; (800a1a4 <tcpip_inpkt+0x78>)
 800a180:	f00c ffae 	bl	80170e0 <sys_mbox_trypost>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d006      	beq.n	800a198 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a18a:	6979      	ldr	r1, [r7, #20]
 800a18c:	2009      	movs	r0, #9
 800a18e:	f000 fddb 	bl	800ad48 <memp_free>
    return ERR_MEM;
 800a192:	f04f 33ff 	mov.w	r3, #4294967295
 800a196:	e000      	b.n	800a19a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a198:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20008454 	.word	0x20008454
 800a1a8:	08018e44 	.word	0x08018e44
 800a1ac:	08018ebc 	.word	0x08018ebc
 800a1b0:	08018e94 	.word	0x08018e94

0800a1b4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1c4:	f003 0318 	and.w	r3, r3, #24
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d006      	beq.n	800a1da <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a1cc:	4a08      	ldr	r2, [pc, #32]	; (800a1f0 <tcpip_input+0x3c>)
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7ff ffab 	bl	800a12c <tcpip_inpkt>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	e005      	b.n	800a1e6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a1da:	4a06      	ldr	r2, [pc, #24]	; (800a1f4 <tcpip_input+0x40>)
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff ffa4 	bl	800a12c <tcpip_inpkt>
 800a1e4:	4603      	mov	r3, r0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	08016ecd 	.word	0x08016ecd
 800a1f4:	08015db1 	.word	0x08015db1

0800a1f8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a202:	4819      	ldr	r0, [pc, #100]	; (800a268 <tcpip_try_callback+0x70>)
 800a204:	f00c ffe1 	bl	80171ca <sys_mbox_valid>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d106      	bne.n	800a21c <tcpip_try_callback+0x24>
 800a20e:	4b17      	ldr	r3, [pc, #92]	; (800a26c <tcpip_try_callback+0x74>)
 800a210:	f240 125d 	movw	r2, #349	; 0x15d
 800a214:	4916      	ldr	r1, [pc, #88]	; (800a270 <tcpip_try_callback+0x78>)
 800a216:	4817      	ldr	r0, [pc, #92]	; (800a274 <tcpip_try_callback+0x7c>)
 800a218:	f00d f956 	bl	80174c8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a21c:	2008      	movs	r0, #8
 800a21e:	f000 fd41 	bl	800aca4 <memp_malloc>
 800a222:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a22a:	f04f 33ff 	mov.w	r3, #4294967295
 800a22e:	e017      	b.n	800a260 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	4808      	ldr	r0, [pc, #32]	; (800a268 <tcpip_try_callback+0x70>)
 800a246:	f00c ff4b 	bl	80170e0 <sys_mbox_trypost>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a250:	68f9      	ldr	r1, [r7, #12]
 800a252:	2008      	movs	r0, #8
 800a254:	f000 fd78 	bl	800ad48 <memp_free>
    return ERR_MEM;
 800a258:	f04f 33ff 	mov.w	r3, #4294967295
 800a25c:	e000      	b.n	800a260 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	20008454 	.word	0x20008454
 800a26c:	08018e44 	.word	0x08018e44
 800a270:	08018ebc 	.word	0x08018ebc
 800a274:	08018e94 	.word	0x08018e94

0800a278 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a284:	4806      	ldr	r0, [pc, #24]	; (800a2a0 <tcpip_send_msg_wait_sem+0x28>)
 800a286:	f00d f879 	bl	801737c <sys_mutex_lock>
  fn(apimsg);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	68b8      	ldr	r0, [r7, #8]
 800a28e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a290:	4803      	ldr	r0, [pc, #12]	; (800a2a0 <tcpip_send_msg_wait_sem+0x28>)
 800a292:	f00d f882 	bl	801739a <sys_mutex_unlock>
  return ERR_OK;
 800a296:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	2000bbf4 	.word	0x2000bbf4

0800a2a4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a2ae:	f000 f871 	bl	800a394 <lwip_init>

  tcpip_init_done = initfunc;
 800a2b2:	4a17      	ldr	r2, [pc, #92]	; (800a310 <tcpip_init+0x6c>)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a2b8:	4a16      	ldr	r2, [pc, #88]	; (800a314 <tcpip_init+0x70>)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a2be:	2106      	movs	r1, #6
 800a2c0:	4815      	ldr	r0, [pc, #84]	; (800a318 <tcpip_init+0x74>)
 800a2c2:	f00c fed9 	bl	8017078 <sys_mbox_new>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d006      	beq.n	800a2da <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a2cc:	4b13      	ldr	r3, [pc, #76]	; (800a31c <tcpip_init+0x78>)
 800a2ce:	f240 2261 	movw	r2, #609	; 0x261
 800a2d2:	4913      	ldr	r1, [pc, #76]	; (800a320 <tcpip_init+0x7c>)
 800a2d4:	4813      	ldr	r0, [pc, #76]	; (800a324 <tcpip_init+0x80>)
 800a2d6:	f00d f8f7 	bl	80174c8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a2da:	4813      	ldr	r0, [pc, #76]	; (800a328 <tcpip_init+0x84>)
 800a2dc:	f00d f832 	bl	8017344 <sys_mutex_new>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d006      	beq.n	800a2f4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <tcpip_init+0x78>)
 800a2e8:	f240 2265 	movw	r2, #613	; 0x265
 800a2ec:	490f      	ldr	r1, [pc, #60]	; (800a32c <tcpip_init+0x88>)
 800a2ee:	480d      	ldr	r0, [pc, #52]	; (800a324 <tcpip_init+0x80>)
 800a2f0:	f00d f8ea 	bl	80174c8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	490c      	ldr	r1, [pc, #48]	; (800a330 <tcpip_init+0x8c>)
 800a300:	480c      	ldr	r0, [pc, #48]	; (800a334 <tcpip_init+0x90>)
 800a302:	f00d f857 	bl	80173b4 <sys_thread_new>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	2000844c 	.word	0x2000844c
 800a314:	20008450 	.word	0x20008450
 800a318:	20008454 	.word	0x20008454
 800a31c:	08018e44 	.word	0x08018e44
 800a320:	08018ecc 	.word	0x08018ecc
 800a324:	08018e94 	.word	0x08018e94
 800a328:	2000bbf4 	.word	0x2000bbf4
 800a32c:	08018ef0 	.word	0x08018ef0
 800a330:	0800a03d 	.word	0x0800a03d
 800a334:	08018f14 	.word	0x08018f14

0800a338 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a342:	88fb      	ldrh	r3, [r7, #6]
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	b21a      	sxth	r2, r3
 800a348:	88fb      	ldrh	r3, [r7, #6]
 800a34a:	0a1b      	lsrs	r3, r3, #8
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	b21b      	sxth	r3, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	b21b      	sxth	r3, r3
 800a354:	b29b      	uxth	r3, r3
}
 800a356:	4618      	mov	r0, r3
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	061a      	lsls	r2, r3, #24
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	0e1b      	lsrs	r3, r3, #24
 800a386:	4313      	orrs	r3, r2
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a39e:	f00c ffc3 	bl	8017328 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a3a2:	f000 f8d5 	bl	800a550 <mem_init>
  memp_init();
 800a3a6:	f000 fc31 	bl	800ac0c <memp_init>
  pbuf_init();
  netif_init();
 800a3aa:	f000 fcf7 	bl	800ad9c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3ae:	f008 f81d 	bl	80123ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3b2:	f001 fe1f 	bl	800bff4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a3b6:	f007 ff61 	bl	801227c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a3ba:	bf00      	nop
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <ptr_to_mem+0x20>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	4413      	add	r3, r2
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20008458 	.word	0x20008458

0800a3e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a05      	ldr	r2, [pc, #20]	; (800a408 <mem_to_ptr+0x20>)
 800a3f4:	6812      	ldr	r2, [r2, #0]
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	b29b      	uxth	r3, r3
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20008458 	.word	0x20008458

0800a40c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a40c:	b590      	push	{r4, r7, lr}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a414:	4b45      	ldr	r3, [pc, #276]	; (800a52c <plug_holes+0x120>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d206      	bcs.n	800a42c <plug_holes+0x20>
 800a41e:	4b44      	ldr	r3, [pc, #272]	; (800a530 <plug_holes+0x124>)
 800a420:	f240 12df 	movw	r2, #479	; 0x1df
 800a424:	4943      	ldr	r1, [pc, #268]	; (800a534 <plug_holes+0x128>)
 800a426:	4844      	ldr	r0, [pc, #272]	; (800a538 <plug_holes+0x12c>)
 800a428:	f00d f84e 	bl	80174c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a42c:	4b43      	ldr	r3, [pc, #268]	; (800a53c <plug_holes+0x130>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	429a      	cmp	r2, r3
 800a434:	d306      	bcc.n	800a444 <plug_holes+0x38>
 800a436:	4b3e      	ldr	r3, [pc, #248]	; (800a530 <plug_holes+0x124>)
 800a438:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a43c:	4940      	ldr	r1, [pc, #256]	; (800a540 <plug_holes+0x134>)
 800a43e:	483e      	ldr	r0, [pc, #248]	; (800a538 <plug_holes+0x12c>)
 800a440:	f00d f842 	bl	80174c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	791b      	ldrb	r3, [r3, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d006      	beq.n	800a45a <plug_holes+0x4e>
 800a44c:	4b38      	ldr	r3, [pc, #224]	; (800a530 <plug_holes+0x124>)
 800a44e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a452:	493c      	ldr	r1, [pc, #240]	; (800a544 <plug_holes+0x138>)
 800a454:	4838      	ldr	r0, [pc, #224]	; (800a538 <plug_holes+0x12c>)
 800a456:	f00d f837 	bl	80174c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a462:	d906      	bls.n	800a472 <plug_holes+0x66>
 800a464:	4b32      	ldr	r3, [pc, #200]	; (800a530 <plug_holes+0x124>)
 800a466:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a46a:	4937      	ldr	r1, [pc, #220]	; (800a548 <plug_holes+0x13c>)
 800a46c:	4832      	ldr	r0, [pc, #200]	; (800a538 <plug_holes+0x12c>)
 800a46e:	f00d f82b 	bl	80174c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff ffa4 	bl	800a3c4 <ptr_to_mem>
 800a47c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	429a      	cmp	r2, r3
 800a484:	d024      	beq.n	800a4d0 <plug_holes+0xc4>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	791b      	ldrb	r3, [r3, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d120      	bne.n	800a4d0 <plug_holes+0xc4>
 800a48e:	4b2b      	ldr	r3, [pc, #172]	; (800a53c <plug_holes+0x130>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	429a      	cmp	r2, r3
 800a496:	d01b      	beq.n	800a4d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a498:	4b2c      	ldr	r3, [pc, #176]	; (800a54c <plug_holes+0x140>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d102      	bne.n	800a4a8 <plug_holes+0x9c>
      lfree = mem;
 800a4a2:	4a2a      	ldr	r2, [pc, #168]	; (800a54c <plug_holes+0x140>)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	881a      	ldrh	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4b8:	d00a      	beq.n	800a4d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff ff80 	bl	800a3c4 <ptr_to_mem>
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff ff8e 	bl	800a3e8 <mem_to_ptr>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	885b      	ldrh	r3, [r3, #2]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff ff75 	bl	800a3c4 <ptr_to_mem>
 800a4da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d01f      	beq.n	800a524 <plug_holes+0x118>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	791b      	ldrb	r3, [r3, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d11b      	bne.n	800a524 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a4ec:	4b17      	ldr	r3, [pc, #92]	; (800a54c <plug_holes+0x140>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d102      	bne.n	800a4fc <plug_holes+0xf0>
      lfree = pmem;
 800a4f6:	4a15      	ldr	r2, [pc, #84]	; (800a54c <plug_holes+0x140>)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	881a      	ldrh	r2, [r3, #0]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a50c:	d00a      	beq.n	800a524 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff ff56 	bl	800a3c4 <ptr_to_mem>
 800a518:	4604      	mov	r4, r0
 800a51a:	68b8      	ldr	r0, [r7, #8]
 800a51c:	f7ff ff64 	bl	800a3e8 <mem_to_ptr>
 800a520:	4603      	mov	r3, r0
 800a522:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a524:	bf00      	nop
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd90      	pop	{r4, r7, pc}
 800a52c:	20008458 	.word	0x20008458
 800a530:	08018f24 	.word	0x08018f24
 800a534:	08018f54 	.word	0x08018f54
 800a538:	08018f6c 	.word	0x08018f6c
 800a53c:	2000845c 	.word	0x2000845c
 800a540:	08018f94 	.word	0x08018f94
 800a544:	08018fb0 	.word	0x08018fb0
 800a548:	08018fcc 	.word	0x08018fcc
 800a54c:	20008464 	.word	0x20008464

0800a550 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a556:	4b1f      	ldr	r3, [pc, #124]	; (800a5d4 <mem_init+0x84>)
 800a558:	3303      	adds	r3, #3
 800a55a:	f023 0303 	bic.w	r3, r3, #3
 800a55e:	461a      	mov	r2, r3
 800a560:	4b1d      	ldr	r3, [pc, #116]	; (800a5d8 <mem_init+0x88>)
 800a562:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a564:	4b1c      	ldr	r3, [pc, #112]	; (800a5d8 <mem_init+0x88>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a570:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a57e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a582:	f7ff ff1f 	bl	800a3c4 <ptr_to_mem>
 800a586:	4602      	mov	r2, r0
 800a588:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <mem_init+0x8c>)
 800a58a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800a58c:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <mem_init+0x8c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2201      	movs	r2, #1
 800a592:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <mem_init+0x8c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a59c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a59e:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <mem_init+0x8c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a5a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a5a8:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <mem_init+0x88>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a0c      	ldr	r2, [pc, #48]	; (800a5e0 <mem_init+0x90>)
 800a5ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a5b0:	480c      	ldr	r0, [pc, #48]	; (800a5e4 <mem_init+0x94>)
 800a5b2:	f00c fec7 	bl	8017344 <sys_mutex_new>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d006      	beq.n	800a5ca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <mem_init+0x98>)
 800a5be:	f240 221f 	movw	r2, #543	; 0x21f
 800a5c2:	490a      	ldr	r1, [pc, #40]	; (800a5ec <mem_init+0x9c>)
 800a5c4:	480a      	ldr	r0, [pc, #40]	; (800a5f0 <mem_init+0xa0>)
 800a5c6:	f00c ff7f 	bl	80174c8 <iprintf>
  }
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	2000bc10 	.word	0x2000bc10
 800a5d8:	20008458 	.word	0x20008458
 800a5dc:	2000845c 	.word	0x2000845c
 800a5e0:	20008464 	.word	0x20008464
 800a5e4:	20008460 	.word	0x20008460
 800a5e8:	08018f24 	.word	0x08018f24
 800a5ec:	08018ff8 	.word	0x08018ff8
 800a5f0:	08018f6c 	.word	0x08018f6c

0800a5f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff fef3 	bl	800a3e8 <mem_to_ptr>
 800a602:	4603      	mov	r3, r0
 800a604:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff feda 	bl	800a3c4 <ptr_to_mem>
 800a610:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	885b      	ldrh	r3, [r3, #2]
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fed4 	bl	800a3c4 <ptr_to_mem>
 800a61c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a626:	d818      	bhi.n	800a65a <mem_link_valid+0x66>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	885b      	ldrh	r3, [r3, #2]
 800a62c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a630:	d813      	bhi.n	800a65a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a636:	8afa      	ldrh	r2, [r7, #22]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d004      	beq.n	800a646 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	8afa      	ldrh	r2, [r7, #22]
 800a642:	429a      	cmp	r2, r3
 800a644:	d109      	bne.n	800a65a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a646:	4b08      	ldr	r3, [pc, #32]	; (800a668 <mem_link_valid+0x74>)
 800a648:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d006      	beq.n	800a65e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	8afa      	ldrh	r2, [r7, #22]
 800a656:	429a      	cmp	r2, r3
 800a658:	d001      	beq.n	800a65e <mem_link_valid+0x6a>
    return 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e000      	b.n	800a660 <mem_link_valid+0x6c>
  }
  return 1;
 800a65e:	2301      	movs	r3, #1
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	2000845c 	.word	0x2000845c

0800a66c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d070      	beq.n	800a75c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f003 0303 	and.w	r3, r3, #3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00d      	beq.n	800a6a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a684:	4b37      	ldr	r3, [pc, #220]	; (800a764 <mem_free+0xf8>)
 800a686:	f240 2273 	movw	r2, #627	; 0x273
 800a68a:	4937      	ldr	r1, [pc, #220]	; (800a768 <mem_free+0xfc>)
 800a68c:	4837      	ldr	r0, [pc, #220]	; (800a76c <mem_free+0x100>)
 800a68e:	f00c ff1b 	bl	80174c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a692:	f00c feb5 	bl	8017400 <sys_arch_protect>
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f00c febf 	bl	801741c <sys_arch_unprotect>
    return;
 800a69e:	e05e      	b.n	800a75e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3b08      	subs	r3, #8
 800a6a4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a6a6:	4b32      	ldr	r3, [pc, #200]	; (800a770 <mem_free+0x104>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d306      	bcc.n	800a6be <mem_free+0x52>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f103 020c 	add.w	r2, r3, #12
 800a6b6:	4b2f      	ldr	r3, [pc, #188]	; (800a774 <mem_free+0x108>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d90d      	bls.n	800a6da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6be:	4b29      	ldr	r3, [pc, #164]	; (800a764 <mem_free+0xf8>)
 800a6c0:	f240 227f 	movw	r2, #639	; 0x27f
 800a6c4:	492c      	ldr	r1, [pc, #176]	; (800a778 <mem_free+0x10c>)
 800a6c6:	4829      	ldr	r0, [pc, #164]	; (800a76c <mem_free+0x100>)
 800a6c8:	f00c fefe 	bl	80174c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6cc:	f00c fe98 	bl	8017400 <sys_arch_protect>
 800a6d0:	6138      	str	r0, [r7, #16]
 800a6d2:	6938      	ldr	r0, [r7, #16]
 800a6d4:	f00c fea2 	bl	801741c <sys_arch_unprotect>
    return;
 800a6d8:	e041      	b.n	800a75e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a6da:	4828      	ldr	r0, [pc, #160]	; (800a77c <mem_free+0x110>)
 800a6dc:	f00c fe4e 	bl	801737c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	791b      	ldrb	r3, [r3, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d110      	bne.n	800a70a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a6e8:	4b1e      	ldr	r3, [pc, #120]	; (800a764 <mem_free+0xf8>)
 800a6ea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a6ee:	4924      	ldr	r1, [pc, #144]	; (800a780 <mem_free+0x114>)
 800a6f0:	481e      	ldr	r0, [pc, #120]	; (800a76c <mem_free+0x100>)
 800a6f2:	f00c fee9 	bl	80174c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a6f6:	4821      	ldr	r0, [pc, #132]	; (800a77c <mem_free+0x110>)
 800a6f8:	f00c fe4f 	bl	801739a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6fc:	f00c fe80 	bl	8017400 <sys_arch_protect>
 800a700:	6178      	str	r0, [r7, #20]
 800a702:	6978      	ldr	r0, [r7, #20]
 800a704:	f00c fe8a 	bl	801741c <sys_arch_unprotect>
    return;
 800a708:	e029      	b.n	800a75e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a70a:	69f8      	ldr	r0, [r7, #28]
 800a70c:	f7ff ff72 	bl	800a5f4 <mem_link_valid>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d110      	bne.n	800a738 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a716:	4b13      	ldr	r3, [pc, #76]	; (800a764 <mem_free+0xf8>)
 800a718:	f240 2295 	movw	r2, #661	; 0x295
 800a71c:	4919      	ldr	r1, [pc, #100]	; (800a784 <mem_free+0x118>)
 800a71e:	4813      	ldr	r0, [pc, #76]	; (800a76c <mem_free+0x100>)
 800a720:	f00c fed2 	bl	80174c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a724:	4815      	ldr	r0, [pc, #84]	; (800a77c <mem_free+0x110>)
 800a726:	f00c fe38 	bl	801739a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a72a:	f00c fe69 	bl	8017400 <sys_arch_protect>
 800a72e:	61b8      	str	r0, [r7, #24]
 800a730:	69b8      	ldr	r0, [r7, #24]
 800a732:	f00c fe73 	bl	801741c <sys_arch_unprotect>
    return;
 800a736:	e012      	b.n	800a75e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2200      	movs	r2, #0
 800a73c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a73e:	4b12      	ldr	r3, [pc, #72]	; (800a788 <mem_free+0x11c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	69fa      	ldr	r2, [r7, #28]
 800a744:	429a      	cmp	r2, r3
 800a746:	d202      	bcs.n	800a74e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a748:	4a0f      	ldr	r2, [pc, #60]	; (800a788 <mem_free+0x11c>)
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a74e:	69f8      	ldr	r0, [r7, #28]
 800a750:	f7ff fe5c 	bl	800a40c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a754:	4809      	ldr	r0, [pc, #36]	; (800a77c <mem_free+0x110>)
 800a756:	f00c fe20 	bl	801739a <sys_mutex_unlock>
 800a75a:	e000      	b.n	800a75e <mem_free+0xf2>
    return;
 800a75c:	bf00      	nop
}
 800a75e:	3720      	adds	r7, #32
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	08018f24 	.word	0x08018f24
 800a768:	08019014 	.word	0x08019014
 800a76c:	08018f6c 	.word	0x08018f6c
 800a770:	20008458 	.word	0x20008458
 800a774:	2000845c 	.word	0x2000845c
 800a778:	08019038 	.word	0x08019038
 800a77c:	20008460 	.word	0x20008460
 800a780:	08019054 	.word	0x08019054
 800a784:	0801907c 	.word	0x0801907c
 800a788:	20008464 	.word	0x20008464

0800a78c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a798:	887b      	ldrh	r3, [r7, #2]
 800a79a:	3303      	adds	r3, #3
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a7a4:	8bfb      	ldrh	r3, [r7, #30]
 800a7a6:	2b0b      	cmp	r3, #11
 800a7a8:	d801      	bhi.n	800a7ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a7ae:	8bfb      	ldrh	r3, [r7, #30]
 800a7b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7b4:	d803      	bhi.n	800a7be <mem_trim+0x32>
 800a7b6:	8bfa      	ldrh	r2, [r7, #30]
 800a7b8:	887b      	ldrh	r3, [r7, #2]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d201      	bcs.n	800a7c2 <mem_trim+0x36>
    return NULL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e0d8      	b.n	800a974 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a7c2:	4b6e      	ldr	r3, [pc, #440]	; (800a97c <mem_trim+0x1f0>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d304      	bcc.n	800a7d6 <mem_trim+0x4a>
 800a7cc:	4b6c      	ldr	r3, [pc, #432]	; (800a980 <mem_trim+0x1f4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d306      	bcc.n	800a7e4 <mem_trim+0x58>
 800a7d6:	4b6b      	ldr	r3, [pc, #428]	; (800a984 <mem_trim+0x1f8>)
 800a7d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a7dc:	496a      	ldr	r1, [pc, #424]	; (800a988 <mem_trim+0x1fc>)
 800a7de:	486b      	ldr	r0, [pc, #428]	; (800a98c <mem_trim+0x200>)
 800a7e0:	f00c fe72 	bl	80174c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a7e4:	4b65      	ldr	r3, [pc, #404]	; (800a97c <mem_trim+0x1f0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d304      	bcc.n	800a7f8 <mem_trim+0x6c>
 800a7ee:	4b64      	ldr	r3, [pc, #400]	; (800a980 <mem_trim+0x1f4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d307      	bcc.n	800a808 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7f8:	f00c fe02 	bl	8017400 <sys_arch_protect>
 800a7fc:	60b8      	str	r0, [r7, #8]
 800a7fe:	68b8      	ldr	r0, [r7, #8]
 800a800:	f00c fe0c 	bl	801741c <sys_arch_unprotect>
    return rmem;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	e0b5      	b.n	800a974 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3b08      	subs	r3, #8
 800a80c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a80e:	69b8      	ldr	r0, [r7, #24]
 800a810:	f7ff fdea 	bl	800a3e8 <mem_to_ptr>
 800a814:	4603      	mov	r3, r0
 800a816:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	881a      	ldrh	r2, [r3, #0]
 800a81c:	8afb      	ldrh	r3, [r7, #22]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	b29b      	uxth	r3, r3
 800a822:	3b08      	subs	r3, #8
 800a824:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a826:	8bfa      	ldrh	r2, [r7, #30]
 800a828:	8abb      	ldrh	r3, [r7, #20]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d906      	bls.n	800a83c <mem_trim+0xb0>
 800a82e:	4b55      	ldr	r3, [pc, #340]	; (800a984 <mem_trim+0x1f8>)
 800a830:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a834:	4956      	ldr	r1, [pc, #344]	; (800a990 <mem_trim+0x204>)
 800a836:	4855      	ldr	r0, [pc, #340]	; (800a98c <mem_trim+0x200>)
 800a838:	f00c fe46 	bl	80174c8 <iprintf>
  if (newsize > size) {
 800a83c:	8bfa      	ldrh	r2, [r7, #30]
 800a83e:	8abb      	ldrh	r3, [r7, #20]
 800a840:	429a      	cmp	r2, r3
 800a842:	d901      	bls.n	800a848 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a844:	2300      	movs	r3, #0
 800a846:	e095      	b.n	800a974 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a848:	8bfa      	ldrh	r2, [r7, #30]
 800a84a:	8abb      	ldrh	r3, [r7, #20]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d101      	bne.n	800a854 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	e08f      	b.n	800a974 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a854:	484f      	ldr	r0, [pc, #316]	; (800a994 <mem_trim+0x208>)
 800a856:	f00c fd91 	bl	801737c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff fdb0 	bl	800a3c4 <ptr_to_mem>
 800a864:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	791b      	ldrb	r3, [r3, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d13f      	bne.n	800a8ee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a876:	d106      	bne.n	800a886 <mem_trim+0xfa>
 800a878:	4b42      	ldr	r3, [pc, #264]	; (800a984 <mem_trim+0x1f8>)
 800a87a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a87e:	4946      	ldr	r1, [pc, #280]	; (800a998 <mem_trim+0x20c>)
 800a880:	4842      	ldr	r0, [pc, #264]	; (800a98c <mem_trim+0x200>)
 800a882:	f00c fe21 	bl	80174c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a88c:	8afa      	ldrh	r2, [r7, #22]
 800a88e:	8bfb      	ldrh	r3, [r7, #30]
 800a890:	4413      	add	r3, r2
 800a892:	b29b      	uxth	r3, r3
 800a894:	3308      	adds	r3, #8
 800a896:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a898:	4b40      	ldr	r3, [pc, #256]	; (800a99c <mem_trim+0x210>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d106      	bne.n	800a8b0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a8a2:	89fb      	ldrh	r3, [r7, #14]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fd8d 	bl	800a3c4 <ptr_to_mem>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	4b3b      	ldr	r3, [pc, #236]	; (800a99c <mem_trim+0x210>)
 800a8ae:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a8b0:	89fb      	ldrh	r3, [r7, #14]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fd86 	bl	800a3c4 <ptr_to_mem>
 800a8b8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	89ba      	ldrh	r2, [r7, #12]
 800a8c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	8afa      	ldrh	r2, [r7, #22]
 800a8ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	89fa      	ldrh	r2, [r7, #14]
 800a8d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8da:	d047      	beq.n	800a96c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff fd6f 	bl	800a3c4 <ptr_to_mem>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	89fb      	ldrh	r3, [r7, #14]
 800a8ea:	8053      	strh	r3, [r2, #2]
 800a8ec:	e03e      	b.n	800a96c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a8ee:	8bfb      	ldrh	r3, [r7, #30]
 800a8f0:	f103 0214 	add.w	r2, r3, #20
 800a8f4:	8abb      	ldrh	r3, [r7, #20]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d838      	bhi.n	800a96c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a8fa:	8afa      	ldrh	r2, [r7, #22]
 800a8fc:	8bfb      	ldrh	r3, [r7, #30]
 800a8fe:	4413      	add	r3, r2
 800a900:	b29b      	uxth	r3, r3
 800a902:	3308      	adds	r3, #8
 800a904:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a90e:	d106      	bne.n	800a91e <mem_trim+0x192>
 800a910:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <mem_trim+0x1f8>)
 800a912:	f240 3216 	movw	r2, #790	; 0x316
 800a916:	4920      	ldr	r1, [pc, #128]	; (800a998 <mem_trim+0x20c>)
 800a918:	481c      	ldr	r0, [pc, #112]	; (800a98c <mem_trim+0x200>)
 800a91a:	f00c fdd5 	bl	80174c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a91e:	89fb      	ldrh	r3, [r7, #14]
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff fd4f 	bl	800a3c4 <ptr_to_mem>
 800a926:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a928:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <mem_trim+0x210>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d202      	bcs.n	800a938 <mem_trim+0x1ac>
      lfree = mem2;
 800a932:	4a1a      	ldr	r2, [pc, #104]	; (800a99c <mem_trim+0x210>)
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2200      	movs	r2, #0
 800a93c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	881a      	ldrh	r2, [r3, #0]
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	8afa      	ldrh	r2, [r7, #22]
 800a94a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	89fa      	ldrh	r2, [r7, #14]
 800a950:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a95a:	d007      	beq.n	800a96c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff fd2f 	bl	800a3c4 <ptr_to_mem>
 800a966:	4602      	mov	r2, r0
 800a968:	89fb      	ldrh	r3, [r7, #14]
 800a96a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a96c:	4809      	ldr	r0, [pc, #36]	; (800a994 <mem_trim+0x208>)
 800a96e:	f00c fd14 	bl	801739a <sys_mutex_unlock>
  return rmem;
 800a972:	687b      	ldr	r3, [r7, #4]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3720      	adds	r7, #32
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20008458 	.word	0x20008458
 800a980:	2000845c 	.word	0x2000845c
 800a984:	08018f24 	.word	0x08018f24
 800a988:	080190b0 	.word	0x080190b0
 800a98c:	08018f6c 	.word	0x08018f6c
 800a990:	080190c8 	.word	0x080190c8
 800a994:	20008460 	.word	0x20008460
 800a998:	080190e8 	.word	0x080190e8
 800a99c:	20008464 	.word	0x20008464

0800a9a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b088      	sub	sp, #32
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <mem_malloc+0x14>
    return NULL;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e0e2      	b.n	800ab7a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a9b4:	88fb      	ldrh	r3, [r7, #6]
 800a9b6:	3303      	adds	r3, #3
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a9c0:	8bbb      	ldrh	r3, [r7, #28]
 800a9c2:	2b0b      	cmp	r3, #11
 800a9c4:	d801      	bhi.n	800a9ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a9c6:	230c      	movs	r3, #12
 800a9c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a9ca:	8bbb      	ldrh	r3, [r7, #28]
 800a9cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9d0:	d803      	bhi.n	800a9da <mem_malloc+0x3a>
 800a9d2:	8bba      	ldrh	r2, [r7, #28]
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d201      	bcs.n	800a9de <mem_malloc+0x3e>
    return NULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e0cd      	b.n	800ab7a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a9de:	4869      	ldr	r0, [pc, #420]	; (800ab84 <mem_malloc+0x1e4>)
 800a9e0:	f00c fccc 	bl	801737c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9e4:	4b68      	ldr	r3, [pc, #416]	; (800ab88 <mem_malloc+0x1e8>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff fcfd 	bl	800a3e8 <mem_to_ptr>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	83fb      	strh	r3, [r7, #30]
 800a9f2:	e0b7      	b.n	800ab64 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a9f4:	8bfb      	ldrh	r3, [r7, #30]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff fce4 	bl	800a3c4 <ptr_to_mem>
 800a9fc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	791b      	ldrb	r3, [r3, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f040 80a7 	bne.w	800ab56 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	8bfb      	ldrh	r3, [r7, #30]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	f1a3 0208 	sub.w	r2, r3, #8
 800aa16:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	f0c0 809c 	bcc.w	800ab56 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	8bfb      	ldrh	r3, [r7, #30]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	f1a3 0208 	sub.w	r2, r3, #8
 800aa2c:	8bbb      	ldrh	r3, [r7, #28]
 800aa2e:	3314      	adds	r3, #20
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d333      	bcc.n	800aa9c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aa34:	8bfa      	ldrh	r2, [r7, #30]
 800aa36:	8bbb      	ldrh	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa40:	8a7b      	ldrh	r3, [r7, #18]
 800aa42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa46:	d106      	bne.n	800aa56 <mem_malloc+0xb6>
 800aa48:	4b50      	ldr	r3, [pc, #320]	; (800ab8c <mem_malloc+0x1ec>)
 800aa4a:	f240 3287 	movw	r2, #903	; 0x387
 800aa4e:	4950      	ldr	r1, [pc, #320]	; (800ab90 <mem_malloc+0x1f0>)
 800aa50:	4850      	ldr	r0, [pc, #320]	; (800ab94 <mem_malloc+0x1f4>)
 800aa52:	f00c fd39 	bl	80174c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aa56:	8a7b      	ldrh	r3, [r7, #18]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff fcb3 	bl	800a3c4 <ptr_to_mem>
 800aa5e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	881a      	ldrh	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	8bfa      	ldrh	r2, [r7, #30]
 800aa72:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	8a7a      	ldrh	r2, [r7, #18]
 800aa78:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa88:	d00b      	beq.n	800aaa2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fc98 	bl	800a3c4 <ptr_to_mem>
 800aa94:	4602      	mov	r2, r0
 800aa96:	8a7b      	ldrh	r3, [r7, #18]
 800aa98:	8053      	strh	r3, [r2, #2]
 800aa9a:	e002      	b.n	800aaa2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aaa2:	4b39      	ldr	r3, [pc, #228]	; (800ab88 <mem_malloc+0x1e8>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d127      	bne.n	800aafc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800aaac:	4b36      	ldr	r3, [pc, #216]	; (800ab88 <mem_malloc+0x1e8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aab2:	e005      	b.n	800aac0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7ff fc83 	bl	800a3c4 <ptr_to_mem>
 800aabe:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	791b      	ldrb	r3, [r3, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d004      	beq.n	800aad2 <mem_malloc+0x132>
 800aac8:	4b33      	ldr	r3, [pc, #204]	; (800ab98 <mem_malloc+0x1f8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69ba      	ldr	r2, [r7, #24]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d1f0      	bne.n	800aab4 <mem_malloc+0x114>
          }
          lfree = cur;
 800aad2:	4a2d      	ldr	r2, [pc, #180]	; (800ab88 <mem_malloc+0x1e8>)
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aad8:	4b2b      	ldr	r3, [pc, #172]	; (800ab88 <mem_malloc+0x1e8>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	4b2e      	ldr	r3, [pc, #184]	; (800ab98 <mem_malloc+0x1f8>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d00b      	beq.n	800aafc <mem_malloc+0x15c>
 800aae4:	4b28      	ldr	r3, [pc, #160]	; (800ab88 <mem_malloc+0x1e8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	791b      	ldrb	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d006      	beq.n	800aafc <mem_malloc+0x15c>
 800aaee:	4b27      	ldr	r3, [pc, #156]	; (800ab8c <mem_malloc+0x1ec>)
 800aaf0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aaf4:	4929      	ldr	r1, [pc, #164]	; (800ab9c <mem_malloc+0x1fc>)
 800aaf6:	4827      	ldr	r0, [pc, #156]	; (800ab94 <mem_malloc+0x1f4>)
 800aaf8:	f00c fce6 	bl	80174c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800aafc:	4821      	ldr	r0, [pc, #132]	; (800ab84 <mem_malloc+0x1e4>)
 800aafe:	f00c fc4c 	bl	801739a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ab02:	8bba      	ldrh	r2, [r7, #28]
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	4413      	add	r3, r2
 800ab08:	3308      	adds	r3, #8
 800ab0a:	4a23      	ldr	r2, [pc, #140]	; (800ab98 <mem_malloc+0x1f8>)
 800ab0c:	6812      	ldr	r2, [r2, #0]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d906      	bls.n	800ab20 <mem_malloc+0x180>
 800ab12:	4b1e      	ldr	r3, [pc, #120]	; (800ab8c <mem_malloc+0x1ec>)
 800ab14:	f240 32ba 	movw	r2, #954	; 0x3ba
 800ab18:	4921      	ldr	r1, [pc, #132]	; (800aba0 <mem_malloc+0x200>)
 800ab1a:	481e      	ldr	r0, [pc, #120]	; (800ab94 <mem_malloc+0x1f4>)
 800ab1c:	f00c fcd4 	bl	80174c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d006      	beq.n	800ab38 <mem_malloc+0x198>
 800ab2a:	4b18      	ldr	r3, [pc, #96]	; (800ab8c <mem_malloc+0x1ec>)
 800ab2c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ab30:	491c      	ldr	r1, [pc, #112]	; (800aba4 <mem_malloc+0x204>)
 800ab32:	4818      	ldr	r0, [pc, #96]	; (800ab94 <mem_malloc+0x1f4>)
 800ab34:	f00c fcc8 	bl	80174c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <mem_malloc+0x1b0>
 800ab42:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <mem_malloc+0x1ec>)
 800ab44:	f240 32be 	movw	r2, #958	; 0x3be
 800ab48:	4917      	ldr	r1, [pc, #92]	; (800aba8 <mem_malloc+0x208>)
 800ab4a:	4812      	ldr	r0, [pc, #72]	; (800ab94 <mem_malloc+0x1f4>)
 800ab4c:	f00c fcbc 	bl	80174c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	3308      	adds	r3, #8
 800ab54:	e011      	b.n	800ab7a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ab56:	8bfb      	ldrh	r3, [r7, #30]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7ff fc33 	bl	800a3c4 <ptr_to_mem>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab64:	8bfa      	ldrh	r2, [r7, #30]
 800ab66:	8bbb      	ldrh	r3, [r7, #28]
 800ab68:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	f4ff af41 	bcc.w	800a9f4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ab72:	4804      	ldr	r0, [pc, #16]	; (800ab84 <mem_malloc+0x1e4>)
 800ab74:	f00c fc11 	bl	801739a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20008460 	.word	0x20008460
 800ab88:	20008464 	.word	0x20008464
 800ab8c:	08018f24 	.word	0x08018f24
 800ab90:	080190e8 	.word	0x080190e8
 800ab94:	08018f6c 	.word	0x08018f6c
 800ab98:	2000845c 	.word	0x2000845c
 800ab9c:	080190fc 	.word	0x080190fc
 800aba0:	08019118 	.word	0x08019118
 800aba4:	08019148 	.word	0x08019148
 800aba8:	08019178 	.word	0x08019178

0800abac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	3303      	adds	r3, #3
 800abc2:	f023 0303 	bic.w	r3, r3, #3
 800abc6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	e011      	b.n	800abf2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	461a      	mov	r2, r3
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3301      	adds	r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	885b      	ldrh	r3, [r3, #2]
 800abf6:	461a      	mov	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4293      	cmp	r3, r2
 800abfc:	dbe7      	blt.n	800abce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800abfe:	bf00      	nop
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
	...

0800ac0c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac12:	2300      	movs	r3, #0
 800ac14:	80fb      	strh	r3, [r7, #6]
 800ac16:	e009      	b.n	800ac2c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ac18:	88fb      	ldrh	r3, [r7, #6]
 800ac1a:	4a08      	ldr	r2, [pc, #32]	; (800ac3c <memp_init+0x30>)
 800ac1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff ffc3 	bl	800abac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac26:	88fb      	ldrh	r3, [r7, #6]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	80fb      	strh	r3, [r7, #6]
 800ac2c:	88fb      	ldrh	r3, [r7, #6]
 800ac2e:	2b0c      	cmp	r3, #12
 800ac30:	d9f2      	bls.n	800ac18 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0801bd24 	.word	0x0801bd24

0800ac40 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ac48:	f00c fbda 	bl	8017400 <sys_arch_protect>
 800ac4c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d015      	beq.n	800ac88 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f003 0303 	and.w	r3, r3, #3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d006      	beq.n	800ac7e <do_memp_malloc_pool+0x3e>
 800ac70:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <do_memp_malloc_pool+0x58>)
 800ac72:	f240 1219 	movw	r2, #281	; 0x119
 800ac76:	4909      	ldr	r1, [pc, #36]	; (800ac9c <do_memp_malloc_pool+0x5c>)
 800ac78:	4809      	ldr	r0, [pc, #36]	; (800aca0 <do_memp_malloc_pool+0x60>)
 800ac7a:	f00c fc25 	bl	80174c8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f00c fbcc 	bl	801741c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	e003      	b.n	800ac90 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f00c fbc7 	bl	801741c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	0801919c 	.word	0x0801919c
 800ac9c:	080191cc 	.word	0x080191cc
 800aca0:	080191f0 	.word	0x080191f0

0800aca4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	2b0c      	cmp	r3, #12
 800acb2:	d908      	bls.n	800acc6 <memp_malloc+0x22>
 800acb4:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <memp_malloc+0x3c>)
 800acb6:	f240 1257 	movw	r2, #343	; 0x157
 800acba:	490a      	ldr	r1, [pc, #40]	; (800ace4 <memp_malloc+0x40>)
 800acbc:	480a      	ldr	r0, [pc, #40]	; (800ace8 <memp_malloc+0x44>)
 800acbe:	f00c fc03 	bl	80174c8 <iprintf>
 800acc2:	2300      	movs	r3, #0
 800acc4:	e008      	b.n	800acd8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	4a08      	ldr	r2, [pc, #32]	; (800acec <memp_malloc+0x48>)
 800acca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff ffb6 	bl	800ac40 <do_memp_malloc_pool>
 800acd4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800acd6:	68fb      	ldr	r3, [r7, #12]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	0801919c 	.word	0x0801919c
 800ace4:	0801922c 	.word	0x0801922c
 800ace8:	080191f0 	.word	0x080191f0
 800acec:	0801bd24 	.word	0x0801bd24

0800acf0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	f003 0303 	and.w	r3, r3, #3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d006      	beq.n	800ad12 <do_memp_free_pool+0x22>
 800ad04:	4b0d      	ldr	r3, [pc, #52]	; (800ad3c <do_memp_free_pool+0x4c>)
 800ad06:	f240 126d 	movw	r2, #365	; 0x16d
 800ad0a:	490d      	ldr	r1, [pc, #52]	; (800ad40 <do_memp_free_pool+0x50>)
 800ad0c:	480d      	ldr	r0, [pc, #52]	; (800ad44 <do_memp_free_pool+0x54>)
 800ad0e:	f00c fbdb 	bl	80174c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ad16:	f00c fb73 	bl	8017400 <sys_arch_protect>
 800ad1a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ad2e:	68b8      	ldr	r0, [r7, #8]
 800ad30:	f00c fb74 	bl	801741c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	0801919c 	.word	0x0801919c
 800ad40:	0801924c 	.word	0x0801924c
 800ad44:	080191f0 	.word	0x080191f0

0800ad48 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	6039      	str	r1, [r7, #0]
 800ad52:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ad54:	79fb      	ldrb	r3, [r7, #7]
 800ad56:	2b0c      	cmp	r3, #12
 800ad58:	d907      	bls.n	800ad6a <memp_free+0x22>
 800ad5a:	4b0c      	ldr	r3, [pc, #48]	; (800ad8c <memp_free+0x44>)
 800ad5c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ad60:	490b      	ldr	r1, [pc, #44]	; (800ad90 <memp_free+0x48>)
 800ad62:	480c      	ldr	r0, [pc, #48]	; (800ad94 <memp_free+0x4c>)
 800ad64:	f00c fbb0 	bl	80174c8 <iprintf>
 800ad68:	e00c      	b.n	800ad84 <memp_free+0x3c>

  if (mem == NULL) {
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d008      	beq.n	800ad82 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ad70:	79fb      	ldrb	r3, [r7, #7]
 800ad72:	4a09      	ldr	r2, [pc, #36]	; (800ad98 <memp_free+0x50>)
 800ad74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff ffb8 	bl	800acf0 <do_memp_free_pool>
 800ad80:	e000      	b.n	800ad84 <memp_free+0x3c>
    return;
 800ad82:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0801919c 	.word	0x0801919c
 800ad90:	0801926c 	.word	0x0801926c
 800ad94:	080191f0 	.word	0x080191f0
 800ad98:	0801bd24 	.word	0x0801bd24

0800ad9c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ada0:	bf00      	nop
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
	...

0800adac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d108      	bne.n	800add2 <netif_add+0x26>
 800adc0:	4b5b      	ldr	r3, [pc, #364]	; (800af30 <netif_add+0x184>)
 800adc2:	f240 1227 	movw	r2, #295	; 0x127
 800adc6:	495b      	ldr	r1, [pc, #364]	; (800af34 <netif_add+0x188>)
 800adc8:	485b      	ldr	r0, [pc, #364]	; (800af38 <netif_add+0x18c>)
 800adca:	f00c fb7d 	bl	80174c8 <iprintf>
 800adce:	2300      	movs	r3, #0
 800add0:	e0a9      	b.n	800af26 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	d108      	bne.n	800adea <netif_add+0x3e>
 800add8:	4b55      	ldr	r3, [pc, #340]	; (800af30 <netif_add+0x184>)
 800adda:	f44f 7294 	mov.w	r2, #296	; 0x128
 800adde:	4957      	ldr	r1, [pc, #348]	; (800af3c <netif_add+0x190>)
 800ade0:	4855      	ldr	r0, [pc, #340]	; (800af38 <netif_add+0x18c>)
 800ade2:	f00c fb71 	bl	80174c8 <iprintf>
 800ade6:	2300      	movs	r3, #0
 800ade8:	e09d      	b.n	800af26 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800adf0:	4b53      	ldr	r3, [pc, #332]	; (800af40 <netif_add+0x194>)
 800adf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800adfa:	4b51      	ldr	r3, [pc, #324]	; (800af40 <netif_add+0x194>)
 800adfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ae04:	4b4e      	ldr	r3, [pc, #312]	; (800af40 <netif_add+0x194>)
 800ae06:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	4a49      	ldr	r2, [pc, #292]	; (800af44 <netif_add+0x198>)
 800ae1e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3324      	adds	r3, #36	; 0x24
 800ae32:	2204      	movs	r2, #4
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f00c fb3e 	bl	80174b8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6a3a      	ldr	r2, [r7, #32]
 800ae46:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ae48:	4b3f      	ldr	r3, [pc, #252]	; (800af48 <netif_add+0x19c>)
 800ae4a:	781a      	ldrb	r2, [r3, #0]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae56:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	68b9      	ldr	r1, [r7, #8]
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 f914 	bl	800b08c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	4798      	blx	r3
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <netif_add+0xc8>
    return NULL;
 800ae70:	2300      	movs	r3, #0
 800ae72:	e058      	b.n	800af26 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae7a:	2bff      	cmp	r3, #255	; 0xff
 800ae7c:	d103      	bne.n	800ae86 <netif_add+0xda>
        netif->num = 0;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae8a:	4b30      	ldr	r3, [pc, #192]	; (800af4c <netif_add+0x1a0>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	617b      	str	r3, [r7, #20]
 800ae90:	e02b      	b.n	800aeea <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d106      	bne.n	800aea8 <netif_add+0xfc>
 800ae9a:	4b25      	ldr	r3, [pc, #148]	; (800af30 <netif_add+0x184>)
 800ae9c:	f240 128b 	movw	r2, #395	; 0x18b
 800aea0:	492b      	ldr	r1, [pc, #172]	; (800af50 <netif_add+0x1a4>)
 800aea2:	4825      	ldr	r0, [pc, #148]	; (800af38 <netif_add+0x18c>)
 800aea4:	f00c fb10 	bl	80174c8 <iprintf>
        num_netifs++;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	2bff      	cmp	r3, #255	; 0xff
 800aeb2:	dd06      	ble.n	800aec2 <netif_add+0x116>
 800aeb4:	4b1e      	ldr	r3, [pc, #120]	; (800af30 <netif_add+0x184>)
 800aeb6:	f240 128d 	movw	r2, #397	; 0x18d
 800aeba:	4926      	ldr	r1, [pc, #152]	; (800af54 <netif_add+0x1a8>)
 800aebc:	481e      	ldr	r0, [pc, #120]	; (800af38 <netif_add+0x18c>)
 800aebe:	f00c fb03 	bl	80174c8 <iprintf>
        if (netif2->num == netif->num) {
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aece:	429a      	cmp	r2, r3
 800aed0:	d108      	bne.n	800aee4 <netif_add+0x138>
          netif->num++;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aed8:	3301      	adds	r3, #1
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800aee2:	e005      	b.n	800aef0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	617b      	str	r3, [r7, #20]
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1d0      	bne.n	800ae92 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1be      	bne.n	800ae74 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aefc:	2bfe      	cmp	r3, #254	; 0xfe
 800aefe:	d103      	bne.n	800af08 <netif_add+0x15c>
    netif_num = 0;
 800af00:	4b11      	ldr	r3, [pc, #68]	; (800af48 <netif_add+0x19c>)
 800af02:	2200      	movs	r2, #0
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	e006      	b.n	800af16 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af0e:	3301      	adds	r3, #1
 800af10:	b2da      	uxtb	r2, r3
 800af12:	4b0d      	ldr	r3, [pc, #52]	; (800af48 <netif_add+0x19c>)
 800af14:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800af16:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <netif_add+0x1a0>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800af1e:	4a0b      	ldr	r2, [pc, #44]	; (800af4c <netif_add+0x1a0>)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800af24:	68fb      	ldr	r3, [r7, #12]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	08019288 	.word	0x08019288
 800af34:	0801931c 	.word	0x0801931c
 800af38:	080192d8 	.word	0x080192d8
 800af3c:	08019338 	.word	0x08019338
 800af40:	0801bda8 	.word	0x0801bda8
 800af44:	0800b36f 	.word	0x0800b36f
 800af48:	2000849c 	.word	0x2000849c
 800af4c:	2000f31c 	.word	0x2000f31c
 800af50:	0801935c 	.word	0x0801935c
 800af54:	08019370 	.word	0x08019370

0800af58 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f002 fe51 	bl	800dc0c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f007 fed5 	bl	8012d1c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d106      	bne.n	800af9c <netif_do_set_ipaddr+0x20>
 800af8e:	4b1d      	ldr	r3, [pc, #116]	; (800b004 <netif_do_set_ipaddr+0x88>)
 800af90:	f240 12cb 	movw	r2, #459	; 0x1cb
 800af94:	491c      	ldr	r1, [pc, #112]	; (800b008 <netif_do_set_ipaddr+0x8c>)
 800af96:	481d      	ldr	r0, [pc, #116]	; (800b00c <netif_do_set_ipaddr+0x90>)
 800af98:	f00c fa96 	bl	80174c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <netif_do_set_ipaddr+0x34>
 800afa2:	4b18      	ldr	r3, [pc, #96]	; (800b004 <netif_do_set_ipaddr+0x88>)
 800afa4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800afa8:	4917      	ldr	r1, [pc, #92]	; (800b008 <netif_do_set_ipaddr+0x8c>)
 800afaa:	4818      	ldr	r0, [pc, #96]	; (800b00c <netif_do_set_ipaddr+0x90>)
 800afac:	f00c fa8c 	bl	80174c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	3304      	adds	r3, #4
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d01c      	beq.n	800aff8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3304      	adds	r3, #4
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800afce:	f107 0314 	add.w	r3, r7, #20
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ffbf 	bl	800af58 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <netif_do_set_ipaddr+0x6a>
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	e000      	b.n	800afe8 <netif_do_set_ipaddr+0x6c>
 800afe6:	2300      	movs	r3, #0
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800afec:	2101      	movs	r1, #1
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f000 f8d2 	bl	800b198 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800aff4:	2301      	movs	r3, #1
 800aff6:	e000      	b.n	800affa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	08019288 	.word	0x08019288
 800b008:	080193a0 	.word	0x080193a0
 800b00c:	080192d8 	.word	0x080192d8

0800b010 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3308      	adds	r3, #8
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d00a      	beq.n	800b040 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d002      	beq.n	800b036 <netif_do_set_netmask+0x26>
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	e000      	b.n	800b038 <netif_do_set_netmask+0x28>
 800b036:	2300      	movs	r3, #0
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b03c:	2301      	movs	r3, #1
 800b03e:	e000      	b.n	800b042 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b04e:	b480      	push	{r7}
 800b050:	b085      	sub	sp, #20
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	330c      	adds	r3, #12
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d00a      	beq.n	800b07e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <netif_do_set_gw+0x26>
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	e000      	b.n	800b076 <netif_do_set_gw+0x28>
 800b074:	2300      	movs	r3, #0
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
 800b098:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b0a8:	4b1c      	ldr	r3, [pc, #112]	; (800b11c <netif_set_addr+0x90>)
 800b0aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b0b2:	4b1a      	ldr	r3, [pc, #104]	; (800b11c <netif_set_addr+0x90>)
 800b0b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b0bc:	4b17      	ldr	r3, [pc, #92]	; (800b11c <netif_set_addr+0x90>)
 800b0be:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <netif_set_addr+0x42>
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <netif_set_addr+0x46>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e000      	b.n	800b0d4 <netif_set_addr+0x48>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d006      	beq.n	800b0ea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b0dc:	f107 0310 	add.w	r3, r7, #16
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7ff ff49 	bl	800af7c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b0ea:	69fa      	ldr	r2, [r7, #28]
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff ff8e 	bl	800b010 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f7ff ffa8 	bl	800b04e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d106      	bne.n	800b112 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b104:	f107 0310 	add.w	r3, r7, #16
 800b108:	461a      	mov	r2, r3
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7ff ff35 	bl	800af7c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b112:	bf00      	nop
 800b114:	3720      	adds	r7, #32
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	0801bda8 	.word	0x0801bda8

0800b120 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b128:	4a04      	ldr	r2, [pc, #16]	; (800b13c <netif_set_default+0x1c>)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b12e:	bf00      	nop
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	2000f320 	.word	0x2000f320

0800b140 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d107      	bne.n	800b15e <netif_set_up+0x1e>
 800b14e:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <netif_set_up+0x4c>)
 800b150:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b154:	490e      	ldr	r1, [pc, #56]	; (800b190 <netif_set_up+0x50>)
 800b156:	480f      	ldr	r0, [pc, #60]	; (800b194 <netif_set_up+0x54>)
 800b158:	f00c f9b6 	bl	80174c8 <iprintf>
 800b15c:	e013      	b.n	800b186 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10c      	bne.n	800b186 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b172:	f043 0301 	orr.w	r3, r3, #1
 800b176:	b2da      	uxtb	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b17e:	2103      	movs	r1, #3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f809 	bl	800b198 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	08019288 	.word	0x08019288
 800b190:	08019410 	.word	0x08019410
 800b194:	080192d8 	.word	0x080192d8

0800b198 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <netif_issue_reports+0x20>
 800b1aa:	4b18      	ldr	r3, [pc, #96]	; (800b20c <netif_issue_reports+0x74>)
 800b1ac:	f240 326d 	movw	r2, #877	; 0x36d
 800b1b0:	4917      	ldr	r1, [pc, #92]	; (800b210 <netif_issue_reports+0x78>)
 800b1b2:	4818      	ldr	r0, [pc, #96]	; (800b214 <netif_issue_reports+0x7c>)
 800b1b4:	f00c f988 	bl	80174c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b1be:	f003 0304 	and.w	r3, r3, #4
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d01e      	beq.n	800b204 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b1cc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d017      	beq.n	800b204 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d013      	beq.n	800b206 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00e      	beq.n	800b206 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d007      	beq.n	800b206 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f00a fb9d 	bl	801593c <etharp_request>
 800b202:	e000      	b.n	800b206 <netif_issue_reports+0x6e>
    return;
 800b204:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	08019288 	.word	0x08019288
 800b210:	0801942c 	.word	0x0801942c
 800b214:	080192d8 	.word	0x080192d8

0800b218 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d107      	bne.n	800b236 <netif_set_down+0x1e>
 800b226:	4b12      	ldr	r3, [pc, #72]	; (800b270 <netif_set_down+0x58>)
 800b228:	f240 329b 	movw	r2, #923	; 0x39b
 800b22c:	4911      	ldr	r1, [pc, #68]	; (800b274 <netif_set_down+0x5c>)
 800b22e:	4812      	ldr	r0, [pc, #72]	; (800b278 <netif_set_down+0x60>)
 800b230:	f00c f94a 	bl	80174c8 <iprintf>
 800b234:	e019      	b.n	800b26a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	2b00      	cmp	r3, #0
 800b242:	d012      	beq.n	800b26a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b24a:	f023 0301 	bic.w	r3, r3, #1
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b25c:	f003 0308 	and.w	r3, r3, #8
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f009 ff23 	bl	80150b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	08019288 	.word	0x08019288
 800b274:	08019450 	.word	0x08019450
 800b278:	080192d8 	.word	0x080192d8

0800b27c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d107      	bne.n	800b29a <netif_set_link_up+0x1e>
 800b28a:	4b15      	ldr	r3, [pc, #84]	; (800b2e0 <netif_set_link_up+0x64>)
 800b28c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b290:	4914      	ldr	r1, [pc, #80]	; (800b2e4 <netif_set_link_up+0x68>)
 800b292:	4815      	ldr	r0, [pc, #84]	; (800b2e8 <netif_set_link_up+0x6c>)
 800b294:	f00c f918 	bl	80174c8 <iprintf>
 800b298:	e01e      	b.n	800b2d8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2a0:	f003 0304 	and.w	r3, r3, #4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d117      	bne.n	800b2d8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2ae:	f043 0304 	orr.w	r3, r3, #4
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f008 f958 	bl	8013570 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b2c0:	2103      	movs	r1, #3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff ff68 	bl	800b198 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d003      	beq.n	800b2d8 <netif_set_link_up+0x5c>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	08019288 	.word	0x08019288
 800b2e4:	08019470 	.word	0x08019470
 800b2e8:	080192d8 	.word	0x080192d8

0800b2ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d107      	bne.n	800b30a <netif_set_link_down+0x1e>
 800b2fa:	4b11      	ldr	r3, [pc, #68]	; (800b340 <netif_set_link_down+0x54>)
 800b2fc:	f240 4206 	movw	r2, #1030	; 0x406
 800b300:	4910      	ldr	r1, [pc, #64]	; (800b344 <netif_set_link_down+0x58>)
 800b302:	4811      	ldr	r0, [pc, #68]	; (800b348 <netif_set_link_down+0x5c>)
 800b304:	f00c f8e0 	bl	80174c8 <iprintf>
 800b308:	e017      	b.n	800b33a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b00      	cmp	r3, #0
 800b316:	d010      	beq.n	800b33a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b31e:	f023 0304 	bic.w	r3, r3, #4
 800b322:	b2da      	uxtb	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <netif_set_link_down+0x4e>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	08019288 	.word	0x08019288
 800b344:	08019494 	.word	0x08019494
 800b348:	080192d8 	.word	0x080192d8

0800b34c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	61da      	str	r2, [r3, #28]
  }
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b36e:	b480      	push	{r7}
 800b370:	b085      	sub	sp, #20
 800b372:	af00      	add	r7, sp, #0
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b37a:	f06f 030b 	mvn.w	r3, #11
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
	...

0800b38c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b396:	79fb      	ldrb	r3, [r7, #7]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d013      	beq.n	800b3c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b39c:	4b0d      	ldr	r3, [pc, #52]	; (800b3d4 <netif_get_by_index+0x48>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	60fb      	str	r3, [r7, #12]
 800b3a2:	e00c      	b.n	800b3be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	79fa      	ldrb	r2, [r7, #7]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d101      	bne.n	800b3b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	e006      	b.n	800b3c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1ef      	bne.n	800b3a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	2000f31c 	.word	0x2000f31c

0800b3d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b3de:	f00c f80f 	bl	8017400 <sys_arch_protect>
 800b3e2:	6038      	str	r0, [r7, #0]
 800b3e4:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <pbuf_free_ooseq+0x44>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	701a      	strb	r2, [r3, #0]
 800b3ea:	6838      	ldr	r0, [r7, #0]
 800b3ec:	f00c f816 	bl	801741c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	; (800b420 <pbuf_free_ooseq+0x48>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	607b      	str	r3, [r7, #4]
 800b3f6:	e00a      	b.n	800b40e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f002 fc41 	bl	800dc88 <tcp_free_ooseq>
      return;
 800b406:	e005      	b.n	800b414 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	607b      	str	r3, [r7, #4]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1f1      	bne.n	800b3f8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	2000f324 	.word	0x2000f324
 800b420:	2000f32c 	.word	0x2000f32c

0800b424 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b42c:	f7ff ffd4 	bl	800b3d8 <pbuf_free_ooseq>
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b43e:	f00b ffdf 	bl	8017400 <sys_arch_protect>
 800b442:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b444:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <pbuf_pool_is_empty+0x4c>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b44a:	4b0e      	ldr	r3, [pc, #56]	; (800b484 <pbuf_pool_is_empty+0x4c>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f00b ffe3 	bl	801741c <sys_arch_unprotect>

  if (!queued) {
 800b456:	78fb      	ldrb	r3, [r7, #3]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10f      	bne.n	800b47c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b45c:	2100      	movs	r1, #0
 800b45e:	480a      	ldr	r0, [pc, #40]	; (800b488 <pbuf_pool_is_empty+0x50>)
 800b460:	f7fe feca 	bl	800a1f8 <tcpip_try_callback>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d008      	beq.n	800b47c <pbuf_pool_is_empty+0x44>
 800b46a:	f00b ffc9 	bl	8017400 <sys_arch_protect>
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	4b04      	ldr	r3, [pc, #16]	; (800b484 <pbuf_pool_is_empty+0x4c>)
 800b472:	2200      	movs	r2, #0
 800b474:	701a      	strb	r2, [r3, #0]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f00b ffd0 	bl	801741c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	2000f324 	.word	0x2000f324
 800b488:	0800b425 	.word	0x0800b425

0800b48c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	4611      	mov	r1, r2
 800b498:	461a      	mov	r2, r3
 800b49a:	460b      	mov	r3, r1
 800b49c:	80fb      	strh	r3, [r7, #6]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	88fa      	ldrh	r2, [r7, #6]
 800b4b2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	88ba      	ldrh	r2, [r7, #4]
 800b4b8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b4ba:	8b3b      	ldrh	r3, [r7, #24]
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	7f3a      	ldrb	r2, [r7, #28]
 800b4c6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	73da      	strb	r2, [r3, #15]
}
 800b4d4:	bf00      	nop
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08c      	sub	sp, #48	; 0x30
 800b4e4:	af02      	add	r7, sp, #8
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	71fb      	strb	r3, [r7, #7]
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	80bb      	strh	r3, [r7, #4]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b4f6:	887b      	ldrh	r3, [r7, #2]
 800b4f8:	2b41      	cmp	r3, #65	; 0x41
 800b4fa:	d00b      	beq.n	800b514 <pbuf_alloc+0x34>
 800b4fc:	2b41      	cmp	r3, #65	; 0x41
 800b4fe:	dc02      	bgt.n	800b506 <pbuf_alloc+0x26>
 800b500:	2b01      	cmp	r3, #1
 800b502:	d007      	beq.n	800b514 <pbuf_alloc+0x34>
 800b504:	e0c2      	b.n	800b68c <pbuf_alloc+0x1ac>
 800b506:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b50a:	d00b      	beq.n	800b524 <pbuf_alloc+0x44>
 800b50c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b510:	d070      	beq.n	800b5f4 <pbuf_alloc+0x114>
 800b512:	e0bb      	b.n	800b68c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b514:	887a      	ldrh	r2, [r7, #2]
 800b516:	88bb      	ldrh	r3, [r7, #4]
 800b518:	4619      	mov	r1, r3
 800b51a:	2000      	movs	r0, #0
 800b51c:	f000 f8d2 	bl	800b6c4 <pbuf_alloc_reference>
 800b520:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b522:	e0bd      	b.n	800b6a0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b524:	2300      	movs	r3, #0
 800b526:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b528:	2300      	movs	r3, #0
 800b52a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b52c:	88bb      	ldrh	r3, [r7, #4]
 800b52e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b530:	200c      	movs	r0, #12
 800b532:	f7ff fbb7 	bl	800aca4 <memp_malloc>
 800b536:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800b53e:	f7ff ff7b 	bl	800b438 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800b548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b54a:	f000 faa9 	bl	800baa0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	e0a7      	b.n	800b6a2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b552:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b554:	3303      	adds	r3, #3
 800b556:	b29b      	uxth	r3, r3
 800b558:	f023 0303 	bic.w	r3, r3, #3
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b562:	b29b      	uxth	r3, r3
 800b564:	8b7a      	ldrh	r2, [r7, #26]
 800b566:	4293      	cmp	r3, r2
 800b568:	bf28      	it	cs
 800b56a:	4613      	movcs	r3, r2
 800b56c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b56e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b570:	3310      	adds	r3, #16
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	4413      	add	r3, r2
 800b576:	3303      	adds	r3, #3
 800b578:	f023 0303 	bic.w	r3, r3, #3
 800b57c:	4618      	mov	r0, r3
 800b57e:	89f9      	ldrh	r1, [r7, #14]
 800b580:	8b7a      	ldrh	r2, [r7, #26]
 800b582:	2300      	movs	r3, #0
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	887b      	ldrh	r3, [r7, #2]
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	460b      	mov	r3, r1
 800b58c:	4601      	mov	r1, r0
 800b58e:	6938      	ldr	r0, [r7, #16]
 800b590:	f7ff ff7c 	bl	800b48c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f003 0303 	and.w	r3, r3, #3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d006      	beq.n	800b5ae <pbuf_alloc+0xce>
 800b5a0:	4b42      	ldr	r3, [pc, #264]	; (800b6ac <pbuf_alloc+0x1cc>)
 800b5a2:	f240 1201 	movw	r2, #257	; 0x101
 800b5a6:	4942      	ldr	r1, [pc, #264]	; (800b6b0 <pbuf_alloc+0x1d0>)
 800b5a8:	4842      	ldr	r0, [pc, #264]	; (800b6b4 <pbuf_alloc+0x1d4>)
 800b5aa:	f00b ff8d 	bl	80174c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b5ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5b0:	3303      	adds	r3, #3
 800b5b2:	f023 0303 	bic.w	r3, r3, #3
 800b5b6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b5ba:	d106      	bne.n	800b5ca <pbuf_alloc+0xea>
 800b5bc:	4b3b      	ldr	r3, [pc, #236]	; (800b6ac <pbuf_alloc+0x1cc>)
 800b5be:	f240 1203 	movw	r2, #259	; 0x103
 800b5c2:	493d      	ldr	r1, [pc, #244]	; (800b6b8 <pbuf_alloc+0x1d8>)
 800b5c4:	483b      	ldr	r0, [pc, #236]	; (800b6b4 <pbuf_alloc+0x1d4>)
 800b5c6:	f00b ff7f 	bl	80174c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d4:	e002      	b.n	800b5dc <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b5e0:	8b7a      	ldrh	r2, [r7, #26]
 800b5e2:	89fb      	ldrh	r3, [r7, #14]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b5ec:	8b7b      	ldrh	r3, [r7, #26]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d19e      	bne.n	800b530 <pbuf_alloc+0x50>
      break;
 800b5f2:	e055      	b.n	800b6a0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b5f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5f6:	3303      	adds	r3, #3
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	f023 0303 	bic.w	r3, r3, #3
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	88bb      	ldrh	r3, [r7, #4]
 800b602:	3303      	adds	r3, #3
 800b604:	b29b      	uxth	r3, r3
 800b606:	f023 0303 	bic.w	r3, r3, #3
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	4413      	add	r3, r2
 800b60e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b610:	8b3b      	ldrh	r3, [r7, #24]
 800b612:	3310      	adds	r3, #16
 800b614:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b616:	8b3a      	ldrh	r2, [r7, #24]
 800b618:	88bb      	ldrh	r3, [r7, #4]
 800b61a:	3303      	adds	r3, #3
 800b61c:	f023 0303 	bic.w	r3, r3, #3
 800b620:	429a      	cmp	r2, r3
 800b622:	d306      	bcc.n	800b632 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b624:	8afa      	ldrh	r2, [r7, #22]
 800b626:	88bb      	ldrh	r3, [r7, #4]
 800b628:	3303      	adds	r3, #3
 800b62a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b62e:	429a      	cmp	r2, r3
 800b630:	d201      	bcs.n	800b636 <pbuf_alloc+0x156>
        return NULL;
 800b632:	2300      	movs	r3, #0
 800b634:	e035      	b.n	800b6a2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b636:	8afb      	ldrh	r3, [r7, #22]
 800b638:	4618      	mov	r0, r3
 800b63a:	f7ff f9b1 	bl	800a9a0 <mem_malloc>
 800b63e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <pbuf_alloc+0x16a>
        return NULL;
 800b646:	2300      	movs	r3, #0
 800b648:	e02b      	b.n	800b6a2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b64a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b64c:	3310      	adds	r3, #16
 800b64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b650:	4413      	add	r3, r2
 800b652:	3303      	adds	r3, #3
 800b654:	f023 0303 	bic.w	r3, r3, #3
 800b658:	4618      	mov	r0, r3
 800b65a:	88b9      	ldrh	r1, [r7, #4]
 800b65c:	88ba      	ldrh	r2, [r7, #4]
 800b65e:	2300      	movs	r3, #0
 800b660:	9301      	str	r3, [sp, #4]
 800b662:	887b      	ldrh	r3, [r7, #2]
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	460b      	mov	r3, r1
 800b668:	4601      	mov	r1, r0
 800b66a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b66c:	f7ff ff0e 	bl	800b48c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	f003 0303 	and.w	r3, r3, #3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d010      	beq.n	800b69e <pbuf_alloc+0x1be>
 800b67c:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <pbuf_alloc+0x1cc>)
 800b67e:	f240 1223 	movw	r2, #291	; 0x123
 800b682:	490e      	ldr	r1, [pc, #56]	; (800b6bc <pbuf_alloc+0x1dc>)
 800b684:	480b      	ldr	r0, [pc, #44]	; (800b6b4 <pbuf_alloc+0x1d4>)
 800b686:	f00b ff1f 	bl	80174c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b68a:	e008      	b.n	800b69e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b68c:	4b07      	ldr	r3, [pc, #28]	; (800b6ac <pbuf_alloc+0x1cc>)
 800b68e:	f240 1227 	movw	r2, #295	; 0x127
 800b692:	490b      	ldr	r1, [pc, #44]	; (800b6c0 <pbuf_alloc+0x1e0>)
 800b694:	4807      	ldr	r0, [pc, #28]	; (800b6b4 <pbuf_alloc+0x1d4>)
 800b696:	f00b ff17 	bl	80174c8 <iprintf>
      return NULL;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e001      	b.n	800b6a2 <pbuf_alloc+0x1c2>
      break;
 800b69e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3728      	adds	r7, #40	; 0x28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	080194b8 	.word	0x080194b8
 800b6b0:	080194e8 	.word	0x080194e8
 800b6b4:	08019518 	.word	0x08019518
 800b6b8:	08019540 	.word	0x08019540
 800b6bc:	08019574 	.word	0x08019574
 800b6c0:	080195a0 	.word	0x080195a0

0800b6c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	807b      	strh	r3, [r7, #2]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b6d4:	883b      	ldrh	r3, [r7, #0]
 800b6d6:	2b41      	cmp	r3, #65	; 0x41
 800b6d8:	d009      	beq.n	800b6ee <pbuf_alloc_reference+0x2a>
 800b6da:	883b      	ldrh	r3, [r7, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d006      	beq.n	800b6ee <pbuf_alloc_reference+0x2a>
 800b6e0:	4b0f      	ldr	r3, [pc, #60]	; (800b720 <pbuf_alloc_reference+0x5c>)
 800b6e2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b6e6:	490f      	ldr	r1, [pc, #60]	; (800b724 <pbuf_alloc_reference+0x60>)
 800b6e8:	480f      	ldr	r0, [pc, #60]	; (800b728 <pbuf_alloc_reference+0x64>)
 800b6ea:	f00b feed 	bl	80174c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b6ee:	200b      	movs	r0, #11
 800b6f0:	f7ff fad8 	bl	800aca4 <memp_malloc>
 800b6f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	e00b      	b.n	800b718 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b700:	8879      	ldrh	r1, [r7, #2]
 800b702:	887a      	ldrh	r2, [r7, #2]
 800b704:	2300      	movs	r3, #0
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	883b      	ldrh	r3, [r7, #0]
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	460b      	mov	r3, r1
 800b70e:	6879      	ldr	r1, [r7, #4]
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7ff febb 	bl	800b48c <pbuf_init_alloced_pbuf>
  return p;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	080194b8 	.word	0x080194b8
 800b724:	080195bc 	.word	0x080195bc
 800b728:	08019518 	.word	0x08019518

0800b72c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af02      	add	r7, sp, #8
 800b732:	607b      	str	r3, [r7, #4]
 800b734:	4603      	mov	r3, r0
 800b736:	73fb      	strb	r3, [r7, #15]
 800b738:	460b      	mov	r3, r1
 800b73a:	81bb      	strh	r3, [r7, #12]
 800b73c:	4613      	mov	r3, r2
 800b73e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b744:	8a7b      	ldrh	r3, [r7, #18]
 800b746:	3303      	adds	r3, #3
 800b748:	f023 0203 	bic.w	r2, r3, #3
 800b74c:	89bb      	ldrh	r3, [r7, #12]
 800b74e:	441a      	add	r2, r3
 800b750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b752:	429a      	cmp	r2, r3
 800b754:	d901      	bls.n	800b75a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b756:	2300      	movs	r3, #0
 800b758:	e018      	b.n	800b78c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d007      	beq.n	800b770 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b760:	8a7b      	ldrh	r3, [r7, #18]
 800b762:	3303      	adds	r3, #3
 800b764:	f023 0303 	bic.w	r3, r3, #3
 800b768:	6a3a      	ldr	r2, [r7, #32]
 800b76a:	4413      	add	r3, r2
 800b76c:	617b      	str	r3, [r7, #20]
 800b76e:	e001      	b.n	800b774 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b770:	2300      	movs	r3, #0
 800b772:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	89b9      	ldrh	r1, [r7, #12]
 800b778:	89ba      	ldrh	r2, [r7, #12]
 800b77a:	2302      	movs	r3, #2
 800b77c:	9301      	str	r3, [sp, #4]
 800b77e:	897b      	ldrh	r3, [r7, #10]
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	460b      	mov	r3, r1
 800b784:	6979      	ldr	r1, [r7, #20]
 800b786:	f7ff fe81 	bl	800b48c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b78a:	687b      	ldr	r3, [r7, #4]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d106      	bne.n	800b7b4 <pbuf_realloc+0x20>
 800b7a6:	4b3a      	ldr	r3, [pc, #232]	; (800b890 <pbuf_realloc+0xfc>)
 800b7a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b7ac:	4939      	ldr	r1, [pc, #228]	; (800b894 <pbuf_realloc+0x100>)
 800b7ae:	483a      	ldr	r0, [pc, #232]	; (800b898 <pbuf_realloc+0x104>)
 800b7b0:	f00b fe8a 	bl	80174c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	891b      	ldrh	r3, [r3, #8]
 800b7b8:	887a      	ldrh	r2, [r7, #2]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d264      	bcs.n	800b888 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	891a      	ldrh	r2, [r3, #8]
 800b7c2:	887b      	ldrh	r3, [r7, #2]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b7c8:	887b      	ldrh	r3, [r7, #2]
 800b7ca:	817b      	strh	r3, [r7, #10]
  q = p;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b7d0:	e018      	b.n	800b804 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	895b      	ldrh	r3, [r3, #10]
 800b7d6:	897a      	ldrh	r2, [r7, #10]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	891a      	ldrh	r2, [r3, #8]
 800b7e0:	893b      	ldrh	r3, [r7, #8]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d106      	bne.n	800b804 <pbuf_realloc+0x70>
 800b7f6:	4b26      	ldr	r3, [pc, #152]	; (800b890 <pbuf_realloc+0xfc>)
 800b7f8:	f240 12af 	movw	r2, #431	; 0x1af
 800b7fc:	4927      	ldr	r1, [pc, #156]	; (800b89c <pbuf_realloc+0x108>)
 800b7fe:	4826      	ldr	r0, [pc, #152]	; (800b898 <pbuf_realloc+0x104>)
 800b800:	f00b fe62 	bl	80174c8 <iprintf>
  while (rem_len > q->len) {
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	895b      	ldrh	r3, [r3, #10]
 800b808:	897a      	ldrh	r2, [r7, #10]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d8e1      	bhi.n	800b7d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	7b1b      	ldrb	r3, [r3, #12]
 800b812:	f003 030f 	and.w	r3, r3, #15
 800b816:	2b00      	cmp	r3, #0
 800b818:	d122      	bne.n	800b860 <pbuf_realloc+0xcc>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	895b      	ldrh	r3, [r3, #10]
 800b81e:	897a      	ldrh	r2, [r7, #10]
 800b820:	429a      	cmp	r2, r3
 800b822:	d01d      	beq.n	800b860 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	7b5b      	ldrb	r3, [r3, #13]
 800b828:	f003 0302 	and.w	r3, r3, #2
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d117      	bne.n	800b860 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	461a      	mov	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	897b      	ldrh	r3, [r7, #10]
 800b83e:	4413      	add	r3, r2
 800b840:	b29b      	uxth	r3, r3
 800b842:	4619      	mov	r1, r3
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7fe ffa1 	bl	800a78c <mem_trim>
 800b84a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <pbuf_realloc+0xcc>
 800b852:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <pbuf_realloc+0xfc>)
 800b854:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b858:	4911      	ldr	r1, [pc, #68]	; (800b8a0 <pbuf_realloc+0x10c>)
 800b85a:	480f      	ldr	r0, [pc, #60]	; (800b898 <pbuf_realloc+0x104>)
 800b85c:	f00b fe34 	bl	80174c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	897a      	ldrh	r2, [r7, #10]
 800b864:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	895a      	ldrh	r2, [r3, #10]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d004      	beq.n	800b880 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 f910 	bl	800baa0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	e000      	b.n	800b88a <pbuf_realloc+0xf6>
    return;
 800b888:	bf00      	nop

}
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	080194b8 	.word	0x080194b8
 800b894:	080195d0 	.word	0x080195d0
 800b898:	08019518 	.word	0x08019518
 800b89c:	080195e8 	.word	0x080195e8
 800b8a0:	08019600 	.word	0x08019600

0800b8a4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <pbuf_add_header_impl+0x22>
 800b8b8:	4b2b      	ldr	r3, [pc, #172]	; (800b968 <pbuf_add_header_impl+0xc4>)
 800b8ba:	f240 12df 	movw	r2, #479	; 0x1df
 800b8be:	492b      	ldr	r1, [pc, #172]	; (800b96c <pbuf_add_header_impl+0xc8>)
 800b8c0:	482b      	ldr	r0, [pc, #172]	; (800b970 <pbuf_add_header_impl+0xcc>)
 800b8c2:	f00b fe01 	bl	80174c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d003      	beq.n	800b8d4 <pbuf_add_header_impl+0x30>
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8d2:	d301      	bcc.n	800b8d8 <pbuf_add_header_impl+0x34>
    return 1;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e043      	b.n	800b960 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <pbuf_add_header_impl+0x3e>
    return 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	e03e      	b.n	800b960 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	891a      	ldrh	r2, [r3, #8]
 800b8ea:	8a7b      	ldrh	r3, [r7, #18]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	8a7a      	ldrh	r2, [r7, #18]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d901      	bls.n	800b8fa <pbuf_add_header_impl+0x56>
    return 1;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e032      	b.n	800b960 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	7b1b      	ldrb	r3, [r3, #12]
 800b8fe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b900:	8a3b      	ldrh	r3, [r7, #16]
 800b902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00c      	beq.n	800b924 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	425b      	negs	r3, r3
 800b912:	4413      	add	r3, r2
 800b914:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3310      	adds	r3, #16
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d20d      	bcs.n	800b93c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b920:	2301      	movs	r3, #1
 800b922:	e01d      	b.n	800b960 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d006      	beq.n	800b938 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	425b      	negs	r3, r3
 800b932:	4413      	add	r3, r2
 800b934:	617b      	str	r3, [r7, #20]
 800b936:	e001      	b.n	800b93c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b938:	2301      	movs	r3, #1
 800b93a:	e011      	b.n	800b960 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	895a      	ldrh	r2, [r3, #10]
 800b946:	8a7b      	ldrh	r3, [r7, #18]
 800b948:	4413      	add	r3, r2
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	891a      	ldrh	r2, [r3, #8]
 800b954:	8a7b      	ldrh	r3, [r7, #18]
 800b956:	4413      	add	r3, r2
 800b958:	b29a      	uxth	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	080194b8 	.word	0x080194b8
 800b96c:	0801961c 	.word	0x0801961c
 800b970:	08019518 	.word	0x08019518

0800b974 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b97e:	2200      	movs	r2, #0
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ff8e 	bl	800b8a4 <pbuf_add_header_impl>
 800b988:	4603      	mov	r3, r0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d106      	bne.n	800b9b2 <pbuf_remove_header+0x1e>
 800b9a4:	4b20      	ldr	r3, [pc, #128]	; (800ba28 <pbuf_remove_header+0x94>)
 800b9a6:	f240 224b 	movw	r2, #587	; 0x24b
 800b9aa:	4920      	ldr	r1, [pc, #128]	; (800ba2c <pbuf_remove_header+0x98>)
 800b9ac:	4820      	ldr	r0, [pc, #128]	; (800ba30 <pbuf_remove_header+0x9c>)
 800b9ae:	f00b fd8b 	bl	80174c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <pbuf_remove_header+0x2c>
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9be:	d301      	bcc.n	800b9c4 <pbuf_remove_header+0x30>
    return 1;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e02c      	b.n	800ba1e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <pbuf_remove_header+0x3a>
    return 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e027      	b.n	800ba1e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	895b      	ldrh	r3, [r3, #10]
 800b9d6:	89fa      	ldrh	r2, [r7, #14]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d908      	bls.n	800b9ee <pbuf_remove_header+0x5a>
 800b9dc:	4b12      	ldr	r3, [pc, #72]	; (800ba28 <pbuf_remove_header+0x94>)
 800b9de:	f240 2255 	movw	r2, #597	; 0x255
 800b9e2:	4914      	ldr	r1, [pc, #80]	; (800ba34 <pbuf_remove_header+0xa0>)
 800b9e4:	4812      	ldr	r0, [pc, #72]	; (800ba30 <pbuf_remove_header+0x9c>)
 800b9e6:	f00b fd6f 	bl	80174c8 <iprintf>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e017      	b.n	800ba1e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685a      	ldr	r2, [r3, #4]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	441a      	add	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	895a      	ldrh	r2, [r3, #10]
 800ba04:	89fb      	ldrh	r3, [r7, #14]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	891a      	ldrh	r2, [r3, #8]
 800ba12:	89fb      	ldrh	r3, [r7, #14]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	080194b8 	.word	0x080194b8
 800ba2c:	0801961c 	.word	0x0801961c
 800ba30:	08019518 	.word	0x08019518
 800ba34:	08019628 	.word	0x08019628

0800ba38 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	807b      	strh	r3, [r7, #2]
 800ba44:	4613      	mov	r3, r2
 800ba46:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ba48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da08      	bge.n	800ba62 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ba50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba54:	425b      	negs	r3, r3
 800ba56:	4619      	mov	r1, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7ff ff9b 	bl	800b994 <pbuf_remove_header>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	e007      	b.n	800ba72 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ba62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba66:	787a      	ldrb	r2, [r7, #1]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7ff ff1a 	bl	800b8a4 <pbuf_add_header_impl>
 800ba70:	4603      	mov	r3, r0
  }
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	460b      	mov	r3, r1
 800ba84:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ba86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f7ff ffd2 	bl	800ba38 <pbuf_header_impl>
 800ba94:	4603      	mov	r3, r0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
	...

0800baa0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10b      	bne.n	800bac6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d106      	bne.n	800bac2 <pbuf_free+0x22>
 800bab4:	4b3b      	ldr	r3, [pc, #236]	; (800bba4 <pbuf_free+0x104>)
 800bab6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800baba:	493b      	ldr	r1, [pc, #236]	; (800bba8 <pbuf_free+0x108>)
 800babc:	483b      	ldr	r0, [pc, #236]	; (800bbac <pbuf_free+0x10c>)
 800babe:	f00b fd03 	bl	80174c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e069      	b.n	800bb9a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bac6:	2300      	movs	r3, #0
 800bac8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800baca:	e062      	b.n	800bb92 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bacc:	f00b fc98 	bl	8017400 <sys_arch_protect>
 800bad0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	7b9b      	ldrb	r3, [r3, #14]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d106      	bne.n	800bae8 <pbuf_free+0x48>
 800bada:	4b32      	ldr	r3, [pc, #200]	; (800bba4 <pbuf_free+0x104>)
 800badc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bae0:	4933      	ldr	r1, [pc, #204]	; (800bbb0 <pbuf_free+0x110>)
 800bae2:	4832      	ldr	r0, [pc, #200]	; (800bbac <pbuf_free+0x10c>)
 800bae4:	f00b fcf0 	bl	80174c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	7b9b      	ldrb	r3, [r3, #14]
 800baec:	3b01      	subs	r3, #1
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	739a      	strb	r2, [r3, #14]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	7b9b      	ldrb	r3, [r3, #14]
 800baf8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bafa:	69b8      	ldr	r0, [r7, #24]
 800bafc:	f00b fc8e 	bl	801741c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb00:	7dfb      	ldrb	r3, [r7, #23]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d143      	bne.n	800bb8e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	7b1b      	ldrb	r3, [r3, #12]
 800bb10:	f003 030f 	and.w	r3, r3, #15
 800bb14:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	7b5b      	ldrb	r3, [r3, #13]
 800bb1a:	f003 0302 	and.w	r3, r3, #2
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d011      	beq.n	800bb46 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d106      	bne.n	800bb3c <pbuf_free+0x9c>
 800bb2e:	4b1d      	ldr	r3, [pc, #116]	; (800bba4 <pbuf_free+0x104>)
 800bb30:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bb34:	491f      	ldr	r1, [pc, #124]	; (800bbb4 <pbuf_free+0x114>)
 800bb36:	481d      	ldr	r0, [pc, #116]	; (800bbac <pbuf_free+0x10c>)
 800bb38:	f00b fcc6 	bl	80174c8 <iprintf>
        pc->custom_free_function(p);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	4798      	blx	r3
 800bb44:	e01d      	b.n	800bb82 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d104      	bne.n	800bb56 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	200c      	movs	r0, #12
 800bb50:	f7ff f8fa 	bl	800ad48 <memp_free>
 800bb54:	e015      	b.n	800bb82 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d104      	bne.n	800bb66 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bb5c:	6879      	ldr	r1, [r7, #4]
 800bb5e:	200b      	movs	r0, #11
 800bb60:	f7ff f8f2 	bl	800ad48 <memp_free>
 800bb64:	e00d      	b.n	800bb82 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d103      	bne.n	800bb74 <pbuf_free+0xd4>
          mem_free(p);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7fe fd7d 	bl	800a66c <mem_free>
 800bb72:	e006      	b.n	800bb82 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bb74:	4b0b      	ldr	r3, [pc, #44]	; (800bba4 <pbuf_free+0x104>)
 800bb76:	f240 320f 	movw	r2, #783	; 0x30f
 800bb7a:	490f      	ldr	r1, [pc, #60]	; (800bbb8 <pbuf_free+0x118>)
 800bb7c:	480b      	ldr	r0, [pc, #44]	; (800bbac <pbuf_free+0x10c>)
 800bb7e:	f00b fca3 	bl	80174c8 <iprintf>
        }
      }
      count++;
 800bb82:	7ffb      	ldrb	r3, [r7, #31]
 800bb84:	3301      	adds	r3, #1
 800bb86:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	607b      	str	r3, [r7, #4]
 800bb8c:	e001      	b.n	800bb92 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d199      	bne.n	800bacc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bb98:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	080194b8 	.word	0x080194b8
 800bba8:	0801961c 	.word	0x0801961c
 800bbac:	08019518 	.word	0x08019518
 800bbb0:	08019648 	.word	0x08019648
 800bbb4:	08019660 	.word	0x08019660
 800bbb8:	08019684 	.word	0x08019684

0800bbbc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bbc8:	e005      	b.n	800bbd6 <pbuf_clen+0x1a>
    ++len;
 800bbca:	89fb      	ldrh	r3, [r7, #14]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1f6      	bne.n	800bbca <pbuf_clen+0xe>
  }
  return len;
 800bbdc:	89fb      	ldrh	r3, [r7, #14]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
	...

0800bbec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d016      	beq.n	800bc28 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bbfa:	f00b fc01 	bl	8017400 <sys_arch_protect>
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7b9b      	ldrb	r3, [r3, #14]
 800bc04:	3301      	adds	r3, #1
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	739a      	strb	r2, [r3, #14]
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f00b fc05 	bl	801741c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	7b9b      	ldrb	r3, [r3, #14]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <pbuf_ref+0x3c>
 800bc1a:	4b05      	ldr	r3, [pc, #20]	; (800bc30 <pbuf_ref+0x44>)
 800bc1c:	f240 3242 	movw	r2, #834	; 0x342
 800bc20:	4904      	ldr	r1, [pc, #16]	; (800bc34 <pbuf_ref+0x48>)
 800bc22:	4805      	ldr	r0, [pc, #20]	; (800bc38 <pbuf_ref+0x4c>)
 800bc24:	f00b fc50 	bl	80174c8 <iprintf>
  }
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	080194b8 	.word	0x080194b8
 800bc34:	08019698 	.word	0x08019698
 800bc38:	08019518 	.word	0x08019518

0800bc3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <pbuf_cat+0x16>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d107      	bne.n	800bc62 <pbuf_cat+0x26>
 800bc52:	4b20      	ldr	r3, [pc, #128]	; (800bcd4 <pbuf_cat+0x98>)
 800bc54:	f240 325a 	movw	r2, #858	; 0x35a
 800bc58:	491f      	ldr	r1, [pc, #124]	; (800bcd8 <pbuf_cat+0x9c>)
 800bc5a:	4820      	ldr	r0, [pc, #128]	; (800bcdc <pbuf_cat+0xa0>)
 800bc5c:	f00b fc34 	bl	80174c8 <iprintf>
 800bc60:	e034      	b.n	800bccc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	60fb      	str	r3, [r7, #12]
 800bc66:	e00a      	b.n	800bc7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	891a      	ldrh	r2, [r3, #8]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	891b      	ldrh	r3, [r3, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1f0      	bne.n	800bc68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	891a      	ldrh	r2, [r3, #8]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	895b      	ldrh	r3, [r3, #10]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d006      	beq.n	800bca0 <pbuf_cat+0x64>
 800bc92:	4b10      	ldr	r3, [pc, #64]	; (800bcd4 <pbuf_cat+0x98>)
 800bc94:	f240 3262 	movw	r2, #866	; 0x362
 800bc98:	4911      	ldr	r1, [pc, #68]	; (800bce0 <pbuf_cat+0xa4>)
 800bc9a:	4810      	ldr	r0, [pc, #64]	; (800bcdc <pbuf_cat+0xa0>)
 800bc9c:	f00b fc14 	bl	80174c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d006      	beq.n	800bcb6 <pbuf_cat+0x7a>
 800bca8:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <pbuf_cat+0x98>)
 800bcaa:	f240 3263 	movw	r2, #867	; 0x363
 800bcae:	490d      	ldr	r1, [pc, #52]	; (800bce4 <pbuf_cat+0xa8>)
 800bcb0:	480a      	ldr	r0, [pc, #40]	; (800bcdc <pbuf_cat+0xa0>)
 800bcb2:	f00b fc09 	bl	80174c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	891a      	ldrh	r2, [r3, #8]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	891b      	ldrh	r3, [r3, #8]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	080194b8 	.word	0x080194b8
 800bcd8:	080196ac 	.word	0x080196ac
 800bcdc:	08019518 	.word	0x08019518
 800bce0:	080196e4 	.word	0x080196e4
 800bce4:	08019714 	.word	0x08019714

0800bce8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff ffa1 	bl	800bc3c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bcfa:	6838      	ldr	r0, [r7, #0]
 800bcfc:	f7ff ff76 	bl	800bbec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bd12:	2300      	movs	r3, #0
 800bd14:	617b      	str	r3, [r7, #20]
 800bd16:	2300      	movs	r3, #0
 800bd18:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d008      	beq.n	800bd32 <pbuf_copy+0x2a>
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d005      	beq.n	800bd32 <pbuf_copy+0x2a>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	891a      	ldrh	r2, [r3, #8]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	891b      	ldrh	r3, [r3, #8]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d209      	bcs.n	800bd46 <pbuf_copy+0x3e>
 800bd32:	4b57      	ldr	r3, [pc, #348]	; (800be90 <pbuf_copy+0x188>)
 800bd34:	f240 32ca 	movw	r2, #970	; 0x3ca
 800bd38:	4956      	ldr	r1, [pc, #344]	; (800be94 <pbuf_copy+0x18c>)
 800bd3a:	4857      	ldr	r0, [pc, #348]	; (800be98 <pbuf_copy+0x190>)
 800bd3c:	f00b fbc4 	bl	80174c8 <iprintf>
 800bd40:	f06f 030f 	mvn.w	r3, #15
 800bd44:	e09f      	b.n	800be86 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	895b      	ldrh	r3, [r3, #10]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	1ad2      	subs	r2, r2, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	895b      	ldrh	r3, [r3, #10]
 800bd54:	4619      	mov	r1, r3
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	1acb      	subs	r3, r1, r3
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d306      	bcc.n	800bd6c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	895b      	ldrh	r3, [r3, #10]
 800bd62:	461a      	mov	r2, r3
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	e005      	b.n	800bd78 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	895b      	ldrh	r3, [r3, #10]
 800bd70:	461a      	mov	r2, r3
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	18d0      	adds	r0, r2, r3
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	4413      	add	r3, r2
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	f00b fb89 	bl	80174a2 <memcpy>
    offset_to += len;
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4413      	add	r3, r2
 800bd96:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	895b      	ldrh	r3, [r3, #10]
 800bda4:	461a      	mov	r2, r3
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d906      	bls.n	800bdba <pbuf_copy+0xb2>
 800bdac:	4b38      	ldr	r3, [pc, #224]	; (800be90 <pbuf_copy+0x188>)
 800bdae:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bdb2:	493a      	ldr	r1, [pc, #232]	; (800be9c <pbuf_copy+0x194>)
 800bdb4:	4838      	ldr	r0, [pc, #224]	; (800be98 <pbuf_copy+0x190>)
 800bdb6:	f00b fb87 	bl	80174c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	895b      	ldrh	r3, [r3, #10]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d906      	bls.n	800bdd4 <pbuf_copy+0xcc>
 800bdc6:	4b32      	ldr	r3, [pc, #200]	; (800be90 <pbuf_copy+0x188>)
 800bdc8:	f240 32da 	movw	r2, #986	; 0x3da
 800bdcc:	4934      	ldr	r1, [pc, #208]	; (800bea0 <pbuf_copy+0x198>)
 800bdce:	4832      	ldr	r0, [pc, #200]	; (800be98 <pbuf_copy+0x190>)
 800bdd0:	f00b fb7a 	bl	80174c8 <iprintf>
    if (offset_from >= p_from->len) {
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	895b      	ldrh	r3, [r3, #10]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d304      	bcc.n	800bdea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	895b      	ldrh	r3, [r3, #10]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d114      	bne.n	800be20 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10c      	bne.n	800be20 <pbuf_copy+0x118>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d009      	beq.n	800be20 <pbuf_copy+0x118>
 800be0c:	4b20      	ldr	r3, [pc, #128]	; (800be90 <pbuf_copy+0x188>)
 800be0e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800be12:	4924      	ldr	r1, [pc, #144]	; (800bea4 <pbuf_copy+0x19c>)
 800be14:	4820      	ldr	r0, [pc, #128]	; (800be98 <pbuf_copy+0x190>)
 800be16:	f00b fb57 	bl	80174c8 <iprintf>
 800be1a:	f06f 030f 	mvn.w	r3, #15
 800be1e:	e032      	b.n	800be86 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d013      	beq.n	800be4e <pbuf_copy+0x146>
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	895a      	ldrh	r2, [r3, #10]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	891b      	ldrh	r3, [r3, #8]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d10d      	bne.n	800be4e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d009      	beq.n	800be4e <pbuf_copy+0x146>
 800be3a:	4b15      	ldr	r3, [pc, #84]	; (800be90 <pbuf_copy+0x188>)
 800be3c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800be40:	4919      	ldr	r1, [pc, #100]	; (800bea8 <pbuf_copy+0x1a0>)
 800be42:	4815      	ldr	r0, [pc, #84]	; (800be98 <pbuf_copy+0x190>)
 800be44:	f00b fb40 	bl	80174c8 <iprintf>
 800be48:	f06f 0305 	mvn.w	r3, #5
 800be4c:	e01b      	b.n	800be86 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d013      	beq.n	800be7c <pbuf_copy+0x174>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	895a      	ldrh	r2, [r3, #10]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	891b      	ldrh	r3, [r3, #8]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d10d      	bne.n	800be7c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d009      	beq.n	800be7c <pbuf_copy+0x174>
 800be68:	4b09      	ldr	r3, [pc, #36]	; (800be90 <pbuf_copy+0x188>)
 800be6a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800be6e:	490e      	ldr	r1, [pc, #56]	; (800bea8 <pbuf_copy+0x1a0>)
 800be70:	4809      	ldr	r0, [pc, #36]	; (800be98 <pbuf_copy+0x190>)
 800be72:	f00b fb29 	bl	80174c8 <iprintf>
 800be76:	f06f 0305 	mvn.w	r3, #5
 800be7a:	e004      	b.n	800be86 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f47f af61 	bne.w	800bd46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	080194b8 	.word	0x080194b8
 800be94:	08019760 	.word	0x08019760
 800be98:	08019518 	.word	0x08019518
 800be9c:	08019790 	.word	0x08019790
 800bea0:	080197a8 	.word	0x080197a8
 800bea4:	080197c4 	.word	0x080197c4
 800bea8:	080197d4 	.word	0x080197d4

0800beac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b088      	sub	sp, #32
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	4611      	mov	r1, r2
 800beb8:	461a      	mov	r2, r3
 800beba:	460b      	mov	r3, r1
 800bebc:	80fb      	strh	r3, [r7, #6]
 800bebe:	4613      	mov	r3, r2
 800bec0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d108      	bne.n	800bee2 <pbuf_copy_partial+0x36>
 800bed0:	4b2b      	ldr	r3, [pc, #172]	; (800bf80 <pbuf_copy_partial+0xd4>)
 800bed2:	f240 420a 	movw	r2, #1034	; 0x40a
 800bed6:	492b      	ldr	r1, [pc, #172]	; (800bf84 <pbuf_copy_partial+0xd8>)
 800bed8:	482b      	ldr	r0, [pc, #172]	; (800bf88 <pbuf_copy_partial+0xdc>)
 800beda:	f00b faf5 	bl	80174c8 <iprintf>
 800bede:	2300      	movs	r3, #0
 800bee0:	e04a      	b.n	800bf78 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d108      	bne.n	800befa <pbuf_copy_partial+0x4e>
 800bee8:	4b25      	ldr	r3, [pc, #148]	; (800bf80 <pbuf_copy_partial+0xd4>)
 800beea:	f240 420b 	movw	r2, #1035	; 0x40b
 800beee:	4927      	ldr	r1, [pc, #156]	; (800bf8c <pbuf_copy_partial+0xe0>)
 800bef0:	4825      	ldr	r0, [pc, #148]	; (800bf88 <pbuf_copy_partial+0xdc>)
 800bef2:	f00b fae9 	bl	80174c8 <iprintf>
 800bef6:	2300      	movs	r3, #0
 800bef8:	e03e      	b.n	800bf78 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	61fb      	str	r3, [r7, #28]
 800befe:	e034      	b.n	800bf6a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf00:	88bb      	ldrh	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <pbuf_copy_partial+0x70>
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	895b      	ldrh	r3, [r3, #10]
 800bf0a:	88ba      	ldrh	r2, [r7, #4]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d305      	bcc.n	800bf1c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	895b      	ldrh	r3, [r3, #10]
 800bf14:	88ba      	ldrh	r2, [r7, #4]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	80bb      	strh	r3, [r7, #4]
 800bf1a:	e023      	b.n	800bf64 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	895a      	ldrh	r2, [r3, #10]
 800bf20:	88bb      	ldrh	r3, [r7, #4]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bf26:	8b3a      	ldrh	r2, [r7, #24]
 800bf28:	88fb      	ldrh	r3, [r7, #6]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d901      	bls.n	800bf32 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bf2e:	88fb      	ldrh	r3, [r7, #6]
 800bf30:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bf32:	8b7b      	ldrh	r3, [r7, #26]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	18d0      	adds	r0, r2, r3
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	88bb      	ldrh	r3, [r7, #4]
 800bf3e:	4413      	add	r3, r2
 800bf40:	8b3a      	ldrh	r2, [r7, #24]
 800bf42:	4619      	mov	r1, r3
 800bf44:	f00b faad 	bl	80174a2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bf48:	8afa      	ldrh	r2, [r7, #22]
 800bf4a:	8b3b      	ldrh	r3, [r7, #24]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bf50:	8b7a      	ldrh	r2, [r7, #26]
 800bf52:	8b3b      	ldrh	r3, [r7, #24]
 800bf54:	4413      	add	r3, r2
 800bf56:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bf58:	88fa      	ldrh	r2, [r7, #6]
 800bf5a:	8b3b      	ldrh	r3, [r7, #24]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	61fb      	str	r3, [r7, #28]
 800bf6a:	88fb      	ldrh	r3, [r7, #6]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <pbuf_copy_partial+0xca>
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1c4      	bne.n	800bf00 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bf76:	8afb      	ldrh	r3, [r7, #22]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3720      	adds	r7, #32
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	080194b8 	.word	0x080194b8
 800bf84:	08019800 	.word	0x08019800
 800bf88:	08019518 	.word	0x08019518
 800bf8c:	08019820 	.word	0x08019820

0800bf90 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	4603      	mov	r3, r0
 800bf98:	603a      	str	r2, [r7, #0]
 800bf9a:	71fb      	strb	r3, [r7, #7]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	8919      	ldrh	r1, [r3, #8]
 800bfa4:	88ba      	ldrh	r2, [r7, #4]
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff fa99 	bl	800b4e0 <pbuf_alloc>
 800bfae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d101      	bne.n	800bfba <pbuf_clone+0x2a>
    return NULL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	e011      	b.n	800bfde <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7ff fea3 	bl	800bd08 <pbuf_copy>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bfc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d006      	beq.n	800bfdc <pbuf_clone+0x4c>
 800bfce:	4b06      	ldr	r3, [pc, #24]	; (800bfe8 <pbuf_clone+0x58>)
 800bfd0:	f240 5224 	movw	r2, #1316	; 0x524
 800bfd4:	4905      	ldr	r1, [pc, #20]	; (800bfec <pbuf_clone+0x5c>)
 800bfd6:	4806      	ldr	r0, [pc, #24]	; (800bff0 <pbuf_clone+0x60>)
 800bfd8:	f00b fa76 	bl	80174c8 <iprintf>
  return q;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	080194b8 	.word	0x080194b8
 800bfec:	0801992c 	.word	0x0801992c
 800bff0:	08019518 	.word	0x08019518

0800bff4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bff8:	f00b fa7e 	bl	80174f8 <rand>
 800bffc:	4603      	mov	r3, r0
 800bffe:	b29b      	uxth	r3, r3
 800c000:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c004:	b29b      	uxth	r3, r3
 800c006:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	4b01      	ldr	r3, [pc, #4]	; (800c014 <tcp_init+0x20>)
 800c00e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c010:	bf00      	nop
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20000010 	.word	0x20000010

0800c018 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	7d1b      	ldrb	r3, [r3, #20]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d105      	bne.n	800c034 <tcp_free+0x1c>
 800c028:	4b06      	ldr	r3, [pc, #24]	; (800c044 <tcp_free+0x2c>)
 800c02a:	22d4      	movs	r2, #212	; 0xd4
 800c02c:	4906      	ldr	r1, [pc, #24]	; (800c048 <tcp_free+0x30>)
 800c02e:	4807      	ldr	r0, [pc, #28]	; (800c04c <tcp_free+0x34>)
 800c030:	f00b fa4a 	bl	80174c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c034:	6879      	ldr	r1, [r7, #4]
 800c036:	2001      	movs	r0, #1
 800c038:	f7fe fe86 	bl	800ad48 <memp_free>
}
 800c03c:	bf00      	nop
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	080199b8 	.word	0x080199b8
 800c048:	080199e8 	.word	0x080199e8
 800c04c:	080199fc 	.word	0x080199fc

0800c050 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	7d1b      	ldrb	r3, [r3, #20]
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d105      	bne.n	800c06c <tcp_free_listen+0x1c>
 800c060:	4b06      	ldr	r3, [pc, #24]	; (800c07c <tcp_free_listen+0x2c>)
 800c062:	22df      	movs	r2, #223	; 0xdf
 800c064:	4906      	ldr	r1, [pc, #24]	; (800c080 <tcp_free_listen+0x30>)
 800c066:	4807      	ldr	r0, [pc, #28]	; (800c084 <tcp_free_listen+0x34>)
 800c068:	f00b fa2e 	bl	80174c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c06c:	6879      	ldr	r1, [r7, #4]
 800c06e:	2002      	movs	r0, #2
 800c070:	f7fe fe6a 	bl	800ad48 <memp_free>
}
 800c074:	bf00      	nop
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	080199b8 	.word	0x080199b8
 800c080:	08019a24 	.word	0x08019a24
 800c084:	080199fc 	.word	0x080199fc

0800c088 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c08c:	f001 f89a 	bl	800d1c4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c090:	4b07      	ldr	r3, [pc, #28]	; (800c0b0 <tcp_tmr+0x28>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	3301      	adds	r3, #1
 800c096:	b2da      	uxtb	r2, r3
 800c098:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <tcp_tmr+0x28>)
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <tcp_tmr+0x28>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	f003 0301 	and.w	r3, r3, #1
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c0a8:	f000 fd4e 	bl	800cb48 <tcp_slowtmr>
  }
}
 800c0ac:	bf00      	nop
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	2000849d 	.word	0x2000849d

0800c0b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d105      	bne.n	800c0d0 <tcp_remove_listener+0x1c>
 800c0c4:	4b0d      	ldr	r3, [pc, #52]	; (800c0fc <tcp_remove_listener+0x48>)
 800c0c6:	22ff      	movs	r2, #255	; 0xff
 800c0c8:	490d      	ldr	r1, [pc, #52]	; (800c100 <tcp_remove_listener+0x4c>)
 800c0ca:	480e      	ldr	r0, [pc, #56]	; (800c104 <tcp_remove_listener+0x50>)
 800c0cc:	f00b f9fc 	bl	80174c8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e00a      	b.n	800c0ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d102      	bne.n	800c0e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1f1      	bne.n	800c0d6 <tcp_remove_listener+0x22>
    }
  }
}
 800c0f2:	bf00      	nop
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	080199b8 	.word	0x080199b8
 800c100:	08019a40 	.word	0x08019a40
 800c104:	080199fc 	.word	0x080199fc

0800c108 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d106      	bne.n	800c124 <tcp_listen_closed+0x1c>
 800c116:	4b14      	ldr	r3, [pc, #80]	; (800c168 <tcp_listen_closed+0x60>)
 800c118:	f240 1211 	movw	r2, #273	; 0x111
 800c11c:	4913      	ldr	r1, [pc, #76]	; (800c16c <tcp_listen_closed+0x64>)
 800c11e:	4814      	ldr	r0, [pc, #80]	; (800c170 <tcp_listen_closed+0x68>)
 800c120:	f00b f9d2 	bl	80174c8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	7d1b      	ldrb	r3, [r3, #20]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d006      	beq.n	800c13a <tcp_listen_closed+0x32>
 800c12c:	4b0e      	ldr	r3, [pc, #56]	; (800c168 <tcp_listen_closed+0x60>)
 800c12e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c132:	4910      	ldr	r1, [pc, #64]	; (800c174 <tcp_listen_closed+0x6c>)
 800c134:	480e      	ldr	r0, [pc, #56]	; (800c170 <tcp_listen_closed+0x68>)
 800c136:	f00b f9c7 	bl	80174c8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c13a:	2301      	movs	r3, #1
 800c13c:	60fb      	str	r3, [r7, #12]
 800c13e:	e00b      	b.n	800c158 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c140:	4a0d      	ldr	r2, [pc, #52]	; (800c178 <tcp_listen_closed+0x70>)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6879      	ldr	r1, [r7, #4]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff ffb1 	bl	800c0b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3301      	adds	r3, #1
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d9f0      	bls.n	800c140 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c15e:	bf00      	nop
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	080199b8 	.word	0x080199b8
 800c16c:	08019a68 	.word	0x08019a68
 800c170:	080199fc 	.word	0x080199fc
 800c174:	08019a74 	.word	0x08019a74
 800c178:	0801bd70 	.word	0x0801bd70

0800c17c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c17c:	b5b0      	push	{r4, r5, r7, lr}
 800c17e:	b088      	sub	sp, #32
 800c180:	af04      	add	r7, sp, #16
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <tcp_close_shutdown+0x20>
 800c18e:	4b61      	ldr	r3, [pc, #388]	; (800c314 <tcp_close_shutdown+0x198>)
 800c190:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c194:	4960      	ldr	r1, [pc, #384]	; (800c318 <tcp_close_shutdown+0x19c>)
 800c196:	4861      	ldr	r0, [pc, #388]	; (800c31c <tcp_close_shutdown+0x1a0>)
 800c198:	f00b f996 	bl	80174c8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d066      	beq.n	800c270 <tcp_close_shutdown+0xf4>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	7d1b      	ldrb	r3, [r3, #20]
 800c1a6:	2b04      	cmp	r3, #4
 800c1a8:	d003      	beq.n	800c1b2 <tcp_close_shutdown+0x36>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	7d1b      	ldrb	r3, [r3, #20]
 800c1ae:	2b07      	cmp	r3, #7
 800c1b0:	d15e      	bne.n	800c270 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d104      	bne.n	800c1c4 <tcp_close_shutdown+0x48>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c1c2:	d055      	beq.n	800c270 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	8b5b      	ldrh	r3, [r3, #26]
 800c1c8:	f003 0310 	and.w	r3, r3, #16
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d106      	bne.n	800c1de <tcp_close_shutdown+0x62>
 800c1d0:	4b50      	ldr	r3, [pc, #320]	; (800c314 <tcp_close_shutdown+0x198>)
 800c1d2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c1d6:	4952      	ldr	r1, [pc, #328]	; (800c320 <tcp_close_shutdown+0x1a4>)
 800c1d8:	4850      	ldr	r0, [pc, #320]	; (800c31c <tcp_close_shutdown+0x1a0>)
 800c1da:	f00b f975 	bl	80174c8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c1e6:	687d      	ldr	r5, [r7, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	8ad2      	ldrh	r2, [r2, #22]
 800c1f0:	6879      	ldr	r1, [r7, #4]
 800c1f2:	8b09      	ldrh	r1, [r1, #24]
 800c1f4:	9102      	str	r1, [sp, #8]
 800c1f6:	9201      	str	r2, [sp, #4]
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	4601      	mov	r1, r0
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f005 fdb9 	bl	8011d78 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f001 fb8a 	bl	800d920 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c20c:	4b45      	ldr	r3, [pc, #276]	; (800c324 <tcp_close_shutdown+0x1a8>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	429a      	cmp	r2, r3
 800c214:	d105      	bne.n	800c222 <tcp_close_shutdown+0xa6>
 800c216:	4b43      	ldr	r3, [pc, #268]	; (800c324 <tcp_close_shutdown+0x1a8>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	4a41      	ldr	r2, [pc, #260]	; (800c324 <tcp_close_shutdown+0x1a8>)
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	e013      	b.n	800c24a <tcp_close_shutdown+0xce>
 800c222:	4b40      	ldr	r3, [pc, #256]	; (800c324 <tcp_close_shutdown+0x1a8>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	60fb      	str	r3, [r7, #12]
 800c228:	e00c      	b.n	800c244 <tcp_close_shutdown+0xc8>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d104      	bne.n	800c23e <tcp_close_shutdown+0xc2>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	68da      	ldr	r2, [r3, #12]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	60da      	str	r2, [r3, #12]
 800c23c:	e005      	b.n	800c24a <tcp_close_shutdown+0xce>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1ef      	bne.n	800c22a <tcp_close_shutdown+0xae>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	60da      	str	r2, [r3, #12]
 800c250:	4b35      	ldr	r3, [pc, #212]	; (800c328 <tcp_close_shutdown+0x1ac>)
 800c252:	2201      	movs	r2, #1
 800c254:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c256:	4b35      	ldr	r3, [pc, #212]	; (800c32c <tcp_close_shutdown+0x1b0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d102      	bne.n	800c266 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c260:	f004 f81c 	bl	801029c <tcp_trigger_input_pcb_close>
 800c264:	e002      	b.n	800c26c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7ff fed6 	bl	800c018 <tcp_free>
      }
      return ERR_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	e04d      	b.n	800c30c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7d1b      	ldrb	r3, [r3, #20]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d02d      	beq.n	800c2d4 <tcp_close_shutdown+0x158>
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d036      	beq.n	800c2ea <tcp_close_shutdown+0x16e>
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d13f      	bne.n	800c300 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	8adb      	ldrh	r3, [r3, #22]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d021      	beq.n	800c2cc <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c288:	4b29      	ldr	r3, [pc, #164]	; (800c330 <tcp_close_shutdown+0x1b4>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d105      	bne.n	800c29e <tcp_close_shutdown+0x122>
 800c292:	4b27      	ldr	r3, [pc, #156]	; (800c330 <tcp_close_shutdown+0x1b4>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	4a25      	ldr	r2, [pc, #148]	; (800c330 <tcp_close_shutdown+0x1b4>)
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	e013      	b.n	800c2c6 <tcp_close_shutdown+0x14a>
 800c29e:	4b24      	ldr	r3, [pc, #144]	; (800c330 <tcp_close_shutdown+0x1b4>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	60bb      	str	r3, [r7, #8]
 800c2a4:	e00c      	b.n	800c2c0 <tcp_close_shutdown+0x144>
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d104      	bne.n	800c2ba <tcp_close_shutdown+0x13e>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68da      	ldr	r2, [r3, #12]
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	60da      	str	r2, [r3, #12]
 800c2b8:	e005      	b.n	800c2c6 <tcp_close_shutdown+0x14a>
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	60bb      	str	r3, [r7, #8]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1ef      	bne.n	800c2a6 <tcp_close_shutdown+0x12a>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7ff fea3 	bl	800c018 <tcp_free>
      break;
 800c2d2:	e01a      	b.n	800c30a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ff17 	bl	800c108 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	4815      	ldr	r0, [pc, #84]	; (800c334 <tcp_close_shutdown+0x1b8>)
 800c2de:	f001 fb6f 	bl	800d9c0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff feb4 	bl	800c050 <tcp_free_listen>
      break;
 800c2e8:	e00f      	b.n	800c30a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c2ea:	6879      	ldr	r1, [r7, #4]
 800c2ec:	480d      	ldr	r0, [pc, #52]	; (800c324 <tcp_close_shutdown+0x1a8>)
 800c2ee:	f001 fb67 	bl	800d9c0 <tcp_pcb_remove>
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	; (800c328 <tcp_close_shutdown+0x1ac>)
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff fe8d 	bl	800c018 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c2fe:	e004      	b.n	800c30a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f819 	bl	800c338 <tcp_close_shutdown_fin>
 800c306:	4603      	mov	r3, r0
 800c308:	e000      	b.n	800c30c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bdb0      	pop	{r4, r5, r7, pc}
 800c314:	080199b8 	.word	0x080199b8
 800c318:	08019a8c 	.word	0x08019a8c
 800c31c:	080199fc 	.word	0x080199fc
 800c320:	08019aac 	.word	0x08019aac
 800c324:	2000f32c 	.word	0x2000f32c
 800c328:	2000f328 	.word	0x2000f328
 800c32c:	2000f340 	.word	0x2000f340
 800c330:	2000f338 	.word	0x2000f338
 800c334:	2000f334 	.word	0x2000f334

0800c338 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <tcp_close_shutdown_fin+0x1c>
 800c346:	4b2c      	ldr	r3, [pc, #176]	; (800c3f8 <tcp_close_shutdown_fin+0xc0>)
 800c348:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c34c:	492b      	ldr	r1, [pc, #172]	; (800c3fc <tcp_close_shutdown_fin+0xc4>)
 800c34e:	482c      	ldr	r0, [pc, #176]	; (800c400 <tcp_close_shutdown_fin+0xc8>)
 800c350:	f00b f8ba 	bl	80174c8 <iprintf>

  switch (pcb->state) {
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	7d1b      	ldrb	r3, [r3, #20]
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d010      	beq.n	800c37e <tcp_close_shutdown_fin+0x46>
 800c35c:	2b07      	cmp	r3, #7
 800c35e:	d01b      	beq.n	800c398 <tcp_close_shutdown_fin+0x60>
 800c360:	2b03      	cmp	r3, #3
 800c362:	d126      	bne.n	800c3b2 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f004 fe05 	bl	8010f74 <tcp_send_fin>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d11f      	bne.n	800c3b6 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2205      	movs	r2, #5
 800c37a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c37c:	e01b      	b.n	800c3b6 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f004 fdf8 	bl	8010f74 <tcp_send_fin>
 800c384:	4603      	mov	r3, r0
 800c386:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d114      	bne.n	800c3ba <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2205      	movs	r2, #5
 800c394:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c396:	e010      	b.n	800c3ba <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f004 fdeb 	bl	8010f74 <tcp_send_fin>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d109      	bne.n	800c3be <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2209      	movs	r2, #9
 800c3ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3b0:	e005      	b.n	800c3be <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	e01c      	b.n	800c3f0 <tcp_close_shutdown_fin+0xb8>
      break;
 800c3b6:	bf00      	nop
 800c3b8:	e002      	b.n	800c3c0 <tcp_close_shutdown_fin+0x88>
      break;
 800c3ba:	bf00      	nop
 800c3bc:	e000      	b.n	800c3c0 <tcp_close_shutdown_fin+0x88>
      break;
 800c3be:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d103      	bne.n	800c3d0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f004 ff11 	bl	80111f0 <tcp_output>
 800c3ce:	e00d      	b.n	800c3ec <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d8:	d108      	bne.n	800c3ec <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	8b5b      	ldrh	r3, [r3, #26]
 800c3de:	f043 0308 	orr.w	r3, r3, #8
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	e001      	b.n	800c3f0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	080199b8 	.word	0x080199b8
 800c3fc:	08019a68 	.word	0x08019a68
 800c400:	080199fc 	.word	0x080199fc

0800c404 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d109      	bne.n	800c426 <tcp_close+0x22>
 800c412:	4b0f      	ldr	r3, [pc, #60]	; (800c450 <tcp_close+0x4c>)
 800c414:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c418:	490e      	ldr	r1, [pc, #56]	; (800c454 <tcp_close+0x50>)
 800c41a:	480f      	ldr	r0, [pc, #60]	; (800c458 <tcp_close+0x54>)
 800c41c:	f00b f854 	bl	80174c8 <iprintf>
 800c420:	f06f 030f 	mvn.w	r3, #15
 800c424:	e00f      	b.n	800c446 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	7d1b      	ldrb	r3, [r3, #20]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d006      	beq.n	800c43c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	8b5b      	ldrh	r3, [r3, #26]
 800c432:	f043 0310 	orr.w	r3, r3, #16
 800c436:	b29a      	uxth	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c43c:	2101      	movs	r1, #1
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff fe9c 	bl	800c17c <tcp_close_shutdown>
 800c444:	4603      	mov	r3, r0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	080199b8 	.word	0x080199b8
 800c454:	08019ac8 	.word	0x08019ac8
 800c458:	080199fc 	.word	0x080199fc

0800c45c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d109      	bne.n	800c482 <tcp_shutdown+0x26>
 800c46e:	4b25      	ldr	r3, [pc, #148]	; (800c504 <tcp_shutdown+0xa8>)
 800c470:	f240 2207 	movw	r2, #519	; 0x207
 800c474:	4924      	ldr	r1, [pc, #144]	; (800c508 <tcp_shutdown+0xac>)
 800c476:	4825      	ldr	r0, [pc, #148]	; (800c50c <tcp_shutdown+0xb0>)
 800c478:	f00b f826 	bl	80174c8 <iprintf>
 800c47c:	f06f 030f 	mvn.w	r3, #15
 800c480:	e03c      	b.n	800c4fc <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	7d1b      	ldrb	r3, [r3, #20]
 800c486:	2b01      	cmp	r3, #1
 800c488:	d102      	bne.n	800c490 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c48a:	f06f 030a 	mvn.w	r3, #10
 800c48e:	e035      	b.n	800c4fc <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d01b      	beq.n	800c4ce <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	8b5b      	ldrh	r3, [r3, #26]
 800c49a:	f043 0310 	orr.w	r3, r3, #16
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d005      	beq.n	800c4b6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f7ff fe65 	bl	800c17c <tcp_close_shutdown>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	e022      	b.n	800c4fc <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff faec 	bl	800baa0 <pbuf_free>
      pcb->refused_data = NULL;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d012      	beq.n	800c4fa <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	7d1b      	ldrb	r3, [r3, #20]
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	db0b      	blt.n	800c4f4 <tcp_shutdown+0x98>
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	dd01      	ble.n	800c4e4 <tcp_shutdown+0x88>
 800c4e0:	2b07      	cmp	r3, #7
 800c4e2:	d107      	bne.n	800c4f4 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f7ff fe46 	bl	800c17c <tcp_close_shutdown>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	e003      	b.n	800c4fc <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c4f4:	f06f 030a 	mvn.w	r3, #10
 800c4f8:	e000      	b.n	800c4fc <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	080199b8 	.word	0x080199b8
 800c508:	08019ae0 	.word	0x08019ae0
 800c50c:	080199fc 	.word	0x080199fc

0800c510 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b08e      	sub	sp, #56	; 0x38
 800c514:	af04      	add	r7, sp, #16
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d107      	bne.n	800c530 <tcp_abandon+0x20>
 800c520:	4b52      	ldr	r3, [pc, #328]	; (800c66c <tcp_abandon+0x15c>)
 800c522:	f240 223d 	movw	r2, #573	; 0x23d
 800c526:	4952      	ldr	r1, [pc, #328]	; (800c670 <tcp_abandon+0x160>)
 800c528:	4852      	ldr	r0, [pc, #328]	; (800c674 <tcp_abandon+0x164>)
 800c52a:	f00a ffcd 	bl	80174c8 <iprintf>
 800c52e:	e099      	b.n	800c664 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7d1b      	ldrb	r3, [r3, #20]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d106      	bne.n	800c546 <tcp_abandon+0x36>
 800c538:	4b4c      	ldr	r3, [pc, #304]	; (800c66c <tcp_abandon+0x15c>)
 800c53a:	f240 2241 	movw	r2, #577	; 0x241
 800c53e:	494e      	ldr	r1, [pc, #312]	; (800c678 <tcp_abandon+0x168>)
 800c540:	484c      	ldr	r0, [pc, #304]	; (800c674 <tcp_abandon+0x164>)
 800c542:	f00a ffc1 	bl	80174c8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	7d1b      	ldrb	r3, [r3, #20]
 800c54a:	2b0a      	cmp	r3, #10
 800c54c:	d107      	bne.n	800c55e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	484a      	ldr	r0, [pc, #296]	; (800c67c <tcp_abandon+0x16c>)
 800c552:	f001 fa35 	bl	800d9c0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff fd5e 	bl	800c018 <tcp_free>
 800c55c:	e082      	b.n	800c664 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c562:	2300      	movs	r3, #0
 800c564:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c56a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c578:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	7d1b      	ldrb	r3, [r3, #20]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d126      	bne.n	800c5d6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	8adb      	ldrh	r3, [r3, #22]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d02e      	beq.n	800c5ee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c590:	4b3b      	ldr	r3, [pc, #236]	; (800c680 <tcp_abandon+0x170>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	d105      	bne.n	800c5a6 <tcp_abandon+0x96>
 800c59a:	4b39      	ldr	r3, [pc, #228]	; (800c680 <tcp_abandon+0x170>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	4a37      	ldr	r2, [pc, #220]	; (800c680 <tcp_abandon+0x170>)
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	e013      	b.n	800c5ce <tcp_abandon+0xbe>
 800c5a6:	4b36      	ldr	r3, [pc, #216]	; (800c680 <tcp_abandon+0x170>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	61fb      	str	r3, [r7, #28]
 800c5ac:	e00c      	b.n	800c5c8 <tcp_abandon+0xb8>
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d104      	bne.n	800c5c2 <tcp_abandon+0xb2>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	68da      	ldr	r2, [r3, #12]
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	60da      	str	r2, [r3, #12]
 800c5c0:	e005      	b.n	800c5ce <tcp_abandon+0xbe>
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1ef      	bne.n	800c5ae <tcp_abandon+0x9e>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	60da      	str	r2, [r3, #12]
 800c5d4:	e00b      	b.n	800c5ee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	8adb      	ldrh	r3, [r3, #22]
 800c5de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5e0:	6879      	ldr	r1, [r7, #4]
 800c5e2:	4828      	ldr	r0, [pc, #160]	; (800c684 <tcp_abandon+0x174>)
 800c5e4:	f001 f9ec 	bl	800d9c0 <tcp_pcb_remove>
 800c5e8:	4b27      	ldr	r3, [pc, #156]	; (800c688 <tcp_abandon+0x178>)
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d004      	beq.n	800c600 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 fec2 	bl	800d384 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 feb9 	bl	800d384 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c616:	2b00      	cmp	r3, #0
 800c618:	d004      	beq.n	800c624 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 feb0 	bl	800d384 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00e      	beq.n	800c648 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3304      	adds	r3, #4
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	8b12      	ldrh	r2, [r2, #24]
 800c634:	9202      	str	r2, [sp, #8]
 800c636:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c638:	9201      	str	r2, [sp, #4]
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	460b      	mov	r3, r1
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	69b9      	ldr	r1, [r7, #24]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f005 fb98 	bl	8011d78 <tcp_rst>
    }
    last_state = pcb->state;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7d1b      	ldrb	r3, [r3, #20]
 800c64c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff fce2 	bl	800c018 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <tcp_abandon+0x154>
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	f06f 010c 	mvn.w	r1, #12
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	4798      	blx	r3
  }
}
 800c664:	3728      	adds	r7, #40	; 0x28
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	080199b8 	.word	0x080199b8
 800c670:	08019afc 	.word	0x08019afc
 800c674:	080199fc 	.word	0x080199fc
 800c678:	08019b18 	.word	0x08019b18
 800c67c:	2000f33c 	.word	0x2000f33c
 800c680:	2000f338 	.word	0x2000f338
 800c684:	2000f32c 	.word	0x2000f32c
 800c688:	2000f328 	.word	0x2000f328

0800c68c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c694:	2101      	movs	r1, #1
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff ff3a 	bl	800c510 <tcp_abandon>
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b088      	sub	sp, #32
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c6b2:	2304      	movs	r3, #4
 800c6b4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c6bc:	4b3e      	ldr	r3, [pc, #248]	; (800c7b8 <tcp_bind+0x114>)
 800c6be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <tcp_bind+0x36>
 800c6c6:	4b3d      	ldr	r3, [pc, #244]	; (800c7bc <tcp_bind+0x118>)
 800c6c8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c6cc:	493c      	ldr	r1, [pc, #240]	; (800c7c0 <tcp_bind+0x11c>)
 800c6ce:	483d      	ldr	r0, [pc, #244]	; (800c7c4 <tcp_bind+0x120>)
 800c6d0:	f00a fefa 	bl	80174c8 <iprintf>
 800c6d4:	f06f 030f 	mvn.w	r3, #15
 800c6d8:	e06a      	b.n	800c7b0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	7d1b      	ldrb	r3, [r3, #20]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d009      	beq.n	800c6f6 <tcp_bind+0x52>
 800c6e2:	4b36      	ldr	r3, [pc, #216]	; (800c7bc <tcp_bind+0x118>)
 800c6e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c6e8:	4937      	ldr	r1, [pc, #220]	; (800c7c8 <tcp_bind+0x124>)
 800c6ea:	4836      	ldr	r0, [pc, #216]	; (800c7c4 <tcp_bind+0x120>)
 800c6ec:	f00a feec 	bl	80174c8 <iprintf>
 800c6f0:	f06f 0305 	mvn.w	r3, #5
 800c6f4:	e05c      	b.n	800c7b0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c6f6:	88fb      	ldrh	r3, [r7, #6]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d109      	bne.n	800c710 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c6fc:	f000 f9de 	bl	800cabc <tcp_new_port>
 800c700:	4603      	mov	r3, r0
 800c702:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d135      	bne.n	800c776 <tcp_bind+0xd2>
      return ERR_BUF;
 800c70a:	f06f 0301 	mvn.w	r3, #1
 800c70e:	e04f      	b.n	800c7b0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c710:	2300      	movs	r3, #0
 800c712:	61fb      	str	r3, [r7, #28]
 800c714:	e02b      	b.n	800c76e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c716:	4a2d      	ldr	r2, [pc, #180]	; (800c7cc <tcp_bind+0x128>)
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	61bb      	str	r3, [r7, #24]
 800c722:	e01e      	b.n	800c762 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	8adb      	ldrh	r3, [r3, #22]
 800c728:	88fa      	ldrh	r2, [r7, #6]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d116      	bne.n	800c75c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c72e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c730:	2b00      	cmp	r3, #0
 800c732:	d010      	beq.n	800c756 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00c      	beq.n	800c756 <tcp_bind+0xb2>
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d009      	beq.n	800c756 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c752:	429a      	cmp	r2, r3
 800c754:	d102      	bne.n	800c75c <tcp_bind+0xb8>
              return ERR_USE;
 800c756:	f06f 0307 	mvn.w	r3, #7
 800c75a:	e029      	b.n	800c7b0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	61bb      	str	r3, [r7, #24]
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1dd      	bne.n	800c724 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	3301      	adds	r3, #1
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	69fa      	ldr	r2, [r7, #28]
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	429a      	cmp	r2, r3
 800c774:	dbcf      	blt.n	800c716 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00c      	beq.n	800c796 <tcp_bind+0xf2>
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d008      	beq.n	800c796 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d002      	beq.n	800c790 <tcp_bind+0xec>
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	e000      	b.n	800c792 <tcp_bind+0xee>
 800c790:	2300      	movs	r3, #0
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	88fa      	ldrh	r2, [r7, #6]
 800c79a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c79c:	4b0c      	ldr	r3, [pc, #48]	; (800c7d0 <tcp_bind+0x12c>)
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	60da      	str	r2, [r3, #12]
 800c7a4:	4a0a      	ldr	r2, [pc, #40]	; (800c7d0 <tcp_bind+0x12c>)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	f005 fca7 	bl	80120fc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3720      	adds	r7, #32
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	0801bda8 	.word	0x0801bda8
 800c7bc:	080199b8 	.word	0x080199b8
 800c7c0:	08019b4c 	.word	0x08019b4c
 800c7c4:	080199fc 	.word	0x080199fc
 800c7c8:	08019b64 	.word	0x08019b64
 800c7cc:	0801bd70 	.word	0x0801bd70
 800c7d0:	2000f338 	.word	0x2000f338

0800c7d4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d106      	bne.n	800c7f6 <tcp_accept_null+0x22>
 800c7e8:	4b07      	ldr	r3, [pc, #28]	; (800c808 <tcp_accept_null+0x34>)
 800c7ea:	f240 320f 	movw	r2, #783	; 0x30f
 800c7ee:	4907      	ldr	r1, [pc, #28]	; (800c80c <tcp_accept_null+0x38>)
 800c7f0:	4807      	ldr	r0, [pc, #28]	; (800c810 <tcp_accept_null+0x3c>)
 800c7f2:	f00a fe69 	bl	80174c8 <iprintf>

  tcp_abort(pcb);
 800c7f6:	68b8      	ldr	r0, [r7, #8]
 800c7f8:	f7ff ff48 	bl	800c68c <tcp_abort>

  return ERR_ABRT;
 800c7fc:	f06f 030c 	mvn.w	r3, #12
}
 800c800:	4618      	mov	r0, r3
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	080199b8 	.word	0x080199b8
 800c80c:	08019b8c 	.word	0x08019b8c
 800c810:	080199fc 	.word	0x080199fc

0800c814 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b088      	sub	sp, #32
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	460b      	mov	r3, r1
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c822:	2300      	movs	r3, #0
 800c824:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d109      	bne.n	800c840 <tcp_listen_with_backlog_and_err+0x2c>
 800c82c:	4b47      	ldr	r3, [pc, #284]	; (800c94c <tcp_listen_with_backlog_and_err+0x138>)
 800c82e:	f240 3259 	movw	r2, #857	; 0x359
 800c832:	4947      	ldr	r1, [pc, #284]	; (800c950 <tcp_listen_with_backlog_and_err+0x13c>)
 800c834:	4847      	ldr	r0, [pc, #284]	; (800c954 <tcp_listen_with_backlog_and_err+0x140>)
 800c836:	f00a fe47 	bl	80174c8 <iprintf>
 800c83a:	23f0      	movs	r3, #240	; 0xf0
 800c83c:	76fb      	strb	r3, [r7, #27]
 800c83e:	e079      	b.n	800c934 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	7d1b      	ldrb	r3, [r3, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d009      	beq.n	800c85c <tcp_listen_with_backlog_and_err+0x48>
 800c848:	4b40      	ldr	r3, [pc, #256]	; (800c94c <tcp_listen_with_backlog_and_err+0x138>)
 800c84a:	f240 325a 	movw	r2, #858	; 0x35a
 800c84e:	4942      	ldr	r1, [pc, #264]	; (800c958 <tcp_listen_with_backlog_and_err+0x144>)
 800c850:	4840      	ldr	r0, [pc, #256]	; (800c954 <tcp_listen_with_backlog_and_err+0x140>)
 800c852:	f00a fe39 	bl	80174c8 <iprintf>
 800c856:	23f1      	movs	r3, #241	; 0xf1
 800c858:	76fb      	strb	r3, [r7, #27]
 800c85a:	e06b      	b.n	800c934 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	7d1b      	ldrb	r3, [r3, #20]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d104      	bne.n	800c86e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c868:	23f7      	movs	r3, #247	; 0xf7
 800c86a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c86c:	e062      	b.n	800c934 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c86e:	2002      	movs	r0, #2
 800c870:	f7fe fa18 	bl	800aca4 <memp_malloc>
 800c874:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c87c:	23ff      	movs	r3, #255	; 0xff
 800c87e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c880:	e058      	b.n	800c934 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	691a      	ldr	r2, [r3, #16]
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	8ada      	ldrh	r2, [r3, #22]
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2201      	movs	r2, #1
 800c896:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	7d5a      	ldrb	r2, [r3, #21]
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	7a5a      	ldrb	r2, [r3, #9]
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	7ada      	ldrb	r2, [r3, #11]
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	7a9a      	ldrb	r2, [r3, #10]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	8adb      	ldrh	r3, [r3, #22]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d021      	beq.n	800c912 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8ce:	4b23      	ldr	r3, [pc, #140]	; (800c95c <tcp_listen_with_backlog_and_err+0x148>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d105      	bne.n	800c8e4 <tcp_listen_with_backlog_and_err+0xd0>
 800c8d8:	4b20      	ldr	r3, [pc, #128]	; (800c95c <tcp_listen_with_backlog_and_err+0x148>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	4a1f      	ldr	r2, [pc, #124]	; (800c95c <tcp_listen_with_backlog_and_err+0x148>)
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	e013      	b.n	800c90c <tcp_listen_with_backlog_and_err+0xf8>
 800c8e4:	4b1d      	ldr	r3, [pc, #116]	; (800c95c <tcp_listen_with_backlog_and_err+0x148>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	617b      	str	r3, [r7, #20]
 800c8ea:	e00c      	b.n	800c906 <tcp_listen_with_backlog_and_err+0xf2>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d104      	bne.n	800c900 <tcp_listen_with_backlog_and_err+0xec>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	60da      	str	r2, [r3, #12]
 800c8fe:	e005      	b.n	800c90c <tcp_listen_with_backlog_and_err+0xf8>
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1ef      	bne.n	800c8ec <tcp_listen_with_backlog_and_err+0xd8>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f7ff fb80 	bl	800c018 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	4a11      	ldr	r2, [pc, #68]	; (800c960 <tcp_listen_with_backlog_and_err+0x14c>)
 800c91c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c91e:	4b11      	ldr	r3, [pc, #68]	; (800c964 <tcp_listen_with_backlog_and_err+0x150>)
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	60da      	str	r2, [r3, #12]
 800c926:	4a0f      	ldr	r2, [pc, #60]	; (800c964 <tcp_listen_with_backlog_and_err+0x150>)
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	f005 fbe6 	bl	80120fc <tcp_timer_needed>
  res = ERR_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	7efa      	ldrb	r2, [r7, #27]
 800c93e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c940:	69fb      	ldr	r3, [r7, #28]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3720      	adds	r7, #32
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	080199b8 	.word	0x080199b8
 800c950:	08019bac 	.word	0x08019bac
 800c954:	080199fc 	.word	0x080199fc
 800c958:	08019bdc 	.word	0x08019bdc
 800c95c:	2000f338 	.word	0x2000f338
 800c960:	0800c7d5 	.word	0x0800c7d5
 800c964:	2000f334 	.word	0x2000f334

0800c968 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d106      	bne.n	800c984 <tcp_update_rcv_ann_wnd+0x1c>
 800c976:	4b25      	ldr	r3, [pc, #148]	; (800ca0c <tcp_update_rcv_ann_wnd+0xa4>)
 800c978:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c97c:	4924      	ldr	r1, [pc, #144]	; (800ca10 <tcp_update_rcv_ann_wnd+0xa8>)
 800c97e:	4825      	ldr	r0, [pc, #148]	; (800ca14 <tcp_update_rcv_ann_wnd+0xac>)
 800c980:	f00a fda2 	bl	80174c8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c98c:	4413      	add	r3, r2
 800c98e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c998:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c99c:	bf28      	it	cs
 800c99e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c9a2:	b292      	uxth	r2, r2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	db08      	blt.n	800c9c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	e020      	b.n	800ca02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	dd03      	ble.n	800c9d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9d4:	e014      	b.n	800ca00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9de:	1ad3      	subs	r3, r2, r3
 800c9e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9e8:	d306      	bcc.n	800c9f8 <tcp_update_rcv_ann_wnd+0x90>
 800c9ea:	4b08      	ldr	r3, [pc, #32]	; (800ca0c <tcp_update_rcv_ann_wnd+0xa4>)
 800c9ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c9f0:	4909      	ldr	r1, [pc, #36]	; (800ca18 <tcp_update_rcv_ann_wnd+0xb0>)
 800c9f2:	4808      	ldr	r0, [pc, #32]	; (800ca14 <tcp_update_rcv_ann_wnd+0xac>)
 800c9f4:	f00a fd68 	bl	80174c8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ca00:	2300      	movs	r3, #0
  }
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	080199b8 	.word	0x080199b8
 800ca10:	08019c14 	.word	0x08019c14
 800ca14:	080199fc 	.word	0x080199fc
 800ca18:	08019c38 	.word	0x08019c38

0800ca1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d107      	bne.n	800ca3e <tcp_recved+0x22>
 800ca2e:	4b1f      	ldr	r3, [pc, #124]	; (800caac <tcp_recved+0x90>)
 800ca30:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ca34:	491e      	ldr	r1, [pc, #120]	; (800cab0 <tcp_recved+0x94>)
 800ca36:	481f      	ldr	r0, [pc, #124]	; (800cab4 <tcp_recved+0x98>)
 800ca38:	f00a fd46 	bl	80174c8 <iprintf>
 800ca3c:	e032      	b.n	800caa4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	7d1b      	ldrb	r3, [r3, #20]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d106      	bne.n	800ca54 <tcp_recved+0x38>
 800ca46:	4b19      	ldr	r3, [pc, #100]	; (800caac <tcp_recved+0x90>)
 800ca48:	f240 32d3 	movw	r2, #979	; 0x3d3
 800ca4c:	491a      	ldr	r1, [pc, #104]	; (800cab8 <tcp_recved+0x9c>)
 800ca4e:	4819      	ldr	r0, [pc, #100]	; (800cab4 <tcp_recved+0x98>)
 800ca50:	f00a fd3a 	bl	80174c8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca58:	887b      	ldrh	r3, [r7, #2]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ca5e:	89fb      	ldrh	r3, [r7, #14]
 800ca60:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca64:	d804      	bhi.n	800ca70 <tcp_recved+0x54>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca6a:	89fa      	ldrh	r2, [r7, #14]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d204      	bcs.n	800ca7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ca76:	851a      	strh	r2, [r3, #40]	; 0x28
 800ca78:	e002      	b.n	800ca80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	89fa      	ldrh	r2, [r7, #14]
 800ca7e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff ff71 	bl	800c968 <tcp_update_rcv_ann_wnd>
 800ca86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ca8e:	d309      	bcc.n	800caa4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	8b5b      	ldrh	r3, [r3, #26]
 800ca94:	f043 0302 	orr.w	r3, r3, #2
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f004 fba6 	bl	80111f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	080199b8 	.word	0x080199b8
 800cab0:	08019c54 	.word	0x08019c54
 800cab4:	080199fc 	.word	0x080199fc
 800cab8:	08019c6c 	.word	0x08019c6c

0800cabc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cac6:	4b1e      	ldr	r3, [pc, #120]	; (800cb40 <tcp_new_port+0x84>)
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	b29a      	uxth	r2, r3
 800cace:	4b1c      	ldr	r3, [pc, #112]	; (800cb40 <tcp_new_port+0x84>)
 800cad0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cad2:	4b1b      	ldr	r3, [pc, #108]	; (800cb40 <tcp_new_port+0x84>)
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cada:	4293      	cmp	r3, r2
 800cadc:	d103      	bne.n	800cae6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cade:	4b18      	ldr	r3, [pc, #96]	; (800cb40 <tcp_new_port+0x84>)
 800cae0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cae4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cae6:	2300      	movs	r3, #0
 800cae8:	71fb      	strb	r3, [r7, #7]
 800caea:	e01e      	b.n	800cb2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800caec:	79fb      	ldrb	r3, [r7, #7]
 800caee:	4a15      	ldr	r2, [pc, #84]	; (800cb44 <tcp_new_port+0x88>)
 800caf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	603b      	str	r3, [r7, #0]
 800caf8:	e011      	b.n	800cb1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	8ada      	ldrh	r2, [r3, #22]
 800cafe:	4b10      	ldr	r3, [pc, #64]	; (800cb40 <tcp_new_port+0x84>)
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d108      	bne.n	800cb18 <tcp_new_port+0x5c>
        n++;
 800cb06:	88bb      	ldrh	r3, [r7, #4]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cb0c:	88bb      	ldrh	r3, [r7, #4]
 800cb0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb12:	d3d8      	bcc.n	800cac6 <tcp_new_port+0xa>
          return 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	e00d      	b.n	800cb34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	603b      	str	r3, [r7, #0]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1ea      	bne.n	800cafa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb24:	79fb      	ldrb	r3, [r7, #7]
 800cb26:	3301      	adds	r3, #1
 800cb28:	71fb      	strb	r3, [r7, #7]
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d9dd      	bls.n	800caec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cb30:	4b03      	ldr	r3, [pc, #12]	; (800cb40 <tcp_new_port+0x84>)
 800cb32:	881b      	ldrh	r3, [r3, #0]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	20000010 	.word	0x20000010
 800cb44:	0801bd70 	.word	0x0801bd70

0800cb48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cb48:	b5b0      	push	{r4, r5, r7, lr}
 800cb4a:	b090      	sub	sp, #64	; 0x40
 800cb4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cb54:	4b94      	ldr	r3, [pc, #592]	; (800cda8 <tcp_slowtmr+0x260>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	4a93      	ldr	r2, [pc, #588]	; (800cda8 <tcp_slowtmr+0x260>)
 800cb5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cb5e:	4b93      	ldr	r3, [pc, #588]	; (800cdac <tcp_slowtmr+0x264>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	3301      	adds	r3, #1
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	4b91      	ldr	r3, [pc, #580]	; (800cdac <tcp_slowtmr+0x264>)
 800cb68:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cb6e:	4b90      	ldr	r3, [pc, #576]	; (800cdb0 <tcp_slowtmr+0x268>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cb74:	e29f      	b.n	800d0b6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	7d1b      	ldrb	r3, [r3, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <tcp_slowtmr+0x44>
 800cb7e:	4b8d      	ldr	r3, [pc, #564]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cb80:	f240 42be 	movw	r2, #1214	; 0x4be
 800cb84:	498c      	ldr	r1, [pc, #560]	; (800cdb8 <tcp_slowtmr+0x270>)
 800cb86:	488d      	ldr	r0, [pc, #564]	; (800cdbc <tcp_slowtmr+0x274>)
 800cb88:	f00a fc9e 	bl	80174c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8e:	7d1b      	ldrb	r3, [r3, #20]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d106      	bne.n	800cba2 <tcp_slowtmr+0x5a>
 800cb94:	4b87      	ldr	r3, [pc, #540]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cb96:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cb9a:	4989      	ldr	r1, [pc, #548]	; (800cdc0 <tcp_slowtmr+0x278>)
 800cb9c:	4887      	ldr	r0, [pc, #540]	; (800cdbc <tcp_slowtmr+0x274>)
 800cb9e:	f00a fc93 	bl	80174c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	7d1b      	ldrb	r3, [r3, #20]
 800cba6:	2b0a      	cmp	r3, #10
 800cba8:	d106      	bne.n	800cbb8 <tcp_slowtmr+0x70>
 800cbaa:	4b82      	ldr	r3, [pc, #520]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cbac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cbb0:	4984      	ldr	r1, [pc, #528]	; (800cdc4 <tcp_slowtmr+0x27c>)
 800cbb2:	4882      	ldr	r0, [pc, #520]	; (800cdbc <tcp_slowtmr+0x274>)
 800cbb4:	f00a fc88 	bl	80174c8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	7f9a      	ldrb	r2, [r3, #30]
 800cbbc:	4b7b      	ldr	r3, [pc, #492]	; (800cdac <tcp_slowtmr+0x264>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d105      	bne.n	800cbd0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cbce:	e272      	b.n	800d0b6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cbd0:	4b76      	ldr	r3, [pc, #472]	; (800cdac <tcp_slowtmr+0x264>)
 800cbd2:	781a      	ldrb	r2, [r3, #0]
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	7d1b      	ldrb	r3, [r3, #20]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d10a      	bne.n	800cc02 <tcp_slowtmr+0xba>
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbf2:	2b05      	cmp	r3, #5
 800cbf4:	d905      	bls.n	800cc02 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc00:	e11e      	b.n	800ce40 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc08:	2b0b      	cmp	r3, #11
 800cc0a:	d905      	bls.n	800cc18 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc10:	3301      	adds	r3, #1
 800cc12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc16:	e113      	b.n	800ce40 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d075      	beq.n	800cd0e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d006      	beq.n	800cc38 <tcp_slowtmr+0xf0>
 800cc2a:	4b62      	ldr	r3, [pc, #392]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cc2c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cc30:	4965      	ldr	r1, [pc, #404]	; (800cdc8 <tcp_slowtmr+0x280>)
 800cc32:	4862      	ldr	r0, [pc, #392]	; (800cdbc <tcp_slowtmr+0x274>)
 800cc34:	f00a fc48 	bl	80174c8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d106      	bne.n	800cc4e <tcp_slowtmr+0x106>
 800cc40:	4b5c      	ldr	r3, [pc, #368]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cc42:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cc46:	4961      	ldr	r1, [pc, #388]	; (800cdcc <tcp_slowtmr+0x284>)
 800cc48:	485c      	ldr	r0, [pc, #368]	; (800cdbc <tcp_slowtmr+0x274>)
 800cc4a:	f00a fc3d 	bl	80174c8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc54:	2b0b      	cmp	r3, #11
 800cc56:	d905      	bls.n	800cc64 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc62:	e0ed      	b.n	800ce40 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	4a58      	ldr	r2, [pc, #352]	; (800cdd0 <tcp_slowtmr+0x288>)
 800cc6e:	5cd3      	ldrb	r3, [r2, r3]
 800cc70:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc78:	7c7a      	ldrb	r2, [r7, #17]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d907      	bls.n	800cc8e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc84:	3301      	adds	r3, #1
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc94:	7c7a      	ldrb	r2, [r7, #17]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	f200 80d2 	bhi.w	800ce40 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d108      	bne.n	800ccbc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ccaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccac:	f005 f958 	bl	8011f60 <tcp_zero_window_probe>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d014      	beq.n	800cce0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	623b      	str	r3, [r7, #32]
 800ccba:	e011      	b.n	800cce0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccc6:	f004 f80d 	bl	8010ce4 <tcp_split_unsent_seg>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d107      	bne.n	800cce0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ccd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccd2:	f004 fa8d 	bl	80111f0 <tcp_output>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 80ac 	beq.w	800ce40 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ccf6:	2b06      	cmp	r3, #6
 800ccf8:	f200 80a2 	bhi.w	800ce40 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd02:	3301      	adds	r3, #1
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cd0c:	e098      	b.n	800ce40 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	db0f      	blt.n	800cd38 <tcp_slowtmr+0x1f0>
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd1e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d008      	beq.n	800cd38 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	3301      	adds	r3, #1
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	b21a      	sxth	r2, r3
 800cd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd36:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd40:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd44:	429a      	cmp	r2, r3
 800cd46:	db7b      	blt.n	800ce40 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cd48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd4a:	f004 fd49 	bl	80117e0 <tcp_rexmit_rto_prepare>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d007      	beq.n	800cd64 <tcp_slowtmr+0x21c>
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d171      	bne.n	800ce40 <tcp_slowtmr+0x2f8>
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d06d      	beq.n	800ce40 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd66:	7d1b      	ldrb	r3, [r3, #20]
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d03a      	beq.n	800cde2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd72:	2b0c      	cmp	r3, #12
 800cd74:	bf28      	it	cs
 800cd76:	230c      	movcs	r3, #12
 800cd78:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd80:	10db      	asrs	r3, r3, #3
 800cd82:	b21b      	sxth	r3, r3
 800cd84:	461a      	mov	r2, r3
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd8c:	4413      	add	r3, r2
 800cd8e:	7efa      	ldrb	r2, [r7, #27]
 800cd90:	4910      	ldr	r1, [pc, #64]	; (800cdd4 <tcp_slowtmr+0x28c>)
 800cd92:	5c8a      	ldrb	r2, [r1, r2]
 800cd94:	4093      	lsls	r3, r2
 800cd96:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	dc1a      	bgt.n	800cdd8 <tcp_slowtmr+0x290>
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	b21a      	sxth	r2, r3
 800cda6:	e019      	b.n	800cddc <tcp_slowtmr+0x294>
 800cda8:	2000f330 	.word	0x2000f330
 800cdac:	2000849e 	.word	0x2000849e
 800cdb0:	2000f32c 	.word	0x2000f32c
 800cdb4:	080199b8 	.word	0x080199b8
 800cdb8:	08019cfc 	.word	0x08019cfc
 800cdbc:	080199fc 	.word	0x080199fc
 800cdc0:	08019d28 	.word	0x08019d28
 800cdc4:	08019d54 	.word	0x08019d54
 800cdc8:	08019d84 	.word	0x08019d84
 800cdcc:	08019db8 	.word	0x08019db8
 800cdd0:	0801bd68 	.word	0x0801bd68
 800cdd4:	0801bd58 	.word	0x0801bd58
 800cdd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	2200      	movs	r2, #0
 800cde6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	bf28      	it	cs
 800cdf8:	4613      	movcs	r3, r2
 800cdfa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cdfc:	8a7b      	ldrh	r3, [r7, #18]
 800cdfe:	085b      	lsrs	r3, r3, #1
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce12:	005b      	lsls	r3, r3, #1
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d206      	bcs.n	800ce28 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce1e:	005b      	lsls	r3, r3, #1
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ce2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ce32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce34:	2200      	movs	r2, #0
 800ce36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ce3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce3c:	f004 fd40 	bl	80118c0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	7d1b      	ldrb	r3, [r3, #20]
 800ce44:	2b06      	cmp	r3, #6
 800ce46:	d111      	bne.n	800ce6c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	8b5b      	ldrh	r3, [r3, #26]
 800ce4c:	f003 0310 	and.w	r3, r3, #16
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce54:	4b9d      	ldr	r3, [pc, #628]	; (800d0cc <tcp_slowtmr+0x584>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	6a1b      	ldr	r3, [r3, #32]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	2b28      	cmp	r3, #40	; 0x28
 800ce60:	d904      	bls.n	800ce6c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ce62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce66:	3301      	adds	r3, #1
 800ce68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	7a5b      	ldrb	r3, [r3, #9]
 800ce70:	f003 0308 	and.w	r3, r3, #8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d04c      	beq.n	800cf12 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ce78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce7c:	2b04      	cmp	r3, #4
 800ce7e:	d003      	beq.n	800ce88 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ce80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce82:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ce84:	2b07      	cmp	r3, #7
 800ce86:	d144      	bne.n	800cf12 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce88:	4b90      	ldr	r3, [pc, #576]	; (800d0cc <tcp_slowtmr+0x584>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	6a1b      	ldr	r3, [r3, #32]
 800ce90:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce98:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ce9c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800cea0:	498b      	ldr	r1, [pc, #556]	; (800d0d0 <tcp_slowtmr+0x588>)
 800cea2:	fba1 1303 	umull	r1, r3, r1, r3
 800cea6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d90a      	bls.n	800cec2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ceac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ceb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ceba:	3301      	adds	r3, #1
 800cebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cec0:	e027      	b.n	800cf12 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cec2:	4b82      	ldr	r3, [pc, #520]	; (800d0cc <tcp_slowtmr+0x584>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cece:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ced2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ced8:	4618      	mov	r0, r3
 800ceda:	4b7e      	ldr	r3, [pc, #504]	; (800d0d4 <tcp_slowtmr+0x58c>)
 800cedc:	fb03 f300 	mul.w	r3, r3, r0
 800cee0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cee2:	497b      	ldr	r1, [pc, #492]	; (800d0d0 <tcp_slowtmr+0x588>)
 800cee4:	fba1 1303 	umull	r1, r3, r1, r3
 800cee8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d911      	bls.n	800cf12 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ceee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cef0:	f004 fff6 	bl	8011ee0 <tcp_keepalive>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cefa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d107      	bne.n	800cf12 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cf08:	3301      	adds	r3, #1
 800cf0a:	b2da      	uxtb	r2, r3
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d011      	beq.n	800cf3e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cf1a:	4b6c      	ldr	r3, [pc, #432]	; (800d0cc <tcp_slowtmr+0x584>)
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	1ad2      	subs	r2, r2, r3
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	440b      	add	r3, r1
 800cf32:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d302      	bcc.n	800cf3e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cf38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf3a:	f000 fea5 	bl	800dc88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf40:	7d1b      	ldrb	r3, [r3, #20]
 800cf42:	2b03      	cmp	r3, #3
 800cf44:	d10b      	bne.n	800cf5e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf46:	4b61      	ldr	r3, [pc, #388]	; (800d0cc <tcp_slowtmr+0x584>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	2b28      	cmp	r3, #40	; 0x28
 800cf52:	d904      	bls.n	800cf5e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cf54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf58:	3301      	adds	r3, #1
 800cf5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf60:	7d1b      	ldrb	r3, [r3, #20]
 800cf62:	2b09      	cmp	r3, #9
 800cf64:	d10b      	bne.n	800cf7e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf66:	4b59      	ldr	r3, [pc, #356]	; (800d0cc <tcp_slowtmr+0x584>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	2bf0      	cmp	r3, #240	; 0xf0
 800cf72:	d904      	bls.n	800cf7e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cf74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf78:	3301      	adds	r3, #1
 800cf7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cf7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d060      	beq.n	800d048 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf8c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cf8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf90:	f000 fcc6 	bl	800d920 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d010      	beq.n	800cfbc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cf9a:	4b4f      	ldr	r3, [pc, #316]	; (800d0d8 <tcp_slowtmr+0x590>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d106      	bne.n	800cfb2 <tcp_slowtmr+0x46a>
 800cfa4:	4b4d      	ldr	r3, [pc, #308]	; (800d0dc <tcp_slowtmr+0x594>)
 800cfa6:	f240 526d 	movw	r2, #1389	; 0x56d
 800cfaa:	494d      	ldr	r1, [pc, #308]	; (800d0e0 <tcp_slowtmr+0x598>)
 800cfac:	484d      	ldr	r0, [pc, #308]	; (800d0e4 <tcp_slowtmr+0x59c>)
 800cfae:	f00a fa8b 	bl	80174c8 <iprintf>
        prev->next = pcb->next;
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	68da      	ldr	r2, [r3, #12]
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	60da      	str	r2, [r3, #12]
 800cfba:	e00f      	b.n	800cfdc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cfbc:	4b46      	ldr	r3, [pc, #280]	; (800d0d8 <tcp_slowtmr+0x590>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d006      	beq.n	800cfd4 <tcp_slowtmr+0x48c>
 800cfc6:	4b45      	ldr	r3, [pc, #276]	; (800d0dc <tcp_slowtmr+0x594>)
 800cfc8:	f240 5271 	movw	r2, #1393	; 0x571
 800cfcc:	4946      	ldr	r1, [pc, #280]	; (800d0e8 <tcp_slowtmr+0x5a0>)
 800cfce:	4845      	ldr	r0, [pc, #276]	; (800d0e4 <tcp_slowtmr+0x59c>)
 800cfd0:	f00a fa7a 	bl	80174c8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	4a3f      	ldr	r2, [pc, #252]	; (800d0d8 <tcp_slowtmr+0x590>)
 800cfda:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cfdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d013      	beq.n	800d00c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cfec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff0:	3304      	adds	r3, #4
 800cff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cff4:	8ad2      	ldrh	r2, [r2, #22]
 800cff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cff8:	8b09      	ldrh	r1, [r1, #24]
 800cffa:	9102      	str	r1, [sp, #8]
 800cffc:	9201      	str	r2, [sp, #4]
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	462b      	mov	r3, r5
 800d002:	4622      	mov	r2, r4
 800d004:	4601      	mov	r1, r0
 800d006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d008:	f004 feb6 	bl	8011d78 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	7d1b      	ldrb	r3, [r3, #20]
 800d016:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d022:	6838      	ldr	r0, [r7, #0]
 800d024:	f7fe fff8 	bl	800c018 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d028:	4b30      	ldr	r3, [pc, #192]	; (800d0ec <tcp_slowtmr+0x5a4>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d004      	beq.n	800d03e <tcp_slowtmr+0x4f6>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f06f 010c 	mvn.w	r1, #12
 800d03a:	68b8      	ldr	r0, [r7, #8]
 800d03c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d03e:	4b2b      	ldr	r3, [pc, #172]	; (800d0ec <tcp_slowtmr+0x5a4>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d037      	beq.n	800d0b6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d046:	e590      	b.n	800cb6a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d054:	7f1b      	ldrb	r3, [r3, #28]
 800d056:	3301      	adds	r3, #1
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	7f1a      	ldrb	r2, [r3, #28]
 800d062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d064:	7f5b      	ldrb	r3, [r3, #29]
 800d066:	429a      	cmp	r2, r3
 800d068:	d325      	bcc.n	800d0b6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06c:	2200      	movs	r2, #0
 800d06e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d070:	4b1e      	ldr	r3, [pc, #120]	; (800d0ec <tcp_slowtmr+0x5a4>)
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00b      	beq.n	800d098 <tcp_slowtmr+0x550>
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d088:	6912      	ldr	r2, [r2, #16]
 800d08a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d08c:	4610      	mov	r0, r2
 800d08e:	4798      	blx	r3
 800d090:	4603      	mov	r3, r0
 800d092:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d096:	e002      	b.n	800d09e <tcp_slowtmr+0x556>
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d09e:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <tcp_slowtmr+0x5a4>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d000      	beq.n	800d0a8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d0a6:	e560      	b.n	800cb6a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d0a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d102      	bne.n	800d0b6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d0b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0b2:	f004 f89d 	bl	80111f0 <tcp_output>
  while (pcb != NULL) {
 800d0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f47f ad5c 	bne.w	800cb76 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <tcp_slowtmr+0x5a8>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d0c8:	e067      	b.n	800d19a <tcp_slowtmr+0x652>
 800d0ca:	bf00      	nop
 800d0cc:	2000f330 	.word	0x2000f330
 800d0d0:	10624dd3 	.word	0x10624dd3
 800d0d4:	000124f8 	.word	0x000124f8
 800d0d8:	2000f32c 	.word	0x2000f32c
 800d0dc:	080199b8 	.word	0x080199b8
 800d0e0:	08019df0 	.word	0x08019df0
 800d0e4:	080199fc 	.word	0x080199fc
 800d0e8:	08019e1c 	.word	0x08019e1c
 800d0ec:	2000f328 	.word	0x2000f328
 800d0f0:	2000f33c 	.word	0x2000f33c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	7d1b      	ldrb	r3, [r3, #20]
 800d0f8:	2b0a      	cmp	r3, #10
 800d0fa:	d006      	beq.n	800d10a <tcp_slowtmr+0x5c2>
 800d0fc:	4b2a      	ldr	r3, [pc, #168]	; (800d1a8 <tcp_slowtmr+0x660>)
 800d0fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d102:	492a      	ldr	r1, [pc, #168]	; (800d1ac <tcp_slowtmr+0x664>)
 800d104:	482a      	ldr	r0, [pc, #168]	; (800d1b0 <tcp_slowtmr+0x668>)
 800d106:	f00a f9df 	bl	80174c8 <iprintf>
    pcb_remove = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d110:	4b28      	ldr	r3, [pc, #160]	; (800d1b4 <tcp_slowtmr+0x66c>)
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	6a1b      	ldr	r3, [r3, #32]
 800d118:	1ad3      	subs	r3, r2, r3
 800d11a:	2bf0      	cmp	r3, #240	; 0xf0
 800d11c:	d904      	bls.n	800d128 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d11e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d122:	3301      	adds	r3, #1
 800d124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d02f      	beq.n	800d190 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d132:	f000 fbf5 	bl	800d920 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d010      	beq.n	800d15e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d13c:	4b1e      	ldr	r3, [pc, #120]	; (800d1b8 <tcp_slowtmr+0x670>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d142:	429a      	cmp	r2, r3
 800d144:	d106      	bne.n	800d154 <tcp_slowtmr+0x60c>
 800d146:	4b18      	ldr	r3, [pc, #96]	; (800d1a8 <tcp_slowtmr+0x660>)
 800d148:	f240 52af 	movw	r2, #1455	; 0x5af
 800d14c:	491b      	ldr	r1, [pc, #108]	; (800d1bc <tcp_slowtmr+0x674>)
 800d14e:	4818      	ldr	r0, [pc, #96]	; (800d1b0 <tcp_slowtmr+0x668>)
 800d150:	f00a f9ba 	bl	80174c8 <iprintf>
        prev->next = pcb->next;
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	68da      	ldr	r2, [r3, #12]
 800d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15a:	60da      	str	r2, [r3, #12]
 800d15c:	e00f      	b.n	800d17e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d15e:	4b16      	ldr	r3, [pc, #88]	; (800d1b8 <tcp_slowtmr+0x670>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d164:	429a      	cmp	r2, r3
 800d166:	d006      	beq.n	800d176 <tcp_slowtmr+0x62e>
 800d168:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <tcp_slowtmr+0x660>)
 800d16a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d16e:	4914      	ldr	r1, [pc, #80]	; (800d1c0 <tcp_slowtmr+0x678>)
 800d170:	480f      	ldr	r0, [pc, #60]	; (800d1b0 <tcp_slowtmr+0x668>)
 800d172:	f00a f9a9 	bl	80174c8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	4a0f      	ldr	r2, [pc, #60]	; (800d1b8 <tcp_slowtmr+0x670>)
 800d17c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d188:	69f8      	ldr	r0, [r7, #28]
 800d18a:	f7fe ff45 	bl	800c018 <tcp_free>
 800d18e:	e004      	b.n	800d19a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1a9      	bne.n	800d0f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d1a0:	bf00      	nop
 800d1a2:	3730      	adds	r7, #48	; 0x30
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d1a8:	080199b8 	.word	0x080199b8
 800d1ac:	08019e48 	.word	0x08019e48
 800d1b0:	080199fc 	.word	0x080199fc
 800d1b4:	2000f330 	.word	0x2000f330
 800d1b8:	2000f33c 	.word	0x2000f33c
 800d1bc:	08019e78 	.word	0x08019e78
 800d1c0:	08019ea0 	.word	0x08019ea0

0800d1c4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d1ca:	4b2d      	ldr	r3, [pc, #180]	; (800d280 <tcp_fasttmr+0xbc>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	4b2b      	ldr	r3, [pc, #172]	; (800d280 <tcp_fasttmr+0xbc>)
 800d1d4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d1d6:	4b2b      	ldr	r3, [pc, #172]	; (800d284 <tcp_fasttmr+0xc0>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d1dc:	e048      	b.n	800d270 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	7f9a      	ldrb	r2, [r3, #30]
 800d1e2:	4b27      	ldr	r3, [pc, #156]	; (800d280 <tcp_fasttmr+0xbc>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d03f      	beq.n	800d26a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d1ea:	4b25      	ldr	r3, [pc, #148]	; (800d280 <tcp_fasttmr+0xbc>)
 800d1ec:	781a      	ldrb	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	8b5b      	ldrh	r3, [r3, #26]
 800d1f6:	f003 0301 	and.w	r3, r3, #1
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d010      	beq.n	800d220 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	8b5b      	ldrh	r3, [r3, #26]
 800d202:	f043 0302 	orr.w	r3, r3, #2
 800d206:	b29a      	uxth	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f003 ffef 	bl	80111f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	8b5b      	ldrh	r3, [r3, #26]
 800d216:	f023 0303 	bic.w	r3, r3, #3
 800d21a:	b29a      	uxth	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	8b5b      	ldrh	r3, [r3, #26]
 800d224:	f003 0308 	and.w	r3, r3, #8
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d009      	beq.n	800d240 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	8b5b      	ldrh	r3, [r3, #26]
 800d230:	f023 0308 	bic.w	r3, r3, #8
 800d234:	b29a      	uxth	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7ff f87c 	bl	800c338 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00a      	beq.n	800d264 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d24e:	4b0e      	ldr	r3, [pc, #56]	; (800d288 <tcp_fasttmr+0xc4>)
 800d250:	2200      	movs	r2, #0
 800d252:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f819 	bl	800d28c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d25a:	4b0b      	ldr	r3, [pc, #44]	; (800d288 <tcp_fasttmr+0xc4>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d000      	beq.n	800d264 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d262:	e7b8      	b.n	800d1d6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	607b      	str	r3, [r7, #4]
 800d268:	e002      	b.n	800d270 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1b3      	bne.n	800d1de <tcp_fasttmr+0x1a>
    }
  }
}
 800d276:	bf00      	nop
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	2000849e 	.word	0x2000849e
 800d284:	2000f32c 	.word	0x2000f32c
 800d288:	2000f328 	.word	0x2000f328

0800d28c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d28c:	b590      	push	{r4, r7, lr}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d109      	bne.n	800d2ae <tcp_process_refused_data+0x22>
 800d29a:	4b37      	ldr	r3, [pc, #220]	; (800d378 <tcp_process_refused_data+0xec>)
 800d29c:	f240 6209 	movw	r2, #1545	; 0x609
 800d2a0:	4936      	ldr	r1, [pc, #216]	; (800d37c <tcp_process_refused_data+0xf0>)
 800d2a2:	4837      	ldr	r0, [pc, #220]	; (800d380 <tcp_process_refused_data+0xf4>)
 800d2a4:	f00a f910 	bl	80174c8 <iprintf>
 800d2a8:	f06f 030f 	mvn.w	r3, #15
 800d2ac:	e060      	b.n	800d370 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2b2:	7b5b      	ldrb	r3, [r3, #13]
 800d2b4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00b      	beq.n	800d2e4 <tcp_process_refused_data+0x58>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6918      	ldr	r0, [r3, #16]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	47a0      	blx	r4
 800d2de:	4603      	mov	r3, r0
 800d2e0:	73fb      	strb	r3, [r7, #15]
 800d2e2:	e007      	b.n	800d2f4 <tcp_process_refused_data+0x68>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	6879      	ldr	r1, [r7, #4]
 800d2ea:	2000      	movs	r0, #0
 800d2ec:	f000 f8a2 	bl	800d434 <tcp_recv_null>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d2f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d12a      	bne.n	800d352 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
 800d2fe:	f003 0320 	and.w	r3, r3, #32
 800d302:	2b00      	cmp	r3, #0
 800d304:	d033      	beq.n	800d36e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d30a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d30e:	d005      	beq.n	800d31c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d314:	3301      	adds	r3, #1
 800d316:	b29a      	uxth	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00b      	beq.n	800d33e <tcp_process_refused_data+0xb2>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6918      	ldr	r0, [r3, #16]
 800d330:	2300      	movs	r3, #0
 800d332:	2200      	movs	r2, #0
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	47a0      	blx	r4
 800d338:	4603      	mov	r3, r0
 800d33a:	73fb      	strb	r3, [r7, #15]
 800d33c:	e001      	b.n	800d342 <tcp_process_refused_data+0xb6>
 800d33e:	2300      	movs	r3, #0
 800d340:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d346:	f113 0f0d 	cmn.w	r3, #13
 800d34a:	d110      	bne.n	800d36e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d34c:	f06f 030c 	mvn.w	r3, #12
 800d350:	e00e      	b.n	800d370 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d356:	f113 0f0d 	cmn.w	r3, #13
 800d35a:	d102      	bne.n	800d362 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d35c:	f06f 030c 	mvn.w	r3, #12
 800d360:	e006      	b.n	800d370 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d368:	f06f 0304 	mvn.w	r3, #4
 800d36c:	e000      	b.n	800d370 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3714      	adds	r7, #20
 800d374:	46bd      	mov	sp, r7
 800d376:	bd90      	pop	{r4, r7, pc}
 800d378:	080199b8 	.word	0x080199b8
 800d37c:	08019ec8 	.word	0x08019ec8
 800d380:	080199fc 	.word	0x080199fc

0800d384 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d38c:	e007      	b.n	800d39e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f809 	bl	800d3ac <tcp_seg_free>
    seg = next;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1f4      	bne.n	800d38e <tcp_segs_free+0xa>
  }
}
 800d3a4:	bf00      	nop
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00c      	beq.n	800d3d4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d004      	beq.n	800d3cc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe fb6a 	bl	800baa0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	2003      	movs	r0, #3
 800d3d0:	f7fd fcba 	bl	800ad48 <memp_free>
  }
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d106      	bne.n	800d3f8 <tcp_seg_copy+0x1c>
 800d3ea:	4b0f      	ldr	r3, [pc, #60]	; (800d428 <tcp_seg_copy+0x4c>)
 800d3ec:	f240 6282 	movw	r2, #1666	; 0x682
 800d3f0:	490e      	ldr	r1, [pc, #56]	; (800d42c <tcp_seg_copy+0x50>)
 800d3f2:	480f      	ldr	r0, [pc, #60]	; (800d430 <tcp_seg_copy+0x54>)
 800d3f4:	f00a f868 	bl	80174c8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d3f8:	2003      	movs	r0, #3
 800d3fa:	f7fd fc53 	bl	800aca4 <memp_malloc>
 800d3fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d101      	bne.n	800d40a <tcp_seg_copy+0x2e>
    return NULL;
 800d406:	2300      	movs	r3, #0
 800d408:	e00a      	b.n	800d420 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d40a:	2210      	movs	r2, #16
 800d40c:	6879      	ldr	r1, [r7, #4]
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f00a f847 	bl	80174a2 <memcpy>
  pbuf_ref(cseg->p);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fe fbe7 	bl	800bbec <pbuf_ref>
  return cseg;
 800d41e:	68fb      	ldr	r3, [r7, #12]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	080199b8 	.word	0x080199b8
 800d42c:	08019f0c 	.word	0x08019f0c
 800d430:	080199fc 	.word	0x080199fc

0800d434 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
 800d440:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d109      	bne.n	800d45c <tcp_recv_null+0x28>
 800d448:	4b12      	ldr	r3, [pc, #72]	; (800d494 <tcp_recv_null+0x60>)
 800d44a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d44e:	4912      	ldr	r1, [pc, #72]	; (800d498 <tcp_recv_null+0x64>)
 800d450:	4812      	ldr	r0, [pc, #72]	; (800d49c <tcp_recv_null+0x68>)
 800d452:	f00a f839 	bl	80174c8 <iprintf>
 800d456:	f06f 030f 	mvn.w	r3, #15
 800d45a:	e016      	b.n	800d48a <tcp_recv_null+0x56>

  if (p != NULL) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d009      	beq.n	800d476 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	891b      	ldrh	r3, [r3, #8]
 800d466:	4619      	mov	r1, r3
 800d468:	68b8      	ldr	r0, [r7, #8]
 800d46a:	f7ff fad7 	bl	800ca1c <tcp_recved>
    pbuf_free(p);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7fe fb16 	bl	800baa0 <pbuf_free>
 800d474:	e008      	b.n	800d488 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d104      	bne.n	800d488 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d47e:	68b8      	ldr	r0, [r7, #8]
 800d480:	f7fe ffc0 	bl	800c404 <tcp_close>
 800d484:	4603      	mov	r3, r0
 800d486:	e000      	b.n	800d48a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	080199b8 	.word	0x080199b8
 800d498:	08019f28 	.word	0x08019f28
 800d49c:	080199fc 	.word	0x080199fc

0800d4a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d4aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	db01      	blt.n	800d4b6 <tcp_kill_prio+0x16>
 800d4b2:	79fb      	ldrb	r3, [r7, #7]
 800d4b4:	e000      	b.n	800d4b8 <tcp_kill_prio+0x18>
 800d4b6:	237f      	movs	r3, #127	; 0x7f
 800d4b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d4ba:	7afb      	ldrb	r3, [r7, #11]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d034      	beq.n	800d52a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d4c0:	7afb      	ldrb	r3, [r7, #11]
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4ce:	4b19      	ldr	r3, [pc, #100]	; (800d534 <tcp_kill_prio+0x94>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	617b      	str	r3, [r7, #20]
 800d4d4:	e01f      	b.n	800d516 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	7d5b      	ldrb	r3, [r3, #21]
 800d4da:	7afa      	ldrb	r2, [r7, #11]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d80c      	bhi.n	800d4fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d4e4:	7afa      	ldrb	r2, [r7, #11]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d112      	bne.n	800d510 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d4ea:	4b13      	ldr	r3, [pc, #76]	; (800d538 <tcp_kill_prio+0x98>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d80a      	bhi.n	800d510 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d4fa:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <tcp_kill_prio+0x98>)
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	6a1b      	ldr	r3, [r3, #32]
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	7d5b      	ldrb	r3, [r3, #21]
 800d50e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	617b      	str	r3, [r7, #20]
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1dc      	bne.n	800d4d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d004      	beq.n	800d52c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d522:	6938      	ldr	r0, [r7, #16]
 800d524:	f7ff f8b2 	bl	800c68c <tcp_abort>
 800d528:	e000      	b.n	800d52c <tcp_kill_prio+0x8c>
    return;
 800d52a:	bf00      	nop
  }
}
 800d52c:	3718      	adds	r7, #24
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	2000f32c 	.word	0x2000f32c
 800d538:	2000f330 	.word	0x2000f330

0800d53c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	4603      	mov	r3, r0
 800d544:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d009      	beq.n	800d560 <tcp_kill_state+0x24>
 800d54c:	79fb      	ldrb	r3, [r7, #7]
 800d54e:	2b09      	cmp	r3, #9
 800d550:	d006      	beq.n	800d560 <tcp_kill_state+0x24>
 800d552:	4b1a      	ldr	r3, [pc, #104]	; (800d5bc <tcp_kill_state+0x80>)
 800d554:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d558:	4919      	ldr	r1, [pc, #100]	; (800d5c0 <tcp_kill_state+0x84>)
 800d55a:	481a      	ldr	r0, [pc, #104]	; (800d5c4 <tcp_kill_state+0x88>)
 800d55c:	f009 ffb4 	bl	80174c8 <iprintf>

  inactivity = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d564:	2300      	movs	r3, #0
 800d566:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d568:	4b17      	ldr	r3, [pc, #92]	; (800d5c8 <tcp_kill_state+0x8c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	617b      	str	r3, [r7, #20]
 800d56e:	e017      	b.n	800d5a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	7d1b      	ldrb	r3, [r3, #20]
 800d574:	79fa      	ldrb	r2, [r7, #7]
 800d576:	429a      	cmp	r2, r3
 800d578:	d10f      	bne.n	800d59a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d57a:	4b14      	ldr	r3, [pc, #80]	; (800d5cc <tcp_kill_state+0x90>)
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	6a1b      	ldr	r3, [r3, #32]
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	429a      	cmp	r2, r3
 800d588:	d807      	bhi.n	800d59a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d58a:	4b10      	ldr	r3, [pc, #64]	; (800d5cc <tcp_kill_state+0x90>)
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	6a1b      	ldr	r3, [r3, #32]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	617b      	str	r3, [r7, #20]
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1e4      	bne.n	800d570 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d003      	beq.n	800d5b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	6938      	ldr	r0, [r7, #16]
 800d5b0:	f7fe ffae 	bl	800c510 <tcp_abandon>
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	080199b8 	.word	0x080199b8
 800d5c0:	08019f44 	.word	0x08019f44
 800d5c4:	080199fc 	.word	0x080199fc
 800d5c8:	2000f32c 	.word	0x2000f32c
 800d5cc:	2000f330 	.word	0x2000f330

0800d5d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5de:	4b12      	ldr	r3, [pc, #72]	; (800d628 <tcp_kill_timewait+0x58>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	e012      	b.n	800d60c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5e6:	4b11      	ldr	r3, [pc, #68]	; (800d62c <tcp_kill_timewait+0x5c>)
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6a1b      	ldr	r3, [r3, #32]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d807      	bhi.n	800d606 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d5f6:	4b0d      	ldr	r3, [pc, #52]	; (800d62c <tcp_kill_timewait+0x5c>)
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1e9      	bne.n	800d5e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d618:	68b8      	ldr	r0, [r7, #8]
 800d61a:	f7ff f837 	bl	800c68c <tcp_abort>
  }
}
 800d61e:	bf00      	nop
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	2000f33c 	.word	0x2000f33c
 800d62c:	2000f330 	.word	0x2000f330

0800d630 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d636:	4b10      	ldr	r3, [pc, #64]	; (800d678 <tcp_handle_closepend+0x48>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d63c:	e014      	b.n	800d668 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	8b5b      	ldrh	r3, [r3, #26]
 800d648:	f003 0308 	and.w	r3, r3, #8
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d009      	beq.n	800d664 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	8b5b      	ldrh	r3, [r3, #26]
 800d654:	f023 0308 	bic.w	r3, r3, #8
 800d658:	b29a      	uxth	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7fe fe6a 	bl	800c338 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1e7      	bne.n	800d63e <tcp_handle_closepend+0xe>
  }
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	2000f32c 	.word	0x2000f32c

0800d67c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	4603      	mov	r3, r0
 800d684:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d686:	2001      	movs	r0, #1
 800d688:	f7fd fb0c 	bl	800aca4 <memp_malloc>
 800d68c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d126      	bne.n	800d6e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d694:	f7ff ffcc 	bl	800d630 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d698:	f7ff ff9a 	bl	800d5d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d69c:	2001      	movs	r0, #1
 800d69e:	f7fd fb01 	bl	800aca4 <memp_malloc>
 800d6a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d11b      	bne.n	800d6e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d6aa:	2009      	movs	r0, #9
 800d6ac:	f7ff ff46 	bl	800d53c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6b0:	2001      	movs	r0, #1
 800d6b2:	f7fd faf7 	bl	800aca4 <memp_malloc>
 800d6b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d111      	bne.n	800d6e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d6be:	2008      	movs	r0, #8
 800d6c0:	f7ff ff3c 	bl	800d53c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6c4:	2001      	movs	r0, #1
 800d6c6:	f7fd faed 	bl	800aca4 <memp_malloc>
 800d6ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d107      	bne.n	800d6e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d6d2:	79fb      	ldrb	r3, [r7, #7]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7ff fee3 	bl	800d4a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6da:	2001      	movs	r0, #1
 800d6dc:	f7fd fae2 	bl	800aca4 <memp_malloc>
 800d6e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d03f      	beq.n	800d768 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d6e8:	229c      	movs	r2, #156	; 0x9c
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f009 fee3 	bl	80174b8 <memset>
    pcb->prio = prio;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	79fa      	ldrb	r2, [r7, #7]
 800d6f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d6fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d708:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	22ff      	movs	r2, #255	; 0xff
 800d716:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d71e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2206      	movs	r2, #6
 800d724:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2206      	movs	r2, #6
 800d72c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d734:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2201      	movs	r2, #1
 800d73a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d73e:	4b0d      	ldr	r3, [pc, #52]	; (800d774 <tcp_alloc+0xf8>)
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d746:	4b0c      	ldr	r3, [pc, #48]	; (800d778 <tcp_alloc+0xfc>)
 800d748:	781a      	ldrb	r2, [r3, #0]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d754:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	4a08      	ldr	r2, [pc, #32]	; (800d77c <tcp_alloc+0x100>)
 800d75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4a07      	ldr	r2, [pc, #28]	; (800d780 <tcp_alloc+0x104>)
 800d764:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d768:	68fb      	ldr	r3, [r7, #12]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	2000f330 	.word	0x2000f330
 800d778:	2000849e 	.word	0x2000849e
 800d77c:	0800d435 	.word	0x0800d435
 800d780:	006ddd00 	.word	0x006ddd00

0800d784 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4603      	mov	r3, r0
 800d78c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d78e:	2040      	movs	r0, #64	; 0x40
 800d790:	f7ff ff74 	bl	800d67c <tcp_alloc>
 800d794:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d796:	68fb      	ldr	r3, [r7, #12]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d002      	beq.n	800d7b6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	611a      	str	r2, [r3, #16]
  }
}
 800d7b6:	bf00      	nop
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00e      	beq.n	800d7f2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	7d1b      	ldrb	r3, [r3, #20]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d106      	bne.n	800d7ea <tcp_recv+0x26>
 800d7dc:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <tcp_recv+0x38>)
 800d7de:	f240 72df 	movw	r2, #2015	; 0x7df
 800d7e2:	4907      	ldr	r1, [pc, #28]	; (800d800 <tcp_recv+0x3c>)
 800d7e4:	4807      	ldr	r0, [pc, #28]	; (800d804 <tcp_recv+0x40>)
 800d7e6:	f009 fe6f 	bl	80174c8 <iprintf>
    pcb->recv = recv;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	683a      	ldr	r2, [r7, #0]
 800d7ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d7f2:	bf00      	nop
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	080199b8 	.word	0x080199b8
 800d800:	08019f54 	.word	0x08019f54
 800d804:	080199fc 	.word	0x080199fc

0800d808 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00e      	beq.n	800d836 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	7d1b      	ldrb	r3, [r3, #20]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d106      	bne.n	800d82e <tcp_sent+0x26>
 800d820:	4b07      	ldr	r3, [pc, #28]	; (800d840 <tcp_sent+0x38>)
 800d822:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d826:	4907      	ldr	r1, [pc, #28]	; (800d844 <tcp_sent+0x3c>)
 800d828:	4807      	ldr	r0, [pc, #28]	; (800d848 <tcp_sent+0x40>)
 800d82a:	f009 fe4d 	bl	80174c8 <iprintf>
    pcb->sent = sent;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	683a      	ldr	r2, [r7, #0]
 800d832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d836:	bf00      	nop
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	080199b8 	.word	0x080199b8
 800d844:	08019f7c 	.word	0x08019f7c
 800d848:	080199fc 	.word	0x080199fc

0800d84c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00e      	beq.n	800d87a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	7d1b      	ldrb	r3, [r3, #20]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d106      	bne.n	800d872 <tcp_err+0x26>
 800d864:	4b07      	ldr	r3, [pc, #28]	; (800d884 <tcp_err+0x38>)
 800d866:	f640 020d 	movw	r2, #2061	; 0x80d
 800d86a:	4907      	ldr	r1, [pc, #28]	; (800d888 <tcp_err+0x3c>)
 800d86c:	4807      	ldr	r0, [pc, #28]	; (800d88c <tcp_err+0x40>)
 800d86e:	f009 fe2b 	bl	80174c8 <iprintf>
    pcb->errf = err;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	683a      	ldr	r2, [r7, #0]
 800d876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	080199b8 	.word	0x080199b8
 800d888:	08019fa4 	.word	0x08019fa4
 800d88c:	080199fc 	.word	0x080199fc

0800d890 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d008      	beq.n	800d8b2 <tcp_accept+0x22>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	7d1b      	ldrb	r3, [r3, #20]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d104      	bne.n	800d8b2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	619a      	str	r2, [r3, #24]
  }
}
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
	...

0800d8c0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d107      	bne.n	800d8e4 <tcp_poll+0x24>
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <tcp_poll+0x50>)
 800d8d6:	f640 023d 	movw	r2, #2109	; 0x83d
 800d8da:	490e      	ldr	r1, [pc, #56]	; (800d914 <tcp_poll+0x54>)
 800d8dc:	480e      	ldr	r0, [pc, #56]	; (800d918 <tcp_poll+0x58>)
 800d8de:	f009 fdf3 	bl	80174c8 <iprintf>
 800d8e2:	e011      	b.n	800d908 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	7d1b      	ldrb	r3, [r3, #20]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d106      	bne.n	800d8fa <tcp_poll+0x3a>
 800d8ec:	4b08      	ldr	r3, [pc, #32]	; (800d910 <tcp_poll+0x50>)
 800d8ee:	f640 023e 	movw	r2, #2110	; 0x83e
 800d8f2:	490a      	ldr	r1, [pc, #40]	; (800d91c <tcp_poll+0x5c>)
 800d8f4:	4808      	ldr	r0, [pc, #32]	; (800d918 <tcp_poll+0x58>)
 800d8f6:	f009 fde7 	bl	80174c8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	79fa      	ldrb	r2, [r7, #7]
 800d906:	775a      	strb	r2, [r3, #29]
}
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	080199b8 	.word	0x080199b8
 800d914:	08019fcc 	.word	0x08019fcc
 800d918:	080199fc 	.word	0x080199fc
 800d91c:	08019fe4 	.word	0x08019fe4

0800d920 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d107      	bne.n	800d93e <tcp_pcb_purge+0x1e>
 800d92e:	4b21      	ldr	r3, [pc, #132]	; (800d9b4 <tcp_pcb_purge+0x94>)
 800d930:	f640 0251 	movw	r2, #2129	; 0x851
 800d934:	4920      	ldr	r1, [pc, #128]	; (800d9b8 <tcp_pcb_purge+0x98>)
 800d936:	4821      	ldr	r0, [pc, #132]	; (800d9bc <tcp_pcb_purge+0x9c>)
 800d938:	f009 fdc6 	bl	80174c8 <iprintf>
 800d93c:	e037      	b.n	800d9ae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	7d1b      	ldrb	r3, [r3, #20]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d033      	beq.n	800d9ae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d94a:	2b0a      	cmp	r3, #10
 800d94c:	d02f      	beq.n	800d9ae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d952:	2b01      	cmp	r3, #1
 800d954:	d02b      	beq.n	800d9ae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d007      	beq.n	800d96e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d962:	4618      	mov	r0, r3
 800d964:	f7fe f89c 	bl	800baa0 <pbuf_free>
      pcb->refused_data = NULL;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d972:	2b00      	cmp	r3, #0
 800d974:	d002      	beq.n	800d97c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f986 	bl	800dc88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d982:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d988:	4618      	mov	r0, r3
 800d98a:	f7ff fcfb 	bl	800d384 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff fcf6 	bl	800d384 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	080199b8 	.word	0x080199b8
 800d9b8:	0801a004 	.word	0x0801a004
 800d9bc:	080199fc 	.word	0x080199fc

0800d9c0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d106      	bne.n	800d9de <tcp_pcb_remove+0x1e>
 800d9d0:	4b3e      	ldr	r3, [pc, #248]	; (800dacc <tcp_pcb_remove+0x10c>)
 800d9d2:	f640 0283 	movw	r2, #2179	; 0x883
 800d9d6:	493e      	ldr	r1, [pc, #248]	; (800dad0 <tcp_pcb_remove+0x110>)
 800d9d8:	483e      	ldr	r0, [pc, #248]	; (800dad4 <tcp_pcb_remove+0x114>)
 800d9da:	f009 fd75 	bl	80174c8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <tcp_pcb_remove+0x32>
 800d9e4:	4b39      	ldr	r3, [pc, #228]	; (800dacc <tcp_pcb_remove+0x10c>)
 800d9e6:	f640 0284 	movw	r2, #2180	; 0x884
 800d9ea:	493b      	ldr	r1, [pc, #236]	; (800dad8 <tcp_pcb_remove+0x118>)
 800d9ec:	4839      	ldr	r0, [pc, #228]	; (800dad4 <tcp_pcb_remove+0x114>)
 800d9ee:	f009 fd6b 	bl	80174c8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d105      	bne.n	800da08 <tcp_pcb_remove+0x48>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	68da      	ldr	r2, [r3, #12]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	601a      	str	r2, [r3, #0]
 800da06:	e013      	b.n	800da30 <tcp_pcb_remove+0x70>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	60fb      	str	r3, [r7, #12]
 800da0e:	e00c      	b.n	800da2a <tcp_pcb_remove+0x6a>
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	429a      	cmp	r2, r3
 800da18:	d104      	bne.n	800da24 <tcp_pcb_remove+0x64>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	68da      	ldr	r2, [r3, #12]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	60da      	str	r2, [r3, #12]
 800da22:	e005      	b.n	800da30 <tcp_pcb_remove+0x70>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	60fb      	str	r3, [r7, #12]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1ef      	bne.n	800da10 <tcp_pcb_remove+0x50>
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	2200      	movs	r2, #0
 800da34:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800da36:	6838      	ldr	r0, [r7, #0]
 800da38:	f7ff ff72 	bl	800d920 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	7d1b      	ldrb	r3, [r3, #20]
 800da40:	2b0a      	cmp	r3, #10
 800da42:	d013      	beq.n	800da6c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d00f      	beq.n	800da6c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	8b5b      	ldrh	r3, [r3, #26]
 800da50:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800da54:	2b00      	cmp	r3, #0
 800da56:	d009      	beq.n	800da6c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	8b5b      	ldrh	r3, [r3, #26]
 800da5c:	f043 0302 	orr.w	r3, r3, #2
 800da60:	b29a      	uxth	r2, r3
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800da66:	6838      	ldr	r0, [r7, #0]
 800da68:	f003 fbc2 	bl	80111f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	7d1b      	ldrb	r3, [r3, #20]
 800da70:	2b01      	cmp	r3, #1
 800da72:	d020      	beq.n	800dab6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d006      	beq.n	800da8a <tcp_pcb_remove+0xca>
 800da7c:	4b13      	ldr	r3, [pc, #76]	; (800dacc <tcp_pcb_remove+0x10c>)
 800da7e:	f640 0293 	movw	r2, #2195	; 0x893
 800da82:	4916      	ldr	r1, [pc, #88]	; (800dadc <tcp_pcb_remove+0x11c>)
 800da84:	4813      	ldr	r0, [pc, #76]	; (800dad4 <tcp_pcb_remove+0x114>)
 800da86:	f009 fd1f 	bl	80174c8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d006      	beq.n	800daa0 <tcp_pcb_remove+0xe0>
 800da92:	4b0e      	ldr	r3, [pc, #56]	; (800dacc <tcp_pcb_remove+0x10c>)
 800da94:	f640 0294 	movw	r2, #2196	; 0x894
 800da98:	4911      	ldr	r1, [pc, #68]	; (800dae0 <tcp_pcb_remove+0x120>)
 800da9a:	480e      	ldr	r0, [pc, #56]	; (800dad4 <tcp_pcb_remove+0x114>)
 800da9c:	f009 fd14 	bl	80174c8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d006      	beq.n	800dab6 <tcp_pcb_remove+0xf6>
 800daa8:	4b08      	ldr	r3, [pc, #32]	; (800dacc <tcp_pcb_remove+0x10c>)
 800daaa:	f640 0296 	movw	r2, #2198	; 0x896
 800daae:	490d      	ldr	r1, [pc, #52]	; (800dae4 <tcp_pcb_remove+0x124>)
 800dab0:	4808      	ldr	r0, [pc, #32]	; (800dad4 <tcp_pcb_remove+0x114>)
 800dab2:	f009 fd09 	bl	80174c8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	2200      	movs	r2, #0
 800daba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	2200      	movs	r2, #0
 800dac0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dac2:	bf00      	nop
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	080199b8 	.word	0x080199b8
 800dad0:	0801a020 	.word	0x0801a020
 800dad4:	080199fc 	.word	0x080199fc
 800dad8:	0801a03c 	.word	0x0801a03c
 800dadc:	0801a05c 	.word	0x0801a05c
 800dae0:	0801a074 	.word	0x0801a074
 800dae4:	0801a090 	.word	0x0801a090

0800dae8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d106      	bne.n	800db04 <tcp_next_iss+0x1c>
 800daf6:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <tcp_next_iss+0x38>)
 800daf8:	f640 02af 	movw	r2, #2223	; 0x8af
 800dafc:	4909      	ldr	r1, [pc, #36]	; (800db24 <tcp_next_iss+0x3c>)
 800dafe:	480a      	ldr	r0, [pc, #40]	; (800db28 <tcp_next_iss+0x40>)
 800db00:	f009 fce2 	bl	80174c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800db04:	4b09      	ldr	r3, [pc, #36]	; (800db2c <tcp_next_iss+0x44>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	4b09      	ldr	r3, [pc, #36]	; (800db30 <tcp_next_iss+0x48>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4413      	add	r3, r2
 800db0e:	4a07      	ldr	r2, [pc, #28]	; (800db2c <tcp_next_iss+0x44>)
 800db10:	6013      	str	r3, [r2, #0]
  return iss;
 800db12:	4b06      	ldr	r3, [pc, #24]	; (800db2c <tcp_next_iss+0x44>)
 800db14:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	080199b8 	.word	0x080199b8
 800db24:	0801a0a8 	.word	0x0801a0a8
 800db28:	080199fc 	.word	0x080199fc
 800db2c:	20000014 	.word	0x20000014
 800db30:	2000f330 	.word	0x2000f330

0800db34 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	4603      	mov	r3, r0
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
 800db40:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d106      	bne.n	800db56 <tcp_eff_send_mss_netif+0x22>
 800db48:	4b14      	ldr	r3, [pc, #80]	; (800db9c <tcp_eff_send_mss_netif+0x68>)
 800db4a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800db4e:	4914      	ldr	r1, [pc, #80]	; (800dba0 <tcp_eff_send_mss_netif+0x6c>)
 800db50:	4814      	ldr	r0, [pc, #80]	; (800dba4 <tcp_eff_send_mss_netif+0x70>)
 800db52:	f009 fcb9 	bl	80174c8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d101      	bne.n	800db60 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800db5c:	89fb      	ldrh	r3, [r7, #14]
 800db5e:	e019      	b.n	800db94 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db64:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800db66:	8afb      	ldrh	r3, [r7, #22]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d012      	beq.n	800db92 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800db6c:	2328      	movs	r3, #40	; 0x28
 800db6e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800db70:	8afa      	ldrh	r2, [r7, #22]
 800db72:	8abb      	ldrh	r3, [r7, #20]
 800db74:	429a      	cmp	r2, r3
 800db76:	d904      	bls.n	800db82 <tcp_eff_send_mss_netif+0x4e>
 800db78:	8afa      	ldrh	r2, [r7, #22]
 800db7a:	8abb      	ldrh	r3, [r7, #20]
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	b29b      	uxth	r3, r3
 800db80:	e000      	b.n	800db84 <tcp_eff_send_mss_netif+0x50>
 800db82:	2300      	movs	r3, #0
 800db84:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800db86:	8a7a      	ldrh	r2, [r7, #18]
 800db88:	89fb      	ldrh	r3, [r7, #14]
 800db8a:	4293      	cmp	r3, r2
 800db8c:	bf28      	it	cs
 800db8e:	4613      	movcs	r3, r2
 800db90:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800db92:	89fb      	ldrh	r3, [r7, #14]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	080199b8 	.word	0x080199b8
 800dba0:	0801a0c4 	.word	0x0801a0c4
 800dba4:	080199fc 	.word	0x080199fc

0800dba8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d119      	bne.n	800dbf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dbbc:	4b10      	ldr	r3, [pc, #64]	; (800dc00 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dbbe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dbc2:	4910      	ldr	r1, [pc, #64]	; (800dc04 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dbc4:	4810      	ldr	r0, [pc, #64]	; (800dc08 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dbc6:	f009 fc7f 	bl	80174c8 <iprintf>

  while (pcb != NULL) {
 800dbca:	e011      	b.n	800dbf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d108      	bne.n	800dbea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7fe fd54 	bl	800c68c <tcp_abort>
      pcb = next;
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	60fb      	str	r3, [r7, #12]
 800dbe8:	e002      	b.n	800dbf0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1ea      	bne.n	800dbcc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dbf6:	bf00      	nop
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	080199b8 	.word	0x080199b8
 800dc04:	0801a0ec 	.word	0x0801a0ec
 800dc08:	080199fc 	.word	0x080199fc

0800dc0c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d02a      	beq.n	800dc72 <tcp_netif_ip_addr_changed+0x66>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d026      	beq.n	800dc72 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dc24:	4b15      	ldr	r3, [pc, #84]	; (800dc7c <tcp_netif_ip_addr_changed+0x70>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff ffbc 	bl	800dba8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dc30:	4b13      	ldr	r3, [pc, #76]	; (800dc80 <tcp_netif_ip_addr_changed+0x74>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4619      	mov	r1, r3
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff ffb6 	bl	800dba8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d017      	beq.n	800dc72 <tcp_netif_ip_addr_changed+0x66>
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d013      	beq.n	800dc72 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc4a:	4b0e      	ldr	r3, [pc, #56]	; (800dc84 <tcp_netif_ip_addr_changed+0x78>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	e00c      	b.n	800dc6c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d103      	bne.n	800dc66 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1ef      	bne.n	800dc52 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dc72:	bf00      	nop
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	2000f32c 	.word	0x2000f32c
 800dc80:	2000f338 	.word	0x2000f338
 800dc84:	2000f334 	.word	0x2000f334

0800dc88 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d007      	beq.n	800dca8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7ff fb71 	bl	800d384 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dca8:	bf00      	nop
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dcb0:	b590      	push	{r4, r7, lr}
 800dcb2:	b08d      	sub	sp, #52	; 0x34
 800dcb4:	af04      	add	r7, sp, #16
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d105      	bne.n	800dccc <tcp_input+0x1c>
 800dcc0:	4b9b      	ldr	r3, [pc, #620]	; (800df30 <tcp_input+0x280>)
 800dcc2:	2283      	movs	r2, #131	; 0x83
 800dcc4:	499b      	ldr	r1, [pc, #620]	; (800df34 <tcp_input+0x284>)
 800dcc6:	489c      	ldr	r0, [pc, #624]	; (800df38 <tcp_input+0x288>)
 800dcc8:	f009 fbfe 	bl	80174c8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	4a9a      	ldr	r2, [pc, #616]	; (800df3c <tcp_input+0x28c>)
 800dcd2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	895b      	ldrh	r3, [r3, #10]
 800dcd8:	2b13      	cmp	r3, #19
 800dcda:	f240 83c4 	bls.w	800e466 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dcde:	4b98      	ldr	r3, [pc, #608]	; (800df40 <tcp_input+0x290>)
 800dce0:	695a      	ldr	r2, [r3, #20]
 800dce2:	4b97      	ldr	r3, [pc, #604]	; (800df40 <tcp_input+0x290>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4619      	mov	r1, r3
 800dce8:	4610      	mov	r0, r2
 800dcea:	f008 fa79 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f040 83ba 	bne.w	800e46a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dcf6:	4b92      	ldr	r3, [pc, #584]	; (800df40 <tcp_input+0x290>)
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dcfe:	2be0      	cmp	r3, #224	; 0xe0
 800dd00:	f000 83b3 	beq.w	800e46a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dd04:	4b8d      	ldr	r3, [pc, #564]	; (800df3c <tcp_input+0x28c>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	899b      	ldrh	r3, [r3, #12]
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fc fb13 	bl	800a338 <lwip_htons>
 800dd12:	4603      	mov	r3, r0
 800dd14:	0b1b      	lsrs	r3, r3, #12
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dd1e:	7cbb      	ldrb	r3, [r7, #18]
 800dd20:	2b13      	cmp	r3, #19
 800dd22:	f240 83a2 	bls.w	800e46a <tcp_input+0x7ba>
 800dd26:	7cbb      	ldrb	r3, [r7, #18]
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	891b      	ldrh	r3, [r3, #8]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	f200 839b 	bhi.w	800e46a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dd34:	7cbb      	ldrb	r3, [r7, #18]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	3b14      	subs	r3, #20
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	4b81      	ldr	r3, [pc, #516]	; (800df44 <tcp_input+0x294>)
 800dd3e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dd40:	4b81      	ldr	r3, [pc, #516]	; (800df48 <tcp_input+0x298>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	895a      	ldrh	r2, [r3, #10]
 800dd4a:	7cbb      	ldrb	r3, [r7, #18]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d309      	bcc.n	800dd66 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dd52:	4b7c      	ldr	r3, [pc, #496]	; (800df44 <tcp_input+0x294>)
 800dd54:	881a      	ldrh	r2, [r3, #0]
 800dd56:	4b7d      	ldr	r3, [pc, #500]	; (800df4c <tcp_input+0x29c>)
 800dd58:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dd5a:	7cbb      	ldrb	r3, [r7, #18]
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7fd fe18 	bl	800b994 <pbuf_remove_header>
 800dd64:	e04e      	b.n	800de04 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d105      	bne.n	800dd7a <tcp_input+0xca>
 800dd6e:	4b70      	ldr	r3, [pc, #448]	; (800df30 <tcp_input+0x280>)
 800dd70:	22c2      	movs	r2, #194	; 0xc2
 800dd72:	4977      	ldr	r1, [pc, #476]	; (800df50 <tcp_input+0x2a0>)
 800dd74:	4870      	ldr	r0, [pc, #448]	; (800df38 <tcp_input+0x288>)
 800dd76:	f009 fba7 	bl	80174c8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dd7a:	2114      	movs	r1, #20
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7fd fe09 	bl	800b994 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	895a      	ldrh	r2, [r3, #10]
 800dd86:	4b71      	ldr	r3, [pc, #452]	; (800df4c <tcp_input+0x29c>)
 800dd88:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dd8a:	4b6e      	ldr	r3, [pc, #440]	; (800df44 <tcp_input+0x294>)
 800dd8c:	881a      	ldrh	r2, [r3, #0]
 800dd8e:	4b6f      	ldr	r3, [pc, #444]	; (800df4c <tcp_input+0x29c>)
 800dd90:	881b      	ldrh	r3, [r3, #0]
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dd96:	4b6d      	ldr	r3, [pc, #436]	; (800df4c <tcp_input+0x29c>)
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7fd fdf9 	bl	800b994 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	895b      	ldrh	r3, [r3, #10]
 800dda8:	8a3a      	ldrh	r2, [r7, #16]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	f200 835f 	bhi.w	800e46e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	4a64      	ldr	r2, [pc, #400]	; (800df48 <tcp_input+0x298>)
 800ddb8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	8a3a      	ldrh	r2, [r7, #16]
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fd fde6 	bl	800b994 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	891a      	ldrh	r2, [r3, #8]
 800ddcc:	8a3b      	ldrh	r3, [r7, #16]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	895b      	ldrh	r3, [r3, #10]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d005      	beq.n	800ddea <tcp_input+0x13a>
 800ddde:	4b54      	ldr	r3, [pc, #336]	; (800df30 <tcp_input+0x280>)
 800dde0:	22df      	movs	r2, #223	; 0xdf
 800dde2:	495c      	ldr	r1, [pc, #368]	; (800df54 <tcp_input+0x2a4>)
 800dde4:	4854      	ldr	r0, [pc, #336]	; (800df38 <tcp_input+0x288>)
 800dde6:	f009 fb6f 	bl	80174c8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	891a      	ldrh	r2, [r3, #8]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	891b      	ldrh	r3, [r3, #8]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d005      	beq.n	800de04 <tcp_input+0x154>
 800ddf8:	4b4d      	ldr	r3, [pc, #308]	; (800df30 <tcp_input+0x280>)
 800ddfa:	22e0      	movs	r2, #224	; 0xe0
 800ddfc:	4956      	ldr	r1, [pc, #344]	; (800df58 <tcp_input+0x2a8>)
 800ddfe:	484e      	ldr	r0, [pc, #312]	; (800df38 <tcp_input+0x288>)
 800de00:	f009 fb62 	bl	80174c8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800de04:	4b4d      	ldr	r3, [pc, #308]	; (800df3c <tcp_input+0x28c>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	4b4b      	ldr	r3, [pc, #300]	; (800df3c <tcp_input+0x28c>)
 800de0e:	681c      	ldr	r4, [r3, #0]
 800de10:	4610      	mov	r0, r2
 800de12:	f7fc fa91 	bl	800a338 <lwip_htons>
 800de16:	4603      	mov	r3, r0
 800de18:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800de1a:	4b48      	ldr	r3, [pc, #288]	; (800df3c <tcp_input+0x28c>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	885b      	ldrh	r3, [r3, #2]
 800de20:	b29a      	uxth	r2, r3
 800de22:	4b46      	ldr	r3, [pc, #280]	; (800df3c <tcp_input+0x28c>)
 800de24:	681c      	ldr	r4, [r3, #0]
 800de26:	4610      	mov	r0, r2
 800de28:	f7fc fa86 	bl	800a338 <lwip_htons>
 800de2c:	4603      	mov	r3, r0
 800de2e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800de30:	4b42      	ldr	r3, [pc, #264]	; (800df3c <tcp_input+0x28c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	685a      	ldr	r2, [r3, #4]
 800de36:	4b41      	ldr	r3, [pc, #260]	; (800df3c <tcp_input+0x28c>)
 800de38:	681c      	ldr	r4, [r3, #0]
 800de3a:	4610      	mov	r0, r2
 800de3c:	f7fc fa91 	bl	800a362 <lwip_htonl>
 800de40:	4603      	mov	r3, r0
 800de42:	6063      	str	r3, [r4, #4]
 800de44:	6863      	ldr	r3, [r4, #4]
 800de46:	4a45      	ldr	r2, [pc, #276]	; (800df5c <tcp_input+0x2ac>)
 800de48:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800de4a:	4b3c      	ldr	r3, [pc, #240]	; (800df3c <tcp_input+0x28c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	4b3a      	ldr	r3, [pc, #232]	; (800df3c <tcp_input+0x28c>)
 800de52:	681c      	ldr	r4, [r3, #0]
 800de54:	4610      	mov	r0, r2
 800de56:	f7fc fa84 	bl	800a362 <lwip_htonl>
 800de5a:	4603      	mov	r3, r0
 800de5c:	60a3      	str	r3, [r4, #8]
 800de5e:	68a3      	ldr	r3, [r4, #8]
 800de60:	4a3f      	ldr	r2, [pc, #252]	; (800df60 <tcp_input+0x2b0>)
 800de62:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800de64:	4b35      	ldr	r3, [pc, #212]	; (800df3c <tcp_input+0x28c>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	89db      	ldrh	r3, [r3, #14]
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	4b33      	ldr	r3, [pc, #204]	; (800df3c <tcp_input+0x28c>)
 800de6e:	681c      	ldr	r4, [r3, #0]
 800de70:	4610      	mov	r0, r2
 800de72:	f7fc fa61 	bl	800a338 <lwip_htons>
 800de76:	4603      	mov	r3, r0
 800de78:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800de7a:	4b30      	ldr	r3, [pc, #192]	; (800df3c <tcp_input+0x28c>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	899b      	ldrh	r3, [r3, #12]
 800de80:	b29b      	uxth	r3, r3
 800de82:	4618      	mov	r0, r3
 800de84:	f7fc fa58 	bl	800a338 <lwip_htons>
 800de88:	4603      	mov	r3, r0
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de90:	b2da      	uxtb	r2, r3
 800de92:	4b34      	ldr	r3, [pc, #208]	; (800df64 <tcp_input+0x2b4>)
 800de94:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	891a      	ldrh	r2, [r3, #8]
 800de9a:	4b33      	ldr	r3, [pc, #204]	; (800df68 <tcp_input+0x2b8>)
 800de9c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800de9e:	4b31      	ldr	r3, [pc, #196]	; (800df64 <tcp_input+0x2b4>)
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	f003 0303 	and.w	r3, r3, #3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00c      	beq.n	800dec4 <tcp_input+0x214>
    tcplen++;
 800deaa:	4b2f      	ldr	r3, [pc, #188]	; (800df68 <tcp_input+0x2b8>)
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	3301      	adds	r3, #1
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	4b2d      	ldr	r3, [pc, #180]	; (800df68 <tcp_input+0x2b8>)
 800deb4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	891a      	ldrh	r2, [r3, #8]
 800deba:	4b2b      	ldr	r3, [pc, #172]	; (800df68 <tcp_input+0x2b8>)
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	429a      	cmp	r2, r3
 800dec0:	f200 82d7 	bhi.w	800e472 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dec4:	2300      	movs	r3, #0
 800dec6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dec8:	4b28      	ldr	r3, [pc, #160]	; (800df6c <tcp_input+0x2bc>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	61fb      	str	r3, [r7, #28]
 800dece:	e09d      	b.n	800e00c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	7d1b      	ldrb	r3, [r3, #20]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d105      	bne.n	800dee4 <tcp_input+0x234>
 800ded8:	4b15      	ldr	r3, [pc, #84]	; (800df30 <tcp_input+0x280>)
 800deda:	22fb      	movs	r2, #251	; 0xfb
 800dedc:	4924      	ldr	r1, [pc, #144]	; (800df70 <tcp_input+0x2c0>)
 800dede:	4816      	ldr	r0, [pc, #88]	; (800df38 <tcp_input+0x288>)
 800dee0:	f009 faf2 	bl	80174c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
 800dee8:	2b0a      	cmp	r3, #10
 800deea:	d105      	bne.n	800def8 <tcp_input+0x248>
 800deec:	4b10      	ldr	r3, [pc, #64]	; (800df30 <tcp_input+0x280>)
 800deee:	22fc      	movs	r2, #252	; 0xfc
 800def0:	4920      	ldr	r1, [pc, #128]	; (800df74 <tcp_input+0x2c4>)
 800def2:	4811      	ldr	r0, [pc, #68]	; (800df38 <tcp_input+0x288>)
 800def4:	f009 fae8 	bl	80174c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	7d1b      	ldrb	r3, [r3, #20]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d105      	bne.n	800df0c <tcp_input+0x25c>
 800df00:	4b0b      	ldr	r3, [pc, #44]	; (800df30 <tcp_input+0x280>)
 800df02:	22fd      	movs	r2, #253	; 0xfd
 800df04:	491c      	ldr	r1, [pc, #112]	; (800df78 <tcp_input+0x2c8>)
 800df06:	480c      	ldr	r0, [pc, #48]	; (800df38 <tcp_input+0x288>)
 800df08:	f009 fade 	bl	80174c8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	7a1b      	ldrb	r3, [r3, #8]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d033      	beq.n	800df7c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	7a1a      	ldrb	r2, [r3, #8]
 800df18:	4b09      	ldr	r3, [pc, #36]	; (800df40 <tcp_input+0x290>)
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df20:	3301      	adds	r3, #1
 800df22:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df24:	429a      	cmp	r2, r3
 800df26:	d029      	beq.n	800df7c <tcp_input+0x2cc>
      prev = pcb;
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	61bb      	str	r3, [r7, #24]
      continue;
 800df2c:	e06b      	b.n	800e006 <tcp_input+0x356>
 800df2e:	bf00      	nop
 800df30:	0801a120 	.word	0x0801a120
 800df34:	0801a154 	.word	0x0801a154
 800df38:	0801a16c 	.word	0x0801a16c
 800df3c:	200084b0 	.word	0x200084b0
 800df40:	2000bbf8 	.word	0x2000bbf8
 800df44:	200084b4 	.word	0x200084b4
 800df48:	200084b8 	.word	0x200084b8
 800df4c:	200084b6 	.word	0x200084b6
 800df50:	0801a194 	.word	0x0801a194
 800df54:	0801a1a4 	.word	0x0801a1a4
 800df58:	0801a1b0 	.word	0x0801a1b0
 800df5c:	200084c0 	.word	0x200084c0
 800df60:	200084c4 	.word	0x200084c4
 800df64:	200084cc 	.word	0x200084cc
 800df68:	200084ca 	.word	0x200084ca
 800df6c:	2000f32c 	.word	0x2000f32c
 800df70:	0801a1d0 	.word	0x0801a1d0
 800df74:	0801a1f8 	.word	0x0801a1f8
 800df78:	0801a224 	.word	0x0801a224
    }

    if (pcb->remote_port == tcphdr->src &&
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	8b1a      	ldrh	r2, [r3, #24]
 800df80:	4b94      	ldr	r3, [pc, #592]	; (800e1d4 <tcp_input+0x524>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	881b      	ldrh	r3, [r3, #0]
 800df86:	b29b      	uxth	r3, r3
 800df88:	429a      	cmp	r2, r3
 800df8a:	d13a      	bne.n	800e002 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	8ada      	ldrh	r2, [r3, #22]
 800df90:	4b90      	ldr	r3, [pc, #576]	; (800e1d4 <tcp_input+0x524>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	885b      	ldrh	r3, [r3, #2]
 800df96:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800df98:	429a      	cmp	r2, r3
 800df9a:	d132      	bne.n	800e002 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	685a      	ldr	r2, [r3, #4]
 800dfa0:	4b8d      	ldr	r3, [pc, #564]	; (800e1d8 <tcp_input+0x528>)
 800dfa2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d12c      	bne.n	800e002 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	4b8a      	ldr	r3, [pc, #552]	; (800e1d8 <tcp_input+0x528>)
 800dfae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d126      	bne.n	800e002 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	69fa      	ldr	r2, [r7, #28]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d106      	bne.n	800dfcc <tcp_input+0x31c>
 800dfbe:	4b87      	ldr	r3, [pc, #540]	; (800e1dc <tcp_input+0x52c>)
 800dfc0:	f240 120d 	movw	r2, #269	; 0x10d
 800dfc4:	4986      	ldr	r1, [pc, #536]	; (800e1e0 <tcp_input+0x530>)
 800dfc6:	4887      	ldr	r0, [pc, #540]	; (800e1e4 <tcp_input+0x534>)
 800dfc8:	f009 fa7e 	bl	80174c8 <iprintf>
      if (prev != NULL) {
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00a      	beq.n	800dfe8 <tcp_input+0x338>
        prev->next = pcb->next;
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	68da      	ldr	r2, [r3, #12]
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dfda:	4b83      	ldr	r3, [pc, #524]	; (800e1e8 <tcp_input+0x538>)
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dfe2:	4a81      	ldr	r2, [pc, #516]	; (800e1e8 <tcp_input+0x538>)
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	69fa      	ldr	r2, [r7, #28]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d111      	bne.n	800e016 <tcp_input+0x366>
 800dff2:	4b7a      	ldr	r3, [pc, #488]	; (800e1dc <tcp_input+0x52c>)
 800dff4:	f240 1215 	movw	r2, #277	; 0x115
 800dff8:	497c      	ldr	r1, [pc, #496]	; (800e1ec <tcp_input+0x53c>)
 800dffa:	487a      	ldr	r0, [pc, #488]	; (800e1e4 <tcp_input+0x534>)
 800dffc:	f009 fa64 	bl	80174c8 <iprintf>
      break;
 800e000:	e009      	b.n	800e016 <tcp_input+0x366>
    }
    prev = pcb;
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	61fb      	str	r3, [r7, #28]
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	f47f af5e 	bne.w	800ded0 <tcp_input+0x220>
 800e014:	e000      	b.n	800e018 <tcp_input+0x368>
      break;
 800e016:	bf00      	nop
  }

  if (pcb == NULL) {
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 8095 	bne.w	800e14a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e020:	4b73      	ldr	r3, [pc, #460]	; (800e1f0 <tcp_input+0x540>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	61fb      	str	r3, [r7, #28]
 800e026:	e03f      	b.n	800e0a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	7d1b      	ldrb	r3, [r3, #20]
 800e02c:	2b0a      	cmp	r3, #10
 800e02e:	d006      	beq.n	800e03e <tcp_input+0x38e>
 800e030:	4b6a      	ldr	r3, [pc, #424]	; (800e1dc <tcp_input+0x52c>)
 800e032:	f240 121f 	movw	r2, #287	; 0x11f
 800e036:	496f      	ldr	r1, [pc, #444]	; (800e1f4 <tcp_input+0x544>)
 800e038:	486a      	ldr	r0, [pc, #424]	; (800e1e4 <tcp_input+0x534>)
 800e03a:	f009 fa45 	bl	80174c8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	7a1b      	ldrb	r3, [r3, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d009      	beq.n	800e05a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	7a1a      	ldrb	r2, [r3, #8]
 800e04a:	4b63      	ldr	r3, [pc, #396]	; (800e1d8 <tcp_input+0x528>)
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e052:	3301      	adds	r3, #1
 800e054:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e056:	429a      	cmp	r2, r3
 800e058:	d122      	bne.n	800e0a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	8b1a      	ldrh	r2, [r3, #24]
 800e05e:	4b5d      	ldr	r3, [pc, #372]	; (800e1d4 <tcp_input+0x524>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	881b      	ldrh	r3, [r3, #0]
 800e064:	b29b      	uxth	r3, r3
 800e066:	429a      	cmp	r2, r3
 800e068:	d11b      	bne.n	800e0a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	8ada      	ldrh	r2, [r3, #22]
 800e06e:	4b59      	ldr	r3, [pc, #356]	; (800e1d4 <tcp_input+0x524>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	885b      	ldrh	r3, [r3, #2]
 800e074:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e076:	429a      	cmp	r2, r3
 800e078:	d113      	bne.n	800e0a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	685a      	ldr	r2, [r3, #4]
 800e07e:	4b56      	ldr	r3, [pc, #344]	; (800e1d8 <tcp_input+0x528>)
 800e080:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e082:	429a      	cmp	r2, r3
 800e084:	d10d      	bne.n	800e0a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	4b53      	ldr	r3, [pc, #332]	; (800e1d8 <tcp_input+0x528>)
 800e08c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e08e:	429a      	cmp	r2, r3
 800e090:	d107      	bne.n	800e0a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e092:	69f8      	ldr	r0, [r7, #28]
 800e094:	f000 fb52 	bl	800e73c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7fd fd01 	bl	800baa0 <pbuf_free>
        return;
 800e09e:	e1ee      	b.n	800e47e <tcp_input+0x7ce>
        continue;
 800e0a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	61fb      	str	r3, [r7, #28]
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1bc      	bne.n	800e028 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e0b2:	4b51      	ldr	r3, [pc, #324]	; (800e1f8 <tcp_input+0x548>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	617b      	str	r3, [r7, #20]
 800e0b8:	e02a      	b.n	800e110 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	7a1b      	ldrb	r3, [r3, #8]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00c      	beq.n	800e0dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	7a1a      	ldrb	r2, [r3, #8]
 800e0c6:	4b44      	ldr	r3, [pc, #272]	; (800e1d8 <tcp_input+0x528>)
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d002      	beq.n	800e0dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	61bb      	str	r3, [r7, #24]
        continue;
 800e0da:	e016      	b.n	800e10a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	8ada      	ldrh	r2, [r3, #22]
 800e0e0:	4b3c      	ldr	r3, [pc, #240]	; (800e1d4 <tcp_input+0x524>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	885b      	ldrh	r3, [r3, #2]
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d10c      	bne.n	800e106 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	4b39      	ldr	r3, [pc, #228]	; (800e1d8 <tcp_input+0x528>)
 800e0f2:	695b      	ldr	r3, [r3, #20]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d00f      	beq.n	800e118 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00d      	beq.n	800e11a <tcp_input+0x46a>
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d009      	beq.n	800e11a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	617b      	str	r3, [r7, #20]
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1d1      	bne.n	800e0ba <tcp_input+0x40a>
 800e116:	e000      	b.n	800e11a <tcp_input+0x46a>
            break;
 800e118:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d014      	beq.n	800e14a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00a      	beq.n	800e13c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	68da      	ldr	r2, [r3, #12]
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e12e:	4b32      	ldr	r3, [pc, #200]	; (800e1f8 <tcp_input+0x548>)
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e136:	4a30      	ldr	r2, [pc, #192]	; (800e1f8 <tcp_input+0x548>)
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e13c:	6978      	ldr	r0, [r7, #20]
 800e13e:	f000 f9ff 	bl	800e540 <tcp_listen_input>
      }
      pbuf_free(p);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7fd fcac 	bl	800baa0 <pbuf_free>
      return;
 800e148:	e199      	b.n	800e47e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 8160 	beq.w	800e412 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e152:	4b2a      	ldr	r3, [pc, #168]	; (800e1fc <tcp_input+0x54c>)
 800e154:	2200      	movs	r2, #0
 800e156:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	891a      	ldrh	r2, [r3, #8]
 800e15c:	4b27      	ldr	r3, [pc, #156]	; (800e1fc <tcp_input+0x54c>)
 800e15e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e160:	4a26      	ldr	r2, [pc, #152]	; (800e1fc <tcp_input+0x54c>)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e166:	4b1b      	ldr	r3, [pc, #108]	; (800e1d4 <tcp_input+0x524>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a24      	ldr	r2, [pc, #144]	; (800e1fc <tcp_input+0x54c>)
 800e16c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e16e:	4b24      	ldr	r3, [pc, #144]	; (800e200 <tcp_input+0x550>)
 800e170:	2200      	movs	r2, #0
 800e172:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e174:	4b23      	ldr	r3, [pc, #140]	; (800e204 <tcp_input+0x554>)
 800e176:	2200      	movs	r2, #0
 800e178:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e17a:	4b23      	ldr	r3, [pc, #140]	; (800e208 <tcp_input+0x558>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e180:	4b22      	ldr	r3, [pc, #136]	; (800e20c <tcp_input+0x55c>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	f003 0308 	and.w	r3, r3, #8
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d006      	beq.n	800e19a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	7b5b      	ldrb	r3, [r3, #13]
 800e190:	f043 0301 	orr.w	r3, r3, #1
 800e194:	b2da      	uxtb	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d038      	beq.n	800e214 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e1a2:	69f8      	ldr	r0, [r7, #28]
 800e1a4:	f7ff f872 	bl	800d28c <tcp_process_refused_data>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	f113 0f0d 	cmn.w	r3, #13
 800e1ae:	d007      	beq.n	800e1c0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d02d      	beq.n	800e214 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e1b8:	4b15      	ldr	r3, [pc, #84]	; (800e210 <tcp_input+0x560>)
 800e1ba:	881b      	ldrh	r3, [r3, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d029      	beq.n	800e214 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f040 8104 	bne.w	800e3d2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e1ca:	69f8      	ldr	r0, [r7, #28]
 800e1cc:	f003 fe26 	bl	8011e1c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e1d0:	e0ff      	b.n	800e3d2 <tcp_input+0x722>
 800e1d2:	bf00      	nop
 800e1d4:	200084b0 	.word	0x200084b0
 800e1d8:	2000bbf8 	.word	0x2000bbf8
 800e1dc:	0801a120 	.word	0x0801a120
 800e1e0:	0801a24c 	.word	0x0801a24c
 800e1e4:	0801a16c 	.word	0x0801a16c
 800e1e8:	2000f32c 	.word	0x2000f32c
 800e1ec:	0801a278 	.word	0x0801a278
 800e1f0:	2000f33c 	.word	0x2000f33c
 800e1f4:	0801a2a4 	.word	0x0801a2a4
 800e1f8:	2000f334 	.word	0x2000f334
 800e1fc:	200084a0 	.word	0x200084a0
 800e200:	200084d0 	.word	0x200084d0
 800e204:	200084cd 	.word	0x200084cd
 800e208:	200084c8 	.word	0x200084c8
 800e20c:	200084cc 	.word	0x200084cc
 800e210:	200084ca 	.word	0x200084ca
      }
    }
    tcp_input_pcb = pcb;
 800e214:	4a9b      	ldr	r2, [pc, #620]	; (800e484 <tcp_input+0x7d4>)
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e21a:	69f8      	ldr	r0, [r7, #28]
 800e21c:	f000 fb0a 	bl	800e834 <tcp_process>
 800e220:	4603      	mov	r3, r0
 800e222:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e224:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e228:	f113 0f0d 	cmn.w	r3, #13
 800e22c:	f000 80d3 	beq.w	800e3d6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e230:	4b95      	ldr	r3, [pc, #596]	; (800e488 <tcp_input+0x7d8>)
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	f003 0308 	and.w	r3, r3, #8
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d015      	beq.n	800e268 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e242:	2b00      	cmp	r3, #0
 800e244:	d008      	beq.n	800e258 <tcp_input+0x5a8>
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e24c:	69fa      	ldr	r2, [r7, #28]
 800e24e:	6912      	ldr	r2, [r2, #16]
 800e250:	f06f 010d 	mvn.w	r1, #13
 800e254:	4610      	mov	r0, r2
 800e256:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e258:	69f9      	ldr	r1, [r7, #28]
 800e25a:	488c      	ldr	r0, [pc, #560]	; (800e48c <tcp_input+0x7dc>)
 800e25c:	f7ff fbb0 	bl	800d9c0 <tcp_pcb_remove>
        tcp_free(pcb);
 800e260:	69f8      	ldr	r0, [r7, #28]
 800e262:	f7fd fed9 	bl	800c018 <tcp_free>
 800e266:	e0c1      	b.n	800e3ec <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e26c:	4b88      	ldr	r3, [pc, #544]	; (800e490 <tcp_input+0x7e0>)
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d01d      	beq.n	800e2b0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e274:	4b86      	ldr	r3, [pc, #536]	; (800e490 <tcp_input+0x7e0>)
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00a      	beq.n	800e29a <tcp_input+0x5ea>
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e28a:	69fa      	ldr	r2, [r7, #28]
 800e28c:	6910      	ldr	r0, [r2, #16]
 800e28e:	89fa      	ldrh	r2, [r7, #14]
 800e290:	69f9      	ldr	r1, [r7, #28]
 800e292:	4798      	blx	r3
 800e294:	4603      	mov	r3, r0
 800e296:	74fb      	strb	r3, [r7, #19]
 800e298:	e001      	b.n	800e29e <tcp_input+0x5ee>
 800e29a:	2300      	movs	r3, #0
 800e29c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e29e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2a2:	f113 0f0d 	cmn.w	r3, #13
 800e2a6:	f000 8098 	beq.w	800e3da <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e2aa:	4b79      	ldr	r3, [pc, #484]	; (800e490 <tcp_input+0x7e0>)
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e2b0:	69f8      	ldr	r0, [r7, #28]
 800e2b2:	f000 f905 	bl	800e4c0 <tcp_input_delayed_close>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f040 8090 	bne.w	800e3de <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e2be:	4b75      	ldr	r3, [pc, #468]	; (800e494 <tcp_input+0x7e4>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d041      	beq.n	800e34a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d006      	beq.n	800e2dc <tcp_input+0x62c>
 800e2ce:	4b72      	ldr	r3, [pc, #456]	; (800e498 <tcp_input+0x7e8>)
 800e2d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e2d4:	4971      	ldr	r1, [pc, #452]	; (800e49c <tcp_input+0x7ec>)
 800e2d6:	4872      	ldr	r0, [pc, #456]	; (800e4a0 <tcp_input+0x7f0>)
 800e2d8:	f009 f8f6 	bl	80174c8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	8b5b      	ldrh	r3, [r3, #26]
 800e2e0:	f003 0310 	and.w	r3, r3, #16
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d008      	beq.n	800e2fa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e2e8:	4b6a      	ldr	r3, [pc, #424]	; (800e494 <tcp_input+0x7e4>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fd fbd7 	bl	800baa0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e2f2:	69f8      	ldr	r0, [r7, #28]
 800e2f4:	f7fe f9ca 	bl	800c68c <tcp_abort>
            goto aborted;
 800e2f8:	e078      	b.n	800e3ec <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00c      	beq.n	800e31e <tcp_input+0x66e>
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	6918      	ldr	r0, [r3, #16]
 800e30e:	4b61      	ldr	r3, [pc, #388]	; (800e494 <tcp_input+0x7e4>)
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	2300      	movs	r3, #0
 800e314:	69f9      	ldr	r1, [r7, #28]
 800e316:	47a0      	blx	r4
 800e318:	4603      	mov	r3, r0
 800e31a:	74fb      	strb	r3, [r7, #19]
 800e31c:	e008      	b.n	800e330 <tcp_input+0x680>
 800e31e:	4b5d      	ldr	r3, [pc, #372]	; (800e494 <tcp_input+0x7e4>)
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	2300      	movs	r3, #0
 800e324:	69f9      	ldr	r1, [r7, #28]
 800e326:	2000      	movs	r0, #0
 800e328:	f7ff f884 	bl	800d434 <tcp_recv_null>
 800e32c:	4603      	mov	r3, r0
 800e32e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e334:	f113 0f0d 	cmn.w	r3, #13
 800e338:	d053      	beq.n	800e3e2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e33a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d003      	beq.n	800e34a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e342:	4b54      	ldr	r3, [pc, #336]	; (800e494 <tcp_input+0x7e4>)
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e34a:	4b4f      	ldr	r3, [pc, #316]	; (800e488 <tcp_input+0x7d8>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d030      	beq.n	800e3b8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d009      	beq.n	800e372 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e362:	7b5a      	ldrb	r2, [r3, #13]
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e368:	f042 0220 	orr.w	r2, r2, #32
 800e36c:	b2d2      	uxtb	r2, r2
 800e36e:	735a      	strb	r2, [r3, #13]
 800e370:	e022      	b.n	800e3b8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e376:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e37a:	d005      	beq.n	800e388 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e380:	3301      	adds	r3, #1
 800e382:	b29a      	uxth	r2, r3
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00b      	beq.n	800e3aa <tcp_input+0x6fa>
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	6918      	ldr	r0, [r3, #16]
 800e39c:	2300      	movs	r3, #0
 800e39e:	2200      	movs	r2, #0
 800e3a0:	69f9      	ldr	r1, [r7, #28]
 800e3a2:	47a0      	blx	r4
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	74fb      	strb	r3, [r7, #19]
 800e3a8:	e001      	b.n	800e3ae <tcp_input+0x6fe>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e3ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3b2:	f113 0f0d 	cmn.w	r3, #13
 800e3b6:	d016      	beq.n	800e3e6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e3b8:	4b32      	ldr	r3, [pc, #200]	; (800e484 <tcp_input+0x7d4>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e3be:	69f8      	ldr	r0, [r7, #28]
 800e3c0:	f000 f87e 	bl	800e4c0 <tcp_input_delayed_close>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10f      	bne.n	800e3ea <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e3ca:	69f8      	ldr	r0, [r7, #28]
 800e3cc:	f002 ff10 	bl	80111f0 <tcp_output>
 800e3d0:	e00c      	b.n	800e3ec <tcp_input+0x73c>
        goto aborted;
 800e3d2:	bf00      	nop
 800e3d4:	e00a      	b.n	800e3ec <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e3d6:	bf00      	nop
 800e3d8:	e008      	b.n	800e3ec <tcp_input+0x73c>
              goto aborted;
 800e3da:	bf00      	nop
 800e3dc:	e006      	b.n	800e3ec <tcp_input+0x73c>
          goto aborted;
 800e3de:	bf00      	nop
 800e3e0:	e004      	b.n	800e3ec <tcp_input+0x73c>
            goto aborted;
 800e3e2:	bf00      	nop
 800e3e4:	e002      	b.n	800e3ec <tcp_input+0x73c>
              goto aborted;
 800e3e6:	bf00      	nop
 800e3e8:	e000      	b.n	800e3ec <tcp_input+0x73c>
          goto aborted;
 800e3ea:	bf00      	nop
    tcp_input_pcb = NULL;
 800e3ec:	4b25      	ldr	r3, [pc, #148]	; (800e484 <tcp_input+0x7d4>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e3f2:	4b28      	ldr	r3, [pc, #160]	; (800e494 <tcp_input+0x7e4>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e3f8:	4b2a      	ldr	r3, [pc, #168]	; (800e4a4 <tcp_input+0x7f4>)
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d03d      	beq.n	800e47c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800e400:	4b28      	ldr	r3, [pc, #160]	; (800e4a4 <tcp_input+0x7f4>)
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	4618      	mov	r0, r3
 800e406:	f7fd fb4b 	bl	800baa0 <pbuf_free>
      inseg.p = NULL;
 800e40a:	4b26      	ldr	r3, [pc, #152]	; (800e4a4 <tcp_input+0x7f4>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e410:	e034      	b.n	800e47c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e412:	4b25      	ldr	r3, [pc, #148]	; (800e4a8 <tcp_input+0x7f8>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	899b      	ldrh	r3, [r3, #12]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fb ff8c 	bl	800a338 <lwip_htons>
 800e420:	4603      	mov	r3, r0
 800e422:	b2db      	uxtb	r3, r3
 800e424:	f003 0304 	and.w	r3, r3, #4
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d118      	bne.n	800e45e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e42c:	4b1f      	ldr	r3, [pc, #124]	; (800e4ac <tcp_input+0x7fc>)
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	4b1f      	ldr	r3, [pc, #124]	; (800e4b0 <tcp_input+0x800>)
 800e432:	881b      	ldrh	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	4b1f      	ldr	r3, [pc, #124]	; (800e4b4 <tcp_input+0x804>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e43c:	4b1a      	ldr	r3, [pc, #104]	; (800e4a8 <tcp_input+0x7f8>)
 800e43e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e440:	885b      	ldrh	r3, [r3, #2]
 800e442:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e444:	4a18      	ldr	r2, [pc, #96]	; (800e4a8 <tcp_input+0x7f8>)
 800e446:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e448:	8812      	ldrh	r2, [r2, #0]
 800e44a:	b292      	uxth	r2, r2
 800e44c:	9202      	str	r2, [sp, #8]
 800e44e:	9301      	str	r3, [sp, #4]
 800e450:	4b19      	ldr	r3, [pc, #100]	; (800e4b8 <tcp_input+0x808>)
 800e452:	9300      	str	r3, [sp, #0]
 800e454:	4b19      	ldr	r3, [pc, #100]	; (800e4bc <tcp_input+0x80c>)
 800e456:	4602      	mov	r2, r0
 800e458:	2000      	movs	r0, #0
 800e45a:	f003 fc8d 	bl	8011d78 <tcp_rst>
    pbuf_free(p);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7fd fb1e 	bl	800baa0 <pbuf_free>
  return;
 800e464:	e00a      	b.n	800e47c <tcp_input+0x7cc>
    goto dropped;
 800e466:	bf00      	nop
 800e468:	e004      	b.n	800e474 <tcp_input+0x7c4>
dropped:
 800e46a:	bf00      	nop
 800e46c:	e002      	b.n	800e474 <tcp_input+0x7c4>
      goto dropped;
 800e46e:	bf00      	nop
 800e470:	e000      	b.n	800e474 <tcp_input+0x7c4>
      goto dropped;
 800e472:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7fd fb13 	bl	800baa0 <pbuf_free>
 800e47a:	e000      	b.n	800e47e <tcp_input+0x7ce>
  return;
 800e47c:	bf00      	nop
}
 800e47e:	3724      	adds	r7, #36	; 0x24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd90      	pop	{r4, r7, pc}
 800e484:	2000f340 	.word	0x2000f340
 800e488:	200084cd 	.word	0x200084cd
 800e48c:	2000f32c 	.word	0x2000f32c
 800e490:	200084c8 	.word	0x200084c8
 800e494:	200084d0 	.word	0x200084d0
 800e498:	0801a120 	.word	0x0801a120
 800e49c:	0801a2d4 	.word	0x0801a2d4
 800e4a0:	0801a16c 	.word	0x0801a16c
 800e4a4:	200084a0 	.word	0x200084a0
 800e4a8:	200084b0 	.word	0x200084b0
 800e4ac:	200084c4 	.word	0x200084c4
 800e4b0:	200084ca 	.word	0x200084ca
 800e4b4:	200084c0 	.word	0x200084c0
 800e4b8:	2000bc08 	.word	0x2000bc08
 800e4bc:	2000bc0c 	.word	0x2000bc0c

0800e4c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d106      	bne.n	800e4dc <tcp_input_delayed_close+0x1c>
 800e4ce:	4b17      	ldr	r3, [pc, #92]	; (800e52c <tcp_input_delayed_close+0x6c>)
 800e4d0:	f240 225a 	movw	r2, #602	; 0x25a
 800e4d4:	4916      	ldr	r1, [pc, #88]	; (800e530 <tcp_input_delayed_close+0x70>)
 800e4d6:	4817      	ldr	r0, [pc, #92]	; (800e534 <tcp_input_delayed_close+0x74>)
 800e4d8:	f008 fff6 	bl	80174c8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e4dc:	4b16      	ldr	r3, [pc, #88]	; (800e538 <tcp_input_delayed_close+0x78>)
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	f003 0310 	and.w	r3, r3, #16
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d01c      	beq.n	800e522 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8b5b      	ldrh	r3, [r3, #26]
 800e4ec:	f003 0310 	and.w	r3, r3, #16
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10d      	bne.n	800e510 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d008      	beq.n	800e510 <tcp_input_delayed_close+0x50>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	6912      	ldr	r2, [r2, #16]
 800e508:	f06f 010e 	mvn.w	r1, #14
 800e50c:	4610      	mov	r0, r2
 800e50e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e510:	6879      	ldr	r1, [r7, #4]
 800e512:	480a      	ldr	r0, [pc, #40]	; (800e53c <tcp_input_delayed_close+0x7c>)
 800e514:	f7ff fa54 	bl	800d9c0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7fd fd7d 	bl	800c018 <tcp_free>
    return 1;
 800e51e:	2301      	movs	r3, #1
 800e520:	e000      	b.n	800e524 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	0801a120 	.word	0x0801a120
 800e530:	0801a2f0 	.word	0x0801a2f0
 800e534:	0801a16c 	.word	0x0801a16c
 800e538:	200084cd 	.word	0x200084cd
 800e53c:	2000f32c 	.word	0x2000f32c

0800e540 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e540:	b590      	push	{r4, r7, lr}
 800e542:	b08b      	sub	sp, #44	; 0x2c
 800e544:	af04      	add	r7, sp, #16
 800e546:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e548:	4b6f      	ldr	r3, [pc, #444]	; (800e708 <tcp_listen_input+0x1c8>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	f003 0304 	and.w	r3, r3, #4
 800e550:	2b00      	cmp	r3, #0
 800e552:	f040 80d3 	bne.w	800e6fc <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d106      	bne.n	800e56a <tcp_listen_input+0x2a>
 800e55c:	4b6b      	ldr	r3, [pc, #428]	; (800e70c <tcp_listen_input+0x1cc>)
 800e55e:	f240 2281 	movw	r2, #641	; 0x281
 800e562:	496b      	ldr	r1, [pc, #428]	; (800e710 <tcp_listen_input+0x1d0>)
 800e564:	486b      	ldr	r0, [pc, #428]	; (800e714 <tcp_listen_input+0x1d4>)
 800e566:	f008 ffaf 	bl	80174c8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e56a:	4b67      	ldr	r3, [pc, #412]	; (800e708 <tcp_listen_input+0x1c8>)
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	f003 0310 	and.w	r3, r3, #16
 800e572:	2b00      	cmp	r3, #0
 800e574:	d019      	beq.n	800e5aa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e576:	4b68      	ldr	r3, [pc, #416]	; (800e718 <tcp_listen_input+0x1d8>)
 800e578:	6819      	ldr	r1, [r3, #0]
 800e57a:	4b68      	ldr	r3, [pc, #416]	; (800e71c <tcp_listen_input+0x1dc>)
 800e57c:	881b      	ldrh	r3, [r3, #0]
 800e57e:	461a      	mov	r2, r3
 800e580:	4b67      	ldr	r3, [pc, #412]	; (800e720 <tcp_listen_input+0x1e0>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e586:	4b67      	ldr	r3, [pc, #412]	; (800e724 <tcp_listen_input+0x1e4>)
 800e588:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e58a:	885b      	ldrh	r3, [r3, #2]
 800e58c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e58e:	4a65      	ldr	r2, [pc, #404]	; (800e724 <tcp_listen_input+0x1e4>)
 800e590:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e592:	8812      	ldrh	r2, [r2, #0]
 800e594:	b292      	uxth	r2, r2
 800e596:	9202      	str	r2, [sp, #8]
 800e598:	9301      	str	r3, [sp, #4]
 800e59a:	4b63      	ldr	r3, [pc, #396]	; (800e728 <tcp_listen_input+0x1e8>)
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	4b63      	ldr	r3, [pc, #396]	; (800e72c <tcp_listen_input+0x1ec>)
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f003 fbe8 	bl	8011d78 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e5a8:	e0aa      	b.n	800e700 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800e5aa:	4b57      	ldr	r3, [pc, #348]	; (800e708 <tcp_listen_input+0x1c8>)
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	f003 0302 	and.w	r3, r3, #2
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 80a4 	beq.w	800e700 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	7d5b      	ldrb	r3, [r3, #21]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7ff f85d 	bl	800d67c <tcp_alloc>
 800e5c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d111      	bne.n	800e5ee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	699b      	ldr	r3, [r3, #24]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00a      	beq.n	800e5e8 <tcp_listen_input+0xa8>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	6910      	ldr	r0, [r2, #16]
 800e5da:	f04f 32ff 	mov.w	r2, #4294967295
 800e5de:	2100      	movs	r1, #0
 800e5e0:	4798      	blx	r3
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	73bb      	strb	r3, [r7, #14]
      return;
 800e5e6:	e08c      	b.n	800e702 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e5e8:	23f0      	movs	r3, #240	; 0xf0
 800e5ea:	73bb      	strb	r3, [r7, #14]
      return;
 800e5ec:	e089      	b.n	800e702 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e5ee:	4b50      	ldr	r3, [pc, #320]	; (800e730 <tcp_listen_input+0x1f0>)
 800e5f0:	695a      	ldr	r2, [r3, #20]
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e5f6:	4b4e      	ldr	r3, [pc, #312]	; (800e730 <tcp_listen_input+0x1f0>)
 800e5f8:	691a      	ldr	r2, [r3, #16]
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	8ada      	ldrh	r2, [r3, #22]
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e606:	4b47      	ldr	r3, [pc, #284]	; (800e724 <tcp_listen_input+0x1e4>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	2203      	movs	r2, #3
 800e616:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e618:	4b41      	ldr	r3, [pc, #260]	; (800e720 <tcp_listen_input+0x1e0>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e62a:	6978      	ldr	r0, [r7, #20]
 800e62c:	f7ff fa5c 	bl	800dae8 <tcp_next_iss>
 800e630:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	693a      	ldr	r2, [r7, #16]
 800e648:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e64a:	4b35      	ldr	r3, [pc, #212]	; (800e720 <tcp_listen_input+0x1e0>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	1e5a      	subs	r2, r3, #1
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	691a      	ldr	r2, [r3, #16]
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	7a5b      	ldrb	r3, [r3, #9]
 800e666:	f003 030c 	and.w	r3, r3, #12
 800e66a:	b2da      	uxtb	r2, r3
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7a1a      	ldrb	r2, [r3, #8]
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e678:	4b2e      	ldr	r3, [pc, #184]	; (800e734 <tcp_listen_input+0x1f4>)
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	60da      	str	r2, [r3, #12]
 800e680:	4a2c      	ldr	r2, [pc, #176]	; (800e734 <tcp_listen_input+0x1f4>)
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	6013      	str	r3, [r2, #0]
 800e686:	f003 fd39 	bl	80120fc <tcp_timer_needed>
 800e68a:	4b2b      	ldr	r3, [pc, #172]	; (800e738 <tcp_listen_input+0x1f8>)
 800e68c:	2201      	movs	r2, #1
 800e68e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e690:	6978      	ldr	r0, [r7, #20]
 800e692:	f001 fd8f 	bl	80101b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e696:	4b23      	ldr	r3, [pc, #140]	; (800e724 <tcp_listen_input+0x1e4>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	89db      	ldrh	r3, [r3, #14]
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	3304      	adds	r3, #4
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f007 fadf 	bl	8015c7c <ip4_route>
 800e6be:	4601      	mov	r1, r0
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f7ff fa34 	bl	800db34 <tcp_eff_send_mss_netif>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e6d4:	2112      	movs	r1, #18
 800e6d6:	6978      	ldr	r0, [r7, #20]
 800e6d8:	f002 fc9c 	bl	8011014 <tcp_enqueue_flags>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e6e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d004      	beq.n	800e6f2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	6978      	ldr	r0, [r7, #20]
 800e6ec:	f7fd ff10 	bl	800c510 <tcp_abandon>
      return;
 800e6f0:	e007      	b.n	800e702 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800e6f2:	6978      	ldr	r0, [r7, #20]
 800e6f4:	f002 fd7c 	bl	80111f0 <tcp_output>
  return;
 800e6f8:	bf00      	nop
 800e6fa:	e001      	b.n	800e700 <tcp_listen_input+0x1c0>
    return;
 800e6fc:	bf00      	nop
 800e6fe:	e000      	b.n	800e702 <tcp_listen_input+0x1c2>
  return;
 800e700:	bf00      	nop
}
 800e702:	371c      	adds	r7, #28
 800e704:	46bd      	mov	sp, r7
 800e706:	bd90      	pop	{r4, r7, pc}
 800e708:	200084cc 	.word	0x200084cc
 800e70c:	0801a120 	.word	0x0801a120
 800e710:	0801a318 	.word	0x0801a318
 800e714:	0801a16c 	.word	0x0801a16c
 800e718:	200084c4 	.word	0x200084c4
 800e71c:	200084ca 	.word	0x200084ca
 800e720:	200084c0 	.word	0x200084c0
 800e724:	200084b0 	.word	0x200084b0
 800e728:	2000bc08 	.word	0x2000bc08
 800e72c:	2000bc0c 	.word	0x2000bc0c
 800e730:	2000bbf8 	.word	0x2000bbf8
 800e734:	2000f32c 	.word	0x2000f32c
 800e738:	2000f328 	.word	0x2000f328

0800e73c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b086      	sub	sp, #24
 800e740:	af04      	add	r7, sp, #16
 800e742:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e744:	4b30      	ldr	r3, [pc, #192]	; (800e808 <tcp_timewait_input+0xcc>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	f003 0304 	and.w	r3, r3, #4
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d154      	bne.n	800e7fa <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d106      	bne.n	800e764 <tcp_timewait_input+0x28>
 800e756:	4b2d      	ldr	r3, [pc, #180]	; (800e80c <tcp_timewait_input+0xd0>)
 800e758:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e75c:	492c      	ldr	r1, [pc, #176]	; (800e810 <tcp_timewait_input+0xd4>)
 800e75e:	482d      	ldr	r0, [pc, #180]	; (800e814 <tcp_timewait_input+0xd8>)
 800e760:	f008 feb2 	bl	80174c8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e764:	4b28      	ldr	r3, [pc, #160]	; (800e808 <tcp_timewait_input+0xcc>)
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	f003 0302 	and.w	r3, r3, #2
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d02a      	beq.n	800e7c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e770:	4b29      	ldr	r3, [pc, #164]	; (800e818 <tcp_timewait_input+0xdc>)
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	db2d      	blt.n	800e7da <tcp_timewait_input+0x9e>
 800e77e:	4b26      	ldr	r3, [pc, #152]	; (800e818 <tcp_timewait_input+0xdc>)
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e786:	6879      	ldr	r1, [r7, #4]
 800e788:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e78a:	440b      	add	r3, r1
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	dc23      	bgt.n	800e7da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e792:	4b22      	ldr	r3, [pc, #136]	; (800e81c <tcp_timewait_input+0xe0>)
 800e794:	6819      	ldr	r1, [r3, #0]
 800e796:	4b22      	ldr	r3, [pc, #136]	; (800e820 <tcp_timewait_input+0xe4>)
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	4b1e      	ldr	r3, [pc, #120]	; (800e818 <tcp_timewait_input+0xdc>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7a2:	4b20      	ldr	r3, [pc, #128]	; (800e824 <tcp_timewait_input+0xe8>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7a6:	885b      	ldrh	r3, [r3, #2]
 800e7a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7aa:	4a1e      	ldr	r2, [pc, #120]	; (800e824 <tcp_timewait_input+0xe8>)
 800e7ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ae:	8812      	ldrh	r2, [r2, #0]
 800e7b0:	b292      	uxth	r2, r2
 800e7b2:	9202      	str	r2, [sp, #8]
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	4b1c      	ldr	r3, [pc, #112]	; (800e828 <tcp_timewait_input+0xec>)
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	4b1c      	ldr	r3, [pc, #112]	; (800e82c <tcp_timewait_input+0xf0>)
 800e7bc:	4602      	mov	r2, r0
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f003 fada 	bl	8011d78 <tcp_rst>
      return;
 800e7c4:	e01c      	b.n	800e800 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800e7c6:	4b10      	ldr	r3, [pc, #64]	; (800e808 <tcp_timewait_input+0xcc>)
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	f003 0301 	and.w	r3, r3, #1
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d003      	beq.n	800e7da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e7d2:	4b17      	ldr	r3, [pc, #92]	; (800e830 <tcp_timewait_input+0xf4>)
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e7da:	4b11      	ldr	r3, [pc, #68]	; (800e820 <tcp_timewait_input+0xe4>)
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00d      	beq.n	800e7fe <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	8b5b      	ldrh	r3, [r3, #26]
 800e7e6:	f043 0302 	orr.w	r3, r3, #2
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f002 fcfd 	bl	80111f0 <tcp_output>
  }
  return;
 800e7f6:	bf00      	nop
 800e7f8:	e001      	b.n	800e7fe <tcp_timewait_input+0xc2>
    return;
 800e7fa:	bf00      	nop
 800e7fc:	e000      	b.n	800e800 <tcp_timewait_input+0xc4>
  return;
 800e7fe:	bf00      	nop
}
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	200084cc 	.word	0x200084cc
 800e80c:	0801a120 	.word	0x0801a120
 800e810:	0801a338 	.word	0x0801a338
 800e814:	0801a16c 	.word	0x0801a16c
 800e818:	200084c0 	.word	0x200084c0
 800e81c:	200084c4 	.word	0x200084c4
 800e820:	200084ca 	.word	0x200084ca
 800e824:	200084b0 	.word	0x200084b0
 800e828:	2000bc08 	.word	0x2000bc08
 800e82c:	2000bc0c 	.word	0x2000bc0c
 800e830:	2000f330 	.word	0x2000f330

0800e834 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e834:	b590      	push	{r4, r7, lr}
 800e836:	b08d      	sub	sp, #52	; 0x34
 800e838:	af04      	add	r7, sp, #16
 800e83a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e83c:	2300      	movs	r3, #0
 800e83e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e840:	2300      	movs	r3, #0
 800e842:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d106      	bne.n	800e858 <tcp_process+0x24>
 800e84a:	4ba5      	ldr	r3, [pc, #660]	; (800eae0 <tcp_process+0x2ac>)
 800e84c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e850:	49a4      	ldr	r1, [pc, #656]	; (800eae4 <tcp_process+0x2b0>)
 800e852:	48a5      	ldr	r0, [pc, #660]	; (800eae8 <tcp_process+0x2b4>)
 800e854:	f008 fe38 	bl	80174c8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e858:	4ba4      	ldr	r3, [pc, #656]	; (800eaec <tcp_process+0x2b8>)
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	f003 0304 	and.w	r3, r3, #4
 800e860:	2b00      	cmp	r3, #0
 800e862:	d04e      	beq.n	800e902 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	7d1b      	ldrb	r3, [r3, #20]
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d108      	bne.n	800e87e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e870:	4b9f      	ldr	r3, [pc, #636]	; (800eaf0 <tcp_process+0x2bc>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	429a      	cmp	r2, r3
 800e876:	d123      	bne.n	800e8c0 <tcp_process+0x8c>
        acceptable = 1;
 800e878:	2301      	movs	r3, #1
 800e87a:	76fb      	strb	r3, [r7, #27]
 800e87c:	e020      	b.n	800e8c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e882:	4b9c      	ldr	r3, [pc, #624]	; (800eaf4 <tcp_process+0x2c0>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	429a      	cmp	r2, r3
 800e888:	d102      	bne.n	800e890 <tcp_process+0x5c>
        acceptable = 1;
 800e88a:	2301      	movs	r3, #1
 800e88c:	76fb      	strb	r3, [r7, #27]
 800e88e:	e017      	b.n	800e8c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e890:	4b98      	ldr	r3, [pc, #608]	; (800eaf4 <tcp_process+0x2c0>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	db10      	blt.n	800e8c0 <tcp_process+0x8c>
 800e89e:	4b95      	ldr	r3, [pc, #596]	; (800eaf4 <tcp_process+0x2c0>)
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8aa:	440b      	add	r3, r1
 800e8ac:	1ad3      	subs	r3, r2, r3
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	dc06      	bgt.n	800e8c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	8b5b      	ldrh	r3, [r3, #26]
 800e8b6:	f043 0302 	orr.w	r3, r3, #2
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e8c0:	7efb      	ldrb	r3, [r7, #27]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d01b      	beq.n	800e8fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <tcp_process+0xa8>
 800e8ce:	4b84      	ldr	r3, [pc, #528]	; (800eae0 <tcp_process+0x2ac>)
 800e8d0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e8d4:	4988      	ldr	r1, [pc, #544]	; (800eaf8 <tcp_process+0x2c4>)
 800e8d6:	4884      	ldr	r0, [pc, #528]	; (800eae8 <tcp_process+0x2b4>)
 800e8d8:	f008 fdf6 	bl	80174c8 <iprintf>
      recv_flags |= TF_RESET;
 800e8dc:	4b87      	ldr	r3, [pc, #540]	; (800eafc <tcp_process+0x2c8>)
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	f043 0308 	orr.w	r3, r3, #8
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	4b85      	ldr	r3, [pc, #532]	; (800eafc <tcp_process+0x2c8>)
 800e8e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	8b5b      	ldrh	r3, [r3, #26]
 800e8ee:	f023 0301 	bic.w	r3, r3, #1
 800e8f2:	b29a      	uxth	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e8f8:	f06f 030d 	mvn.w	r3, #13
 800e8fc:	e37a      	b.n	800eff4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e8fe:	2300      	movs	r3, #0
 800e900:	e378      	b.n	800eff4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e902:	4b7a      	ldr	r3, [pc, #488]	; (800eaec <tcp_process+0x2b8>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	f003 0302 	and.w	r3, r3, #2
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d010      	beq.n	800e930 <tcp_process+0xfc>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	7d1b      	ldrb	r3, [r3, #20]
 800e912:	2b02      	cmp	r3, #2
 800e914:	d00c      	beq.n	800e930 <tcp_process+0xfc>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	7d1b      	ldrb	r3, [r3, #20]
 800e91a:	2b03      	cmp	r3, #3
 800e91c:	d008      	beq.n	800e930 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8b5b      	ldrh	r3, [r3, #26]
 800e922:	f043 0302 	orr.w	r3, r3, #2
 800e926:	b29a      	uxth	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e92c:	2300      	movs	r3, #0
 800e92e:	e361      	b.n	800eff4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	8b5b      	ldrh	r3, [r3, #26]
 800e934:	f003 0310 	and.w	r3, r3, #16
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d103      	bne.n	800e944 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e93c:	4b70      	ldr	r3, [pc, #448]	; (800eb00 <tcp_process+0x2cc>)
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f001 fc2d 	bl	80101b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	7d1b      	ldrb	r3, [r3, #20]
 800e95e:	3b02      	subs	r3, #2
 800e960:	2b07      	cmp	r3, #7
 800e962:	f200 8337 	bhi.w	800efd4 <tcp_process+0x7a0>
 800e966:	a201      	add	r2, pc, #4	; (adr r2, 800e96c <tcp_process+0x138>)
 800e968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e96c:	0800e98d 	.word	0x0800e98d
 800e970:	0800ebbd 	.word	0x0800ebbd
 800e974:	0800ed35 	.word	0x0800ed35
 800e978:	0800ed5f 	.word	0x0800ed5f
 800e97c:	0800ee83 	.word	0x0800ee83
 800e980:	0800ed35 	.word	0x0800ed35
 800e984:	0800ef0f 	.word	0x0800ef0f
 800e988:	0800ef9f 	.word	0x0800ef9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e98c:	4b57      	ldr	r3, [pc, #348]	; (800eaec <tcp_process+0x2b8>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	f003 0310 	and.w	r3, r3, #16
 800e994:	2b00      	cmp	r3, #0
 800e996:	f000 80e4 	beq.w	800eb62 <tcp_process+0x32e>
 800e99a:	4b54      	ldr	r3, [pc, #336]	; (800eaec <tcp_process+0x2b8>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	f003 0302 	and.w	r3, r3, #2
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f000 80dd 	beq.w	800eb62 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ac:	1c5a      	adds	r2, r3, #1
 800e9ae:	4b50      	ldr	r3, [pc, #320]	; (800eaf0 <tcp_process+0x2bc>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	f040 80d5 	bne.w	800eb62 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e9b8:	4b4e      	ldr	r3, [pc, #312]	; (800eaf4 <tcp_process+0x2c0>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	1c5a      	adds	r2, r3, #1
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e9ca:	4b49      	ldr	r3, [pc, #292]	; (800eaf0 <tcp_process+0x2bc>)
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e9d2:	4b4c      	ldr	r3, [pc, #304]	; (800eb04 <tcp_process+0x2d0>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	89db      	ldrh	r3, [r3, #14]
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e9ec:	4b41      	ldr	r3, [pc, #260]	; (800eaf4 <tcp_process+0x2c0>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	1e5a      	subs	r2, r3, #1
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2204      	movs	r2, #4
 800e9fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	3304      	adds	r3, #4
 800ea04:	4618      	mov	r0, r3
 800ea06:	f007 f939 	bl	8015c7c <ip4_route>
 800ea0a:	4601      	mov	r1, r0
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3304      	adds	r3, #4
 800ea10:	461a      	mov	r2, r3
 800ea12:	4620      	mov	r0, r4
 800ea14:	f7ff f88e 	bl	800db34 <tcp_eff_send_mss_netif>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea24:	009a      	lsls	r2, r3, #2
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea2a:	005b      	lsls	r3, r3, #1
 800ea2c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ea30:	428b      	cmp	r3, r1
 800ea32:	bf38      	it	cc
 800ea34:	460b      	movcc	r3, r1
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d204      	bcs.n	800ea44 <tcp_process+0x210>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	e00d      	b.n	800ea60 <tcp_process+0x22c>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d904      	bls.n	800ea5c <tcp_process+0x228>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	e001      	b.n	800ea60 <tcp_process+0x22c>
 800ea5c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d106      	bne.n	800ea7e <tcp_process+0x24a>
 800ea70:	4b1b      	ldr	r3, [pc, #108]	; (800eae0 <tcp_process+0x2ac>)
 800ea72:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ea76:	4924      	ldr	r1, [pc, #144]	; (800eb08 <tcp_process+0x2d4>)
 800ea78:	481b      	ldr	r0, [pc, #108]	; (800eae8 <tcp_process+0x2b4>)
 800ea7a:	f008 fd25 	bl	80174c8 <iprintf>
        --pcb->snd_queuelen;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea84:	3b01      	subs	r3, #1
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea92:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d111      	bne.n	800eabe <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea9e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <tcp_process+0x280>
 800eaa6:	4b0e      	ldr	r3, [pc, #56]	; (800eae0 <tcp_process+0x2ac>)
 800eaa8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eaac:	4917      	ldr	r1, [pc, #92]	; (800eb0c <tcp_process+0x2d8>)
 800eaae:	480e      	ldr	r0, [pc, #56]	; (800eae8 <tcp_process+0x2b4>)
 800eab0:	f008 fd0a 	bl	80174c8 <iprintf>
          pcb->unsent = rseg->next;
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	66da      	str	r2, [r3, #108]	; 0x6c
 800eabc:	e003      	b.n	800eac6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eac6:	69f8      	ldr	r0, [r7, #28]
 800eac8:	f7fe fc70 	bl	800d3ac <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d11d      	bne.n	800eb10 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eada:	861a      	strh	r2, [r3, #48]	; 0x30
 800eadc:	e01f      	b.n	800eb1e <tcp_process+0x2ea>
 800eade:	bf00      	nop
 800eae0:	0801a120 	.word	0x0801a120
 800eae4:	0801a358 	.word	0x0801a358
 800eae8:	0801a16c 	.word	0x0801a16c
 800eaec:	200084cc 	.word	0x200084cc
 800eaf0:	200084c4 	.word	0x200084c4
 800eaf4:	200084c0 	.word	0x200084c0
 800eaf8:	0801a374 	.word	0x0801a374
 800eafc:	200084cd 	.word	0x200084cd
 800eb00:	2000f330 	.word	0x2000f330
 800eb04:	200084b0 	.word	0x200084b0
 800eb08:	0801a394 	.word	0x0801a394
 800eb0c:	0801a3ac 	.word	0x0801a3ac
        } else {
          pcb->rtime = 0;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00a      	beq.n	800eb3e <tcp_process+0x30a>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	6910      	ldr	r0, [r2, #16]
 800eb32:	2200      	movs	r2, #0
 800eb34:	6879      	ldr	r1, [r7, #4]
 800eb36:	4798      	blx	r3
 800eb38:	4603      	mov	r3, r0
 800eb3a:	76bb      	strb	r3, [r7, #26]
 800eb3c:	e001      	b.n	800eb42 <tcp_process+0x30e>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800eb42:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb46:	f113 0f0d 	cmn.w	r3, #13
 800eb4a:	d102      	bne.n	800eb52 <tcp_process+0x31e>
          return ERR_ABRT;
 800eb4c:	f06f 030c 	mvn.w	r3, #12
 800eb50:	e250      	b.n	800eff4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	8b5b      	ldrh	r3, [r3, #26]
 800eb56:	f043 0302 	orr.w	r3, r3, #2
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800eb60:	e23a      	b.n	800efd8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800eb62:	4b9d      	ldr	r3, [pc, #628]	; (800edd8 <tcp_process+0x5a4>)
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	f003 0310 	and.w	r3, r3, #16
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f000 8234 	beq.w	800efd8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb70:	4b9a      	ldr	r3, [pc, #616]	; (800eddc <tcp_process+0x5a8>)
 800eb72:	6819      	ldr	r1, [r3, #0]
 800eb74:	4b9a      	ldr	r3, [pc, #616]	; (800ede0 <tcp_process+0x5ac>)
 800eb76:	881b      	ldrh	r3, [r3, #0]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	4b9a      	ldr	r3, [pc, #616]	; (800ede4 <tcp_process+0x5b0>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb80:	4b99      	ldr	r3, [pc, #612]	; (800ede8 <tcp_process+0x5b4>)
 800eb82:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb84:	885b      	ldrh	r3, [r3, #2]
 800eb86:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb88:	4a97      	ldr	r2, [pc, #604]	; (800ede8 <tcp_process+0x5b4>)
 800eb8a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb8c:	8812      	ldrh	r2, [r2, #0]
 800eb8e:	b292      	uxth	r2, r2
 800eb90:	9202      	str	r2, [sp, #8]
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	4b95      	ldr	r3, [pc, #596]	; (800edec <tcp_process+0x5b8>)
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	4b95      	ldr	r3, [pc, #596]	; (800edf0 <tcp_process+0x5bc>)
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f003 f8eb 	bl	8011d78 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eba8:	2b05      	cmp	r3, #5
 800ebaa:	f200 8215 	bhi.w	800efd8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f002 feab 	bl	8011910 <tcp_rexmit_rto>
      break;
 800ebba:	e20d      	b.n	800efd8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ebbc:	4b86      	ldr	r3, [pc, #536]	; (800edd8 <tcp_process+0x5a4>)
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	f003 0310 	and.w	r3, r3, #16
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f000 80a1 	beq.w	800ed0c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebca:	4b84      	ldr	r3, [pc, #528]	; (800eddc <tcp_process+0x5a8>)
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	db7e      	blt.n	800ecd8 <tcp_process+0x4a4>
 800ebda:	4b80      	ldr	r3, [pc, #512]	; (800eddc <tcp_process+0x5a8>)
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	dc77      	bgt.n	800ecd8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2204      	movs	r2, #4
 800ebec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d102      	bne.n	800ebfc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ebf6:	23fa      	movs	r3, #250	; 0xfa
 800ebf8:	76bb      	strb	r3, [r7, #26]
 800ebfa:	e01d      	b.n	800ec38 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec00:	699b      	ldr	r3, [r3, #24]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d106      	bne.n	800ec14 <tcp_process+0x3e0>
 800ec06:	4b7b      	ldr	r3, [pc, #492]	; (800edf4 <tcp_process+0x5c0>)
 800ec08:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ec0c:	497a      	ldr	r1, [pc, #488]	; (800edf8 <tcp_process+0x5c4>)
 800ec0e:	487b      	ldr	r0, [pc, #492]	; (800edfc <tcp_process+0x5c8>)
 800ec10:	f008 fc5a 	bl	80174c8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec18:	699b      	ldr	r3, [r3, #24]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00a      	beq.n	800ec34 <tcp_process+0x400>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec22:	699b      	ldr	r3, [r3, #24]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	6910      	ldr	r0, [r2, #16]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	6879      	ldr	r1, [r7, #4]
 800ec2c:	4798      	blx	r3
 800ec2e:	4603      	mov	r3, r0
 800ec30:	76bb      	strb	r3, [r7, #26]
 800ec32:	e001      	b.n	800ec38 <tcp_process+0x404>
 800ec34:	23f0      	movs	r3, #240	; 0xf0
 800ec36:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ec38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00a      	beq.n	800ec56 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ec40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec44:	f113 0f0d 	cmn.w	r3, #13
 800ec48:	d002      	beq.n	800ec50 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f7fd fd1e 	bl	800c68c <tcp_abort>
            }
            return ERR_ABRT;
 800ec50:	f06f 030c 	mvn.w	r3, #12
 800ec54:	e1ce      	b.n	800eff4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 fae0 	bl	800f21c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ec5c:	4b68      	ldr	r3, [pc, #416]	; (800ee00 <tcp_process+0x5cc>)
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d005      	beq.n	800ec70 <tcp_process+0x43c>
            recv_acked--;
 800ec64:	4b66      	ldr	r3, [pc, #408]	; (800ee00 <tcp_process+0x5cc>)
 800ec66:	881b      	ldrh	r3, [r3, #0]
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	4b64      	ldr	r3, [pc, #400]	; (800ee00 <tcp_process+0x5cc>)
 800ec6e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec74:	009a      	lsls	r2, r3, #2
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec7a:	005b      	lsls	r3, r3, #1
 800ec7c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ec80:	428b      	cmp	r3, r1
 800ec82:	bf38      	it	cc
 800ec84:	460b      	movcc	r3, r1
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d204      	bcs.n	800ec94 <tcp_process+0x460>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	e00d      	b.n	800ecb0 <tcp_process+0x47c>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d904      	bls.n	800ecac <tcp_process+0x478>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	e001      	b.n	800ecb0 <tcp_process+0x47c>
 800ecac:	f241 131c 	movw	r3, #4380	; 0x111c
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ecb6:	4b53      	ldr	r3, [pc, #332]	; (800ee04 <tcp_process+0x5d0>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	f003 0320 	and.w	r3, r3, #32
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d037      	beq.n	800ed32 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	8b5b      	ldrh	r3, [r3, #26]
 800ecc6:	f043 0302 	orr.w	r3, r3, #2
 800ecca:	b29a      	uxth	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2207      	movs	r2, #7
 800ecd4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ecd6:	e02c      	b.n	800ed32 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd8:	4b40      	ldr	r3, [pc, #256]	; (800eddc <tcp_process+0x5a8>)
 800ecda:	6819      	ldr	r1, [r3, #0]
 800ecdc:	4b40      	ldr	r3, [pc, #256]	; (800ede0 <tcp_process+0x5ac>)
 800ecde:	881b      	ldrh	r3, [r3, #0]
 800ece0:	461a      	mov	r2, r3
 800ece2:	4b40      	ldr	r3, [pc, #256]	; (800ede4 <tcp_process+0x5b0>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ece8:	4b3f      	ldr	r3, [pc, #252]	; (800ede8 <tcp_process+0x5b4>)
 800ecea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecec:	885b      	ldrh	r3, [r3, #2]
 800ecee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecf0:	4a3d      	ldr	r2, [pc, #244]	; (800ede8 <tcp_process+0x5b4>)
 800ecf2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecf4:	8812      	ldrh	r2, [r2, #0]
 800ecf6:	b292      	uxth	r2, r2
 800ecf8:	9202      	str	r2, [sp, #8]
 800ecfa:	9301      	str	r3, [sp, #4]
 800ecfc:	4b3b      	ldr	r3, [pc, #236]	; (800edec <tcp_process+0x5b8>)
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	4b3b      	ldr	r3, [pc, #236]	; (800edf0 <tcp_process+0x5bc>)
 800ed02:	4602      	mov	r2, r0
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f003 f837 	bl	8011d78 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ed0a:	e167      	b.n	800efdc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ed0c:	4b32      	ldr	r3, [pc, #200]	; (800edd8 <tcp_process+0x5a4>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	f003 0302 	and.w	r3, r3, #2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 8161 	beq.w	800efdc <tcp_process+0x7a8>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1e:	1e5a      	subs	r2, r3, #1
 800ed20:	4b30      	ldr	r3, [pc, #192]	; (800ede4 <tcp_process+0x5b0>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	f040 8159 	bne.w	800efdc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f002 fe12 	bl	8011954 <tcp_rexmit>
      break;
 800ed30:	e154      	b.n	800efdc <tcp_process+0x7a8>
 800ed32:	e153      	b.n	800efdc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 fa71 	bl	800f21c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ed3a:	4b32      	ldr	r3, [pc, #200]	; (800ee04 <tcp_process+0x5d0>)
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	f003 0320 	and.w	r3, r3, #32
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f000 814c 	beq.w	800efe0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	8b5b      	ldrh	r3, [r3, #26]
 800ed4c:	f043 0302 	orr.w	r3, r3, #2
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2207      	movs	r2, #7
 800ed5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed5c:	e140      	b.n	800efe0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 fa5c 	bl	800f21c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ed64:	4b27      	ldr	r3, [pc, #156]	; (800ee04 <tcp_process+0x5d0>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	f003 0320 	and.w	r3, r3, #32
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d071      	beq.n	800ee54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed70:	4b19      	ldr	r3, [pc, #100]	; (800edd8 <tcp_process+0x5a4>)
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	f003 0310 	and.w	r3, r3, #16
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d060      	beq.n	800ee3e <tcp_process+0x60a>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed80:	4b16      	ldr	r3, [pc, #88]	; (800eddc <tcp_process+0x5a8>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d15a      	bne.n	800ee3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d156      	bne.n	800ee3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	8b5b      	ldrh	r3, [r3, #26]
 800ed94:	f043 0302 	orr.w	r3, r3, #2
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7fe fdbe 	bl	800d920 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eda4:	4b18      	ldr	r3, [pc, #96]	; (800ee08 <tcp_process+0x5d4>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d105      	bne.n	800edba <tcp_process+0x586>
 800edae:	4b16      	ldr	r3, [pc, #88]	; (800ee08 <tcp_process+0x5d4>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	4a14      	ldr	r2, [pc, #80]	; (800ee08 <tcp_process+0x5d4>)
 800edb6:	6013      	str	r3, [r2, #0]
 800edb8:	e02e      	b.n	800ee18 <tcp_process+0x5e4>
 800edba:	4b13      	ldr	r3, [pc, #76]	; (800ee08 <tcp_process+0x5d4>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	617b      	str	r3, [r7, #20]
 800edc0:	e027      	b.n	800ee12 <tcp_process+0x5de>
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d11f      	bne.n	800ee0c <tcp_process+0x5d8>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	68da      	ldr	r2, [r3, #12]
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	60da      	str	r2, [r3, #12]
 800edd4:	e020      	b.n	800ee18 <tcp_process+0x5e4>
 800edd6:	bf00      	nop
 800edd8:	200084cc 	.word	0x200084cc
 800eddc:	200084c4 	.word	0x200084c4
 800ede0:	200084ca 	.word	0x200084ca
 800ede4:	200084c0 	.word	0x200084c0
 800ede8:	200084b0 	.word	0x200084b0
 800edec:	2000bc08 	.word	0x2000bc08
 800edf0:	2000bc0c 	.word	0x2000bc0c
 800edf4:	0801a120 	.word	0x0801a120
 800edf8:	0801a3c0 	.word	0x0801a3c0
 800edfc:	0801a16c 	.word	0x0801a16c
 800ee00:	200084c8 	.word	0x200084c8
 800ee04:	200084cd 	.word	0x200084cd
 800ee08:	2000f32c 	.word	0x2000f32c
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	617b      	str	r3, [r7, #20]
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d1d4      	bne.n	800edc2 <tcp_process+0x58e>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	60da      	str	r2, [r3, #12]
 800ee1e:	4b77      	ldr	r3, [pc, #476]	; (800effc <tcp_process+0x7c8>)
 800ee20:	2201      	movs	r2, #1
 800ee22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	220a      	movs	r2, #10
 800ee28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ee2a:	4b75      	ldr	r3, [pc, #468]	; (800f000 <tcp_process+0x7cc>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	60da      	str	r2, [r3, #12]
 800ee32:	4a73      	ldr	r2, [pc, #460]	; (800f000 <tcp_process+0x7cc>)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6013      	str	r3, [r2, #0]
 800ee38:	f003 f960 	bl	80120fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ee3c:	e0d2      	b.n	800efe4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	8b5b      	ldrh	r3, [r3, #26]
 800ee42:	f043 0302 	orr.w	r3, r3, #2
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2208      	movs	r2, #8
 800ee50:	751a      	strb	r2, [r3, #20]
      break;
 800ee52:	e0c7      	b.n	800efe4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee54:	4b6b      	ldr	r3, [pc, #428]	; (800f004 <tcp_process+0x7d0>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	f003 0310 	and.w	r3, r3, #16
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f000 80c1 	beq.w	800efe4 <tcp_process+0x7b0>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee66:	4b68      	ldr	r3, [pc, #416]	; (800f008 <tcp_process+0x7d4>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	f040 80ba 	bne.w	800efe4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f040 80b5 	bne.w	800efe4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2206      	movs	r2, #6
 800ee7e:	751a      	strb	r2, [r3, #20]
      break;
 800ee80:	e0b0      	b.n	800efe4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f9ca 	bl	800f21c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ee88:	4b60      	ldr	r3, [pc, #384]	; (800f00c <tcp_process+0x7d8>)
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 0320 	and.w	r3, r3, #32
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f000 80a9 	beq.w	800efe8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	8b5b      	ldrh	r3, [r3, #26]
 800ee9a:	f043 0302 	orr.w	r3, r3, #2
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7fe fd3b 	bl	800d920 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eeaa:	4b59      	ldr	r3, [pc, #356]	; (800f010 <tcp_process+0x7dc>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d105      	bne.n	800eec0 <tcp_process+0x68c>
 800eeb4:	4b56      	ldr	r3, [pc, #344]	; (800f010 <tcp_process+0x7dc>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	4a55      	ldr	r2, [pc, #340]	; (800f010 <tcp_process+0x7dc>)
 800eebc:	6013      	str	r3, [r2, #0]
 800eebe:	e013      	b.n	800eee8 <tcp_process+0x6b4>
 800eec0:	4b53      	ldr	r3, [pc, #332]	; (800f010 <tcp_process+0x7dc>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	613b      	str	r3, [r7, #16]
 800eec6:	e00c      	b.n	800eee2 <tcp_process+0x6ae>
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d104      	bne.n	800eedc <tcp_process+0x6a8>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	68da      	ldr	r2, [r3, #12]
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	60da      	str	r2, [r3, #12]
 800eeda:	e005      	b.n	800eee8 <tcp_process+0x6b4>
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	613b      	str	r3, [r7, #16]
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1ef      	bne.n	800eec8 <tcp_process+0x694>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	60da      	str	r2, [r3, #12]
 800eeee:	4b43      	ldr	r3, [pc, #268]	; (800effc <tcp_process+0x7c8>)
 800eef0:	2201      	movs	r2, #1
 800eef2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	220a      	movs	r2, #10
 800eef8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eefa:	4b41      	ldr	r3, [pc, #260]	; (800f000 <tcp_process+0x7cc>)
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	60da      	str	r2, [r3, #12]
 800ef02:	4a3f      	ldr	r2, [pc, #252]	; (800f000 <tcp_process+0x7cc>)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	f003 f8f8 	bl	80120fc <tcp_timer_needed>
      }
      break;
 800ef0c:	e06c      	b.n	800efe8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 f984 	bl	800f21c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ef14:	4b3b      	ldr	r3, [pc, #236]	; (800f004 <tcp_process+0x7d0>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	f003 0310 	and.w	r3, r3, #16
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d065      	beq.n	800efec <tcp_process+0x7b8>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef24:	4b38      	ldr	r3, [pc, #224]	; (800f008 <tcp_process+0x7d4>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d15f      	bne.n	800efec <tcp_process+0x7b8>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d15b      	bne.n	800efec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7fe fcf3 	bl	800d920 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef3a:	4b35      	ldr	r3, [pc, #212]	; (800f010 <tcp_process+0x7dc>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d105      	bne.n	800ef50 <tcp_process+0x71c>
 800ef44:	4b32      	ldr	r3, [pc, #200]	; (800f010 <tcp_process+0x7dc>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	4a31      	ldr	r2, [pc, #196]	; (800f010 <tcp_process+0x7dc>)
 800ef4c:	6013      	str	r3, [r2, #0]
 800ef4e:	e013      	b.n	800ef78 <tcp_process+0x744>
 800ef50:	4b2f      	ldr	r3, [pc, #188]	; (800f010 <tcp_process+0x7dc>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	60fb      	str	r3, [r7, #12]
 800ef56:	e00c      	b.n	800ef72 <tcp_process+0x73e>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d104      	bne.n	800ef6c <tcp_process+0x738>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	68da      	ldr	r2, [r3, #12]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	60da      	str	r2, [r3, #12]
 800ef6a:	e005      	b.n	800ef78 <tcp_process+0x744>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	60fb      	str	r3, [r7, #12]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1ef      	bne.n	800ef58 <tcp_process+0x724>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	60da      	str	r2, [r3, #12]
 800ef7e:	4b1f      	ldr	r3, [pc, #124]	; (800effc <tcp_process+0x7c8>)
 800ef80:	2201      	movs	r2, #1
 800ef82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	220a      	movs	r2, #10
 800ef88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef8a:	4b1d      	ldr	r3, [pc, #116]	; (800f000 <tcp_process+0x7cc>)
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	60da      	str	r2, [r3, #12]
 800ef92:	4a1b      	ldr	r2, [pc, #108]	; (800f000 <tcp_process+0x7cc>)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6013      	str	r3, [r2, #0]
 800ef98:	f003 f8b0 	bl	80120fc <tcp_timer_needed>
      }
      break;
 800ef9c:	e026      	b.n	800efec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 f93c 	bl	800f21c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800efa4:	4b17      	ldr	r3, [pc, #92]	; (800f004 <tcp_process+0x7d0>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	f003 0310 	and.w	r3, r3, #16
 800efac:	2b00      	cmp	r3, #0
 800efae:	d01f      	beq.n	800eff0 <tcp_process+0x7bc>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efb4:	4b14      	ldr	r3, [pc, #80]	; (800f008 <tcp_process+0x7d4>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d119      	bne.n	800eff0 <tcp_process+0x7bc>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d115      	bne.n	800eff0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800efc4:	4b11      	ldr	r3, [pc, #68]	; (800f00c <tcp_process+0x7d8>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	f043 0310 	orr.w	r3, r3, #16
 800efcc:	b2da      	uxtb	r2, r3
 800efce:	4b0f      	ldr	r3, [pc, #60]	; (800f00c <tcp_process+0x7d8>)
 800efd0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800efd2:	e00d      	b.n	800eff0 <tcp_process+0x7bc>
    default:
      break;
 800efd4:	bf00      	nop
 800efd6:	e00c      	b.n	800eff2 <tcp_process+0x7be>
      break;
 800efd8:	bf00      	nop
 800efda:	e00a      	b.n	800eff2 <tcp_process+0x7be>
      break;
 800efdc:	bf00      	nop
 800efde:	e008      	b.n	800eff2 <tcp_process+0x7be>
      break;
 800efe0:	bf00      	nop
 800efe2:	e006      	b.n	800eff2 <tcp_process+0x7be>
      break;
 800efe4:	bf00      	nop
 800efe6:	e004      	b.n	800eff2 <tcp_process+0x7be>
      break;
 800efe8:	bf00      	nop
 800efea:	e002      	b.n	800eff2 <tcp_process+0x7be>
      break;
 800efec:	bf00      	nop
 800efee:	e000      	b.n	800eff2 <tcp_process+0x7be>
      break;
 800eff0:	bf00      	nop
  }
  return ERR_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3724      	adds	r7, #36	; 0x24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd90      	pop	{r4, r7, pc}
 800effc:	2000f328 	.word	0x2000f328
 800f000:	2000f33c 	.word	0x2000f33c
 800f004:	200084cc 	.word	0x200084cc
 800f008:	200084c4 	.word	0x200084c4
 800f00c:	200084cd 	.word	0x200084cd
 800f010:	2000f32c 	.word	0x2000f32c

0800f014 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f014:	b590      	push	{r4, r7, lr}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d106      	bne.n	800f032 <tcp_oos_insert_segment+0x1e>
 800f024:	4b3b      	ldr	r3, [pc, #236]	; (800f114 <tcp_oos_insert_segment+0x100>)
 800f026:	f240 421f 	movw	r2, #1055	; 0x41f
 800f02a:	493b      	ldr	r1, [pc, #236]	; (800f118 <tcp_oos_insert_segment+0x104>)
 800f02c:	483b      	ldr	r0, [pc, #236]	; (800f11c <tcp_oos_insert_segment+0x108>)
 800f02e:	f008 fa4b 	bl	80174c8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	899b      	ldrh	r3, [r3, #12]
 800f038:	b29b      	uxth	r3, r3
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fb f97c 	bl	800a338 <lwip_htons>
 800f040:	4603      	mov	r3, r0
 800f042:	b2db      	uxtb	r3, r3
 800f044:	f003 0301 	and.w	r3, r3, #1
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d028      	beq.n	800f09e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f04c:	6838      	ldr	r0, [r7, #0]
 800f04e:	f7fe f999 	bl	800d384 <tcp_segs_free>
    next = NULL;
 800f052:	2300      	movs	r3, #0
 800f054:	603b      	str	r3, [r7, #0]
 800f056:	e056      	b.n	800f106 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	899b      	ldrh	r3, [r3, #12]
 800f05e:	b29b      	uxth	r3, r3
 800f060:	4618      	mov	r0, r3
 800f062:	f7fb f969 	bl	800a338 <lwip_htons>
 800f066:	4603      	mov	r3, r0
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	f003 0301 	and.w	r3, r3, #1
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00d      	beq.n	800f08e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	899b      	ldrh	r3, [r3, #12]
 800f078:	b29c      	uxth	r4, r3
 800f07a:	2001      	movs	r0, #1
 800f07c:	f7fb f95c 	bl	800a338 <lwip_htons>
 800f080:	4603      	mov	r3, r0
 800f082:	461a      	mov	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	4322      	orrs	r2, r4
 800f08a:	b292      	uxth	r2, r2
 800f08c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f7fe f987 	bl	800d3ac <tcp_seg_free>
    while (next &&
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d00e      	beq.n	800f0c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	891b      	ldrh	r3, [r3, #8]
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	4b1d      	ldr	r3, [pc, #116]	; (800f120 <tcp_oos_insert_segment+0x10c>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	441a      	add	r2, r3
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	6839      	ldr	r1, [r7, #0]
 800f0b8:	8909      	ldrh	r1, [r1, #8]
 800f0ba:	440b      	add	r3, r1
 800f0bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	daca      	bge.n	800f058 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d01e      	beq.n	800f106 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	891b      	ldrh	r3, [r3, #8]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	4b14      	ldr	r3, [pc, #80]	; (800f120 <tcp_oos_insert_segment+0x10c>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	441a      	add	r2, r3
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	dd12      	ble.n	800f106 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	4b0d      	ldr	r3, [pc, #52]	; (800f120 <tcp_oos_insert_segment+0x10c>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	685a      	ldr	r2, [r3, #4]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	891b      	ldrh	r3, [r3, #8]
 800f0fe:	4619      	mov	r1, r3
 800f100:	4610      	mov	r0, r2
 800f102:	f7fc fb47 	bl	800b794 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	601a      	str	r2, [r3, #0]
}
 800f10c:	bf00      	nop
 800f10e:	3714      	adds	r7, #20
 800f110:	46bd      	mov	sp, r7
 800f112:	bd90      	pop	{r4, r7, pc}
 800f114:	0801a120 	.word	0x0801a120
 800f118:	0801a3e0 	.word	0x0801a3e0
 800f11c:	0801a16c 	.word	0x0801a16c
 800f120:	200084c0 	.word	0x200084c0

0800f124 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f124:	b5b0      	push	{r4, r5, r7, lr}
 800f126:	b086      	sub	sp, #24
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f132:	e03e      	b.n	800f1b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	4618      	mov	r0, r3
 800f144:	f7fc fd3a 	bl	800bbbc <pbuf_clen>
 800f148:	4603      	mov	r3, r0
 800f14a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f152:	8a7a      	ldrh	r2, [r7, #18]
 800f154:	429a      	cmp	r2, r3
 800f156:	d906      	bls.n	800f166 <tcp_free_acked_segments+0x42>
 800f158:	4b2a      	ldr	r3, [pc, #168]	; (800f204 <tcp_free_acked_segments+0xe0>)
 800f15a:	f240 4257 	movw	r2, #1111	; 0x457
 800f15e:	492a      	ldr	r1, [pc, #168]	; (800f208 <tcp_free_acked_segments+0xe4>)
 800f160:	482a      	ldr	r0, [pc, #168]	; (800f20c <tcp_free_acked_segments+0xe8>)
 800f162:	f008 f9b1 	bl	80174c8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f16c:	8a7b      	ldrh	r3, [r7, #18]
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	b29a      	uxth	r2, r3
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	891a      	ldrh	r2, [r3, #8]
 800f17c:	4b24      	ldr	r3, [pc, #144]	; (800f210 <tcp_free_acked_segments+0xec>)
 800f17e:	881b      	ldrh	r3, [r3, #0]
 800f180:	4413      	add	r3, r2
 800f182:	b29a      	uxth	r2, r3
 800f184:	4b22      	ldr	r3, [pc, #136]	; (800f210 <tcp_free_acked_segments+0xec>)
 800f186:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f188:	6978      	ldr	r0, [r7, #20]
 800f18a:	f7fe f90f 	bl	800d3ac <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f194:	2b00      	cmp	r3, #0
 800f196:	d00c      	beq.n	800f1b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d109      	bne.n	800f1b2 <tcp_free_acked_segments+0x8e>
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d106      	bne.n	800f1b2 <tcp_free_acked_segments+0x8e>
 800f1a4:	4b17      	ldr	r3, [pc, #92]	; (800f204 <tcp_free_acked_segments+0xe0>)
 800f1a6:	f240 4262 	movw	r2, #1122	; 0x462
 800f1aa:	491a      	ldr	r1, [pc, #104]	; (800f214 <tcp_free_acked_segments+0xf0>)
 800f1ac:	4817      	ldr	r0, [pc, #92]	; (800f20c <tcp_free_acked_segments+0xe8>)
 800f1ae:	f008 f98b 	bl	80174c8 <iprintf>
  while (seg_list != NULL &&
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d020      	beq.n	800f1fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fb f8cf 	bl	800a362 <lwip_htonl>
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	891b      	ldrh	r3, [r3, #8]
 800f1ca:	461d      	mov	r5, r3
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	899b      	ldrh	r3, [r3, #12]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fb f8af 	bl	800a338 <lwip_htons>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	f003 0303 	and.w	r3, r3, #3
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <tcp_free_acked_segments+0xc6>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e000      	b.n	800f1ec <tcp_free_acked_segments+0xc8>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	442b      	add	r3, r5
 800f1ee:	18e2      	adds	r2, r4, r3
 800f1f0:	4b09      	ldr	r3, [pc, #36]	; (800f218 <tcp_free_acked_segments+0xf4>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	dd9c      	ble.n	800f134 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f1fa:	68bb      	ldr	r3, [r7, #8]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3718      	adds	r7, #24
 800f200:	46bd      	mov	sp, r7
 800f202:	bdb0      	pop	{r4, r5, r7, pc}
 800f204:	0801a120 	.word	0x0801a120
 800f208:	0801a408 	.word	0x0801a408
 800f20c:	0801a16c 	.word	0x0801a16c
 800f210:	200084c8 	.word	0x200084c8
 800f214:	0801a430 	.word	0x0801a430
 800f218:	200084c4 	.word	0x200084c4

0800f21c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f21c:	b5b0      	push	{r4, r5, r7, lr}
 800f21e:	b094      	sub	sp, #80	; 0x50
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <tcp_receive+0x20>
 800f22e:	4ba6      	ldr	r3, [pc, #664]	; (800f4c8 <tcp_receive+0x2ac>)
 800f230:	f240 427b 	movw	r2, #1147	; 0x47b
 800f234:	49a5      	ldr	r1, [pc, #660]	; (800f4cc <tcp_receive+0x2b0>)
 800f236:	48a6      	ldr	r0, [pc, #664]	; (800f4d0 <tcp_receive+0x2b4>)
 800f238:	f008 f946 	bl	80174c8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
 800f240:	2b03      	cmp	r3, #3
 800f242:	d806      	bhi.n	800f252 <tcp_receive+0x36>
 800f244:	4ba0      	ldr	r3, [pc, #640]	; (800f4c8 <tcp_receive+0x2ac>)
 800f246:	f240 427c 	movw	r2, #1148	; 0x47c
 800f24a:	49a2      	ldr	r1, [pc, #648]	; (800f4d4 <tcp_receive+0x2b8>)
 800f24c:	48a0      	ldr	r0, [pc, #640]	; (800f4d0 <tcp_receive+0x2b4>)
 800f24e:	f008 f93b 	bl	80174c8 <iprintf>

  if (flags & TCP_ACK) {
 800f252:	4ba1      	ldr	r3, [pc, #644]	; (800f4d8 <tcp_receive+0x2bc>)
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	f003 0310 	and.w	r3, r3, #16
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	f000 8263 	beq.w	800f726 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f266:	461a      	mov	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f26c:	4413      	add	r3, r2
 800f26e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f274:	4b99      	ldr	r3, [pc, #612]	; (800f4dc <tcp_receive+0x2c0>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	1ad3      	subs	r3, r2, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	db1b      	blt.n	800f2b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f282:	4b96      	ldr	r3, [pc, #600]	; (800f4dc <tcp_receive+0x2c0>)
 800f284:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f286:	429a      	cmp	r2, r3
 800f288:	d106      	bne.n	800f298 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f28e:	4b94      	ldr	r3, [pc, #592]	; (800f4e0 <tcp_receive+0x2c4>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	db0e      	blt.n	800f2b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f29c:	4b90      	ldr	r3, [pc, #576]	; (800f4e0 <tcp_receive+0x2c4>)
 800f29e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d125      	bne.n	800f2f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2a4:	4b8f      	ldr	r3, [pc, #572]	; (800f4e4 <tcp_receive+0x2c8>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	89db      	ldrh	r3, [r3, #14]
 800f2aa:	b29a      	uxth	r2, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d91c      	bls.n	800f2f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f2b6:	4b8b      	ldr	r3, [pc, #556]	; (800f4e4 <tcp_receive+0x2c8>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	89db      	ldrh	r3, [r3, #14]
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d205      	bcs.n	800f2e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f2e0:	4b7e      	ldr	r3, [pc, #504]	; (800f4dc <tcp_receive+0x2c0>)
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f2e8:	4b7d      	ldr	r3, [pc, #500]	; (800f4e0 <tcp_receive+0x2c4>)
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f2f0:	4b7b      	ldr	r3, [pc, #492]	; (800f4e0 <tcp_receive+0x2c4>)
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2f8:	1ad3      	subs	r3, r2, r3
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	dc58      	bgt.n	800f3b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f2fe:	4b7a      	ldr	r3, [pc, #488]	; (800f4e8 <tcp_receive+0x2cc>)
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d14b      	bne.n	800f39e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f310:	4413      	add	r3, r2
 800f312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f314:	429a      	cmp	r2, r3
 800f316:	d142      	bne.n	800f39e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f31e:	2b00      	cmp	r3, #0
 800f320:	db3d      	blt.n	800f39e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f326:	4b6e      	ldr	r3, [pc, #440]	; (800f4e0 <tcp_receive+0x2c4>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d137      	bne.n	800f39e <tcp_receive+0x182>
              found_dupack = 1;
 800f32e:	2301      	movs	r3, #1
 800f330:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f338:	2bff      	cmp	r3, #255	; 0xff
 800f33a:	d007      	beq.n	800f34c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f342:	3301      	adds	r3, #1
 800f344:	b2da      	uxtb	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f352:	2b03      	cmp	r3, #3
 800f354:	d91b      	bls.n	800f38e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f360:	4413      	add	r3, r2
 800f362:	b29a      	uxth	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d30a      	bcc.n	800f384 <tcp_receive+0x168>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f378:	4413      	add	r3, r2
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f382:	e004      	b.n	800f38e <tcp_receive+0x172>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f38a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f394:	2b02      	cmp	r3, #2
 800f396:	d902      	bls.n	800f39e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f002 fb47 	bl	8011a2c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f040 8160 	bne.w	800f666 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f3ae:	e15a      	b.n	800f666 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3b0:	4b4b      	ldr	r3, [pc, #300]	; (800f4e0 <tcp_receive+0x2c4>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3b8:	1ad3      	subs	r3, r2, r3
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f2c0 814d 	blt.w	800f65c <tcp_receive+0x440>
 800f3c2:	4b47      	ldr	r3, [pc, #284]	; (800f4e0 <tcp_receive+0x2c4>)
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f300 8145 	bgt.w	800f65c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	8b5b      	ldrh	r3, [r3, #26]
 800f3d6:	f003 0304 	and.w	r3, r3, #4
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d010      	beq.n	800f400 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	8b5b      	ldrh	r3, [r3, #26]
 800f3e2:	f023 0304 	bic.w	r3, r3, #4
 800f3e6:	b29a      	uxth	r2, r3
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f40e:	10db      	asrs	r3, r3, #3
 800f410:	b21b      	sxth	r3, r3
 800f412:	b29a      	uxth	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	4413      	add	r3, r2
 800f41e:	b29b      	uxth	r3, r3
 800f420:	b21a      	sxth	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f428:	4b2d      	ldr	r3, [pc, #180]	; (800f4e0 <tcp_receive+0x2c4>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f432:	b29b      	uxth	r3, r3
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f440:	4b27      	ldr	r3, [pc, #156]	; (800f4e0 <tcp_receive+0x2c4>)
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	7d1b      	ldrb	r3, [r3, #20]
 800f44c:	2b03      	cmp	r3, #3
 800f44e:	f240 8096 	bls.w	800f57e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f45e:	429a      	cmp	r2, r3
 800f460:	d244      	bcs.n	800f4ec <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	8b5b      	ldrh	r3, [r3, #26]
 800f466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <tcp_receive+0x256>
 800f46e:	2301      	movs	r3, #1
 800f470:	e000      	b.n	800f474 <tcp_receive+0x258>
 800f472:	2302      	movs	r3, #2
 800f474:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f478:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f482:	fb12 f303 	smulbb	r3, r2, r3
 800f486:	b29b      	uxth	r3, r3
 800f488:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f48a:	4293      	cmp	r3, r2
 800f48c:	bf28      	it	cs
 800f48e:	4613      	movcs	r3, r2
 800f490:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f49a:	4413      	add	r3, r2
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d309      	bcc.n	800f4bc <tcp_receive+0x2a0>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4b0:	4413      	add	r3, r2
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4ba:	e060      	b.n	800f57e <tcp_receive+0x362>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4c6:	e05a      	b.n	800f57e <tcp_receive+0x362>
 800f4c8:	0801a120 	.word	0x0801a120
 800f4cc:	0801a450 	.word	0x0801a450
 800f4d0:	0801a16c 	.word	0x0801a16c
 800f4d4:	0801a46c 	.word	0x0801a46c
 800f4d8:	200084cc 	.word	0x200084cc
 800f4dc:	200084c0 	.word	0x200084c0
 800f4e0:	200084c4 	.word	0x200084c4
 800f4e4:	200084b0 	.word	0x200084b0
 800f4e8:	200084ca 	.word	0x200084ca
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f4f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4f4:	4413      	add	r3, r2
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d309      	bcc.n	800f516 <tcp_receive+0x2fa>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f50a:	4413      	add	r3, r2
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f514:	e004      	b.n	800f520 <tcp_receive+0x304>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f51c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d326      	bcc.n	800f57e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	b29a      	uxth	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f550:	4413      	add	r3, r2
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d30a      	bcc.n	800f574 <tcp_receive+0x358>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f568:	4413      	add	r3, r2
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f572:	e004      	b.n	800f57e <tcp_receive+0x362>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f57a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f586:	4a98      	ldr	r2, [pc, #608]	; (800f7e8 <tcp_receive+0x5cc>)
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7ff fdcb 	bl	800f124 <tcp_free_acked_segments>
 800f58e:	4602      	mov	r2, r0
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f59c:	4a93      	ldr	r2, [pc, #588]	; (800f7ec <tcp_receive+0x5d0>)
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7ff fdc0 	bl	800f124 <tcp_free_acked_segments>
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d104      	bne.n	800f5bc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5b8:	861a      	strh	r2, [r3, #48]	; 0x30
 800f5ba:	e002      	b.n	800f5c2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d103      	bne.n	800f5d8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f5de:	4b84      	ldr	r3, [pc, #528]	; (800f7f0 <tcp_receive+0x5d4>)
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	4413      	add	r3, r2
 800f5e4:	b29a      	uxth	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	8b5b      	ldrh	r3, [r3, #26]
 800f5f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d035      	beq.n	800f664 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d118      	bne.n	800f632 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00c      	beq.n	800f622 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	4618      	mov	r0, r3
 800f616:	f7fa fea4 	bl	800a362 <lwip_htonl>
 800f61a:	4603      	mov	r3, r0
 800f61c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f61e:	2b00      	cmp	r3, #0
 800f620:	dc20      	bgt.n	800f664 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	8b5b      	ldrh	r3, [r3, #26]
 800f626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f630:	e018      	b.n	800f664 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fa fe8f 	bl	800a362 <lwip_htonl>
 800f644:	4603      	mov	r3, r0
 800f646:	1ae3      	subs	r3, r4, r3
 800f648:	2b00      	cmp	r3, #0
 800f64a:	dc0b      	bgt.n	800f664 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	8b5b      	ldrh	r3, [r3, #26]
 800f650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f654:	b29a      	uxth	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f65a:	e003      	b.n	800f664 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f002 fbdd 	bl	8011e1c <tcp_send_empty_ack>
 800f662:	e000      	b.n	800f666 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f664:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d05b      	beq.n	800f726 <tcp_receive+0x50a>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f672:	4b60      	ldr	r3, [pc, #384]	; (800f7f4 <tcp_receive+0x5d8>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	1ad3      	subs	r3, r2, r3
 800f678:	2b00      	cmp	r3, #0
 800f67a:	da54      	bge.n	800f726 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f67c:	4b5e      	ldr	r3, [pc, #376]	; (800f7f8 <tcp_receive+0x5dc>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	b29a      	uxth	r2, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f686:	b29b      	uxth	r3, r3
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f690:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f69a:	10db      	asrs	r3, r3, #3
 800f69c:	b21b      	sxth	r3, r3
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6ae:	b29a      	uxth	r2, r3
 800f6b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6b4:	4413      	add	r3, r2
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	b21a      	sxth	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f6be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	da05      	bge.n	800f6d2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f6c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6ca:	425b      	negs	r3, r3
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f6d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f6dc:	109b      	asrs	r3, r3, #2
 800f6de:	b21b      	sxth	r3, r3
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6f6:	4413      	add	r3, r2
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	b21a      	sxth	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f706:	10db      	asrs	r3, r3, #3
 800f708:	b21b      	sxth	r3, r3
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f712:	b29b      	uxth	r3, r3
 800f714:	4413      	add	r3, r2
 800f716:	b29b      	uxth	r3, r3
 800f718:	b21a      	sxth	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f726:	4b35      	ldr	r3, [pc, #212]	; (800f7fc <tcp_receive+0x5e0>)
 800f728:	881b      	ldrh	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f000 84e1 	beq.w	80100f2 <tcp_receive+0xed6>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	7d1b      	ldrb	r3, [r3, #20]
 800f734:	2b06      	cmp	r3, #6
 800f736:	f200 84dc 	bhi.w	80100f2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f73e:	4b30      	ldr	r3, [pc, #192]	; (800f800 <tcp_receive+0x5e4>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	3b01      	subs	r3, #1
 800f746:	2b00      	cmp	r3, #0
 800f748:	f2c0 808e 	blt.w	800f868 <tcp_receive+0x64c>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f750:	4b2a      	ldr	r3, [pc, #168]	; (800f7fc <tcp_receive+0x5e0>)
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	4619      	mov	r1, r3
 800f756:	4b2a      	ldr	r3, [pc, #168]	; (800f800 <tcp_receive+0x5e4>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	440b      	add	r3, r1
 800f75c:	1ad3      	subs	r3, r2, r3
 800f75e:	3301      	adds	r3, #1
 800f760:	2b00      	cmp	r3, #0
 800f762:	f300 8081 	bgt.w	800f868 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f766:	4b27      	ldr	r3, [pc, #156]	; (800f804 <tcp_receive+0x5e8>)
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f770:	4b23      	ldr	r3, [pc, #140]	; (800f800 <tcp_receive+0x5e4>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f778:	4b22      	ldr	r3, [pc, #136]	; (800f804 <tcp_receive+0x5e8>)
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d106      	bne.n	800f78e <tcp_receive+0x572>
 800f780:	4b21      	ldr	r3, [pc, #132]	; (800f808 <tcp_receive+0x5ec>)
 800f782:	f240 5294 	movw	r2, #1428	; 0x594
 800f786:	4921      	ldr	r1, [pc, #132]	; (800f80c <tcp_receive+0x5f0>)
 800f788:	4821      	ldr	r0, [pc, #132]	; (800f810 <tcp_receive+0x5f4>)
 800f78a:	f007 fe9d 	bl	80174c8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f794:	4293      	cmp	r3, r2
 800f796:	d906      	bls.n	800f7a6 <tcp_receive+0x58a>
 800f798:	4b1b      	ldr	r3, [pc, #108]	; (800f808 <tcp_receive+0x5ec>)
 800f79a:	f240 5295 	movw	r2, #1429	; 0x595
 800f79e:	491d      	ldr	r1, [pc, #116]	; (800f814 <tcp_receive+0x5f8>)
 800f7a0:	481b      	ldr	r0, [pc, #108]	; (800f810 <tcp_receive+0x5f4>)
 800f7a2:	f007 fe91 	bl	80174c8 <iprintf>
      off = (u16_t)off32;
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f7ac:	4b15      	ldr	r3, [pc, #84]	; (800f804 <tcp_receive+0x5e8>)
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	891b      	ldrh	r3, [r3, #8]
 800f7b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d906      	bls.n	800f7c8 <tcp_receive+0x5ac>
 800f7ba:	4b13      	ldr	r3, [pc, #76]	; (800f808 <tcp_receive+0x5ec>)
 800f7bc:	f240 5297 	movw	r2, #1431	; 0x597
 800f7c0:	4915      	ldr	r1, [pc, #84]	; (800f818 <tcp_receive+0x5fc>)
 800f7c2:	4813      	ldr	r0, [pc, #76]	; (800f810 <tcp_receive+0x5f4>)
 800f7c4:	f007 fe80 	bl	80174c8 <iprintf>
      inseg.len -= off;
 800f7c8:	4b0e      	ldr	r3, [pc, #56]	; (800f804 <tcp_receive+0x5e8>)
 800f7ca:	891a      	ldrh	r2, [r3, #8]
 800f7cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	4b0b      	ldr	r3, [pc, #44]	; (800f804 <tcp_receive+0x5e8>)
 800f7d6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f7d8:	4b0a      	ldr	r3, [pc, #40]	; (800f804 <tcp_receive+0x5e8>)
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	891a      	ldrh	r2, [r3, #8]
 800f7de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f7e6:	e029      	b.n	800f83c <tcp_receive+0x620>
 800f7e8:	0801a488 	.word	0x0801a488
 800f7ec:	0801a490 	.word	0x0801a490
 800f7f0:	200084c8 	.word	0x200084c8
 800f7f4:	200084c4 	.word	0x200084c4
 800f7f8:	2000f330 	.word	0x2000f330
 800f7fc:	200084ca 	.word	0x200084ca
 800f800:	200084c0 	.word	0x200084c0
 800f804:	200084a0 	.word	0x200084a0
 800f808:	0801a120 	.word	0x0801a120
 800f80c:	0801a498 	.word	0x0801a498
 800f810:	0801a16c 	.word	0x0801a16c
 800f814:	0801a4a8 	.word	0x0801a4a8
 800f818:	0801a4b8 	.word	0x0801a4b8
        off -= p->len;
 800f81c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f81e:	895b      	ldrh	r3, [r3, #10]
 800f820:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f82c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f82e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f832:	2200      	movs	r2, #0
 800f834:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f83e:	895b      	ldrh	r3, [r3, #10]
 800f840:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f844:	429a      	cmp	r2, r3
 800f846:	d8e9      	bhi.n	800f81c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f848:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f84c:	4619      	mov	r1, r3
 800f84e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f850:	f7fc f8a0 	bl	800b994 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f858:	4a91      	ldr	r2, [pc, #580]	; (800faa0 <tcp_receive+0x884>)
 800f85a:	6013      	str	r3, [r2, #0]
 800f85c:	4b91      	ldr	r3, [pc, #580]	; (800faa4 <tcp_receive+0x888>)
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	4a8f      	ldr	r2, [pc, #572]	; (800faa0 <tcp_receive+0x884>)
 800f862:	6812      	ldr	r2, [r2, #0]
 800f864:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f866:	e00d      	b.n	800f884 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f868:	4b8d      	ldr	r3, [pc, #564]	; (800faa0 <tcp_receive+0x884>)
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	2b00      	cmp	r3, #0
 800f874:	da06      	bge.n	800f884 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	8b5b      	ldrh	r3, [r3, #26]
 800f87a:	f043 0302 	orr.w	r3, r3, #2
 800f87e:	b29a      	uxth	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f884:	4b86      	ldr	r3, [pc, #536]	; (800faa0 <tcp_receive+0x884>)
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f2c0 842a 	blt.w	80100e8 <tcp_receive+0xecc>
 800f894:	4b82      	ldr	r3, [pc, #520]	; (800faa0 <tcp_receive+0x884>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89c:	6879      	ldr	r1, [r7, #4]
 800f89e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f8a0:	440b      	add	r3, r1
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	f300 841e 	bgt.w	80100e8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8b0:	4b7b      	ldr	r3, [pc, #492]	; (800faa0 <tcp_receive+0x884>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	f040 829a 	bne.w	800fdee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f8ba:	4b7a      	ldr	r3, [pc, #488]	; (800faa4 <tcp_receive+0x888>)
 800f8bc:	891c      	ldrh	r4, [r3, #8]
 800f8be:	4b79      	ldr	r3, [pc, #484]	; (800faa4 <tcp_receive+0x888>)
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	899b      	ldrh	r3, [r3, #12]
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fa fd36 	bl	800a338 <lwip_htons>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	f003 0303 	and.w	r3, r3, #3
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d001      	beq.n	800f8dc <tcp_receive+0x6c0>
 800f8d8:	2301      	movs	r3, #1
 800f8da:	e000      	b.n	800f8de <tcp_receive+0x6c2>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	4423      	add	r3, r4
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	4b71      	ldr	r3, [pc, #452]	; (800faa8 <tcp_receive+0x88c>)
 800f8e4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8ea:	4b6f      	ldr	r3, [pc, #444]	; (800faa8 <tcp_receive+0x88c>)
 800f8ec:	881b      	ldrh	r3, [r3, #0]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d275      	bcs.n	800f9de <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f8f2:	4b6c      	ldr	r3, [pc, #432]	; (800faa4 <tcp_receive+0x888>)
 800f8f4:	68db      	ldr	r3, [r3, #12]
 800f8f6:	899b      	ldrh	r3, [r3, #12]
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fa fd1c 	bl	800a338 <lwip_htons>
 800f900:	4603      	mov	r3, r0
 800f902:	b2db      	uxtb	r3, r3
 800f904:	f003 0301 	and.w	r3, r3, #1
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d01f      	beq.n	800f94c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f90c:	4b65      	ldr	r3, [pc, #404]	; (800faa4 <tcp_receive+0x888>)
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	899b      	ldrh	r3, [r3, #12]
 800f912:	b29b      	uxth	r3, r3
 800f914:	b21b      	sxth	r3, r3
 800f916:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f91a:	b21c      	sxth	r4, r3
 800f91c:	4b61      	ldr	r3, [pc, #388]	; (800faa4 <tcp_receive+0x888>)
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	899b      	ldrh	r3, [r3, #12]
 800f922:	b29b      	uxth	r3, r3
 800f924:	4618      	mov	r0, r3
 800f926:	f7fa fd07 	bl	800a338 <lwip_htons>
 800f92a:	4603      	mov	r3, r0
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	b29b      	uxth	r3, r3
 800f930:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f934:	b29b      	uxth	r3, r3
 800f936:	4618      	mov	r0, r3
 800f938:	f7fa fcfe 	bl	800a338 <lwip_htons>
 800f93c:	4603      	mov	r3, r0
 800f93e:	b21b      	sxth	r3, r3
 800f940:	4323      	orrs	r3, r4
 800f942:	b21a      	sxth	r2, r3
 800f944:	4b57      	ldr	r3, [pc, #348]	; (800faa4 <tcp_receive+0x888>)
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	b292      	uxth	r2, r2
 800f94a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f950:	4b54      	ldr	r3, [pc, #336]	; (800faa4 <tcp_receive+0x888>)
 800f952:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f954:	4b53      	ldr	r3, [pc, #332]	; (800faa4 <tcp_receive+0x888>)
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	899b      	ldrh	r3, [r3, #12]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fa fceb 	bl	800a338 <lwip_htons>
 800f962:	4603      	mov	r3, r0
 800f964:	b2db      	uxtb	r3, r3
 800f966:	f003 0302 	and.w	r3, r3, #2
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d005      	beq.n	800f97a <tcp_receive+0x75e>
            inseg.len -= 1;
 800f96e:	4b4d      	ldr	r3, [pc, #308]	; (800faa4 <tcp_receive+0x888>)
 800f970:	891b      	ldrh	r3, [r3, #8]
 800f972:	3b01      	subs	r3, #1
 800f974:	b29a      	uxth	r2, r3
 800f976:	4b4b      	ldr	r3, [pc, #300]	; (800faa4 <tcp_receive+0x888>)
 800f978:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f97a:	4b4a      	ldr	r3, [pc, #296]	; (800faa4 <tcp_receive+0x888>)
 800f97c:	685a      	ldr	r2, [r3, #4]
 800f97e:	4b49      	ldr	r3, [pc, #292]	; (800faa4 <tcp_receive+0x888>)
 800f980:	891b      	ldrh	r3, [r3, #8]
 800f982:	4619      	mov	r1, r3
 800f984:	4610      	mov	r0, r2
 800f986:	f7fb ff05 	bl	800b794 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f98a:	4b46      	ldr	r3, [pc, #280]	; (800faa4 <tcp_receive+0x888>)
 800f98c:	891c      	ldrh	r4, [r3, #8]
 800f98e:	4b45      	ldr	r3, [pc, #276]	; (800faa4 <tcp_receive+0x888>)
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	899b      	ldrh	r3, [r3, #12]
 800f994:	b29b      	uxth	r3, r3
 800f996:	4618      	mov	r0, r3
 800f998:	f7fa fcce 	bl	800a338 <lwip_htons>
 800f99c:	4603      	mov	r3, r0
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	f003 0303 	and.w	r3, r3, #3
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d001      	beq.n	800f9ac <tcp_receive+0x790>
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e000      	b.n	800f9ae <tcp_receive+0x792>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	4423      	add	r3, r4
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	4b3d      	ldr	r3, [pc, #244]	; (800faa8 <tcp_receive+0x88c>)
 800f9b4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f9b6:	4b3c      	ldr	r3, [pc, #240]	; (800faa8 <tcp_receive+0x88c>)
 800f9b8:	881b      	ldrh	r3, [r3, #0]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	4b38      	ldr	r3, [pc, #224]	; (800faa0 <tcp_receive+0x884>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	441a      	add	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c6:	6879      	ldr	r1, [r7, #4]
 800f9c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9ca:	440b      	add	r3, r1
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d006      	beq.n	800f9de <tcp_receive+0x7c2>
 800f9d0:	4b36      	ldr	r3, [pc, #216]	; (800faac <tcp_receive+0x890>)
 800f9d2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800f9d6:	4936      	ldr	r1, [pc, #216]	; (800fab0 <tcp_receive+0x894>)
 800f9d8:	4836      	ldr	r0, [pc, #216]	; (800fab4 <tcp_receive+0x898>)
 800f9da:	f007 fd75 	bl	80174c8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f000 80e7 	beq.w	800fbb6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9e8:	4b2e      	ldr	r3, [pc, #184]	; (800faa4 <tcp_receive+0x888>)
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	899b      	ldrh	r3, [r3, #12]
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fa fca1 	bl	800a338 <lwip_htons>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	f003 0301 	and.w	r3, r3, #1
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d010      	beq.n	800fa24 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fa02:	e00a      	b.n	800fa1a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa08:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f7fd fcc9 	bl	800d3ac <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1f0      	bne.n	800fa04 <tcp_receive+0x7e8>
 800fa22:	e0c8      	b.n	800fbb6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa28:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fa2a:	e052      	b.n	800fad2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	899b      	ldrh	r3, [r3, #12]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fa fc7f 	bl	800a338 <lwip_htons>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	f003 0301 	and.w	r3, r3, #1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d03d      	beq.n	800fac2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fa46:	4b17      	ldr	r3, [pc, #92]	; (800faa4 <tcp_receive+0x888>)
 800fa48:	68db      	ldr	r3, [r3, #12]
 800fa4a:	899b      	ldrh	r3, [r3, #12]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fa fc72 	bl	800a338 <lwip_htons>
 800fa54:	4603      	mov	r3, r0
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d130      	bne.n	800fac2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fa60:	4b10      	ldr	r3, [pc, #64]	; (800faa4 <tcp_receive+0x888>)
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	899b      	ldrh	r3, [r3, #12]
 800fa66:	b29c      	uxth	r4, r3
 800fa68:	2001      	movs	r0, #1
 800fa6a:	f7fa fc65 	bl	800a338 <lwip_htons>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	461a      	mov	r2, r3
 800fa72:	4b0c      	ldr	r3, [pc, #48]	; (800faa4 <tcp_receive+0x888>)
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	4322      	orrs	r2, r4
 800fa78:	b292      	uxth	r2, r2
 800fa7a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fa7c:	4b09      	ldr	r3, [pc, #36]	; (800faa4 <tcp_receive+0x888>)
 800fa7e:	891c      	ldrh	r4, [r3, #8]
 800fa80:	4b08      	ldr	r3, [pc, #32]	; (800faa4 <tcp_receive+0x888>)
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	899b      	ldrh	r3, [r3, #12]
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fa fc55 	bl	800a338 <lwip_htons>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	f003 0303 	and.w	r3, r3, #3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00e      	beq.n	800fab8 <tcp_receive+0x89c>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e00d      	b.n	800faba <tcp_receive+0x89e>
 800fa9e:	bf00      	nop
 800faa0:	200084c0 	.word	0x200084c0
 800faa4:	200084a0 	.word	0x200084a0
 800faa8:	200084ca 	.word	0x200084ca
 800faac:	0801a120 	.word	0x0801a120
 800fab0:	0801a4c8 	.word	0x0801a4c8
 800fab4:	0801a16c 	.word	0x0801a16c
 800fab8:	2300      	movs	r3, #0
 800faba:	4423      	add	r3, r4
 800fabc:	b29a      	uxth	r2, r3
 800fabe:	4b98      	ldr	r3, [pc, #608]	; (800fd20 <tcp_receive+0xb04>)
 800fac0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800facc:	6938      	ldr	r0, [r7, #16]
 800face:	f7fd fc6d 	bl	800d3ac <tcp_seg_free>
            while (next &&
 800fad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00e      	beq.n	800faf6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fad8:	4b91      	ldr	r3, [pc, #580]	; (800fd20 <tcp_receive+0xb04>)
 800fada:	881b      	ldrh	r3, [r3, #0]
 800fadc:	461a      	mov	r2, r3
 800fade:	4b91      	ldr	r3, [pc, #580]	; (800fd24 <tcp_receive+0xb08>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	441a      	add	r2, r3
 800fae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800faec:	8909      	ldrh	r1, [r1, #8]
 800faee:	440b      	add	r3, r1
 800faf0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	da9a      	bge.n	800fa2c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800faf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d059      	beq.n	800fbb0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fafc:	4b88      	ldr	r3, [pc, #544]	; (800fd20 <tcp_receive+0xb04>)
 800fafe:	881b      	ldrh	r3, [r3, #0]
 800fb00:	461a      	mov	r2, r3
 800fb02:	4b88      	ldr	r3, [pc, #544]	; (800fd24 <tcp_receive+0xb08>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	441a      	add	r2, r3
 800fb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	dd4d      	ble.n	800fbb0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	4b81      	ldr	r3, [pc, #516]	; (800fd24 <tcp_receive+0xb08>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	b29a      	uxth	r2, r3
 800fb26:	4b80      	ldr	r3, [pc, #512]	; (800fd28 <tcp_receive+0xb0c>)
 800fb28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb2a:	4b7f      	ldr	r3, [pc, #508]	; (800fd28 <tcp_receive+0xb0c>)
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	899b      	ldrh	r3, [r3, #12]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fa fc00 	bl	800a338 <lwip_htons>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	f003 0302 	and.w	r3, r3, #2
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d005      	beq.n	800fb50 <tcp_receive+0x934>
                inseg.len -= 1;
 800fb44:	4b78      	ldr	r3, [pc, #480]	; (800fd28 <tcp_receive+0xb0c>)
 800fb46:	891b      	ldrh	r3, [r3, #8]
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	4b76      	ldr	r3, [pc, #472]	; (800fd28 <tcp_receive+0xb0c>)
 800fb4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fb50:	4b75      	ldr	r3, [pc, #468]	; (800fd28 <tcp_receive+0xb0c>)
 800fb52:	685a      	ldr	r2, [r3, #4]
 800fb54:	4b74      	ldr	r3, [pc, #464]	; (800fd28 <tcp_receive+0xb0c>)
 800fb56:	891b      	ldrh	r3, [r3, #8]
 800fb58:	4619      	mov	r1, r3
 800fb5a:	4610      	mov	r0, r2
 800fb5c:	f7fb fe1a 	bl	800b794 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fb60:	4b71      	ldr	r3, [pc, #452]	; (800fd28 <tcp_receive+0xb0c>)
 800fb62:	891c      	ldrh	r4, [r3, #8]
 800fb64:	4b70      	ldr	r3, [pc, #448]	; (800fd28 <tcp_receive+0xb0c>)
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	899b      	ldrh	r3, [r3, #12]
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fa fbe3 	bl	800a338 <lwip_htons>
 800fb72:	4603      	mov	r3, r0
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	f003 0303 	and.w	r3, r3, #3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d001      	beq.n	800fb82 <tcp_receive+0x966>
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e000      	b.n	800fb84 <tcp_receive+0x968>
 800fb82:	2300      	movs	r3, #0
 800fb84:	4423      	add	r3, r4
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	4b65      	ldr	r3, [pc, #404]	; (800fd20 <tcp_receive+0xb04>)
 800fb8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fb8c:	4b64      	ldr	r3, [pc, #400]	; (800fd20 <tcp_receive+0xb04>)
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	461a      	mov	r2, r3
 800fb92:	4b64      	ldr	r3, [pc, #400]	; (800fd24 <tcp_receive+0xb08>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	441a      	add	r2, r3
 800fb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d006      	beq.n	800fbb0 <tcp_receive+0x994>
 800fba2:	4b62      	ldr	r3, [pc, #392]	; (800fd2c <tcp_receive+0xb10>)
 800fba4:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800fba8:	4961      	ldr	r1, [pc, #388]	; (800fd30 <tcp_receive+0xb14>)
 800fbaa:	4862      	ldr	r0, [pc, #392]	; (800fd34 <tcp_receive+0xb18>)
 800fbac:	f007 fc8c 	bl	80174c8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbb4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fbb6:	4b5a      	ldr	r3, [pc, #360]	; (800fd20 <tcp_receive+0xb04>)
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	4b59      	ldr	r3, [pc, #356]	; (800fd24 <tcp_receive+0xb08>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	441a      	add	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbca:	4b55      	ldr	r3, [pc, #340]	; (800fd20 <tcp_receive+0xb04>)
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d206      	bcs.n	800fbe0 <tcp_receive+0x9c4>
 800fbd2:	4b56      	ldr	r3, [pc, #344]	; (800fd2c <tcp_receive+0xb10>)
 800fbd4:	f240 6207 	movw	r2, #1543	; 0x607
 800fbd8:	4957      	ldr	r1, [pc, #348]	; (800fd38 <tcp_receive+0xb1c>)
 800fbda:	4856      	ldr	r0, [pc, #344]	; (800fd34 <tcp_receive+0xb18>)
 800fbdc:	f007 fc74 	bl	80174c8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbe4:	4b4e      	ldr	r3, [pc, #312]	; (800fd20 <tcp_receive+0xb04>)
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7fc feb9 	bl	800c968 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fbf6:	4b4c      	ldr	r3, [pc, #304]	; (800fd28 <tcp_receive+0xb0c>)
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	891b      	ldrh	r3, [r3, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d006      	beq.n	800fc0e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fc00:	4b49      	ldr	r3, [pc, #292]	; (800fd28 <tcp_receive+0xb0c>)
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	4a4d      	ldr	r2, [pc, #308]	; (800fd3c <tcp_receive+0xb20>)
 800fc06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fc08:	4b47      	ldr	r3, [pc, #284]	; (800fd28 <tcp_receive+0xb0c>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc0e:	4b46      	ldr	r3, [pc, #280]	; (800fd28 <tcp_receive+0xb0c>)
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	899b      	ldrh	r3, [r3, #12]
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fa fb8e 	bl	800a338 <lwip_htons>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	f003 0301 	and.w	r3, r3, #1
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f000 80b8 	beq.w	800fd9a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fc2a:	4b45      	ldr	r3, [pc, #276]	; (800fd40 <tcp_receive+0xb24>)
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	f043 0320 	orr.w	r3, r3, #32
 800fc32:	b2da      	uxtb	r2, r3
 800fc34:	4b42      	ldr	r3, [pc, #264]	; (800fd40 <tcp_receive+0xb24>)
 800fc36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fc38:	e0af      	b.n	800fd9a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc44:	68db      	ldr	r3, [r3, #12]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	4a36      	ldr	r2, [pc, #216]	; (800fd24 <tcp_receive+0xb08>)
 800fc4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	891b      	ldrh	r3, [r3, #8]
 800fc50:	461c      	mov	r4, r3
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	899b      	ldrh	r3, [r3, #12]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fa fb6c 	bl	800a338 <lwip_htons>
 800fc60:	4603      	mov	r3, r0
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	f003 0303 	and.w	r3, r3, #3
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <tcp_receive+0xa54>
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e000      	b.n	800fc72 <tcp_receive+0xa56>
 800fc70:	2300      	movs	r3, #0
 800fc72:	191a      	adds	r2, r3, r4
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc78:	441a      	add	r2, r3
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc82:	461c      	mov	r4, r3
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	891b      	ldrh	r3, [r3, #8]
 800fc88:	461d      	mov	r5, r3
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	899b      	ldrh	r3, [r3, #12]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fa fb50 	bl	800a338 <lwip_htons>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	f003 0303 	and.w	r3, r3, #3
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d001      	beq.n	800fca8 <tcp_receive+0xa8c>
 800fca4:	2301      	movs	r3, #1
 800fca6:	e000      	b.n	800fcaa <tcp_receive+0xa8e>
 800fca8:	2300      	movs	r3, #0
 800fcaa:	442b      	add	r3, r5
 800fcac:	429c      	cmp	r4, r3
 800fcae:	d206      	bcs.n	800fcbe <tcp_receive+0xaa2>
 800fcb0:	4b1e      	ldr	r3, [pc, #120]	; (800fd2c <tcp_receive+0xb10>)
 800fcb2:	f240 622c 	movw	r2, #1580	; 0x62c
 800fcb6:	4923      	ldr	r1, [pc, #140]	; (800fd44 <tcp_receive+0xb28>)
 800fcb8:	481e      	ldr	r0, [pc, #120]	; (800fd34 <tcp_receive+0xb18>)
 800fcba:	f007 fc05 	bl	80174c8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	891b      	ldrh	r3, [r3, #8]
 800fcc2:	461c      	mov	r4, r3
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	899b      	ldrh	r3, [r3, #12]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fa fb33 	bl	800a338 <lwip_htons>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	f003 0303 	and.w	r3, r3, #3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <tcp_receive+0xac6>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e000      	b.n	800fce4 <tcp_receive+0xac8>
 800fce2:	2300      	movs	r3, #0
 800fce4:	1919      	adds	r1, r3, r4
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcea:	b28b      	uxth	r3, r1
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7fc fe37 	bl	800c968 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	891b      	ldrh	r3, [r3, #8]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d028      	beq.n	800fd56 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fd04:	4b0d      	ldr	r3, [pc, #52]	; (800fd3c <tcp_receive+0xb20>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d01d      	beq.n	800fd48 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fd0c:	4b0b      	ldr	r3, [pc, #44]	; (800fd3c <tcp_receive+0xb20>)
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	4619      	mov	r1, r3
 800fd16:	4610      	mov	r0, r2
 800fd18:	f7fb ff90 	bl	800bc3c <pbuf_cat>
 800fd1c:	e018      	b.n	800fd50 <tcp_receive+0xb34>
 800fd1e:	bf00      	nop
 800fd20:	200084ca 	.word	0x200084ca
 800fd24:	200084c0 	.word	0x200084c0
 800fd28:	200084a0 	.word	0x200084a0
 800fd2c:	0801a120 	.word	0x0801a120
 800fd30:	0801a500 	.word	0x0801a500
 800fd34:	0801a16c 	.word	0x0801a16c
 800fd38:	0801a53c 	.word	0x0801a53c
 800fd3c:	200084d0 	.word	0x200084d0
 800fd40:	200084cd 	.word	0x200084cd
 800fd44:	0801a55c 	.word	0x0801a55c
            } else {
              recv_data = cseg->p;
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	4a70      	ldr	r2, [pc, #448]	; (800ff10 <tcp_receive+0xcf4>)
 800fd4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	2200      	movs	r2, #0
 800fd54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	899b      	ldrh	r3, [r3, #12]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fa faea 	bl	800a338 <lwip_htons>
 800fd64:	4603      	mov	r3, r0
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	f003 0301 	and.w	r3, r3, #1
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d00d      	beq.n	800fd8c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fd70:	4b68      	ldr	r3, [pc, #416]	; (800ff14 <tcp_receive+0xcf8>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f043 0320 	orr.w	r3, r3, #32
 800fd78:	b2da      	uxtb	r2, r3
 800fd7a:	4b66      	ldr	r3, [pc, #408]	; (800ff14 <tcp_receive+0xcf8>)
 800fd7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	7d1b      	ldrb	r3, [r3, #20]
 800fd82:	2b04      	cmp	r3, #4
 800fd84:	d102      	bne.n	800fd8c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2207      	movs	r2, #7
 800fd8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fd94:	68b8      	ldr	r0, [r7, #8]
 800fd96:	f7fd fb09 	bl	800d3ac <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d008      	beq.n	800fdb4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	685a      	ldr	r2, [r3, #4]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	f43f af43 	beq.w	800fc3a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	8b5b      	ldrh	r3, [r3, #26]
 800fdb8:	f003 0301 	and.w	r3, r3, #1
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00e      	beq.n	800fdde <tcp_receive+0xbc2>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	8b5b      	ldrh	r3, [r3, #26]
 800fdc4:	f023 0301 	bic.w	r3, r3, #1
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	835a      	strh	r2, [r3, #26]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	8b5b      	ldrh	r3, [r3, #26]
 800fdd2:	f043 0302 	orr.w	r3, r3, #2
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fddc:	e188      	b.n	80100f0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	8b5b      	ldrh	r3, [r3, #26]
 800fde2:	f043 0301 	orr.w	r3, r3, #1
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fdec:	e180      	b.n	80100f0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d106      	bne.n	800fe04 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fdf6:	4848      	ldr	r0, [pc, #288]	; (800ff18 <tcp_receive+0xcfc>)
 800fdf8:	f7fd faf0 	bl	800d3dc <tcp_seg_copy>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	675a      	str	r2, [r3, #116]	; 0x74
 800fe02:	e16d      	b.n	80100e0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fe04:	2300      	movs	r3, #0
 800fe06:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe0e:	e157      	b.n	80100c0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fe10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	685a      	ldr	r2, [r3, #4]
 800fe16:	4b41      	ldr	r3, [pc, #260]	; (800ff1c <tcp_receive+0xd00>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d11d      	bne.n	800fe5a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fe1e:	4b3e      	ldr	r3, [pc, #248]	; (800ff18 <tcp_receive+0xcfc>)
 800fe20:	891a      	ldrh	r2, [r3, #8]
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	891b      	ldrh	r3, [r3, #8]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	f240 814f 	bls.w	80100ca <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fe2c:	483a      	ldr	r0, [pc, #232]	; (800ff18 <tcp_receive+0xcfc>)
 800fe2e:	f7fd fad5 	bl	800d3dc <tcp_seg_copy>
 800fe32:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	f000 8149 	beq.w	80100ce <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fe3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d003      	beq.n	800fe4a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fe42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe44:	697a      	ldr	r2, [r7, #20]
 800fe46:	601a      	str	r2, [r3, #0]
 800fe48:	e002      	b.n	800fe50 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fe50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe52:	6978      	ldr	r0, [r7, #20]
 800fe54:	f7ff f8de 	bl	800f014 <tcp_oos_insert_segment>
                }
                break;
 800fe58:	e139      	b.n	80100ce <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fe5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d117      	bne.n	800fe90 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fe60:	4b2e      	ldr	r3, [pc, #184]	; (800ff1c <tcp_receive+0xd00>)
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	1ad3      	subs	r3, r2, r3
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	da57      	bge.n	800ff20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fe70:	4829      	ldr	r0, [pc, #164]	; (800ff18 <tcp_receive+0xcfc>)
 800fe72:	f7fd fab3 	bl	800d3dc <tcp_seg_copy>
 800fe76:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f000 8129 	beq.w	80100d2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	69ba      	ldr	r2, [r7, #24]
 800fe84:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fe86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe88:	69b8      	ldr	r0, [r7, #24]
 800fe8a:	f7ff f8c3 	bl	800f014 <tcp_oos_insert_segment>
                  }
                  break;
 800fe8e:	e120      	b.n	80100d2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fe90:	4b22      	ldr	r3, [pc, #136]	; (800ff1c <tcp_receive+0xd00>)
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	1ad3      	subs	r3, r2, r3
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	db3e      	blt.n	800ff20 <tcp_receive+0xd04>
 800fea2:	4b1e      	ldr	r3, [pc, #120]	; (800ff1c <tcp_receive+0xd00>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	3301      	adds	r3, #1
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	dc35      	bgt.n	800ff20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800feb4:	4818      	ldr	r0, [pc, #96]	; (800ff18 <tcp_receive+0xcfc>)
 800feb6:	f7fd fa91 	bl	800d3dc <tcp_seg_copy>
 800feba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f000 8109 	beq.w	80100d6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fecc:	8912      	ldrh	r2, [r2, #8]
 800fece:	441a      	add	r2, r3
 800fed0:	4b12      	ldr	r3, [pc, #72]	; (800ff1c <tcp_receive+0xd00>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	dd12      	ble.n	800ff00 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800feda:	4b10      	ldr	r3, [pc, #64]	; (800ff1c <tcp_receive+0xd00>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	b29a      	uxth	r2, r3
 800fee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	1ad3      	subs	r3, r2, r3
 800feea:	b29a      	uxth	r2, r3
 800feec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef2:	685a      	ldr	r2, [r3, #4]
 800fef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef6:	891b      	ldrh	r3, [r3, #8]
 800fef8:	4619      	mov	r1, r3
 800fefa:	4610      	mov	r0, r2
 800fefc:	f7fb fc4a 	bl	800b794 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ff00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff02:	69fa      	ldr	r2, [r7, #28]
 800ff04:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ff06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff08:	69f8      	ldr	r0, [r7, #28]
 800ff0a:	f7ff f883 	bl	800f014 <tcp_oos_insert_segment>
                  }
                  break;
 800ff0e:	e0e2      	b.n	80100d6 <tcp_receive+0xeba>
 800ff10:	200084d0 	.word	0x200084d0
 800ff14:	200084cd 	.word	0x200084cd
 800ff18:	200084a0 	.word	0x200084a0
 800ff1c:	200084c0 	.word	0x200084c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ff20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff22:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ff24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f040 80c6 	bne.w	80100ba <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ff2e:	4b80      	ldr	r3, [pc, #512]	; (8010130 <tcp_receive+0xf14>)
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f340 80bd 	ble.w	80100ba <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	899b      	ldrh	r3, [r3, #12]
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fa f9f5 	bl	800a338 <lwip_htons>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	f003 0301 	and.w	r3, r3, #1
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f040 80bf 	bne.w	80100da <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ff5c:	4875      	ldr	r0, [pc, #468]	; (8010134 <tcp_receive+0xf18>)
 800ff5e:	f7fd fa3d 	bl	800d3dc <tcp_seg_copy>
 800ff62:	4602      	mov	r2, r0
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ff68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f000 80b6 	beq.w	80100de <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ff72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff7a:	8912      	ldrh	r2, [r2, #8]
 800ff7c:	441a      	add	r2, r3
 800ff7e:	4b6c      	ldr	r3, [pc, #432]	; (8010130 <tcp_receive+0xf14>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	dd12      	ble.n	800ffae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ff88:	4b69      	ldr	r3, [pc, #420]	; (8010130 <tcp_receive+0xf14>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	b29a      	uxth	r2, r3
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ff9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa0:	685a      	ldr	r2, [r3, #4]
 800ffa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa4:	891b      	ldrh	r3, [r3, #8]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	4610      	mov	r0, r2
 800ffaa:	f7fb fbf3 	bl	800b794 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ffae:	4b62      	ldr	r3, [pc, #392]	; (8010138 <tcp_receive+0xf1c>)
 800ffb0:	881b      	ldrh	r3, [r3, #0]
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	4b5e      	ldr	r3, [pc, #376]	; (8010130 <tcp_receive+0xf14>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	441a      	add	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbe:	6879      	ldr	r1, [r7, #4]
 800ffc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffc2:	440b      	add	r3, r1
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f340 8089 	ble.w	80100de <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ffcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	899b      	ldrh	r3, [r3, #12]
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fa f9ae 	bl	800a338 <lwip_htons>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	f003 0301 	and.w	r3, r3, #1
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d022      	beq.n	801002e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ffe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	899b      	ldrh	r3, [r3, #12]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	b21b      	sxth	r3, r3
 800fff4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fff8:	b21c      	sxth	r4, r3
 800fffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	899b      	ldrh	r3, [r3, #12]
 8010002:	b29b      	uxth	r3, r3
 8010004:	4618      	mov	r0, r3
 8010006:	f7fa f997 	bl	800a338 <lwip_htons>
 801000a:	4603      	mov	r3, r0
 801000c:	b2db      	uxtb	r3, r3
 801000e:	b29b      	uxth	r3, r3
 8010010:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010014:	b29b      	uxth	r3, r3
 8010016:	4618      	mov	r0, r3
 8010018:	f7fa f98e 	bl	800a338 <lwip_htons>
 801001c:	4603      	mov	r3, r0
 801001e:	b21b      	sxth	r3, r3
 8010020:	4323      	orrs	r3, r4
 8010022:	b21a      	sxth	r2, r3
 8010024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	b292      	uxth	r2, r2
 801002c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010032:	b29a      	uxth	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010038:	4413      	add	r3, r2
 801003a:	b299      	uxth	r1, r3
 801003c:	4b3c      	ldr	r3, [pc, #240]	; (8010130 <tcp_receive+0xf14>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	b29a      	uxth	r2, r3
 8010042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	1a8a      	subs	r2, r1, r2
 8010048:	b292      	uxth	r2, r2
 801004a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801004c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	685a      	ldr	r2, [r3, #4]
 8010052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	891b      	ldrh	r3, [r3, #8]
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	f7fb fb9a 	bl	800b794 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	891c      	ldrh	r4, [r3, #8]
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	899b      	ldrh	r3, [r3, #12]
 801006e:	b29b      	uxth	r3, r3
 8010070:	4618      	mov	r0, r3
 8010072:	f7fa f961 	bl	800a338 <lwip_htons>
 8010076:	4603      	mov	r3, r0
 8010078:	b2db      	uxtb	r3, r3
 801007a:	f003 0303 	and.w	r3, r3, #3
 801007e:	2b00      	cmp	r3, #0
 8010080:	d001      	beq.n	8010086 <tcp_receive+0xe6a>
 8010082:	2301      	movs	r3, #1
 8010084:	e000      	b.n	8010088 <tcp_receive+0xe6c>
 8010086:	2300      	movs	r3, #0
 8010088:	4423      	add	r3, r4
 801008a:	b29a      	uxth	r2, r3
 801008c:	4b2a      	ldr	r3, [pc, #168]	; (8010138 <tcp_receive+0xf1c>)
 801008e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010090:	4b29      	ldr	r3, [pc, #164]	; (8010138 <tcp_receive+0xf1c>)
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	461a      	mov	r2, r3
 8010096:	4b26      	ldr	r3, [pc, #152]	; (8010130 <tcp_receive+0xf14>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	441a      	add	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a0:	6879      	ldr	r1, [r7, #4]
 80100a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100a4:	440b      	add	r3, r1
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d019      	beq.n	80100de <tcp_receive+0xec2>
 80100aa:	4b24      	ldr	r3, [pc, #144]	; (801013c <tcp_receive+0xf20>)
 80100ac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80100b0:	4923      	ldr	r1, [pc, #140]	; (8010140 <tcp_receive+0xf24>)
 80100b2:	4824      	ldr	r0, [pc, #144]	; (8010144 <tcp_receive+0xf28>)
 80100b4:	f007 fa08 	bl	80174c8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80100b8:	e011      	b.n	80100de <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80100ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	63bb      	str	r3, [r7, #56]	; 0x38
 80100c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f47f aea4 	bne.w	800fe10 <tcp_receive+0xbf4>
 80100c8:	e00a      	b.n	80100e0 <tcp_receive+0xec4>
                break;
 80100ca:	bf00      	nop
 80100cc:	e008      	b.n	80100e0 <tcp_receive+0xec4>
                break;
 80100ce:	bf00      	nop
 80100d0:	e006      	b.n	80100e0 <tcp_receive+0xec4>
                  break;
 80100d2:	bf00      	nop
 80100d4:	e004      	b.n	80100e0 <tcp_receive+0xec4>
                  break;
 80100d6:	bf00      	nop
 80100d8:	e002      	b.n	80100e0 <tcp_receive+0xec4>
                  break;
 80100da:	bf00      	nop
 80100dc:	e000      	b.n	80100e0 <tcp_receive+0xec4>
                break;
 80100de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f001 fe9b 	bl	8011e1c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80100e6:	e003      	b.n	80100f0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f001 fe97 	bl	8011e1c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80100ee:	e01a      	b.n	8010126 <tcp_receive+0xf0a>
 80100f0:	e019      	b.n	8010126 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80100f2:	4b0f      	ldr	r3, [pc, #60]	; (8010130 <tcp_receive+0xf14>)
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100fa:	1ad3      	subs	r3, r2, r3
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	db0a      	blt.n	8010116 <tcp_receive+0xefa>
 8010100:	4b0b      	ldr	r3, [pc, #44]	; (8010130 <tcp_receive+0xf14>)
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010108:	6879      	ldr	r1, [r7, #4]
 801010a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801010c:	440b      	add	r3, r1
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	3301      	adds	r3, #1
 8010112:	2b00      	cmp	r3, #0
 8010114:	dd07      	ble.n	8010126 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	8b5b      	ldrh	r3, [r3, #26]
 801011a:	f043 0302 	orr.w	r3, r3, #2
 801011e:	b29a      	uxth	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010124:	e7ff      	b.n	8010126 <tcp_receive+0xf0a>
 8010126:	bf00      	nop
 8010128:	3750      	adds	r7, #80	; 0x50
 801012a:	46bd      	mov	sp, r7
 801012c:	bdb0      	pop	{r4, r5, r7, pc}
 801012e:	bf00      	nop
 8010130:	200084c0 	.word	0x200084c0
 8010134:	200084a0 	.word	0x200084a0
 8010138:	200084ca 	.word	0x200084ca
 801013c:	0801a120 	.word	0x0801a120
 8010140:	0801a4c8 	.word	0x0801a4c8
 8010144:	0801a16c 	.word	0x0801a16c

08010148 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801014e:	4b15      	ldr	r3, [pc, #84]	; (80101a4 <tcp_get_next_optbyte+0x5c>)
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	1c5a      	adds	r2, r3, #1
 8010154:	b291      	uxth	r1, r2
 8010156:	4a13      	ldr	r2, [pc, #76]	; (80101a4 <tcp_get_next_optbyte+0x5c>)
 8010158:	8011      	strh	r1, [r2, #0]
 801015a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801015c:	4b12      	ldr	r3, [pc, #72]	; (80101a8 <tcp_get_next_optbyte+0x60>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d004      	beq.n	801016e <tcp_get_next_optbyte+0x26>
 8010164:	4b11      	ldr	r3, [pc, #68]	; (80101ac <tcp_get_next_optbyte+0x64>)
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	88fa      	ldrh	r2, [r7, #6]
 801016a:	429a      	cmp	r2, r3
 801016c:	d208      	bcs.n	8010180 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801016e:	4b10      	ldr	r3, [pc, #64]	; (80101b0 <tcp_get_next_optbyte+0x68>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	3314      	adds	r3, #20
 8010174:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010176:	88fb      	ldrh	r3, [r7, #6]
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	4413      	add	r3, r2
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	e00b      	b.n	8010198 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010180:	88fb      	ldrh	r3, [r7, #6]
 8010182:	b2da      	uxtb	r2, r3
 8010184:	4b09      	ldr	r3, [pc, #36]	; (80101ac <tcp_get_next_optbyte+0x64>)
 8010186:	881b      	ldrh	r3, [r3, #0]
 8010188:	b2db      	uxtb	r3, r3
 801018a:	1ad3      	subs	r3, r2, r3
 801018c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801018e:	4b06      	ldr	r3, [pc, #24]	; (80101a8 <tcp_get_next_optbyte+0x60>)
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	797b      	ldrb	r3, [r7, #5]
 8010194:	4413      	add	r3, r2
 8010196:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010198:	4618      	mov	r0, r3
 801019a:	370c      	adds	r7, #12
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr
 80101a4:	200084bc 	.word	0x200084bc
 80101a8:	200084b8 	.word	0x200084b8
 80101ac:	200084b6 	.word	0x200084b6
 80101b0:	200084b0 	.word	0x200084b0

080101b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d106      	bne.n	80101d0 <tcp_parseopt+0x1c>
 80101c2:	4b31      	ldr	r3, [pc, #196]	; (8010288 <tcp_parseopt+0xd4>)
 80101c4:	f240 727d 	movw	r2, #1917	; 0x77d
 80101c8:	4930      	ldr	r1, [pc, #192]	; (801028c <tcp_parseopt+0xd8>)
 80101ca:	4831      	ldr	r0, [pc, #196]	; (8010290 <tcp_parseopt+0xdc>)
 80101cc:	f007 f97c 	bl	80174c8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80101d0:	4b30      	ldr	r3, [pc, #192]	; (8010294 <tcp_parseopt+0xe0>)
 80101d2:	881b      	ldrh	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d053      	beq.n	8010280 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80101d8:	4b2f      	ldr	r3, [pc, #188]	; (8010298 <tcp_parseopt+0xe4>)
 80101da:	2200      	movs	r2, #0
 80101dc:	801a      	strh	r2, [r3, #0]
 80101de:	e043      	b.n	8010268 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80101e0:	f7ff ffb2 	bl	8010148 <tcp_get_next_optbyte>
 80101e4:	4603      	mov	r3, r0
 80101e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80101e8:	7bfb      	ldrb	r3, [r7, #15]
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d03c      	beq.n	8010268 <tcp_parseopt+0xb4>
 80101ee:	2b02      	cmp	r3, #2
 80101f0:	d002      	beq.n	80101f8 <tcp_parseopt+0x44>
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d03f      	beq.n	8010276 <tcp_parseopt+0xc2>
 80101f6:	e026      	b.n	8010246 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80101f8:	f7ff ffa6 	bl	8010148 <tcp_get_next_optbyte>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b04      	cmp	r3, #4
 8010200:	d13b      	bne.n	801027a <tcp_parseopt+0xc6>
 8010202:	4b25      	ldr	r3, [pc, #148]	; (8010298 <tcp_parseopt+0xe4>)
 8010204:	881b      	ldrh	r3, [r3, #0]
 8010206:	3302      	adds	r3, #2
 8010208:	4a22      	ldr	r2, [pc, #136]	; (8010294 <tcp_parseopt+0xe0>)
 801020a:	8812      	ldrh	r2, [r2, #0]
 801020c:	4293      	cmp	r3, r2
 801020e:	dc34      	bgt.n	801027a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010210:	f7ff ff9a 	bl	8010148 <tcp_get_next_optbyte>
 8010214:	4603      	mov	r3, r0
 8010216:	b29b      	uxth	r3, r3
 8010218:	021b      	lsls	r3, r3, #8
 801021a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801021c:	f7ff ff94 	bl	8010148 <tcp_get_next_optbyte>
 8010220:	4603      	mov	r3, r0
 8010222:	b29a      	uxth	r2, r3
 8010224:	89bb      	ldrh	r3, [r7, #12]
 8010226:	4313      	orrs	r3, r2
 8010228:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801022a:	89bb      	ldrh	r3, [r7, #12]
 801022c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010230:	d804      	bhi.n	801023c <tcp_parseopt+0x88>
 8010232:	89bb      	ldrh	r3, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d001      	beq.n	801023c <tcp_parseopt+0x88>
 8010238:	89ba      	ldrh	r2, [r7, #12]
 801023a:	e001      	b.n	8010240 <tcp_parseopt+0x8c>
 801023c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010244:	e010      	b.n	8010268 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010246:	f7ff ff7f 	bl	8010148 <tcp_get_next_optbyte>
 801024a:	4603      	mov	r3, r0
 801024c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801024e:	7afb      	ldrb	r3, [r7, #11]
 8010250:	2b01      	cmp	r3, #1
 8010252:	d914      	bls.n	801027e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010254:	7afb      	ldrb	r3, [r7, #11]
 8010256:	b29a      	uxth	r2, r3
 8010258:	4b0f      	ldr	r3, [pc, #60]	; (8010298 <tcp_parseopt+0xe4>)
 801025a:	881b      	ldrh	r3, [r3, #0]
 801025c:	4413      	add	r3, r2
 801025e:	b29b      	uxth	r3, r3
 8010260:	3b02      	subs	r3, #2
 8010262:	b29a      	uxth	r2, r3
 8010264:	4b0c      	ldr	r3, [pc, #48]	; (8010298 <tcp_parseopt+0xe4>)
 8010266:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010268:	4b0b      	ldr	r3, [pc, #44]	; (8010298 <tcp_parseopt+0xe4>)
 801026a:	881a      	ldrh	r2, [r3, #0]
 801026c:	4b09      	ldr	r3, [pc, #36]	; (8010294 <tcp_parseopt+0xe0>)
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	429a      	cmp	r2, r3
 8010272:	d3b5      	bcc.n	80101e0 <tcp_parseopt+0x2c>
 8010274:	e004      	b.n	8010280 <tcp_parseopt+0xcc>
          return;
 8010276:	bf00      	nop
 8010278:	e002      	b.n	8010280 <tcp_parseopt+0xcc>
            return;
 801027a:	bf00      	nop
 801027c:	e000      	b.n	8010280 <tcp_parseopt+0xcc>
            return;
 801027e:	bf00      	nop
      }
    }
  }
}
 8010280:	3710      	adds	r7, #16
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	0801a120 	.word	0x0801a120
 801028c:	0801a584 	.word	0x0801a584
 8010290:	0801a16c 	.word	0x0801a16c
 8010294:	200084b4 	.word	0x200084b4
 8010298:	200084bc 	.word	0x200084bc

0801029c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801029c:	b480      	push	{r7}
 801029e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80102a0:	4b05      	ldr	r3, [pc, #20]	; (80102b8 <tcp_trigger_input_pcb_close+0x1c>)
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	f043 0310 	orr.w	r3, r3, #16
 80102a8:	b2da      	uxtb	r2, r3
 80102aa:	4b03      	ldr	r3, [pc, #12]	; (80102b8 <tcp_trigger_input_pcb_close+0x1c>)
 80102ac:	701a      	strb	r2, [r3, #0]
}
 80102ae:	bf00      	nop
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr
 80102b8:	200084cd 	.word	0x200084cd

080102bc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00a      	beq.n	80102e4 <tcp_route+0x28>
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	7a1b      	ldrb	r3, [r3, #8]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d006      	beq.n	80102e4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	7a1b      	ldrb	r3, [r3, #8]
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fb f856 	bl	800b38c <netif_get_by_index>
 80102e0:	4603      	mov	r3, r0
 80102e2:	e003      	b.n	80102ec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f005 fcc9 	bl	8015c7c <ip4_route>
 80102ea:	4603      	mov	r3, r0
  }
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80102f4:	b590      	push	{r4, r7, lr}
 80102f6:	b087      	sub	sp, #28
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	603b      	str	r3, [r7, #0]
 8010300:	4613      	mov	r3, r2
 8010302:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d105      	bne.n	8010316 <tcp_create_segment+0x22>
 801030a:	4b44      	ldr	r3, [pc, #272]	; (801041c <tcp_create_segment+0x128>)
 801030c:	22a3      	movs	r2, #163	; 0xa3
 801030e:	4944      	ldr	r1, [pc, #272]	; (8010420 <tcp_create_segment+0x12c>)
 8010310:	4844      	ldr	r0, [pc, #272]	; (8010424 <tcp_create_segment+0x130>)
 8010312:	f007 f8d9 	bl	80174c8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d105      	bne.n	8010328 <tcp_create_segment+0x34>
 801031c:	4b3f      	ldr	r3, [pc, #252]	; (801041c <tcp_create_segment+0x128>)
 801031e:	22a4      	movs	r2, #164	; 0xa4
 8010320:	4941      	ldr	r1, [pc, #260]	; (8010428 <tcp_create_segment+0x134>)
 8010322:	4840      	ldr	r0, [pc, #256]	; (8010424 <tcp_create_segment+0x130>)
 8010324:	f007 f8d0 	bl	80174c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010328:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801032c:	009b      	lsls	r3, r3, #2
 801032e:	b2db      	uxtb	r3, r3
 8010330:	f003 0304 	and.w	r3, r3, #4
 8010334:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010336:	2003      	movs	r0, #3
 8010338:	f7fa fcb4 	bl	800aca4 <memp_malloc>
 801033c:	6138      	str	r0, [r7, #16]
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d104      	bne.n	801034e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010344:	68b8      	ldr	r0, [r7, #8]
 8010346:	f7fb fbab 	bl	800baa0 <pbuf_free>
    return NULL;
 801034a:	2300      	movs	r3, #0
 801034c:	e061      	b.n	8010412 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010354:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	2200      	movs	r2, #0
 801035a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	68ba      	ldr	r2, [r7, #8]
 8010360:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	891a      	ldrh	r2, [r3, #8]
 8010366:	7dfb      	ldrb	r3, [r7, #23]
 8010368:	b29b      	uxth	r3, r3
 801036a:	429a      	cmp	r2, r3
 801036c:	d205      	bcs.n	801037a <tcp_create_segment+0x86>
 801036e:	4b2b      	ldr	r3, [pc, #172]	; (801041c <tcp_create_segment+0x128>)
 8010370:	22b0      	movs	r2, #176	; 0xb0
 8010372:	492e      	ldr	r1, [pc, #184]	; (801042c <tcp_create_segment+0x138>)
 8010374:	482b      	ldr	r0, [pc, #172]	; (8010424 <tcp_create_segment+0x130>)
 8010376:	f007 f8a7 	bl	80174c8 <iprintf>
  seg->len = p->tot_len - optlen;
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	891a      	ldrh	r2, [r3, #8]
 801037e:	7dfb      	ldrb	r3, [r7, #23]
 8010380:	b29b      	uxth	r3, r3
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	b29a      	uxth	r2, r3
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801038a:	2114      	movs	r1, #20
 801038c:	68b8      	ldr	r0, [r7, #8]
 801038e:	f7fb faf1 	bl	800b974 <pbuf_add_header>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d004      	beq.n	80103a2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010398:	6938      	ldr	r0, [r7, #16]
 801039a:	f7fd f807 	bl	800d3ac <tcp_seg_free>
    return NULL;
 801039e:	2300      	movs	r3, #0
 80103a0:	e037      	b.n	8010412 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	685a      	ldr	r2, [r3, #4]
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	8ada      	ldrh	r2, [r3, #22]
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	68dc      	ldr	r4, [r3, #12]
 80103b4:	4610      	mov	r0, r2
 80103b6:	f7f9 ffbf 	bl	800a338 <lwip_htons>
 80103ba:	4603      	mov	r3, r0
 80103bc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	8b1a      	ldrh	r2, [r3, #24]
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	68dc      	ldr	r4, [r3, #12]
 80103c6:	4610      	mov	r0, r2
 80103c8:	f7f9 ffb6 	bl	800a338 <lwip_htons>
 80103cc:	4603      	mov	r3, r0
 80103ce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	68dc      	ldr	r4, [r3, #12]
 80103d4:	6838      	ldr	r0, [r7, #0]
 80103d6:	f7f9 ffc4 	bl	800a362 <lwip_htonl>
 80103da:	4603      	mov	r3, r0
 80103dc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80103de:	7dfb      	ldrb	r3, [r7, #23]
 80103e0:	089b      	lsrs	r3, r3, #2
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	3305      	adds	r3, #5
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	031b      	lsls	r3, r3, #12
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	79fb      	ldrb	r3, [r7, #7]
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	4313      	orrs	r3, r2
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	68dc      	ldr	r4, [r3, #12]
 80103fa:	4610      	mov	r0, r2
 80103fc:	f7f9 ff9c 	bl	800a338 <lwip_htons>
 8010400:	4603      	mov	r3, r0
 8010402:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	2200      	movs	r2, #0
 801040a:	749a      	strb	r2, [r3, #18]
 801040c:	2200      	movs	r2, #0
 801040e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010410:	693b      	ldr	r3, [r7, #16]
}
 8010412:	4618      	mov	r0, r3
 8010414:	371c      	adds	r7, #28
 8010416:	46bd      	mov	sp, r7
 8010418:	bd90      	pop	{r4, r7, pc}
 801041a:	bf00      	nop
 801041c:	0801a5a0 	.word	0x0801a5a0
 8010420:	0801a5d4 	.word	0x0801a5d4
 8010424:	0801a5f4 	.word	0x0801a5f4
 8010428:	0801a61c 	.word	0x0801a61c
 801042c:	0801a640 	.word	0x0801a640

08010430 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
 8010436:	607b      	str	r3, [r7, #4]
 8010438:	4603      	mov	r3, r0
 801043a:	73fb      	strb	r3, [r7, #15]
 801043c:	460b      	mov	r3, r1
 801043e:	81bb      	strh	r3, [r7, #12]
 8010440:	4613      	mov	r3, r2
 8010442:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010444:	89bb      	ldrh	r3, [r7, #12]
 8010446:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d105      	bne.n	801045a <tcp_pbuf_prealloc+0x2a>
 801044e:	4b30      	ldr	r3, [pc, #192]	; (8010510 <tcp_pbuf_prealloc+0xe0>)
 8010450:	22e8      	movs	r2, #232	; 0xe8
 8010452:	4930      	ldr	r1, [pc, #192]	; (8010514 <tcp_pbuf_prealloc+0xe4>)
 8010454:	4830      	ldr	r0, [pc, #192]	; (8010518 <tcp_pbuf_prealloc+0xe8>)
 8010456:	f007 f837 	bl	80174c8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801045a:	6a3b      	ldr	r3, [r7, #32]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d105      	bne.n	801046c <tcp_pbuf_prealloc+0x3c>
 8010460:	4b2b      	ldr	r3, [pc, #172]	; (8010510 <tcp_pbuf_prealloc+0xe0>)
 8010462:	22e9      	movs	r2, #233	; 0xe9
 8010464:	492d      	ldr	r1, [pc, #180]	; (801051c <tcp_pbuf_prealloc+0xec>)
 8010466:	482c      	ldr	r0, [pc, #176]	; (8010518 <tcp_pbuf_prealloc+0xe8>)
 8010468:	f007 f82e 	bl	80174c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801046c:	89ba      	ldrh	r2, [r7, #12]
 801046e:	897b      	ldrh	r3, [r7, #10]
 8010470:	429a      	cmp	r2, r3
 8010472:	d221      	bcs.n	80104b8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010474:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010478:	f003 0302 	and.w	r3, r3, #2
 801047c:	2b00      	cmp	r3, #0
 801047e:	d111      	bne.n	80104a4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010480:	6a3b      	ldr	r3, [r7, #32]
 8010482:	8b5b      	ldrh	r3, [r3, #26]
 8010484:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010488:	2b00      	cmp	r3, #0
 801048a:	d115      	bne.n	80104b8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801048c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010490:	2b00      	cmp	r3, #0
 8010492:	d007      	beq.n	80104a4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010494:	6a3b      	ldr	r3, [r7, #32]
 8010496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010498:	2b00      	cmp	r3, #0
 801049a:	d103      	bne.n	80104a4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801049c:	6a3b      	ldr	r3, [r7, #32]
 801049e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d009      	beq.n	80104b8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80104a4:	89bb      	ldrh	r3, [r7, #12]
 80104a6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80104aa:	f023 0203 	bic.w	r2, r3, #3
 80104ae:	897b      	ldrh	r3, [r7, #10]
 80104b0:	4293      	cmp	r3, r2
 80104b2:	bf28      	it	cs
 80104b4:	4613      	movcs	r3, r2
 80104b6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80104b8:	8af9      	ldrh	r1, [r7, #22]
 80104ba:	7bfb      	ldrb	r3, [r7, #15]
 80104bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fb f80d 	bl	800b4e0 <pbuf_alloc>
 80104c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d101      	bne.n	80104d2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80104ce:	2300      	movs	r3, #0
 80104d0:	e019      	b.n	8010506 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d006      	beq.n	80104e8 <tcp_pbuf_prealloc+0xb8>
 80104da:	4b0d      	ldr	r3, [pc, #52]	; (8010510 <tcp_pbuf_prealloc+0xe0>)
 80104dc:	f240 120b 	movw	r2, #267	; 0x10b
 80104e0:	490f      	ldr	r1, [pc, #60]	; (8010520 <tcp_pbuf_prealloc+0xf0>)
 80104e2:	480d      	ldr	r0, [pc, #52]	; (8010518 <tcp_pbuf_prealloc+0xe8>)
 80104e4:	f006 fff0 	bl	80174c8 <iprintf>
  *oversize = p->len - length;
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	895a      	ldrh	r2, [r3, #10]
 80104ec:	89bb      	ldrh	r3, [r7, #12]
 80104ee:	1ad3      	subs	r3, r2, r3
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	89ba      	ldrh	r2, [r7, #12]
 80104fa:	811a      	strh	r2, [r3, #8]
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	891a      	ldrh	r2, [r3, #8]
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	815a      	strh	r2, [r3, #10]
  return p;
 8010504:	693b      	ldr	r3, [r7, #16]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	0801a5a0 	.word	0x0801a5a0
 8010514:	0801a658 	.word	0x0801a658
 8010518:	0801a5f4 	.word	0x0801a5f4
 801051c:	0801a67c 	.word	0x0801a67c
 8010520:	0801a69c 	.word	0x0801a69c

08010524 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	460b      	mov	r3, r1
 801052e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d106      	bne.n	8010544 <tcp_write_checks+0x20>
 8010536:	4b33      	ldr	r3, [pc, #204]	; (8010604 <tcp_write_checks+0xe0>)
 8010538:	f240 1233 	movw	r2, #307	; 0x133
 801053c:	4932      	ldr	r1, [pc, #200]	; (8010608 <tcp_write_checks+0xe4>)
 801053e:	4833      	ldr	r0, [pc, #204]	; (801060c <tcp_write_checks+0xe8>)
 8010540:	f006 ffc2 	bl	80174c8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	7d1b      	ldrb	r3, [r3, #20]
 8010548:	2b04      	cmp	r3, #4
 801054a:	d00e      	beq.n	801056a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010550:	2b07      	cmp	r3, #7
 8010552:	d00a      	beq.n	801056a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010558:	2b02      	cmp	r3, #2
 801055a:	d006      	beq.n	801056a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010560:	2b03      	cmp	r3, #3
 8010562:	d002      	beq.n	801056a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010564:	f06f 030a 	mvn.w	r3, #10
 8010568:	e048      	b.n	80105fc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801056a:	887b      	ldrh	r3, [r7, #2]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d101      	bne.n	8010574 <tcp_write_checks+0x50>
    return ERR_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	e043      	b.n	80105fc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801057a:	887a      	ldrh	r2, [r7, #2]
 801057c:	429a      	cmp	r2, r3
 801057e:	d909      	bls.n	8010594 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	8b5b      	ldrh	r3, [r3, #26]
 8010584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010588:	b29a      	uxth	r2, r3
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801058e:	f04f 33ff 	mov.w	r3, #4294967295
 8010592:	e033      	b.n	80105fc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801059a:	2b08      	cmp	r3, #8
 801059c:	d909      	bls.n	80105b2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	8b5b      	ldrh	r3, [r3, #26]
 80105a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80105ac:	f04f 33ff 	mov.w	r3, #4294967295
 80105b0:	e024      	b.n	80105fc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00f      	beq.n	80105dc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d11a      	bne.n	80105fa <tcp_write_checks+0xd6>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d116      	bne.n	80105fa <tcp_write_checks+0xd6>
 80105cc:	4b0d      	ldr	r3, [pc, #52]	; (8010604 <tcp_write_checks+0xe0>)
 80105ce:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80105d2:	490f      	ldr	r1, [pc, #60]	; (8010610 <tcp_write_checks+0xec>)
 80105d4:	480d      	ldr	r0, [pc, #52]	; (801060c <tcp_write_checks+0xe8>)
 80105d6:	f006 ff77 	bl	80174c8 <iprintf>
 80105da:	e00e      	b.n	80105fa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d103      	bne.n	80105ec <tcp_write_checks+0xc8>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d006      	beq.n	80105fa <tcp_write_checks+0xd6>
 80105ec:	4b05      	ldr	r3, [pc, #20]	; (8010604 <tcp_write_checks+0xe0>)
 80105ee:	f240 1259 	movw	r2, #345	; 0x159
 80105f2:	4908      	ldr	r1, [pc, #32]	; (8010614 <tcp_write_checks+0xf0>)
 80105f4:	4805      	ldr	r0, [pc, #20]	; (801060c <tcp_write_checks+0xe8>)
 80105f6:	f006 ff67 	bl	80174c8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	0801a5a0 	.word	0x0801a5a0
 8010608:	0801a6b0 	.word	0x0801a6b0
 801060c:	0801a5f4 	.word	0x0801a5f4
 8010610:	0801a6d0 	.word	0x0801a6d0
 8010614:	0801a70c 	.word	0x0801a70c

08010618 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010618:	b590      	push	{r4, r7, lr}
 801061a:	b09b      	sub	sp, #108	; 0x6c
 801061c:	af04      	add	r7, sp, #16
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	60b9      	str	r1, [r7, #8]
 8010622:	4611      	mov	r1, r2
 8010624:	461a      	mov	r2, r3
 8010626:	460b      	mov	r3, r1
 8010628:	80fb      	strh	r3, [r7, #6]
 801062a:	4613      	mov	r3, r2
 801062c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801062e:	2300      	movs	r3, #0
 8010630:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010632:	2300      	movs	r3, #0
 8010634:	653b      	str	r3, [r7, #80]	; 0x50
 8010636:	2300      	movs	r3, #0
 8010638:	64fb      	str	r3, [r7, #76]	; 0x4c
 801063a:	2300      	movs	r3, #0
 801063c:	64bb      	str	r3, [r7, #72]	; 0x48
 801063e:	2300      	movs	r3, #0
 8010640:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010642:	2300      	movs	r3, #0
 8010644:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010648:	2300      	movs	r3, #0
 801064a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801064e:	2300      	movs	r3, #0
 8010650:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010652:	2300      	movs	r3, #0
 8010654:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d109      	bne.n	8010674 <tcp_write+0x5c>
 8010660:	4ba5      	ldr	r3, [pc, #660]	; (80108f8 <tcp_write+0x2e0>)
 8010662:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010666:	49a5      	ldr	r1, [pc, #660]	; (80108fc <tcp_write+0x2e4>)
 8010668:	48a5      	ldr	r0, [pc, #660]	; (8010900 <tcp_write+0x2e8>)
 801066a:	f006 ff2d 	bl	80174c8 <iprintf>
 801066e:	f06f 030f 	mvn.w	r3, #15
 8010672:	e32c      	b.n	8010cce <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801067a:	085b      	lsrs	r3, r3, #1
 801067c:	b29a      	uxth	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010682:	4293      	cmp	r3, r2
 8010684:	bf28      	it	cs
 8010686:	4613      	movcs	r3, r2
 8010688:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801068a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801068c:	2b00      	cmp	r3, #0
 801068e:	d102      	bne.n	8010696 <tcp_write+0x7e>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010694:	e000      	b.n	8010698 <tcp_write+0x80>
 8010696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010698:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d109      	bne.n	80106b4 <tcp_write+0x9c>
 80106a0:	4b95      	ldr	r3, [pc, #596]	; (80108f8 <tcp_write+0x2e0>)
 80106a2:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80106a6:	4997      	ldr	r1, [pc, #604]	; (8010904 <tcp_write+0x2ec>)
 80106a8:	4895      	ldr	r0, [pc, #596]	; (8010900 <tcp_write+0x2e8>)
 80106aa:	f006 ff0d 	bl	80174c8 <iprintf>
 80106ae:	f06f 030f 	mvn.w	r3, #15
 80106b2:	e30c      	b.n	8010cce <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80106b4:	88fb      	ldrh	r3, [r7, #6]
 80106b6:	4619      	mov	r1, r3
 80106b8:	68f8      	ldr	r0, [r7, #12]
 80106ba:	f7ff ff33 	bl	8010524 <tcp_write_checks>
 80106be:	4603      	mov	r3, r0
 80106c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80106c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <tcp_write+0xba>
    return err;
 80106cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80106d0:	e2fd      	b.n	8010cce <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80106dc:	2300      	movs	r3, #0
 80106de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f000 80f7 	beq.w	80108da <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f0:	653b      	str	r3, [r7, #80]	; 0x50
 80106f2:	e002      	b.n	80106fa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80106f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80106fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1f8      	bne.n	80106f4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010704:	7a9b      	ldrb	r3, [r3, #10]
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	b29b      	uxth	r3, r3
 801070a:	f003 0304 	and.w	r3, r3, #4
 801070e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010710:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010714:	891b      	ldrh	r3, [r3, #8]
 8010716:	4619      	mov	r1, r3
 8010718:	8c3b      	ldrh	r3, [r7, #32]
 801071a:	440b      	add	r3, r1
 801071c:	429a      	cmp	r2, r3
 801071e:	da06      	bge.n	801072e <tcp_write+0x116>
 8010720:	4b75      	ldr	r3, [pc, #468]	; (80108f8 <tcp_write+0x2e0>)
 8010722:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010726:	4978      	ldr	r1, [pc, #480]	; (8010908 <tcp_write+0x2f0>)
 8010728:	4875      	ldr	r0, [pc, #468]	; (8010900 <tcp_write+0x2e8>)
 801072a:	f006 fecd 	bl	80174c8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801072e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010730:	891a      	ldrh	r2, [r3, #8]
 8010732:	8c3b      	ldrh	r3, [r7, #32]
 8010734:	4413      	add	r3, r2
 8010736:	b29b      	uxth	r3, r3
 8010738:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010744:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010746:	8a7b      	ldrh	r3, [r7, #18]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d027      	beq.n	801079c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801074c:	8a7b      	ldrh	r3, [r7, #18]
 801074e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010750:	429a      	cmp	r2, r3
 8010752:	d206      	bcs.n	8010762 <tcp_write+0x14a>
 8010754:	4b68      	ldr	r3, [pc, #416]	; (80108f8 <tcp_write+0x2e0>)
 8010756:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801075a:	496c      	ldr	r1, [pc, #432]	; (801090c <tcp_write+0x2f4>)
 801075c:	4868      	ldr	r0, [pc, #416]	; (8010900 <tcp_write+0x2e8>)
 801075e:	f006 feb3 	bl	80174c8 <iprintf>
      seg = last_unsent;
 8010762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010764:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010766:	8a7b      	ldrh	r3, [r7, #18]
 8010768:	88fa      	ldrh	r2, [r7, #6]
 801076a:	429a      	cmp	r2, r3
 801076c:	d901      	bls.n	8010772 <tcp_write+0x15a>
 801076e:	8a7b      	ldrh	r3, [r7, #18]
 8010770:	e000      	b.n	8010774 <tcp_write+0x15c>
 8010772:	88fb      	ldrh	r3, [r7, #6]
 8010774:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010776:	4293      	cmp	r3, r2
 8010778:	bfa8      	it	ge
 801077a:	4613      	movge	r3, r2
 801077c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801077e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010782:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010784:	4413      	add	r3, r2
 8010786:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801078a:	8a7a      	ldrh	r2, [r7, #18]
 801078c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	b29b      	uxth	r3, r3
 8010792:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010794:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010796:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010798:	1ad3      	subs	r3, r2, r3
 801079a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801079c:	8a7b      	ldrh	r3, [r7, #18]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d00b      	beq.n	80107ba <tcp_write+0x1a2>
 80107a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107a6:	88fb      	ldrh	r3, [r7, #6]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d006      	beq.n	80107ba <tcp_write+0x1a2>
 80107ac:	4b52      	ldr	r3, [pc, #328]	; (80108f8 <tcp_write+0x2e0>)
 80107ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107b2:	4957      	ldr	r1, [pc, #348]	; (8010910 <tcp_write+0x2f8>)
 80107b4:	4852      	ldr	r0, [pc, #328]	; (8010900 <tcp_write+0x2e8>)
 80107b6:	f006 fe87 	bl	80174c8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80107ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107be:	88fb      	ldrh	r3, [r7, #6]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	f080 8168 	bcs.w	8010a96 <tcp_write+0x47e>
 80107c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f000 8164 	beq.w	8010a96 <tcp_write+0x47e>
 80107ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107d0:	891b      	ldrh	r3, [r3, #8]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 815f 	beq.w	8010a96 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80107d8:	88fa      	ldrh	r2, [r7, #6]
 80107da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107de:	1ad2      	subs	r2, r2, r3
 80107e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107e2:	4293      	cmp	r3, r2
 80107e4:	bfa8      	it	ge
 80107e6:	4613      	movge	r3, r2
 80107e8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80107ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ec:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80107ee:	797b      	ldrb	r3, [r7, #5]
 80107f0:	f003 0301 	and.w	r3, r3, #1
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d027      	beq.n	8010848 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80107f8:	f107 0012 	add.w	r0, r7, #18
 80107fc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107fe:	8bf9      	ldrh	r1, [r7, #30]
 8010800:	2301      	movs	r3, #1
 8010802:	9302      	str	r3, [sp, #8]
 8010804:	797b      	ldrb	r3, [r7, #5]
 8010806:	9301      	str	r3, [sp, #4]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	9300      	str	r3, [sp, #0]
 801080c:	4603      	mov	r3, r0
 801080e:	2000      	movs	r0, #0
 8010810:	f7ff fe0e 	bl	8010430 <tcp_pbuf_prealloc>
 8010814:	6578      	str	r0, [r7, #84]	; 0x54
 8010816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 8226 	beq.w	8010c6a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801081e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010820:	6858      	ldr	r0, [r3, #4]
 8010822:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010826:	68ba      	ldr	r2, [r7, #8]
 8010828:	4413      	add	r3, r2
 801082a:	8bfa      	ldrh	r2, [r7, #30]
 801082c:	4619      	mov	r1, r3
 801082e:	f006 fe38 	bl	80174a2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010832:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010834:	f7fb f9c2 	bl	800bbbc <pbuf_clen>
 8010838:	4603      	mov	r3, r0
 801083a:	461a      	mov	r2, r3
 801083c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010840:	4413      	add	r3, r2
 8010842:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010846:	e041      	b.n	80108cc <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	637b      	str	r3, [r7, #52]	; 0x34
 801084e:	e002      	b.n	8010856 <tcp_write+0x23e>
 8010850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	637b      	str	r3, [r7, #52]	; 0x34
 8010856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1f8      	bne.n	8010850 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010860:	7b1b      	ldrb	r3, [r3, #12]
 8010862:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d115      	bne.n	8010896 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801086a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010870:	8952      	ldrh	r2, [r2, #10]
 8010872:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010874:	68ba      	ldr	r2, [r7, #8]
 8010876:	429a      	cmp	r2, r3
 8010878:	d10d      	bne.n	8010896 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801087a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801087e:	2b00      	cmp	r3, #0
 8010880:	d006      	beq.n	8010890 <tcp_write+0x278>
 8010882:	4b1d      	ldr	r3, [pc, #116]	; (80108f8 <tcp_write+0x2e0>)
 8010884:	f240 2231 	movw	r2, #561	; 0x231
 8010888:	4922      	ldr	r1, [pc, #136]	; (8010914 <tcp_write+0x2fc>)
 801088a:	481d      	ldr	r0, [pc, #116]	; (8010900 <tcp_write+0x2e8>)
 801088c:	f006 fe1c 	bl	80174c8 <iprintf>
          extendlen = seglen;
 8010890:	8bfb      	ldrh	r3, [r7, #30]
 8010892:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010894:	e01a      	b.n	80108cc <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010896:	8bfb      	ldrh	r3, [r7, #30]
 8010898:	2201      	movs	r2, #1
 801089a:	4619      	mov	r1, r3
 801089c:	2000      	movs	r0, #0
 801089e:	f7fa fe1f 	bl	800b4e0 <pbuf_alloc>
 80108a2:	6578      	str	r0, [r7, #84]	; 0x54
 80108a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f000 81e1 	beq.w	8010c6e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80108ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108b0:	68ba      	ldr	r2, [r7, #8]
 80108b2:	441a      	add	r2, r3
 80108b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108b6:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80108b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80108ba:	f7fb f97f 	bl	800bbbc <pbuf_clen>
 80108be:	4603      	mov	r3, r0
 80108c0:	461a      	mov	r2, r3
 80108c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108c6:	4413      	add	r3, r2
 80108c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80108cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80108d0:	8bfb      	ldrh	r3, [r7, #30]
 80108d2:	4413      	add	r3, r2
 80108d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80108d8:	e0dd      	b.n	8010a96 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f000 80d8 	beq.w	8010a96 <tcp_write+0x47e>
 80108e6:	4b04      	ldr	r3, [pc, #16]	; (80108f8 <tcp_write+0x2e0>)
 80108e8:	f240 224b 	movw	r2, #587	; 0x24b
 80108ec:	490a      	ldr	r1, [pc, #40]	; (8010918 <tcp_write+0x300>)
 80108ee:	4804      	ldr	r0, [pc, #16]	; (8010900 <tcp_write+0x2e8>)
 80108f0:	f006 fdea 	bl	80174c8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80108f4:	e0cf      	b.n	8010a96 <tcp_write+0x47e>
 80108f6:	bf00      	nop
 80108f8:	0801a5a0 	.word	0x0801a5a0
 80108fc:	0801a740 	.word	0x0801a740
 8010900:	0801a5f4 	.word	0x0801a5f4
 8010904:	0801a758 	.word	0x0801a758
 8010908:	0801a78c 	.word	0x0801a78c
 801090c:	0801a7a4 	.word	0x0801a7a4
 8010910:	0801a7c4 	.word	0x0801a7c4
 8010914:	0801a7e4 	.word	0x0801a7e4
 8010918:	0801a810 	.word	0x0801a810
    struct pbuf *p;
    u16_t left = len - pos;
 801091c:	88fa      	ldrh	r2, [r7, #6]
 801091e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010926:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801092a:	b29b      	uxth	r3, r3
 801092c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010932:	8b7a      	ldrh	r2, [r7, #26]
 8010934:	8bbb      	ldrh	r3, [r7, #28]
 8010936:	4293      	cmp	r3, r2
 8010938:	bf28      	it	cs
 801093a:	4613      	movcs	r3, r2
 801093c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801093e:	797b      	ldrb	r3, [r7, #5]
 8010940:	f003 0301 	and.w	r3, r3, #1
 8010944:	2b00      	cmp	r3, #0
 8010946:	d036      	beq.n	80109b6 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010948:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801094c:	b29a      	uxth	r2, r3
 801094e:	8b3b      	ldrh	r3, [r7, #24]
 8010950:	4413      	add	r3, r2
 8010952:	b299      	uxth	r1, r3
 8010954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010956:	2b00      	cmp	r3, #0
 8010958:	bf0c      	ite	eq
 801095a:	2301      	moveq	r3, #1
 801095c:	2300      	movne	r3, #0
 801095e:	b2db      	uxtb	r3, r3
 8010960:	f107 0012 	add.w	r0, r7, #18
 8010964:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010966:	9302      	str	r3, [sp, #8]
 8010968:	797b      	ldrb	r3, [r7, #5]
 801096a:	9301      	str	r3, [sp, #4]
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	4603      	mov	r3, r0
 8010972:	2036      	movs	r0, #54	; 0x36
 8010974:	f7ff fd5c 	bl	8010430 <tcp_pbuf_prealloc>
 8010978:	6338      	str	r0, [r7, #48]	; 0x30
 801097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097c:	2b00      	cmp	r3, #0
 801097e:	f000 8178 	beq.w	8010c72 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	895b      	ldrh	r3, [r3, #10]
 8010986:	8b3a      	ldrh	r2, [r7, #24]
 8010988:	429a      	cmp	r2, r3
 801098a:	d906      	bls.n	801099a <tcp_write+0x382>
 801098c:	4b8c      	ldr	r3, [pc, #560]	; (8010bc0 <tcp_write+0x5a8>)
 801098e:	f240 2267 	movw	r2, #615	; 0x267
 8010992:	498c      	ldr	r1, [pc, #560]	; (8010bc4 <tcp_write+0x5ac>)
 8010994:	488c      	ldr	r0, [pc, #560]	; (8010bc8 <tcp_write+0x5b0>)
 8010996:	f006 fd97 	bl	80174c8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801099a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099c:	685a      	ldr	r2, [r3, #4]
 801099e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109a2:	18d0      	adds	r0, r2, r3
 80109a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	4413      	add	r3, r2
 80109ac:	8b3a      	ldrh	r2, [r7, #24]
 80109ae:	4619      	mov	r1, r3
 80109b0:	f006 fd77 	bl	80174a2 <memcpy>
 80109b4:	e02f      	b.n	8010a16 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80109b6:	8a7b      	ldrh	r3, [r7, #18]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d006      	beq.n	80109ca <tcp_write+0x3b2>
 80109bc:	4b80      	ldr	r3, [pc, #512]	; (8010bc0 <tcp_write+0x5a8>)
 80109be:	f240 2271 	movw	r2, #625	; 0x271
 80109c2:	4982      	ldr	r1, [pc, #520]	; (8010bcc <tcp_write+0x5b4>)
 80109c4:	4880      	ldr	r0, [pc, #512]	; (8010bc8 <tcp_write+0x5b0>)
 80109c6:	f006 fd7f 	bl	80174c8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80109ca:	8b3b      	ldrh	r3, [r7, #24]
 80109cc:	2201      	movs	r2, #1
 80109ce:	4619      	mov	r1, r3
 80109d0:	2036      	movs	r0, #54	; 0x36
 80109d2:	f7fa fd85 	bl	800b4e0 <pbuf_alloc>
 80109d6:	6178      	str	r0, [r7, #20]
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 814b 	beq.w	8010c76 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80109e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109e4:	68ba      	ldr	r2, [r7, #8]
 80109e6:	441a      	add	r2, r3
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80109ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109f6:	4619      	mov	r1, r3
 80109f8:	2036      	movs	r0, #54	; 0x36
 80109fa:	f7fa fd71 	bl	800b4e0 <pbuf_alloc>
 80109fe:	6338      	str	r0, [r7, #48]	; 0x30
 8010a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d103      	bne.n	8010a0e <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010a06:	6978      	ldr	r0, [r7, #20]
 8010a08:	f7fb f84a 	bl	800baa0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010a0c:	e136      	b.n	8010c7c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010a0e:	6979      	ldr	r1, [r7, #20]
 8010a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a12:	f7fb f913 	bl	800bc3c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a18:	f7fb f8d0 	bl	800bbbc <pbuf_clen>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	461a      	mov	r2, r3
 8010a20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a24:	4413      	add	r3, r2
 8010a26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a2e:	2b09      	cmp	r3, #9
 8010a30:	d903      	bls.n	8010a3a <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a34:	f7fb f834 	bl	800baa0 <pbuf_free>
      goto memerr;
 8010a38:	e120      	b.n	8010c7c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a42:	441a      	add	r2, r3
 8010a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f7ff fc4f 	bl	80102f4 <tcp_create_segment>
 8010a56:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	f000 810d 	beq.w	8010c7a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d102      	bne.n	8010a6c <tcp_write+0x454>
      queue = seg;
 8010a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a68:	647b      	str	r3, [r7, #68]	; 0x44
 8010a6a:	e00c      	b.n	8010a86 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <tcp_write+0x468>
 8010a72:	4b53      	ldr	r3, [pc, #332]	; (8010bc0 <tcp_write+0x5a8>)
 8010a74:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010a78:	4955      	ldr	r1, [pc, #340]	; (8010bd0 <tcp_write+0x5b8>)
 8010a7a:	4853      	ldr	r0, [pc, #332]	; (8010bc8 <tcp_write+0x5b0>)
 8010a7c:	f006 fd24 	bl	80174c8 <iprintf>
      prev_seg->next = seg;
 8010a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a84:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a88:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010a8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a8e:	8b3b      	ldrh	r3, [r7, #24]
 8010a90:	4413      	add	r3, r2
 8010a92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010a96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a9a:	88fb      	ldrh	r3, [r7, #6]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	f4ff af3d 	bcc.w	801091c <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010aa2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d02c      	beq.n	8010b02 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aaa:	685b      	ldr	r3, [r3, #4]
 8010aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010aae:	e01e      	b.n	8010aee <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8010ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab2:	891a      	ldrh	r2, [r3, #8]
 8010ab4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ab6:	4413      	add	r3, r2
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010abc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d110      	bne.n	8010ae8 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010acc:	8952      	ldrh	r2, [r2, #10]
 8010ace:	4413      	add	r3, r2
 8010ad0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010ad2:	68b9      	ldr	r1, [r7, #8]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f006 fce4 	bl	80174a2 <memcpy>
        p->len += oversize_used;
 8010ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010adc:	895a      	ldrh	r2, [r3, #10]
 8010ade:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ae0:	4413      	add	r3, r2
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1dd      	bne.n	8010ab0 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8010af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010af6:	891a      	ldrh	r2, [r3, #8]
 8010af8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010afa:	4413      	add	r3, r2
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b00:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010b02:	8a7a      	ldrh	r2, [r7, #18]
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d018      	beq.n	8010b42 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d106      	bne.n	8010b24 <tcp_write+0x50c>
 8010b16:	4b2a      	ldr	r3, [pc, #168]	; (8010bc0 <tcp_write+0x5a8>)
 8010b18:	f240 22e1 	movw	r2, #737	; 0x2e1
 8010b1c:	492d      	ldr	r1, [pc, #180]	; (8010bd4 <tcp_write+0x5bc>)
 8010b1e:	482a      	ldr	r0, [pc, #168]	; (8010bc8 <tcp_write+0x5b0>)
 8010b20:	f006 fcd2 	bl	80174c8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7fb f886 	bl	800bc3c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b32:	891a      	ldrh	r2, [r3, #8]
 8010b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b36:	891b      	ldrh	r3, [r3, #8]
 8010b38:	4413      	add	r3, r2
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b3e:	811a      	strh	r2, [r3, #8]
 8010b40:	e037      	b.n	8010bb2 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8010b42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d034      	beq.n	8010bb2 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d003      	beq.n	8010b56 <tcp_write+0x53e>
 8010b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <tcp_write+0x54c>
 8010b56:	4b1a      	ldr	r3, [pc, #104]	; (8010bc0 <tcp_write+0x5a8>)
 8010b58:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010b5c:	491e      	ldr	r1, [pc, #120]	; (8010bd8 <tcp_write+0x5c0>)
 8010b5e:	481a      	ldr	r0, [pc, #104]	; (8010bc8 <tcp_write+0x5b0>)
 8010b60:	f006 fcb2 	bl	80174c8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b6a:	e009      	b.n	8010b80 <tcp_write+0x568>
      p->tot_len += extendlen;
 8010b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6e:	891a      	ldrh	r2, [r3, #8]
 8010b70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b72:	4413      	add	r3, r2
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b78:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1f1      	bne.n	8010b6c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8010b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8a:	891a      	ldrh	r2, [r3, #8]
 8010b8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b8e:	4413      	add	r3, r2
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b94:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b98:	895a      	ldrh	r2, [r3, #10]
 8010b9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b9c:	4413      	add	r3, r2
 8010b9e:	b29a      	uxth	r2, r3
 8010ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ba6:	891a      	ldrh	r2, [r3, #8]
 8010ba8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010baa:	4413      	add	r3, r2
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bb0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d111      	bne.n	8010bdc <tcp_write+0x5c4>
    pcb->unsent = queue;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bbc:	66da      	str	r2, [r3, #108]	; 0x6c
 8010bbe:	e010      	b.n	8010be2 <tcp_write+0x5ca>
 8010bc0:	0801a5a0 	.word	0x0801a5a0
 8010bc4:	0801a840 	.word	0x0801a840
 8010bc8:	0801a5f4 	.word	0x0801a5f4
 8010bcc:	0801a880 	.word	0x0801a880
 8010bd0:	0801a890 	.word	0x0801a890
 8010bd4:	0801a8a4 	.word	0x0801a8a4
 8010bd8:	0801a8dc 	.word	0x0801a8dc
  } else {
    last_unsent->next = queue;
 8010bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010be0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010be6:	88fb      	ldrh	r3, [r7, #6]
 8010be8:	441a      	add	r2, r3
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010bf4:	88fb      	ldrh	r3, [r7, #6]
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010c06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d00e      	beq.n	8010c32 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10a      	bne.n	8010c32 <tcp_write+0x61a>
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d106      	bne.n	8010c32 <tcp_write+0x61a>
 8010c24:	4b2c      	ldr	r3, [pc, #176]	; (8010cd8 <tcp_write+0x6c0>)
 8010c26:	f240 3213 	movw	r2, #787	; 0x313
 8010c2a:	492c      	ldr	r1, [pc, #176]	; (8010cdc <tcp_write+0x6c4>)
 8010c2c:	482c      	ldr	r0, [pc, #176]	; (8010ce0 <tcp_write+0x6c8>)
 8010c2e:	f006 fc4b 	bl	80174c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d016      	beq.n	8010c66 <tcp_write+0x64e>
 8010c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d012      	beq.n	8010c66 <tcp_write+0x64e>
 8010c40:	797b      	ldrb	r3, [r7, #5]
 8010c42:	f003 0302 	and.w	r3, r3, #2
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d10d      	bne.n	8010c66 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	899b      	ldrh	r3, [r3, #12]
 8010c50:	b29c      	uxth	r4, r3
 8010c52:	2008      	movs	r0, #8
 8010c54:	f7f9 fb70 	bl	800a338 <lwip_htons>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	4322      	orrs	r2, r4
 8010c62:	b292      	uxth	r2, r2
 8010c64:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010c66:	2300      	movs	r3, #0
 8010c68:	e031      	b.n	8010cce <tcp_write+0x6b6>
          goto memerr;
 8010c6a:	bf00      	nop
 8010c6c:	e006      	b.n	8010c7c <tcp_write+0x664>
            goto memerr;
 8010c6e:	bf00      	nop
 8010c70:	e004      	b.n	8010c7c <tcp_write+0x664>
        goto memerr;
 8010c72:	bf00      	nop
 8010c74:	e002      	b.n	8010c7c <tcp_write+0x664>
        goto memerr;
 8010c76:	bf00      	nop
 8010c78:	e000      	b.n	8010c7c <tcp_write+0x664>
      goto memerr;
 8010c7a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	8b5b      	ldrh	r3, [r3, #26]
 8010c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c84:	b29a      	uxth	r2, r3
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d002      	beq.n	8010c96 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8010c90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010c92:	f7fa ff05 	bl	800baa0 <pbuf_free>
  }
  if (queue != NULL) {
 8010c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d002      	beq.n	8010ca2 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8010c9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010c9e:	f7fc fb71 	bl	800d384 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d00e      	beq.n	8010cca <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d10a      	bne.n	8010cca <tcp_write+0x6b2>
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d106      	bne.n	8010cca <tcp_write+0x6b2>
 8010cbc:	4b06      	ldr	r3, [pc, #24]	; (8010cd8 <tcp_write+0x6c0>)
 8010cbe:	f44f 724a 	mov.w	r2, #808	; 0x328
 8010cc2:	4906      	ldr	r1, [pc, #24]	; (8010cdc <tcp_write+0x6c4>)
 8010cc4:	4806      	ldr	r0, [pc, #24]	; (8010ce0 <tcp_write+0x6c8>)
 8010cc6:	f006 fbff 	bl	80174c8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	375c      	adds	r7, #92	; 0x5c
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd90      	pop	{r4, r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	0801a5a0 	.word	0x0801a5a0
 8010cdc:	0801a914 	.word	0x0801a914
 8010ce0:	0801a5f4 	.word	0x0801a5f4

08010ce4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010ce4:	b590      	push	{r4, r7, lr}
 8010ce6:	b08b      	sub	sp, #44	; 0x2c
 8010ce8:	af02      	add	r7, sp, #8
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	61fb      	str	r3, [r7, #28]
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d106      	bne.n	8010d10 <tcp_split_unsent_seg+0x2c>
 8010d02:	4b95      	ldr	r3, [pc, #596]	; (8010f58 <tcp_split_unsent_seg+0x274>)
 8010d04:	f240 324b 	movw	r2, #843	; 0x34b
 8010d08:	4994      	ldr	r1, [pc, #592]	; (8010f5c <tcp_split_unsent_seg+0x278>)
 8010d0a:	4895      	ldr	r0, [pc, #596]	; (8010f60 <tcp_split_unsent_seg+0x27c>)
 8010d0c:	f006 fbdc 	bl	80174c8 <iprintf>

  useg = pcb->unsent;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d14:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d102      	bne.n	8010d22 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d20:	e116      	b.n	8010f50 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010d22:	887b      	ldrh	r3, [r7, #2]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d109      	bne.n	8010d3c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010d28:	4b8b      	ldr	r3, [pc, #556]	; (8010f58 <tcp_split_unsent_seg+0x274>)
 8010d2a:	f240 3253 	movw	r2, #851	; 0x353
 8010d2e:	498d      	ldr	r1, [pc, #564]	; (8010f64 <tcp_split_unsent_seg+0x280>)
 8010d30:	488b      	ldr	r0, [pc, #556]	; (8010f60 <tcp_split_unsent_seg+0x27c>)
 8010d32:	f006 fbc9 	bl	80174c8 <iprintf>
    return ERR_VAL;
 8010d36:	f06f 0305 	mvn.w	r3, #5
 8010d3a:	e109      	b.n	8010f50 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	891b      	ldrh	r3, [r3, #8]
 8010d40:	887a      	ldrh	r2, [r7, #2]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d301      	bcc.n	8010d4a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010d46:	2300      	movs	r3, #0
 8010d48:	e102      	b.n	8010f50 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d4e:	887a      	ldrh	r2, [r7, #2]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d906      	bls.n	8010d62 <tcp_split_unsent_seg+0x7e>
 8010d54:	4b80      	ldr	r3, [pc, #512]	; (8010f58 <tcp_split_unsent_seg+0x274>)
 8010d56:	f240 325b 	movw	r2, #859	; 0x35b
 8010d5a:	4983      	ldr	r1, [pc, #524]	; (8010f68 <tcp_split_unsent_seg+0x284>)
 8010d5c:	4880      	ldr	r0, [pc, #512]	; (8010f60 <tcp_split_unsent_seg+0x27c>)
 8010d5e:	f006 fbb3 	bl	80174c8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	891b      	ldrh	r3, [r3, #8]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <tcp_split_unsent_seg+0x94>
 8010d6a:	4b7b      	ldr	r3, [pc, #492]	; (8010f58 <tcp_split_unsent_seg+0x274>)
 8010d6c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010d70:	497e      	ldr	r1, [pc, #504]	; (8010f6c <tcp_split_unsent_seg+0x288>)
 8010d72:	487b      	ldr	r0, [pc, #492]	; (8010f60 <tcp_split_unsent_seg+0x27c>)
 8010d74:	f006 fba8 	bl	80174c8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	7a9b      	ldrb	r3, [r3, #10]
 8010d7c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010d7e:	7bfb      	ldrb	r3, [r7, #15]
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	f003 0304 	and.w	r3, r3, #4
 8010d88:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	891a      	ldrh	r2, [r3, #8]
 8010d8e:	887b      	ldrh	r3, [r7, #2]
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010d94:	7bbb      	ldrb	r3, [r7, #14]
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	89bb      	ldrh	r3, [r7, #12]
 8010d9a:	4413      	add	r3, r2
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010da2:	4619      	mov	r1, r3
 8010da4:	2036      	movs	r0, #54	; 0x36
 8010da6:	f7fa fb9b 	bl	800b4e0 <pbuf_alloc>
 8010daa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f000 80b7 	beq.w	8010f22 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	891a      	ldrh	r2, [r3, #8]
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	891b      	ldrh	r3, [r3, #8]
 8010dbe:	1ad3      	subs	r3, r2, r3
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	887b      	ldrh	r3, [r7, #2]
 8010dc4:	4413      	add	r3, r2
 8010dc6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	6858      	ldr	r0, [r3, #4]
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	685a      	ldr	r2, [r3, #4]
 8010dd0:	7bbb      	ldrb	r3, [r7, #14]
 8010dd2:	18d1      	adds	r1, r2, r3
 8010dd4:	897b      	ldrh	r3, [r7, #10]
 8010dd6:	89ba      	ldrh	r2, [r7, #12]
 8010dd8:	f7fb f868 	bl	800beac <pbuf_copy_partial>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	461a      	mov	r2, r3
 8010de0:	89bb      	ldrh	r3, [r7, #12]
 8010de2:	4293      	cmp	r3, r2
 8010de4:	f040 809f 	bne.w	8010f26 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	899b      	ldrh	r3, [r3, #12]
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f9 faa1 	bl	800a338 <lwip_htons>
 8010df6:	4603      	mov	r3, r0
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010dfe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010e00:	2300      	movs	r3, #0
 8010e02:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010e04:	7efb      	ldrb	r3, [r7, #27]
 8010e06:	f003 0308 	and.w	r3, r3, #8
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d007      	beq.n	8010e1e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010e0e:	7efb      	ldrb	r3, [r7, #27]
 8010e10:	f023 0308 	bic.w	r3, r3, #8
 8010e14:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010e16:	7ebb      	ldrb	r3, [r7, #26]
 8010e18:	f043 0308 	orr.w	r3, r3, #8
 8010e1c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010e1e:	7efb      	ldrb	r3, [r7, #27]
 8010e20:	f003 0301 	and.w	r3, r3, #1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d007      	beq.n	8010e38 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010e28:	7efb      	ldrb	r3, [r7, #27]
 8010e2a:	f023 0301 	bic.w	r3, r3, #1
 8010e2e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010e30:	7ebb      	ldrb	r3, [r7, #26]
 8010e32:	f043 0301 	orr.w	r3, r3, #1
 8010e36:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7f9 fa8f 	bl	800a362 <lwip_htonl>
 8010e44:	4602      	mov	r2, r0
 8010e46:	887b      	ldrh	r3, [r7, #2]
 8010e48:	18d1      	adds	r1, r2, r3
 8010e4a:	7eba      	ldrb	r2, [r7, #26]
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	460b      	mov	r3, r1
 8010e52:	6939      	ldr	r1, [r7, #16]
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7ff fa4d 	bl	80102f4 <tcp_create_segment>
 8010e5a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d063      	beq.n	8010f2a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fa fea8 	bl	800bbbc <pbuf_clen>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	461a      	mov	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e76:	1a9b      	subs	r3, r3, r2
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	6858      	ldr	r0, [r3, #4]
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	891a      	ldrh	r2, [r3, #8]
 8010e8a:	89bb      	ldrh	r3, [r7, #12]
 8010e8c:	1ad3      	subs	r3, r2, r3
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	4619      	mov	r1, r3
 8010e92:	f7fa fc7f 	bl	800b794 <pbuf_realloc>
  useg->len -= remainder;
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	891a      	ldrh	r2, [r3, #8]
 8010e9a:	89bb      	ldrh	r3, [r7, #12]
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	899b      	ldrh	r3, [r3, #12]
 8010eaa:	b29c      	uxth	r4, r3
 8010eac:	7efb      	ldrb	r3, [r7, #27]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7f9 fa41 	bl	800a338 <lwip_htons>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	461a      	mov	r2, r3
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	4322      	orrs	r2, r4
 8010ec0:	b292      	uxth	r2, r2
 8010ec2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7fa fe77 	bl	800bbbc <pbuf_clen>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ed8:	4413      	add	r3, r2
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fa fe68 	bl	800bbbc <pbuf_clen>
 8010eec:	4603      	mov	r3, r0
 8010eee:	461a      	mov	r2, r3
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ef6:	4413      	add	r3, r2
 8010ef8:	b29a      	uxth	r2, r3
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	69fa      	ldr	r2, [r7, #28]
 8010f0c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d103      	bne.n	8010f1e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	e016      	b.n	8010f50 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010f22:	bf00      	nop
 8010f24:	e002      	b.n	8010f2c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f26:	bf00      	nop
 8010f28:	e000      	b.n	8010f2c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f2a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d006      	beq.n	8010f40 <tcp_split_unsent_seg+0x25c>
 8010f32:	4b09      	ldr	r3, [pc, #36]	; (8010f58 <tcp_split_unsent_seg+0x274>)
 8010f34:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010f38:	490d      	ldr	r1, [pc, #52]	; (8010f70 <tcp_split_unsent_seg+0x28c>)
 8010f3a:	4809      	ldr	r0, [pc, #36]	; (8010f60 <tcp_split_unsent_seg+0x27c>)
 8010f3c:	f006 fac4 	bl	80174c8 <iprintf>
  if (p != NULL) {
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d002      	beq.n	8010f4c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010f46:	6938      	ldr	r0, [r7, #16]
 8010f48:	f7fa fdaa 	bl	800baa0 <pbuf_free>
  }

  return ERR_MEM;
 8010f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3724      	adds	r7, #36	; 0x24
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd90      	pop	{r4, r7, pc}
 8010f58:	0801a5a0 	.word	0x0801a5a0
 8010f5c:	0801a934 	.word	0x0801a934
 8010f60:	0801a5f4 	.word	0x0801a5f4
 8010f64:	0801a958 	.word	0x0801a958
 8010f68:	0801a97c 	.word	0x0801a97c
 8010f6c:	0801a98c 	.word	0x0801a98c
 8010f70:	0801a99c 	.word	0x0801a99c

08010f74 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010f74:	b590      	push	{r4, r7, lr}
 8010f76:	b085      	sub	sp, #20
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d106      	bne.n	8010f90 <tcp_send_fin+0x1c>
 8010f82:	4b21      	ldr	r3, [pc, #132]	; (8011008 <tcp_send_fin+0x94>)
 8010f84:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010f88:	4920      	ldr	r1, [pc, #128]	; (801100c <tcp_send_fin+0x98>)
 8010f8a:	4821      	ldr	r0, [pc, #132]	; (8011010 <tcp_send_fin+0x9c>)
 8010f8c:	f006 fa9c 	bl	80174c8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d02e      	beq.n	8010ff6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f9c:	60fb      	str	r3, [r7, #12]
 8010f9e:	e002      	b.n	8010fa6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1f8      	bne.n	8010fa0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	899b      	ldrh	r3, [r3, #12]
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7f9 f9be 	bl	800a338 <lwip_htons>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	f003 0307 	and.w	r3, r3, #7
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d116      	bne.n	8010ff6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	899b      	ldrh	r3, [r3, #12]
 8010fce:	b29c      	uxth	r4, r3
 8010fd0:	2001      	movs	r0, #1
 8010fd2:	f7f9 f9b1 	bl	800a338 <lwip_htons>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	461a      	mov	r2, r3
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	4322      	orrs	r2, r4
 8010fe0:	b292      	uxth	r2, r2
 8010fe2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	8b5b      	ldrh	r3, [r3, #26]
 8010fe8:	f043 0320 	orr.w	r3, r3, #32
 8010fec:	b29a      	uxth	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	e004      	b.n	8011000 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010ff6:	2101      	movs	r1, #1
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f000 f80b 	bl	8011014 <tcp_enqueue_flags>
 8010ffe:	4603      	mov	r3, r0
}
 8011000:	4618      	mov	r0, r3
 8011002:	3714      	adds	r7, #20
 8011004:	46bd      	mov	sp, r7
 8011006:	bd90      	pop	{r4, r7, pc}
 8011008:	0801a5a0 	.word	0x0801a5a0
 801100c:	0801a9a8 	.word	0x0801a9a8
 8011010:	0801a5f4 	.word	0x0801a5f4

08011014 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b08a      	sub	sp, #40	; 0x28
 8011018:	af02      	add	r7, sp, #8
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	460b      	mov	r3, r1
 801101e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011020:	2300      	movs	r3, #0
 8011022:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011024:	2300      	movs	r3, #0
 8011026:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011028:	78fb      	ldrb	r3, [r7, #3]
 801102a:	f003 0303 	and.w	r3, r3, #3
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <tcp_enqueue_flags+0x2c>
 8011032:	4b67      	ldr	r3, [pc, #412]	; (80111d0 <tcp_enqueue_flags+0x1bc>)
 8011034:	f240 4212 	movw	r2, #1042	; 0x412
 8011038:	4966      	ldr	r1, [pc, #408]	; (80111d4 <tcp_enqueue_flags+0x1c0>)
 801103a:	4867      	ldr	r0, [pc, #412]	; (80111d8 <tcp_enqueue_flags+0x1c4>)
 801103c:	f006 fa44 	bl	80174c8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d106      	bne.n	8011054 <tcp_enqueue_flags+0x40>
 8011046:	4b62      	ldr	r3, [pc, #392]	; (80111d0 <tcp_enqueue_flags+0x1bc>)
 8011048:	f240 4213 	movw	r2, #1043	; 0x413
 801104c:	4963      	ldr	r1, [pc, #396]	; (80111dc <tcp_enqueue_flags+0x1c8>)
 801104e:	4862      	ldr	r0, [pc, #392]	; (80111d8 <tcp_enqueue_flags+0x1c4>)
 8011050:	f006 fa3a 	bl	80174c8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011054:	78fb      	ldrb	r3, [r7, #3]
 8011056:	f003 0302 	and.w	r3, r3, #2
 801105a:	2b00      	cmp	r3, #0
 801105c:	d001      	beq.n	8011062 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801105e:	2301      	movs	r3, #1
 8011060:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011062:	7ffb      	ldrb	r3, [r7, #31]
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	b2db      	uxtb	r3, r3
 8011068:	f003 0304 	and.w	r3, r3, #4
 801106c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801106e:	7dfb      	ldrb	r3, [r7, #23]
 8011070:	b29b      	uxth	r3, r3
 8011072:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011076:	4619      	mov	r1, r3
 8011078:	2036      	movs	r0, #54	; 0x36
 801107a:	f7fa fa31 	bl	800b4e0 <pbuf_alloc>
 801107e:	6138      	str	r0, [r7, #16]
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d109      	bne.n	801109a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	8b5b      	ldrh	r3, [r3, #26]
 801108a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801108e:	b29a      	uxth	r2, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011094:	f04f 33ff 	mov.w	r3, #4294967295
 8011098:	e095      	b.n	80111c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	895a      	ldrh	r2, [r3, #10]
 801109e:	7dfb      	ldrb	r3, [r7, #23]
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d206      	bcs.n	80110b4 <tcp_enqueue_flags+0xa0>
 80110a6:	4b4a      	ldr	r3, [pc, #296]	; (80111d0 <tcp_enqueue_flags+0x1bc>)
 80110a8:	f240 423a 	movw	r2, #1082	; 0x43a
 80110ac:	494c      	ldr	r1, [pc, #304]	; (80111e0 <tcp_enqueue_flags+0x1cc>)
 80110ae:	484a      	ldr	r0, [pc, #296]	; (80111d8 <tcp_enqueue_flags+0x1c4>)
 80110b0:	f006 fa0a 	bl	80174c8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80110b8:	78fa      	ldrb	r2, [r7, #3]
 80110ba:	7ffb      	ldrb	r3, [r7, #31]
 80110bc:	9300      	str	r3, [sp, #0]
 80110be:	460b      	mov	r3, r1
 80110c0:	6939      	ldr	r1, [r7, #16]
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f7ff f916 	bl	80102f4 <tcp_create_segment>
 80110c8:	60f8      	str	r0, [r7, #12]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d109      	bne.n	80110e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	8b5b      	ldrh	r3, [r3, #26]
 80110d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110d8:	b29a      	uxth	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80110de:	f04f 33ff 	mov.w	r3, #4294967295
 80110e2:	e070      	b.n	80111c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	f003 0303 	and.w	r3, r3, #3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d006      	beq.n	80110fe <tcp_enqueue_flags+0xea>
 80110f0:	4b37      	ldr	r3, [pc, #220]	; (80111d0 <tcp_enqueue_flags+0x1bc>)
 80110f2:	f240 4242 	movw	r2, #1090	; 0x442
 80110f6:	493b      	ldr	r1, [pc, #236]	; (80111e4 <tcp_enqueue_flags+0x1d0>)
 80110f8:	4837      	ldr	r0, [pc, #220]	; (80111d8 <tcp_enqueue_flags+0x1c4>)
 80110fa:	f006 f9e5 	bl	80174c8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	891b      	ldrh	r3, [r3, #8]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d006      	beq.n	8011114 <tcp_enqueue_flags+0x100>
 8011106:	4b32      	ldr	r3, [pc, #200]	; (80111d0 <tcp_enqueue_flags+0x1bc>)
 8011108:	f240 4243 	movw	r2, #1091	; 0x443
 801110c:	4936      	ldr	r1, [pc, #216]	; (80111e8 <tcp_enqueue_flags+0x1d4>)
 801110e:	4832      	ldr	r0, [pc, #200]	; (80111d8 <tcp_enqueue_flags+0x1c4>)
 8011110:	f006 f9da 	bl	80174c8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011118:	2b00      	cmp	r3, #0
 801111a:	d103      	bne.n	8011124 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	68fa      	ldr	r2, [r7, #12]
 8011120:	66da      	str	r2, [r3, #108]	; 0x6c
 8011122:	e00d      	b.n	8011140 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011128:	61bb      	str	r3, [r7, #24]
 801112a:	e002      	b.n	8011132 <tcp_enqueue_flags+0x11e>
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	61bb      	str	r3, [r7, #24]
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d1f8      	bne.n	801112c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	68fa      	ldr	r2, [r7, #12]
 801113e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011148:	78fb      	ldrb	r3, [r7, #3]
 801114a:	f003 0302 	and.w	r3, r3, #2
 801114e:	2b00      	cmp	r3, #0
 8011150:	d104      	bne.n	801115c <tcp_enqueue_flags+0x148>
 8011152:	78fb      	ldrb	r3, [r7, #3]
 8011154:	f003 0301 	and.w	r3, r3, #1
 8011158:	2b00      	cmp	r3, #0
 801115a:	d004      	beq.n	8011166 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011160:	1c5a      	adds	r2, r3, #1
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011166:	78fb      	ldrb	r3, [r7, #3]
 8011168:	f003 0301 	and.w	r3, r3, #1
 801116c:	2b00      	cmp	r3, #0
 801116e:	d006      	beq.n	801117e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	8b5b      	ldrh	r3, [r3, #26]
 8011174:	f043 0320 	orr.w	r3, r3, #32
 8011178:	b29a      	uxth	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	4618      	mov	r0, r3
 8011184:	f7fa fd1a 	bl	800bbbc <pbuf_clen>
 8011188:	4603      	mov	r3, r0
 801118a:	461a      	mov	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011192:	4413      	add	r3, r2
 8011194:	b29a      	uxth	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00e      	beq.n	80111c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d10a      	bne.n	80111c4 <tcp_enqueue_flags+0x1b0>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d106      	bne.n	80111c4 <tcp_enqueue_flags+0x1b0>
 80111b6:	4b06      	ldr	r3, [pc, #24]	; (80111d0 <tcp_enqueue_flags+0x1bc>)
 80111b8:	f240 4266 	movw	r2, #1126	; 0x466
 80111bc:	490b      	ldr	r1, [pc, #44]	; (80111ec <tcp_enqueue_flags+0x1d8>)
 80111be:	4806      	ldr	r0, [pc, #24]	; (80111d8 <tcp_enqueue_flags+0x1c4>)
 80111c0:	f006 f982 	bl	80174c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3720      	adds	r7, #32
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	0801a5a0 	.word	0x0801a5a0
 80111d4:	0801a9c4 	.word	0x0801a9c4
 80111d8:	0801a5f4 	.word	0x0801a5f4
 80111dc:	0801aa1c 	.word	0x0801aa1c
 80111e0:	0801aa3c 	.word	0x0801aa3c
 80111e4:	0801aa78 	.word	0x0801aa78
 80111e8:	0801aa90 	.word	0x0801aa90
 80111ec:	0801aabc 	.word	0x0801aabc

080111f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80111f0:	b5b0      	push	{r4, r5, r7, lr}
 80111f2:	b08a      	sub	sp, #40	; 0x28
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d106      	bne.n	801120c <tcp_output+0x1c>
 80111fe:	4ba0      	ldr	r3, [pc, #640]	; (8011480 <tcp_output+0x290>)
 8011200:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011204:	499f      	ldr	r1, [pc, #636]	; (8011484 <tcp_output+0x294>)
 8011206:	48a0      	ldr	r0, [pc, #640]	; (8011488 <tcp_output+0x298>)
 8011208:	f006 f95e 	bl	80174c8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	7d1b      	ldrb	r3, [r3, #20]
 8011210:	2b01      	cmp	r3, #1
 8011212:	d106      	bne.n	8011222 <tcp_output+0x32>
 8011214:	4b9a      	ldr	r3, [pc, #616]	; (8011480 <tcp_output+0x290>)
 8011216:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801121a:	499c      	ldr	r1, [pc, #624]	; (801148c <tcp_output+0x29c>)
 801121c:	489a      	ldr	r0, [pc, #616]	; (8011488 <tcp_output+0x298>)
 801121e:	f006 f953 	bl	80174c8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011222:	4b9b      	ldr	r3, [pc, #620]	; (8011490 <tcp_output+0x2a0>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	429a      	cmp	r2, r3
 801122a:	d101      	bne.n	8011230 <tcp_output+0x40>
    return ERR_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	e1d2      	b.n	80115d6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801123c:	429a      	cmp	r2, r3
 801123e:	d203      	bcs.n	8011248 <tcp_output+0x58>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011246:	e002      	b.n	801124e <tcp_output+0x5e>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801124e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011254:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	2b00      	cmp	r3, #0
 801125a:	d10b      	bne.n	8011274 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	8b5b      	ldrh	r3, [r3, #26]
 8011260:	f003 0302 	and.w	r3, r3, #2
 8011264:	2b00      	cmp	r3, #0
 8011266:	f000 81a9 	beq.w	80115bc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 fdd6 	bl	8011e1c <tcp_send_empty_ack>
 8011270:	4603      	mov	r3, r0
 8011272:	e1b0      	b.n	80115d6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011274:	6879      	ldr	r1, [r7, #4]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	3304      	adds	r3, #4
 801127a:	461a      	mov	r2, r3
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff f81d 	bl	80102bc <tcp_route>
 8011282:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d102      	bne.n	8011290 <tcp_output+0xa0>
    return ERR_RTE;
 801128a:	f06f 0303 	mvn.w	r3, #3
 801128e:	e1a2      	b.n	80115d6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d003      	beq.n	801129e <tcp_output+0xae>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d111      	bne.n	80112c2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d002      	beq.n	80112aa <tcp_output+0xba>
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	3304      	adds	r3, #4
 80112a8:	e000      	b.n	80112ac <tcp_output+0xbc>
 80112aa:	2300      	movs	r3, #0
 80112ac:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d102      	bne.n	80112ba <tcp_output+0xca>
      return ERR_RTE;
 80112b4:	f06f 0303 	mvn.w	r3, #3
 80112b8:	e18d      	b.n	80115d6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80112c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7f9 f84a 	bl	800a362 <lwip_htonl>
 80112ce:	4602      	mov	r2, r0
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112d8:	8912      	ldrh	r2, [r2, #8]
 80112da:	4413      	add	r3, r2
 80112dc:	69ba      	ldr	r2, [r7, #24]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d227      	bcs.n	8011332 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112e8:	461a      	mov	r2, r3
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d114      	bne.n	801131a <tcp_output+0x12a>
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d110      	bne.n	801131a <tcp_output+0x12a>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d10b      	bne.n	801131a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2200      	movs	r2, #0
 8011306:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2201      	movs	r2, #1
 801130e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	8b5b      	ldrh	r3, [r3, #26]
 801131e:	f003 0302 	and.w	r3, r3, #2
 8011322:	2b00      	cmp	r3, #0
 8011324:	f000 814c 	beq.w	80115c0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f000 fd77 	bl	8011e1c <tcp_send_empty_ack>
 801132e:	4603      	mov	r3, r0
 8011330:	e151      	b.n	80115d6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801133e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011340:	6a3b      	ldr	r3, [r7, #32]
 8011342:	2b00      	cmp	r3, #0
 8011344:	f000 811b 	beq.w	801157e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8011348:	e002      	b.n	8011350 <tcp_output+0x160>
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	623b      	str	r3, [r7, #32]
 8011350:	6a3b      	ldr	r3, [r7, #32]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d1f8      	bne.n	801134a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011358:	e111      	b.n	801157e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135c:	68db      	ldr	r3, [r3, #12]
 801135e:	899b      	ldrh	r3, [r3, #12]
 8011360:	b29b      	uxth	r3, r3
 8011362:	4618      	mov	r0, r3
 8011364:	f7f8 ffe8 	bl	800a338 <lwip_htons>
 8011368:	4603      	mov	r3, r0
 801136a:	b2db      	uxtb	r3, r3
 801136c:	f003 0304 	and.w	r3, r3, #4
 8011370:	2b00      	cmp	r3, #0
 8011372:	d006      	beq.n	8011382 <tcp_output+0x192>
 8011374:	4b42      	ldr	r3, [pc, #264]	; (8011480 <tcp_output+0x290>)
 8011376:	f240 5237 	movw	r2, #1335	; 0x537
 801137a:	4946      	ldr	r1, [pc, #280]	; (8011494 <tcp_output+0x2a4>)
 801137c:	4842      	ldr	r0, [pc, #264]	; (8011488 <tcp_output+0x298>)
 801137e:	f006 f8a3 	bl	80174c8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011386:	2b00      	cmp	r3, #0
 8011388:	d01f      	beq.n	80113ca <tcp_output+0x1da>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	8b5b      	ldrh	r3, [r3, #26]
 801138e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011392:	2b00      	cmp	r3, #0
 8011394:	d119      	bne.n	80113ca <tcp_output+0x1da>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00b      	beq.n	80113b6 <tcp_output+0x1c6>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d110      	bne.n	80113ca <tcp_output+0x1da>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113ac:	891a      	ldrh	r2, [r3, #8]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d209      	bcs.n	80113ca <tcp_output+0x1da>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d004      	beq.n	80113ca <tcp_output+0x1da>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113c6:	2b08      	cmp	r3, #8
 80113c8:	d901      	bls.n	80113ce <tcp_output+0x1de>
 80113ca:	2301      	movs	r3, #1
 80113cc:	e000      	b.n	80113d0 <tcp_output+0x1e0>
 80113ce:	2300      	movs	r3, #0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d106      	bne.n	80113e2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	8b5b      	ldrh	r3, [r3, #26]
 80113d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f000 80e3 	beq.w	80115a8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	7d1b      	ldrb	r3, [r3, #20]
 80113e6:	2b02      	cmp	r3, #2
 80113e8:	d00d      	beq.n	8011406 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80113ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	899b      	ldrh	r3, [r3, #12]
 80113f0:	b29c      	uxth	r4, r3
 80113f2:	2010      	movs	r0, #16
 80113f4:	f7f8 ffa0 	bl	800a338 <lwip_htons>
 80113f8:	4603      	mov	r3, r0
 80113fa:	461a      	mov	r2, r3
 80113fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	4322      	orrs	r2, r4
 8011402:	b292      	uxth	r2, r2
 8011404:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011406:	697a      	ldr	r2, [r7, #20]
 8011408:	6879      	ldr	r1, [r7, #4]
 801140a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801140c:	f000 f908 	bl	8011620 <tcp_output_segment>
 8011410:	4603      	mov	r3, r0
 8011412:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d009      	beq.n	8011430 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	8b5b      	ldrh	r3, [r3, #26]
 8011420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011424:	b29a      	uxth	r2, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	835a      	strh	r2, [r3, #26]
      return err;
 801142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801142e:	e0d2      	b.n	80115d6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011432:	681a      	ldr	r2, [r3, #0]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	7d1b      	ldrb	r3, [r3, #20]
 801143c:	2b02      	cmp	r3, #2
 801143e:	d006      	beq.n	801144e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	8b5b      	ldrh	r3, [r3, #26]
 8011444:	f023 0303 	bic.w	r3, r3, #3
 8011448:	b29a      	uxth	r2, r3
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	4618      	mov	r0, r3
 8011456:	f7f8 ff84 	bl	800a362 <lwip_htonl>
 801145a:	4604      	mov	r4, r0
 801145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145e:	891b      	ldrh	r3, [r3, #8]
 8011460:	461d      	mov	r5, r3
 8011462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	899b      	ldrh	r3, [r3, #12]
 8011468:	b29b      	uxth	r3, r3
 801146a:	4618      	mov	r0, r3
 801146c:	f7f8 ff64 	bl	800a338 <lwip_htons>
 8011470:	4603      	mov	r3, r0
 8011472:	b2db      	uxtb	r3, r3
 8011474:	f003 0303 	and.w	r3, r3, #3
 8011478:	2b00      	cmp	r3, #0
 801147a:	d00d      	beq.n	8011498 <tcp_output+0x2a8>
 801147c:	2301      	movs	r3, #1
 801147e:	e00c      	b.n	801149a <tcp_output+0x2aa>
 8011480:	0801a5a0 	.word	0x0801a5a0
 8011484:	0801aae4 	.word	0x0801aae4
 8011488:	0801a5f4 	.word	0x0801a5f4
 801148c:	0801aafc 	.word	0x0801aafc
 8011490:	2000f340 	.word	0x2000f340
 8011494:	0801ab24 	.word	0x0801ab24
 8011498:	2300      	movs	r3, #0
 801149a:	442b      	add	r3, r5
 801149c:	4423      	add	r3, r4
 801149e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	da02      	bge.n	80114b2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80114b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b4:	891b      	ldrh	r3, [r3, #8]
 80114b6:	461c      	mov	r4, r3
 80114b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	899b      	ldrh	r3, [r3, #12]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7f8 ff39 	bl	800a338 <lwip_htons>
 80114c6:	4603      	mov	r3, r0
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	f003 0303 	and.w	r3, r3, #3
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d001      	beq.n	80114d6 <tcp_output+0x2e6>
 80114d2:	2301      	movs	r3, #1
 80114d4:	e000      	b.n	80114d8 <tcp_output+0x2e8>
 80114d6:	2300      	movs	r3, #0
 80114d8:	4423      	add	r3, r4
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d049      	beq.n	8011572 <tcp_output+0x382>
      seg->next = NULL;
 80114de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e0:	2200      	movs	r2, #0
 80114e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d105      	bne.n	80114f8 <tcp_output+0x308>
        pcb->unacked = seg;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80114f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f4:	623b      	str	r3, [r7, #32]
 80114f6:	e03f      	b.n	8011578 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80114f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	4618      	mov	r0, r3
 8011500:	f7f8 ff2f 	bl	800a362 <lwip_htonl>
 8011504:	4604      	mov	r4, r0
 8011506:	6a3b      	ldr	r3, [r7, #32]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	4618      	mov	r0, r3
 801150e:	f7f8 ff28 	bl	800a362 <lwip_htonl>
 8011512:	4603      	mov	r3, r0
 8011514:	1ae3      	subs	r3, r4, r3
 8011516:	2b00      	cmp	r3, #0
 8011518:	da24      	bge.n	8011564 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	3370      	adds	r3, #112	; 0x70
 801151e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011520:	e002      	b.n	8011528 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011522:	69fb      	ldr	r3, [r7, #28]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011528:	69fb      	ldr	r3, [r7, #28]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d011      	beq.n	8011554 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	4618      	mov	r0, r3
 801153a:	f7f8 ff12 	bl	800a362 <lwip_htonl>
 801153e:	4604      	mov	r4, r0
 8011540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	4618      	mov	r0, r3
 8011548:	f7f8 ff0b 	bl	800a362 <lwip_htonl>
 801154c:	4603      	mov	r3, r0
 801154e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011550:	2b00      	cmp	r3, #0
 8011552:	dbe6      	blt.n	8011522 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	e009      	b.n	8011578 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011564:	6a3b      	ldr	r3, [r7, #32]
 8011566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011568:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801156a:	6a3b      	ldr	r3, [r7, #32]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	623b      	str	r3, [r7, #32]
 8011570:	e002      	b.n	8011578 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011574:	f7fb ff1a 	bl	800d3ac <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801157c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	2b00      	cmp	r3, #0
 8011582:	d012      	beq.n	80115aa <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	4618      	mov	r0, r3
 801158c:	f7f8 fee9 	bl	800a362 <lwip_htonl>
 8011590:	4602      	mov	r2, r0
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801159a:	8912      	ldrh	r2, [r2, #8]
 801159c:	4413      	add	r3, r2
  while (seg != NULL &&
 801159e:	69ba      	ldr	r2, [r7, #24]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	f4bf aeda 	bcs.w	801135a <tcp_output+0x16a>
 80115a6:	e000      	b.n	80115aa <tcp_output+0x3ba>
      break;
 80115a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d108      	bne.n	80115c4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80115ba:	e004      	b.n	80115c6 <tcp_output+0x3d6>
    goto output_done;
 80115bc:	bf00      	nop
 80115be:	e002      	b.n	80115c6 <tcp_output+0x3d6>
    goto output_done;
 80115c0:	bf00      	nop
 80115c2:	e000      	b.n	80115c6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80115c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	8b5b      	ldrh	r3, [r3, #26]
 80115ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3728      	adds	r7, #40	; 0x28
 80115da:	46bd      	mov	sp, r7
 80115dc:	bdb0      	pop	{r4, r5, r7, pc}
 80115de:	bf00      	nop

080115e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d106      	bne.n	80115fc <tcp_output_segment_busy+0x1c>
 80115ee:	4b09      	ldr	r3, [pc, #36]	; (8011614 <tcp_output_segment_busy+0x34>)
 80115f0:	f240 529a 	movw	r2, #1434	; 0x59a
 80115f4:	4908      	ldr	r1, [pc, #32]	; (8011618 <tcp_output_segment_busy+0x38>)
 80115f6:	4809      	ldr	r0, [pc, #36]	; (801161c <tcp_output_segment_busy+0x3c>)
 80115f8:	f005 ff66 	bl	80174c8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	7b9b      	ldrb	r3, [r3, #14]
 8011602:	2b01      	cmp	r3, #1
 8011604:	d001      	beq.n	801160a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011606:	2301      	movs	r3, #1
 8011608:	e000      	b.n	801160c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801160a:	2300      	movs	r3, #0
}
 801160c:	4618      	mov	r0, r3
 801160e:	3708      	adds	r7, #8
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	0801a5a0 	.word	0x0801a5a0
 8011618:	0801ab3c 	.word	0x0801ab3c
 801161c:	0801a5f4 	.word	0x0801a5f4

08011620 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011620:	b5b0      	push	{r4, r5, r7, lr}
 8011622:	b08c      	sub	sp, #48	; 0x30
 8011624:	af04      	add	r7, sp, #16
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d106      	bne.n	8011640 <tcp_output_segment+0x20>
 8011632:	4b64      	ldr	r3, [pc, #400]	; (80117c4 <tcp_output_segment+0x1a4>)
 8011634:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011638:	4963      	ldr	r1, [pc, #396]	; (80117c8 <tcp_output_segment+0x1a8>)
 801163a:	4864      	ldr	r0, [pc, #400]	; (80117cc <tcp_output_segment+0x1ac>)
 801163c:	f005 ff44 	bl	80174c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d106      	bne.n	8011654 <tcp_output_segment+0x34>
 8011646:	4b5f      	ldr	r3, [pc, #380]	; (80117c4 <tcp_output_segment+0x1a4>)
 8011648:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801164c:	4960      	ldr	r1, [pc, #384]	; (80117d0 <tcp_output_segment+0x1b0>)
 801164e:	485f      	ldr	r0, [pc, #380]	; (80117cc <tcp_output_segment+0x1ac>)
 8011650:	f005 ff3a 	bl	80174c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_output_segment+0x48>
 801165a:	4b5a      	ldr	r3, [pc, #360]	; (80117c4 <tcp_output_segment+0x1a4>)
 801165c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011660:	495c      	ldr	r1, [pc, #368]	; (80117d4 <tcp_output_segment+0x1b4>)
 8011662:	485a      	ldr	r0, [pc, #360]	; (80117cc <tcp_output_segment+0x1ac>)
 8011664:	f005 ff30 	bl	80174c8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	f7ff ffb9 	bl	80115e0 <tcp_output_segment_busy>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d001      	beq.n	8011678 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011674:	2300      	movs	r3, #0
 8011676:	e0a0      	b.n	80117ba <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	68dc      	ldr	r4, [r3, #12]
 8011680:	4610      	mov	r0, r2
 8011682:	f7f8 fe6e 	bl	800a362 <lwip_htonl>
 8011686:	4603      	mov	r3, r0
 8011688:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	68dc      	ldr	r4, [r3, #12]
 8011692:	4610      	mov	r0, r2
 8011694:	f7f8 fe50 	bl	800a338 <lwip_htons>
 8011698:	4603      	mov	r3, r0
 801169a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80116a4:	441a      	add	r2, r3
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	3314      	adds	r3, #20
 80116b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	7a9b      	ldrb	r3, [r3, #10]
 80116b6:	f003 0301 	and.w	r3, r3, #1
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d015      	beq.n	80116ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	3304      	adds	r3, #4
 80116c2:	461a      	mov	r2, r3
 80116c4:	6879      	ldr	r1, [r7, #4]
 80116c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80116ca:	f7fc fa33 	bl	800db34 <tcp_eff_send_mss_netif>
 80116ce:	4603      	mov	r3, r0
 80116d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80116d2:	8b7b      	ldrh	r3, [r7, #26]
 80116d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80116d8:	4618      	mov	r0, r3
 80116da:	f7f8 fe42 	bl	800a362 <lwip_htonl>
 80116de:	4602      	mov	r2, r0
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	3304      	adds	r3, #4
 80116e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	da02      	bge.n	80116fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	2200      	movs	r2, #0
 80116f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d10c      	bne.n	801171c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011702:	4b35      	ldr	r3, [pc, #212]	; (80117d8 <tcp_output_segment+0x1b8>)
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	4618      	mov	r0, r3
 8011712:	f7f8 fe26 	bl	800a362 <lwip_htonl>
 8011716:	4602      	mov	r2, r0
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	461a      	mov	r2, r3
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	8959      	ldrh	r1, [r3, #10]
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	8b3a      	ldrh	r2, [r7, #24]
 8011738:	1a8a      	subs	r2, r1, r2
 801173a:	b292      	uxth	r2, r2
 801173c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	8919      	ldrh	r1, [r3, #8]
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	8b3a      	ldrh	r2, [r7, #24]
 801174a:	1a8a      	subs	r2, r1, r2
 801174c:	b292      	uxth	r2, r2
 801174e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	68fa      	ldr	r2, [r7, #12]
 8011756:	68d2      	ldr	r2, [r2, #12]
 8011758:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	2200      	movs	r2, #0
 8011760:	741a      	strb	r2, [r3, #16]
 8011762:	2200      	movs	r2, #0
 8011764:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	f103 0214 	add.w	r2, r3, #20
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	7a9b      	ldrb	r3, [r3, #10]
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	f003 0304 	and.w	r3, r3, #4
 8011778:	4413      	add	r3, r2
 801177a:	69fa      	ldr	r2, [r7, #28]
 801177c:	429a      	cmp	r2, r3
 801177e:	d006      	beq.n	801178e <tcp_output_segment+0x16e>
 8011780:	4b10      	ldr	r3, [pc, #64]	; (80117c4 <tcp_output_segment+0x1a4>)
 8011782:	f240 621c 	movw	r2, #1564	; 0x61c
 8011786:	4915      	ldr	r1, [pc, #84]	; (80117dc <tcp_output_segment+0x1bc>)
 8011788:	4810      	ldr	r0, [pc, #64]	; (80117cc <tcp_output_segment+0x1ac>)
 801178a:	f005 fe9d 	bl	80174c8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	6858      	ldr	r0, [r3, #4]
 8011792:	68b9      	ldr	r1, [r7, #8]
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	1d1c      	adds	r4, r3, #4
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	7add      	ldrb	r5, [r3, #11]
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	7a9b      	ldrb	r3, [r3, #10]
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	9202      	str	r2, [sp, #8]
 80117a4:	2206      	movs	r2, #6
 80117a6:	9201      	str	r2, [sp, #4]
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	462b      	mov	r3, r5
 80117ac:	4622      	mov	r2, r4
 80117ae:	f004 fc3f 	bl	8016030 <ip4_output_if>
 80117b2:	4603      	mov	r3, r0
 80117b4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80117b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3720      	adds	r7, #32
 80117be:	46bd      	mov	sp, r7
 80117c0:	bdb0      	pop	{r4, r5, r7, pc}
 80117c2:	bf00      	nop
 80117c4:	0801a5a0 	.word	0x0801a5a0
 80117c8:	0801ab64 	.word	0x0801ab64
 80117cc:	0801a5f4 	.word	0x0801a5f4
 80117d0:	0801ab84 	.word	0x0801ab84
 80117d4:	0801aba4 	.word	0x0801aba4
 80117d8:	2000f330 	.word	0x2000f330
 80117dc:	0801abc8 	.word	0x0801abc8

080117e0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80117e0:	b5b0      	push	{r4, r5, r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d106      	bne.n	80117fc <tcp_rexmit_rto_prepare+0x1c>
 80117ee:	4b31      	ldr	r3, [pc, #196]	; (80118b4 <tcp_rexmit_rto_prepare+0xd4>)
 80117f0:	f240 6263 	movw	r2, #1635	; 0x663
 80117f4:	4930      	ldr	r1, [pc, #192]	; (80118b8 <tcp_rexmit_rto_prepare+0xd8>)
 80117f6:	4831      	ldr	r0, [pc, #196]	; (80118bc <tcp_rexmit_rto_prepare+0xdc>)
 80117f8:	f005 fe66 	bl	80174c8 <iprintf>

  if (pcb->unacked == NULL) {
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011800:	2b00      	cmp	r3, #0
 8011802:	d102      	bne.n	801180a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011804:	f06f 0305 	mvn.w	r3, #5
 8011808:	e050      	b.n	80118ac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801180e:	60fb      	str	r3, [r7, #12]
 8011810:	e00b      	b.n	801182a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011812:	68f8      	ldr	r0, [r7, #12]
 8011814:	f7ff fee4 	bl	80115e0 <tcp_output_segment_busy>
 8011818:	4603      	mov	r3, r0
 801181a:	2b00      	cmp	r3, #0
 801181c:	d002      	beq.n	8011824 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801181e:	f06f 0305 	mvn.w	r3, #5
 8011822:	e043      	b.n	80118ac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	60fb      	str	r3, [r7, #12]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d1ef      	bne.n	8011812 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	f7ff fed4 	bl	80115e0 <tcp_output_segment_busy>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d002      	beq.n	8011844 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801183e:	f06f 0305 	mvn.w	r3, #5
 8011842:	e033      	b.n	80118ac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	8b5b      	ldrh	r3, [r3, #26]
 801185e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011862:	b29a      	uxth	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	4618      	mov	r0, r3
 8011870:	f7f8 fd77 	bl	800a362 <lwip_htonl>
 8011874:	4604      	mov	r4, r0
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	891b      	ldrh	r3, [r3, #8]
 801187a:	461d      	mov	r5, r3
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	68db      	ldr	r3, [r3, #12]
 8011880:	899b      	ldrh	r3, [r3, #12]
 8011882:	b29b      	uxth	r3, r3
 8011884:	4618      	mov	r0, r3
 8011886:	f7f8 fd57 	bl	800a338 <lwip_htons>
 801188a:	4603      	mov	r3, r0
 801188c:	b2db      	uxtb	r3, r3
 801188e:	f003 0303 	and.w	r3, r3, #3
 8011892:	2b00      	cmp	r3, #0
 8011894:	d001      	beq.n	801189a <tcp_rexmit_rto_prepare+0xba>
 8011896:	2301      	movs	r3, #1
 8011898:	e000      	b.n	801189c <tcp_rexmit_rto_prepare+0xbc>
 801189a:	2300      	movs	r3, #0
 801189c:	442b      	add	r3, r5
 801189e:	18e2      	adds	r2, r4, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2200      	movs	r2, #0
 80118a8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80118aa:	2300      	movs	r3, #0
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3710      	adds	r7, #16
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bdb0      	pop	{r4, r5, r7, pc}
 80118b4:	0801a5a0 	.word	0x0801a5a0
 80118b8:	0801abdc 	.word	0x0801abdc
 80118bc:	0801a5f4 	.word	0x0801a5f4

080118c0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d106      	bne.n	80118dc <tcp_rexmit_rto_commit+0x1c>
 80118ce:	4b0d      	ldr	r3, [pc, #52]	; (8011904 <tcp_rexmit_rto_commit+0x44>)
 80118d0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80118d4:	490c      	ldr	r1, [pc, #48]	; (8011908 <tcp_rexmit_rto_commit+0x48>)
 80118d6:	480d      	ldr	r0, [pc, #52]	; (801190c <tcp_rexmit_rto_commit+0x4c>)
 80118d8:	f005 fdf6 	bl	80174c8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118e2:	2bff      	cmp	r3, #255	; 0xff
 80118e4:	d007      	beq.n	80118f6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118ec:	3301      	adds	r3, #1
 80118ee:	b2da      	uxtb	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7ff fc7a 	bl	80111f0 <tcp_output>
}
 80118fc:	bf00      	nop
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	0801a5a0 	.word	0x0801a5a0
 8011908:	0801ac00 	.word	0x0801ac00
 801190c:	0801a5f4 	.word	0x0801a5f4

08011910 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d106      	bne.n	801192c <tcp_rexmit_rto+0x1c>
 801191e:	4b0a      	ldr	r3, [pc, #40]	; (8011948 <tcp_rexmit_rto+0x38>)
 8011920:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011924:	4909      	ldr	r1, [pc, #36]	; (801194c <tcp_rexmit_rto+0x3c>)
 8011926:	480a      	ldr	r0, [pc, #40]	; (8011950 <tcp_rexmit_rto+0x40>)
 8011928:	f005 fdce 	bl	80174c8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7ff ff57 	bl	80117e0 <tcp_rexmit_rto_prepare>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d102      	bne.n	801193e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7ff ffc1 	bl	80118c0 <tcp_rexmit_rto_commit>
  }
}
 801193e:	bf00      	nop
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	0801a5a0 	.word	0x0801a5a0
 801194c:	0801ac24 	.word	0x0801ac24
 8011950:	0801a5f4 	.word	0x0801a5f4

08011954 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011954:	b590      	push	{r4, r7, lr}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d106      	bne.n	8011970 <tcp_rexmit+0x1c>
 8011962:	4b2f      	ldr	r3, [pc, #188]	; (8011a20 <tcp_rexmit+0xcc>)
 8011964:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011968:	492e      	ldr	r1, [pc, #184]	; (8011a24 <tcp_rexmit+0xd0>)
 801196a:	482f      	ldr	r0, [pc, #188]	; (8011a28 <tcp_rexmit+0xd4>)
 801196c:	f005 fdac 	bl	80174c8 <iprintf>

  if (pcb->unacked == NULL) {
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011974:	2b00      	cmp	r3, #0
 8011976:	d102      	bne.n	801197e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011978:	f06f 0305 	mvn.w	r3, #5
 801197c:	e04c      	b.n	8011a18 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011982:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011984:	68b8      	ldr	r0, [r7, #8]
 8011986:	f7ff fe2b 	bl	80115e0 <tcp_output_segment_busy>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	d002      	beq.n	8011996 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011990:	f06f 0305 	mvn.w	r3, #5
 8011994:	e040      	b.n	8011a18 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	336c      	adds	r3, #108	; 0x6c
 80119a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119a4:	e002      	b.n	80119ac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d011      	beq.n	80119d8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	4618      	mov	r0, r3
 80119be:	f7f8 fcd0 	bl	800a362 <lwip_htonl>
 80119c2:	4604      	mov	r4, r0
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7f8 fcc9 	bl	800a362 <lwip_htonl>
 80119d0:	4603      	mov	r3, r0
 80119d2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	dbe6      	blt.n	80119a6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	68ba      	ldr	r2, [r7, #8]
 80119e4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d103      	bne.n	80119f6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2200      	movs	r2, #0
 80119f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119fc:	2bff      	cmp	r3, #255	; 0xff
 80119fe:	d007      	beq.n	8011a10 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a06:	3301      	adds	r3, #1
 8011a08:	b2da      	uxtb	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011a16:	2300      	movs	r3, #0
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3714      	adds	r7, #20
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd90      	pop	{r4, r7, pc}
 8011a20:	0801a5a0 	.word	0x0801a5a0
 8011a24:	0801ac40 	.word	0x0801ac40
 8011a28:	0801a5f4 	.word	0x0801a5f4

08011a2c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d106      	bne.n	8011a48 <tcp_rexmit_fast+0x1c>
 8011a3a:	4b2e      	ldr	r3, [pc, #184]	; (8011af4 <tcp_rexmit_fast+0xc8>)
 8011a3c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011a40:	492d      	ldr	r1, [pc, #180]	; (8011af8 <tcp_rexmit_fast+0xcc>)
 8011a42:	482e      	ldr	r0, [pc, #184]	; (8011afc <tcp_rexmit_fast+0xd0>)
 8011a44:	f005 fd40 	bl	80174c8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d04d      	beq.n	8011aec <tcp_rexmit_fast+0xc0>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	8b5b      	ldrh	r3, [r3, #26]
 8011a54:	f003 0304 	and.w	r3, r3, #4
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d147      	bne.n	8011aec <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7ff ff79 	bl	8011954 <tcp_rexmit>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d141      	bne.n	8011aec <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d207      	bcs.n	8011a88 <tcp_rexmit_fast+0x5c>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a7e:	0fda      	lsrs	r2, r3, #31
 8011a80:	4413      	add	r3, r2
 8011a82:	105b      	asrs	r3, r3, #1
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	e006      	b.n	8011a96 <tcp_rexmit_fast+0x6a>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a8e:	0fda      	lsrs	r2, r3, #31
 8011a90:	4413      	add	r3, r2
 8011a92:	105b      	asrs	r3, r3, #1
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d206      	bcs.n	8011abc <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ab2:	005b      	lsls	r3, r3, #1
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	0049      	lsls	r1, r1, #1
 8011aca:	440b      	add	r3, r1
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	4413      	add	r3, r2
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	8b5b      	ldrh	r3, [r3, #26]
 8011adc:	f043 0304 	orr.w	r3, r3, #4
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011aec:	bf00      	nop
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	0801a5a0 	.word	0x0801a5a0
 8011af8:	0801ac58 	.word	0x0801ac58
 8011afc:	0801a5f4 	.word	0x0801a5f4

08011b00 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b086      	sub	sp, #24
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	607b      	str	r3, [r7, #4]
 8011b0a:	460b      	mov	r3, r1
 8011b0c:	817b      	strh	r3, [r7, #10]
 8011b0e:	4613      	mov	r3, r2
 8011b10:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011b12:	897a      	ldrh	r2, [r7, #10]
 8011b14:	893b      	ldrh	r3, [r7, #8]
 8011b16:	4413      	add	r3, r2
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	3314      	adds	r3, #20
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b22:	4619      	mov	r1, r3
 8011b24:	2022      	movs	r0, #34	; 0x22
 8011b26:	f7f9 fcdb 	bl	800b4e0 <pbuf_alloc>
 8011b2a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d04e      	beq.n	8011bd0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	895b      	ldrh	r3, [r3, #10]
 8011b36:	461a      	mov	r2, r3
 8011b38:	897b      	ldrh	r3, [r7, #10]
 8011b3a:	3314      	adds	r3, #20
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	da06      	bge.n	8011b4e <tcp_output_alloc_header_common+0x4e>
 8011b40:	4b26      	ldr	r3, [pc, #152]	; (8011bdc <tcp_output_alloc_header_common+0xdc>)
 8011b42:	f240 7224 	movw	r2, #1828	; 0x724
 8011b46:	4926      	ldr	r1, [pc, #152]	; (8011be0 <tcp_output_alloc_header_common+0xe0>)
 8011b48:	4826      	ldr	r0, [pc, #152]	; (8011be4 <tcp_output_alloc_header_common+0xe4>)
 8011b4a:	f005 fcbd 	bl	80174c8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011b54:	8c3b      	ldrh	r3, [r7, #32]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7f8 fbee 	bl	800a338 <lwip_htons>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	461a      	mov	r2, r3
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011b64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7f8 fbe6 	bl	800a338 <lwip_htons>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	461a      	mov	r2, r3
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f7f8 fbf1 	bl	800a362 <lwip_htonl>
 8011b80:	4602      	mov	r2, r0
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011b86:	897b      	ldrh	r3, [r7, #10]
 8011b88:	089b      	lsrs	r3, r3, #2
 8011b8a:	b29b      	uxth	r3, r3
 8011b8c:	3305      	adds	r3, #5
 8011b8e:	b29b      	uxth	r3, r3
 8011b90:	031b      	lsls	r3, r3, #12
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7f8 fbca 	bl	800a338 <lwip_htons>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011bac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7f8 fbc2 	bl	800a338 <lwip_htons>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	741a      	strb	r2, [r3, #16]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	749a      	strb	r2, [r3, #18]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011bd0:	697b      	ldr	r3, [r7, #20]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3718      	adds	r7, #24
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	0801a5a0 	.word	0x0801a5a0
 8011be0:	0801ac78 	.word	0x0801ac78
 8011be4:	0801a5f4 	.word	0x0801a5f4

08011be8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011be8:	b5b0      	push	{r4, r5, r7, lr}
 8011bea:	b08a      	sub	sp, #40	; 0x28
 8011bec:	af04      	add	r7, sp, #16
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	607b      	str	r3, [r7, #4]
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	817b      	strh	r3, [r7, #10]
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d106      	bne.n	8011c0e <tcp_output_alloc_header+0x26>
 8011c00:	4b15      	ldr	r3, [pc, #84]	; (8011c58 <tcp_output_alloc_header+0x70>)
 8011c02:	f240 7242 	movw	r2, #1858	; 0x742
 8011c06:	4915      	ldr	r1, [pc, #84]	; (8011c5c <tcp_output_alloc_header+0x74>)
 8011c08:	4815      	ldr	r0, [pc, #84]	; (8011c60 <tcp_output_alloc_header+0x78>)
 8011c0a:	f005 fc5d 	bl	80174c8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	8adb      	ldrh	r3, [r3, #22]
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	8b12      	ldrh	r2, [r2, #24]
 8011c1a:	68f9      	ldr	r1, [r7, #12]
 8011c1c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011c1e:	893d      	ldrh	r5, [r7, #8]
 8011c20:	897c      	ldrh	r4, [r7, #10]
 8011c22:	9103      	str	r1, [sp, #12]
 8011c24:	2110      	movs	r1, #16
 8011c26:	9102      	str	r1, [sp, #8]
 8011c28:	9201      	str	r2, [sp, #4]
 8011c2a:	9300      	str	r3, [sp, #0]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	462a      	mov	r2, r5
 8011c30:	4621      	mov	r1, r4
 8011c32:	f7ff ff65 	bl	8011b00 <tcp_output_alloc_header_common>
 8011c36:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d006      	beq.n	8011c4c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c46:	441a      	add	r2, r3
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011c4c:	697b      	ldr	r3, [r7, #20]
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3718      	adds	r7, #24
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bdb0      	pop	{r4, r5, r7, pc}
 8011c56:	bf00      	nop
 8011c58:	0801a5a0 	.word	0x0801a5a0
 8011c5c:	0801aca8 	.word	0x0801aca8
 8011c60:	0801a5f4 	.word	0x0801a5f4

08011c64 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b088      	sub	sp, #32
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	4611      	mov	r1, r2
 8011c70:	461a      	mov	r2, r3
 8011c72:	460b      	mov	r3, r1
 8011c74:	71fb      	strb	r3, [r7, #7]
 8011c76:	4613      	mov	r3, r2
 8011c78:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d106      	bne.n	8011c92 <tcp_output_fill_options+0x2e>
 8011c84:	4b13      	ldr	r3, [pc, #76]	; (8011cd4 <tcp_output_fill_options+0x70>)
 8011c86:	f240 7256 	movw	r2, #1878	; 0x756
 8011c8a:	4913      	ldr	r1, [pc, #76]	; (8011cd8 <tcp_output_fill_options+0x74>)
 8011c8c:	4813      	ldr	r0, [pc, #76]	; (8011cdc <tcp_output_fill_options+0x78>)
 8011c8e:	f005 fc1b 	bl	80174c8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011c98:	69bb      	ldr	r3, [r7, #24]
 8011c9a:	3314      	adds	r3, #20
 8011c9c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	f103 0214 	add.w	r2, r3, #20
 8011ca4:	8bfb      	ldrh	r3, [r7, #30]
 8011ca6:	009b      	lsls	r3, r3, #2
 8011ca8:	4619      	mov	r1, r3
 8011caa:	79fb      	ldrb	r3, [r7, #7]
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	f003 0304 	and.w	r3, r3, #4
 8011cb2:	440b      	add	r3, r1
 8011cb4:	4413      	add	r3, r2
 8011cb6:	697a      	ldr	r2, [r7, #20]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d006      	beq.n	8011cca <tcp_output_fill_options+0x66>
 8011cbc:	4b05      	ldr	r3, [pc, #20]	; (8011cd4 <tcp_output_fill_options+0x70>)
 8011cbe:	f240 7275 	movw	r2, #1909	; 0x775
 8011cc2:	4907      	ldr	r1, [pc, #28]	; (8011ce0 <tcp_output_fill_options+0x7c>)
 8011cc4:	4805      	ldr	r0, [pc, #20]	; (8011cdc <tcp_output_fill_options+0x78>)
 8011cc6:	f005 fbff 	bl	80174c8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011cca:	bf00      	nop
 8011ccc:	3720      	adds	r7, #32
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
 8011cd2:	bf00      	nop
 8011cd4:	0801a5a0 	.word	0x0801a5a0
 8011cd8:	0801acd0 	.word	0x0801acd0
 8011cdc:	0801a5f4 	.word	0x0801a5f4
 8011ce0:	0801abc8 	.word	0x0801abc8

08011ce4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b08a      	sub	sp, #40	; 0x28
 8011ce8:	af04      	add	r7, sp, #16
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
 8011cf0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d106      	bne.n	8011d06 <tcp_output_control_segment+0x22>
 8011cf8:	4b1c      	ldr	r3, [pc, #112]	; (8011d6c <tcp_output_control_segment+0x88>)
 8011cfa:	f240 7287 	movw	r2, #1927	; 0x787
 8011cfe:	491c      	ldr	r1, [pc, #112]	; (8011d70 <tcp_output_control_segment+0x8c>)
 8011d00:	481c      	ldr	r0, [pc, #112]	; (8011d74 <tcp_output_control_segment+0x90>)
 8011d02:	f005 fbe1 	bl	80174c8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011d06:	683a      	ldr	r2, [r7, #0]
 8011d08:	6879      	ldr	r1, [r7, #4]
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	f7fe fad6 	bl	80102bc <tcp_route>
 8011d10:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d102      	bne.n	8011d1e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011d18:	23fc      	movs	r3, #252	; 0xfc
 8011d1a:	75fb      	strb	r3, [r7, #23]
 8011d1c:	e01c      	b.n	8011d58 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d006      	beq.n	8011d32 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	7adb      	ldrb	r3, [r3, #11]
 8011d28:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	7a9b      	ldrb	r3, [r3, #10]
 8011d2e:	757b      	strb	r3, [r7, #21]
 8011d30:	e003      	b.n	8011d3a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011d32:	23ff      	movs	r3, #255	; 0xff
 8011d34:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011d36:	2300      	movs	r3, #0
 8011d38:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011d3a:	7dba      	ldrb	r2, [r7, #22]
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	9302      	str	r3, [sp, #8]
 8011d40:	2306      	movs	r3, #6
 8011d42:	9301      	str	r3, [sp, #4]
 8011d44:	7d7b      	ldrb	r3, [r7, #21]
 8011d46:	9300      	str	r3, [sp, #0]
 8011d48:	4613      	mov	r3, r2
 8011d4a:	683a      	ldr	r2, [r7, #0]
 8011d4c:	6879      	ldr	r1, [r7, #4]
 8011d4e:	68b8      	ldr	r0, [r7, #8]
 8011d50:	f004 f96e 	bl	8016030 <ip4_output_if>
 8011d54:	4603      	mov	r3, r0
 8011d56:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011d58:	68b8      	ldr	r0, [r7, #8]
 8011d5a:	f7f9 fea1 	bl	800baa0 <pbuf_free>
  return err;
 8011d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3718      	adds	r7, #24
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	0801a5a0 	.word	0x0801a5a0
 8011d70:	0801acf8 	.word	0x0801acf8
 8011d74:	0801a5f4 	.word	0x0801a5f4

08011d78 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011d78:	b590      	push	{r4, r7, lr}
 8011d7a:	b08b      	sub	sp, #44	; 0x2c
 8011d7c:	af04      	add	r7, sp, #16
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d106      	bne.n	8011d9a <tcp_rst+0x22>
 8011d8c:	4b1f      	ldr	r3, [pc, #124]	; (8011e0c <tcp_rst+0x94>)
 8011d8e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011d92:	491f      	ldr	r1, [pc, #124]	; (8011e10 <tcp_rst+0x98>)
 8011d94:	481f      	ldr	r0, [pc, #124]	; (8011e14 <tcp_rst+0x9c>)
 8011d96:	f005 fb97 	bl	80174c8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d106      	bne.n	8011dae <tcp_rst+0x36>
 8011da0:	4b1a      	ldr	r3, [pc, #104]	; (8011e0c <tcp_rst+0x94>)
 8011da2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011da6:	491c      	ldr	r1, [pc, #112]	; (8011e18 <tcp_rst+0xa0>)
 8011da8:	481a      	ldr	r0, [pc, #104]	; (8011e14 <tcp_rst+0x9c>)
 8011daa:	f005 fb8d 	bl	80174c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011dae:	2300      	movs	r3, #0
 8011db0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011db2:	f246 0308 	movw	r3, #24584	; 0x6008
 8011db6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011db8:	7dfb      	ldrb	r3, [r7, #23]
 8011dba:	b29c      	uxth	r4, r3
 8011dbc:	68b8      	ldr	r0, [r7, #8]
 8011dbe:	f7f8 fad0 	bl	800a362 <lwip_htonl>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	8abb      	ldrh	r3, [r7, #20]
 8011dc6:	9303      	str	r3, [sp, #12]
 8011dc8:	2314      	movs	r3, #20
 8011dca:	9302      	str	r3, [sp, #8]
 8011dcc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011dce:	9301      	str	r3, [sp, #4]
 8011dd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	4621      	mov	r1, r4
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f7ff fe90 	bl	8011b00 <tcp_output_alloc_header_common>
 8011de0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d00c      	beq.n	8011e02 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011de8:	7dfb      	ldrb	r3, [r7, #23]
 8011dea:	2200      	movs	r2, #0
 8011dec:	6939      	ldr	r1, [r7, #16]
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f7ff ff38 	bl	8011c64 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	6939      	ldr	r1, [r7, #16]
 8011dfa:	68f8      	ldr	r0, [r7, #12]
 8011dfc:	f7ff ff72 	bl	8011ce4 <tcp_output_control_segment>
 8011e00:	e000      	b.n	8011e04 <tcp_rst+0x8c>
    return;
 8011e02:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e04:	371c      	adds	r7, #28
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd90      	pop	{r4, r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	0801a5a0 	.word	0x0801a5a0
 8011e10:	0801ad24 	.word	0x0801ad24
 8011e14:	0801a5f4 	.word	0x0801a5f4
 8011e18:	0801ad40 	.word	0x0801ad40

08011e1c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b087      	sub	sp, #28
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011e24:	2300      	movs	r3, #0
 8011e26:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d106      	bne.n	8011e40 <tcp_send_empty_ack+0x24>
 8011e32:	4b28      	ldr	r3, [pc, #160]	; (8011ed4 <tcp_send_empty_ack+0xb8>)
 8011e34:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011e38:	4927      	ldr	r1, [pc, #156]	; (8011ed8 <tcp_send_empty_ack+0xbc>)
 8011e3a:	4828      	ldr	r0, [pc, #160]	; (8011edc <tcp_send_empty_ack+0xc0>)
 8011e3c:	f005 fb44 	bl	80174c8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e40:	7dfb      	ldrb	r3, [r7, #23]
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	f003 0304 	and.w	r3, r3, #4
 8011e4a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011e4c:	7d7b      	ldrb	r3, [r7, #21]
 8011e4e:	b29c      	uxth	r4, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7f8 fa84 	bl	800a362 <lwip_htonl>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	4621      	mov	r1, r4
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff fec1 	bl	8011be8 <tcp_output_alloc_header>
 8011e66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d109      	bne.n	8011e82 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	8b5b      	ldrh	r3, [r3, #26]
 8011e72:	f043 0303 	orr.w	r3, r3, #3
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011e7c:	f06f 0301 	mvn.w	r3, #1
 8011e80:	e023      	b.n	8011eca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011e82:	7dbb      	ldrb	r3, [r7, #22]
 8011e84:	7dfa      	ldrb	r2, [r7, #23]
 8011e86:	6939      	ldr	r1, [r7, #16]
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7ff feeb 	bl	8011c64 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	3304      	adds	r3, #4
 8011e94:	6939      	ldr	r1, [r7, #16]
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f7ff ff24 	bl	8011ce4 <tcp_output_control_segment>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d007      	beq.n	8011eb8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	8b5b      	ldrh	r3, [r3, #26]
 8011eac:	f043 0303 	orr.w	r3, r3, #3
 8011eb0:	b29a      	uxth	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	835a      	strh	r2, [r3, #26]
 8011eb6:	e006      	b.n	8011ec6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	8b5b      	ldrh	r3, [r3, #26]
 8011ebc:	f023 0303 	bic.w	r3, r3, #3
 8011ec0:	b29a      	uxth	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	371c      	adds	r7, #28
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd90      	pop	{r4, r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	0801a5a0 	.word	0x0801a5a0
 8011ed8:	0801ad5c 	.word	0x0801ad5c
 8011edc:	0801a5f4 	.word	0x0801a5f4

08011ee0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011ee0:	b590      	push	{r4, r7, lr}
 8011ee2:	b087      	sub	sp, #28
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ee8:	2300      	movs	r3, #0
 8011eea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d106      	bne.n	8011f00 <tcp_keepalive+0x20>
 8011ef2:	4b18      	ldr	r3, [pc, #96]	; (8011f54 <tcp_keepalive+0x74>)
 8011ef4:	f640 0224 	movw	r2, #2084	; 0x824
 8011ef8:	4917      	ldr	r1, [pc, #92]	; (8011f58 <tcp_keepalive+0x78>)
 8011efa:	4818      	ldr	r0, [pc, #96]	; (8011f5c <tcp_keepalive+0x7c>)
 8011efc:	f005 fae4 	bl	80174c8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f00:	7dfb      	ldrb	r3, [r7, #23]
 8011f02:	b29c      	uxth	r4, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f08:	3b01      	subs	r3, #1
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7f8 fa29 	bl	800a362 <lwip_htonl>
 8011f10:	4603      	mov	r3, r0
 8011f12:	2200      	movs	r2, #0
 8011f14:	4621      	mov	r1, r4
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ff fe66 	bl	8011be8 <tcp_output_alloc_header>
 8011f1c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d102      	bne.n	8011f2a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011f24:	f04f 33ff 	mov.w	r3, #4294967295
 8011f28:	e010      	b.n	8011f4c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f2a:	7dfb      	ldrb	r3, [r7, #23]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	6939      	ldr	r1, [r7, #16]
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f7ff fe97 	bl	8011c64 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	3304      	adds	r3, #4
 8011f3c:	6939      	ldr	r1, [r7, #16]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7ff fed0 	bl	8011ce4 <tcp_output_control_segment>
 8011f44:	4603      	mov	r3, r0
 8011f46:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	371c      	adds	r7, #28
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd90      	pop	{r4, r7, pc}
 8011f54:	0801a5a0 	.word	0x0801a5a0
 8011f58:	0801ad7c 	.word	0x0801ad7c
 8011f5c:	0801a5f4 	.word	0x0801a5f4

08011f60 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011f60:	b590      	push	{r4, r7, lr}
 8011f62:	b08b      	sub	sp, #44	; 0x2c
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f68:	2300      	movs	r3, #0
 8011f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d106      	bne.n	8011f82 <tcp_zero_window_probe+0x22>
 8011f74:	4b4c      	ldr	r3, [pc, #304]	; (80120a8 <tcp_zero_window_probe+0x148>)
 8011f76:	f640 024f 	movw	r2, #2127	; 0x84f
 8011f7a:	494c      	ldr	r1, [pc, #304]	; (80120ac <tcp_zero_window_probe+0x14c>)
 8011f7c:	484c      	ldr	r0, [pc, #304]	; (80120b0 <tcp_zero_window_probe+0x150>)
 8011f7e:	f005 faa3 	bl	80174c8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f86:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011f88:	6a3b      	ldr	r3, [r7, #32]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d101      	bne.n	8011f92 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	e086      	b.n	80120a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011f98:	2bff      	cmp	r3, #255	; 0xff
 8011f9a:	d007      	beq.n	8011fac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	b2da      	uxtb	r2, r3
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011fac:	6a3b      	ldr	r3, [r7, #32]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	899b      	ldrh	r3, [r3, #12]
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7f8 f9bf 	bl	800a338 <lwip_htons>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	f003 0301 	and.w	r3, r3, #1
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d005      	beq.n	8011fd2 <tcp_zero_window_probe+0x72>
 8011fc6:	6a3b      	ldr	r3, [r7, #32]
 8011fc8:	891b      	ldrh	r3, [r3, #8]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d101      	bne.n	8011fd2 <tcp_zero_window_probe+0x72>
 8011fce:	2301      	movs	r3, #1
 8011fd0:	e000      	b.n	8011fd4 <tcp_zero_window_probe+0x74>
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011fd6:	7ffb      	ldrb	r3, [r7, #31]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	bf0c      	ite	eq
 8011fdc:	2301      	moveq	r3, #1
 8011fde:	2300      	movne	r3, #0
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fe8:	b299      	uxth	r1, r3
 8011fea:	6a3b      	ldr	r3, [r7, #32]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	8bba      	ldrh	r2, [r7, #28]
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f7ff fdf8 	bl	8011be8 <tcp_output_alloc_header>
 8011ff8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011ffa:	69bb      	ldr	r3, [r7, #24]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d102      	bne.n	8012006 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012000:	f04f 33ff 	mov.w	r3, #4294967295
 8012004:	e04c      	b.n	80120a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801200c:	7ffb      	ldrb	r3, [r7, #31]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d011      	beq.n	8012036 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	899b      	ldrh	r3, [r3, #12]
 8012016:	b29b      	uxth	r3, r3
 8012018:	b21b      	sxth	r3, r3
 801201a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801201e:	b21c      	sxth	r4, r3
 8012020:	2011      	movs	r0, #17
 8012022:	f7f8 f989 	bl	800a338 <lwip_htons>
 8012026:	4603      	mov	r3, r0
 8012028:	b21b      	sxth	r3, r3
 801202a:	4323      	orrs	r3, r4
 801202c:	b21b      	sxth	r3, r3
 801202e:	b29a      	uxth	r2, r3
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	819a      	strh	r2, [r3, #12]
 8012034:	e010      	b.n	8012058 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	3314      	adds	r3, #20
 801203c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801203e:	6a3b      	ldr	r3, [r7, #32]
 8012040:	6858      	ldr	r0, [r3, #4]
 8012042:	6a3b      	ldr	r3, [r7, #32]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	891a      	ldrh	r2, [r3, #8]
 8012048:	6a3b      	ldr	r3, [r7, #32]
 801204a:	891b      	ldrh	r3, [r3, #8]
 801204c:	1ad3      	subs	r3, r2, r3
 801204e:	b29b      	uxth	r3, r3
 8012050:	2201      	movs	r2, #1
 8012052:	6939      	ldr	r1, [r7, #16]
 8012054:	f7f9 ff2a 	bl	800beac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012058:	6a3b      	ldr	r3, [r7, #32]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	4618      	mov	r0, r3
 8012060:	f7f8 f97f 	bl	800a362 <lwip_htonl>
 8012064:	4603      	mov	r3, r0
 8012066:	3301      	adds	r3, #1
 8012068:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	1ad3      	subs	r3, r2, r3
 8012072:	2b00      	cmp	r3, #0
 8012074:	da02      	bge.n	801207c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	68fa      	ldr	r2, [r7, #12]
 801207a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801207c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012080:	2200      	movs	r2, #0
 8012082:	69b9      	ldr	r1, [r7, #24]
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7ff fded 	bl	8011c64 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	3304      	adds	r3, #4
 8012090:	69b9      	ldr	r1, [r7, #24]
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f7ff fe26 	bl	8011ce4 <tcp_output_control_segment>
 8012098:	4603      	mov	r3, r0
 801209a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801209c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	372c      	adds	r7, #44	; 0x2c
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd90      	pop	{r4, r7, pc}
 80120a8:	0801a5a0 	.word	0x0801a5a0
 80120ac:	0801ad98 	.word	0x0801ad98
 80120b0:	0801a5f4 	.word	0x0801a5f4

080120b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80120bc:	f7f9 ffe4 	bl	800c088 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80120c0:	4b0a      	ldr	r3, [pc, #40]	; (80120ec <tcpip_tcp_timer+0x38>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d103      	bne.n	80120d0 <tcpip_tcp_timer+0x1c>
 80120c8:	4b09      	ldr	r3, [pc, #36]	; (80120f0 <tcpip_tcp_timer+0x3c>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d005      	beq.n	80120dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80120d0:	2200      	movs	r2, #0
 80120d2:	4908      	ldr	r1, [pc, #32]	; (80120f4 <tcpip_tcp_timer+0x40>)
 80120d4:	20fa      	movs	r0, #250	; 0xfa
 80120d6:	f000 f8f1 	bl	80122bc <sys_timeout>
 80120da:	e002      	b.n	80120e2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80120dc:	4b06      	ldr	r3, [pc, #24]	; (80120f8 <tcpip_tcp_timer+0x44>)
 80120de:	2200      	movs	r2, #0
 80120e0:	601a      	str	r2, [r3, #0]
  }
}
 80120e2:	bf00      	nop
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	2000f32c 	.word	0x2000f32c
 80120f0:	2000f33c 	.word	0x2000f33c
 80120f4:	080120b5 	.word	0x080120b5
 80120f8:	200084dc 	.word	0x200084dc

080120fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012100:	4b0a      	ldr	r3, [pc, #40]	; (801212c <tcp_timer_needed+0x30>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d10f      	bne.n	8012128 <tcp_timer_needed+0x2c>
 8012108:	4b09      	ldr	r3, [pc, #36]	; (8012130 <tcp_timer_needed+0x34>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d103      	bne.n	8012118 <tcp_timer_needed+0x1c>
 8012110:	4b08      	ldr	r3, [pc, #32]	; (8012134 <tcp_timer_needed+0x38>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d007      	beq.n	8012128 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012118:	4b04      	ldr	r3, [pc, #16]	; (801212c <tcp_timer_needed+0x30>)
 801211a:	2201      	movs	r2, #1
 801211c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801211e:	2200      	movs	r2, #0
 8012120:	4905      	ldr	r1, [pc, #20]	; (8012138 <tcp_timer_needed+0x3c>)
 8012122:	20fa      	movs	r0, #250	; 0xfa
 8012124:	f000 f8ca 	bl	80122bc <sys_timeout>
  }
}
 8012128:	bf00      	nop
 801212a:	bd80      	pop	{r7, pc}
 801212c:	200084dc 	.word	0x200084dc
 8012130:	2000f32c 	.word	0x2000f32c
 8012134:	2000f33c 	.word	0x2000f33c
 8012138:	080120b5 	.word	0x080120b5

0801213c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b086      	sub	sp, #24
 8012140:	af00      	add	r7, sp, #0
 8012142:	60f8      	str	r0, [r7, #12]
 8012144:	60b9      	str	r1, [r7, #8]
 8012146:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012148:	200a      	movs	r0, #10
 801214a:	f7f8 fdab 	bl	800aca4 <memp_malloc>
 801214e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d109      	bne.n	801216a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d151      	bne.n	8012200 <sys_timeout_abs+0xc4>
 801215c:	4b2a      	ldr	r3, [pc, #168]	; (8012208 <sys_timeout_abs+0xcc>)
 801215e:	22be      	movs	r2, #190	; 0xbe
 8012160:	492a      	ldr	r1, [pc, #168]	; (801220c <sys_timeout_abs+0xd0>)
 8012162:	482b      	ldr	r0, [pc, #172]	; (8012210 <sys_timeout_abs+0xd4>)
 8012164:	f005 f9b0 	bl	80174c8 <iprintf>
    return;
 8012168:	e04a      	b.n	8012200 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	2200      	movs	r2, #0
 801216e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	68ba      	ldr	r2, [r7, #8]
 8012174:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012182:	4b24      	ldr	r3, [pc, #144]	; (8012214 <sys_timeout_abs+0xd8>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d103      	bne.n	8012192 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801218a:	4a22      	ldr	r2, [pc, #136]	; (8012214 <sys_timeout_abs+0xd8>)
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	6013      	str	r3, [r2, #0]
    return;
 8012190:	e037      	b.n	8012202 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	685a      	ldr	r2, [r3, #4]
 8012196:	4b1f      	ldr	r3, [pc, #124]	; (8012214 <sys_timeout_abs+0xd8>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	1ad3      	subs	r3, r2, r3
 801219e:	0fdb      	lsrs	r3, r3, #31
 80121a0:	f003 0301 	and.w	r3, r3, #1
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d007      	beq.n	80121ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80121aa:	4b1a      	ldr	r3, [pc, #104]	; (8012214 <sys_timeout_abs+0xd8>)
 80121ac:	681a      	ldr	r2, [r3, #0]
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80121b2:	4a18      	ldr	r2, [pc, #96]	; (8012214 <sys_timeout_abs+0xd8>)
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	6013      	str	r3, [r2, #0]
 80121b8:	e023      	b.n	8012202 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80121ba:	4b16      	ldr	r3, [pc, #88]	; (8012214 <sys_timeout_abs+0xd8>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	617b      	str	r3, [r7, #20]
 80121c0:	e01a      	b.n	80121f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d00b      	beq.n	80121e2 <sys_timeout_abs+0xa6>
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	685a      	ldr	r2, [r3, #4]
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	1ad3      	subs	r3, r2, r3
 80121d6:	0fdb      	lsrs	r3, r3, #31
 80121d8:	f003 0301 	and.w	r3, r3, #1
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d007      	beq.n	80121f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	693a      	ldr	r2, [r7, #16]
 80121ee:	601a      	str	r2, [r3, #0]
        break;
 80121f0:	e007      	b.n	8012202 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	617b      	str	r3, [r7, #20]
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d1e1      	bne.n	80121c2 <sys_timeout_abs+0x86>
 80121fe:	e000      	b.n	8012202 <sys_timeout_abs+0xc6>
    return;
 8012200:	bf00      	nop
      }
    }
  }
}
 8012202:	3718      	adds	r7, #24
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	0801adbc 	.word	0x0801adbc
 801220c:	0801adf0 	.word	0x0801adf0
 8012210:	0801ae30 	.word	0x0801ae30
 8012214:	200084d4 	.word	0x200084d4

08012218 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	4798      	blx	r3

  now = sys_now();
 801222a:	f7f2 fd1f 	bl	8004c6c <sys_now>
 801222e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	4b0f      	ldr	r3, [pc, #60]	; (8012274 <lwip_cyclic_timer+0x5c>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4413      	add	r3, r2
 801223a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801223c:	68fa      	ldr	r2, [r7, #12]
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	0fdb      	lsrs	r3, r3, #31
 8012244:	f003 0301 	and.w	r3, r3, #1
 8012248:	b2db      	uxtb	r3, r3
 801224a:	2b00      	cmp	r3, #0
 801224c:	d009      	beq.n	8012262 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	4413      	add	r3, r2
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	4907      	ldr	r1, [pc, #28]	; (8012278 <lwip_cyclic_timer+0x60>)
 801225a:	4618      	mov	r0, r3
 801225c:	f7ff ff6e 	bl	801213c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012260:	e004      	b.n	801226c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	4904      	ldr	r1, [pc, #16]	; (8012278 <lwip_cyclic_timer+0x60>)
 8012266:	68f8      	ldr	r0, [r7, #12]
 8012268:	f7ff ff68 	bl	801213c <sys_timeout_abs>
}
 801226c:	bf00      	nop
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	200084d8 	.word	0x200084d8
 8012278:	08012219 	.word	0x08012219

0801227c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012282:	2301      	movs	r3, #1
 8012284:	607b      	str	r3, [r7, #4]
 8012286:	e00e      	b.n	80122a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012288:	4a0a      	ldr	r2, [pc, #40]	; (80122b4 <sys_timeouts_init+0x38>)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	00db      	lsls	r3, r3, #3
 8012294:	4a07      	ldr	r2, [pc, #28]	; (80122b4 <sys_timeouts_init+0x38>)
 8012296:	4413      	add	r3, r2
 8012298:	461a      	mov	r2, r3
 801229a:	4907      	ldr	r1, [pc, #28]	; (80122b8 <sys_timeouts_init+0x3c>)
 801229c:	f000 f80e 	bl	80122bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	3301      	adds	r3, #1
 80122a4:	607b      	str	r3, [r7, #4]
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2b04      	cmp	r3, #4
 80122aa:	d9ed      	bls.n	8012288 <sys_timeouts_init+0xc>
  }
}
 80122ac:	bf00      	nop
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	0801bd80 	.word	0x0801bd80
 80122b8:	08012219 	.word	0x08012219

080122bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b086      	sub	sp, #24
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122ce:	d306      	bcc.n	80122de <sys_timeout+0x22>
 80122d0:	4b0a      	ldr	r3, [pc, #40]	; (80122fc <sys_timeout+0x40>)
 80122d2:	f240 1229 	movw	r2, #297	; 0x129
 80122d6:	490a      	ldr	r1, [pc, #40]	; (8012300 <sys_timeout+0x44>)
 80122d8:	480a      	ldr	r0, [pc, #40]	; (8012304 <sys_timeout+0x48>)
 80122da:	f005 f8f5 	bl	80174c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80122de:	f7f2 fcc5 	bl	8004c6c <sys_now>
 80122e2:	4602      	mov	r2, r0
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	4413      	add	r3, r2
 80122e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80122ea:	687a      	ldr	r2, [r7, #4]
 80122ec:	68b9      	ldr	r1, [r7, #8]
 80122ee:	6978      	ldr	r0, [r7, #20]
 80122f0:	f7ff ff24 	bl	801213c <sys_timeout_abs>
#endif
}
 80122f4:	bf00      	nop
 80122f6:	3718      	adds	r7, #24
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	0801adbc 	.word	0x0801adbc
 8012300:	0801ae58 	.word	0x0801ae58
 8012304:	0801ae30 	.word	0x0801ae30

08012308 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801230e:	f7f2 fcad 	bl	8004c6c <sys_now>
 8012312:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012314:	4b17      	ldr	r3, [pc, #92]	; (8012374 <sys_check_timeouts+0x6c>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d022      	beq.n	8012366 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	68fa      	ldr	r2, [r7, #12]
 8012326:	1ad3      	subs	r3, r2, r3
 8012328:	0fdb      	lsrs	r3, r3, #31
 801232a:	f003 0301 	and.w	r3, r3, #1
 801232e:	b2db      	uxtb	r3, r3
 8012330:	2b00      	cmp	r3, #0
 8012332:	d11a      	bne.n	801236a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4a0e      	ldr	r2, [pc, #56]	; (8012374 <sys_check_timeouts+0x6c>)
 801233a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	689b      	ldr	r3, [r3, #8]
 8012340:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	4a0a      	ldr	r2, [pc, #40]	; (8012378 <sys_check_timeouts+0x70>)
 801234e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012350:	68b9      	ldr	r1, [r7, #8]
 8012352:	200a      	movs	r0, #10
 8012354:	f7f8 fcf8 	bl	800ad48 <memp_free>
    if (handler != NULL) {
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d0da      	beq.n	8012314 <sys_check_timeouts+0xc>
      handler(arg);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6838      	ldr	r0, [r7, #0]
 8012362:	4798      	blx	r3
  do {
 8012364:	e7d6      	b.n	8012314 <sys_check_timeouts+0xc>
      return;
 8012366:	bf00      	nop
 8012368:	e000      	b.n	801236c <sys_check_timeouts+0x64>
      return;
 801236a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	200084d4 	.word	0x200084d4
 8012378:	200084d8 	.word	0x200084d8

0801237c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012382:	4b16      	ldr	r3, [pc, #88]	; (80123dc <sys_timeouts_sleeptime+0x60>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d102      	bne.n	8012390 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801238a:	f04f 33ff 	mov.w	r3, #4294967295
 801238e:	e020      	b.n	80123d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012390:	f7f2 fc6c 	bl	8004c6c <sys_now>
 8012394:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012396:	4b11      	ldr	r3, [pc, #68]	; (80123dc <sys_timeouts_sleeptime+0x60>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	685a      	ldr	r2, [r3, #4]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	0fdb      	lsrs	r3, r3, #31
 80123a2:	f003 0301 	and.w	r3, r3, #1
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d001      	beq.n	80123b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80123ac:	2300      	movs	r3, #0
 80123ae:	e010      	b.n	80123d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80123b0:	4b0a      	ldr	r3, [pc, #40]	; (80123dc <sys_timeouts_sleeptime+0x60>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	685a      	ldr	r2, [r3, #4]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	1ad3      	subs	r3, r2, r3
 80123ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	da06      	bge.n	80123d0 <sys_timeouts_sleeptime+0x54>
 80123c2:	4b07      	ldr	r3, [pc, #28]	; (80123e0 <sys_timeouts_sleeptime+0x64>)
 80123c4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80123c8:	4906      	ldr	r1, [pc, #24]	; (80123e4 <sys_timeouts_sleeptime+0x68>)
 80123ca:	4807      	ldr	r0, [pc, #28]	; (80123e8 <sys_timeouts_sleeptime+0x6c>)
 80123cc:	f005 f87c 	bl	80174c8 <iprintf>
    return ret;
 80123d0:	683b      	ldr	r3, [r7, #0]
  }
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	200084d4 	.word	0x200084d4
 80123e0:	0801adbc 	.word	0x0801adbc
 80123e4:	0801ae90 	.word	0x0801ae90
 80123e8:	0801ae30 	.word	0x0801ae30

080123ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80123f0:	f005 f882 	bl	80174f8 <rand>
 80123f4:	4603      	mov	r3, r0
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012402:	b29a      	uxth	r2, r3
 8012404:	4b01      	ldr	r3, [pc, #4]	; (801240c <udp_init+0x20>)
 8012406:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012408:	bf00      	nop
 801240a:	bd80      	pop	{r7, pc}
 801240c:	20000018 	.word	0x20000018

08012410 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012416:	2300      	movs	r3, #0
 8012418:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801241a:	4b17      	ldr	r3, [pc, #92]	; (8012478 <udp_new_port+0x68>)
 801241c:	881b      	ldrh	r3, [r3, #0]
 801241e:	1c5a      	adds	r2, r3, #1
 8012420:	b291      	uxth	r1, r2
 8012422:	4a15      	ldr	r2, [pc, #84]	; (8012478 <udp_new_port+0x68>)
 8012424:	8011      	strh	r1, [r2, #0]
 8012426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801242a:	4293      	cmp	r3, r2
 801242c:	d103      	bne.n	8012436 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801242e:	4b12      	ldr	r3, [pc, #72]	; (8012478 <udp_new_port+0x68>)
 8012430:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012434:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012436:	4b11      	ldr	r3, [pc, #68]	; (801247c <udp_new_port+0x6c>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	603b      	str	r3, [r7, #0]
 801243c:	e011      	b.n	8012462 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	8a5a      	ldrh	r2, [r3, #18]
 8012442:	4b0d      	ldr	r3, [pc, #52]	; (8012478 <udp_new_port+0x68>)
 8012444:	881b      	ldrh	r3, [r3, #0]
 8012446:	429a      	cmp	r2, r3
 8012448:	d108      	bne.n	801245c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801244a:	88fb      	ldrh	r3, [r7, #6]
 801244c:	3301      	adds	r3, #1
 801244e:	80fb      	strh	r3, [r7, #6]
 8012450:	88fb      	ldrh	r3, [r7, #6]
 8012452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012456:	d3e0      	bcc.n	801241a <udp_new_port+0xa>
        return 0;
 8012458:	2300      	movs	r3, #0
 801245a:	e007      	b.n	801246c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	68db      	ldr	r3, [r3, #12]
 8012460:	603b      	str	r3, [r7, #0]
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1ea      	bne.n	801243e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012468:	4b03      	ldr	r3, [pc, #12]	; (8012478 <udp_new_port+0x68>)
 801246a:	881b      	ldrh	r3, [r3, #0]
}
 801246c:	4618      	mov	r0, r3
 801246e:	370c      	adds	r7, #12
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr
 8012478:	20000018 	.word	0x20000018
 801247c:	2000f344 	.word	0x2000f344

08012480 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
 8012486:	60f8      	str	r0, [r7, #12]
 8012488:	60b9      	str	r1, [r7, #8]
 801248a:	4613      	mov	r3, r2
 801248c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d105      	bne.n	80124a0 <udp_input_local_match+0x20>
 8012494:	4b27      	ldr	r3, [pc, #156]	; (8012534 <udp_input_local_match+0xb4>)
 8012496:	2287      	movs	r2, #135	; 0x87
 8012498:	4927      	ldr	r1, [pc, #156]	; (8012538 <udp_input_local_match+0xb8>)
 801249a:	4828      	ldr	r0, [pc, #160]	; (801253c <udp_input_local_match+0xbc>)
 801249c:	f005 f814 	bl	80174c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d105      	bne.n	80124b2 <udp_input_local_match+0x32>
 80124a6:	4b23      	ldr	r3, [pc, #140]	; (8012534 <udp_input_local_match+0xb4>)
 80124a8:	2288      	movs	r2, #136	; 0x88
 80124aa:	4925      	ldr	r1, [pc, #148]	; (8012540 <udp_input_local_match+0xc0>)
 80124ac:	4823      	ldr	r0, [pc, #140]	; (801253c <udp_input_local_match+0xbc>)
 80124ae:	f005 f80b 	bl	80174c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	7a1b      	ldrb	r3, [r3, #8]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d00b      	beq.n	80124d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	7a1a      	ldrb	r2, [r3, #8]
 80124be:	4b21      	ldr	r3, [pc, #132]	; (8012544 <udp_input_local_match+0xc4>)
 80124c0:	685b      	ldr	r3, [r3, #4]
 80124c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80124c6:	3301      	adds	r3, #1
 80124c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d001      	beq.n	80124d2 <udp_input_local_match+0x52>
    return 0;
 80124ce:	2300      	movs	r3, #0
 80124d0:	e02b      	b.n	801252a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80124d2:	79fb      	ldrb	r3, [r7, #7]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d018      	beq.n	801250a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d013      	beq.n	8012506 <udp_input_local_match+0x86>
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d00f      	beq.n	8012506 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124e6:	4b17      	ldr	r3, [pc, #92]	; (8012544 <udp_input_local_match+0xc4>)
 80124e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ee:	d00a      	beq.n	8012506 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681a      	ldr	r2, [r3, #0]
 80124f4:	4b13      	ldr	r3, [pc, #76]	; (8012544 <udp_input_local_match+0xc4>)
 80124f6:	695b      	ldr	r3, [r3, #20]
 80124f8:	405a      	eors	r2, r3
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	3308      	adds	r3, #8
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012502:	2b00      	cmp	r3, #0
 8012504:	d110      	bne.n	8012528 <udp_input_local_match+0xa8>
          return 1;
 8012506:	2301      	movs	r3, #1
 8012508:	e00f      	b.n	801252a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d009      	beq.n	8012524 <udp_input_local_match+0xa4>
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d005      	beq.n	8012524 <udp_input_local_match+0xa4>
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	4b09      	ldr	r3, [pc, #36]	; (8012544 <udp_input_local_match+0xc4>)
 801251e:	695b      	ldr	r3, [r3, #20]
 8012520:	429a      	cmp	r2, r3
 8012522:	d101      	bne.n	8012528 <udp_input_local_match+0xa8>
        return 1;
 8012524:	2301      	movs	r3, #1
 8012526:	e000      	b.n	801252a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012528:	2300      	movs	r3, #0
}
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	0801aea4 	.word	0x0801aea4
 8012538:	0801aed4 	.word	0x0801aed4
 801253c:	0801aef8 	.word	0x0801aef8
 8012540:	0801af20 	.word	0x0801af20
 8012544:	2000bbf8 	.word	0x2000bbf8

08012548 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012548:	b590      	push	{r4, r7, lr}
 801254a:	b08d      	sub	sp, #52	; 0x34
 801254c:	af02      	add	r7, sp, #8
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d105      	bne.n	8012568 <udp_input+0x20>
 801255c:	4b7c      	ldr	r3, [pc, #496]	; (8012750 <udp_input+0x208>)
 801255e:	22cf      	movs	r2, #207	; 0xcf
 8012560:	497c      	ldr	r1, [pc, #496]	; (8012754 <udp_input+0x20c>)
 8012562:	487d      	ldr	r0, [pc, #500]	; (8012758 <udp_input+0x210>)
 8012564:	f004 ffb0 	bl	80174c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d105      	bne.n	801257a <udp_input+0x32>
 801256e:	4b78      	ldr	r3, [pc, #480]	; (8012750 <udp_input+0x208>)
 8012570:	22d0      	movs	r2, #208	; 0xd0
 8012572:	497a      	ldr	r1, [pc, #488]	; (801275c <udp_input+0x214>)
 8012574:	4878      	ldr	r0, [pc, #480]	; (8012758 <udp_input+0x210>)
 8012576:	f004 ffa7 	bl	80174c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	895b      	ldrh	r3, [r3, #10]
 801257e:	2b07      	cmp	r3, #7
 8012580:	d803      	bhi.n	801258a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7f9 fa8c 	bl	800baa0 <pbuf_free>
    goto end;
 8012588:	e0de      	b.n	8012748 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012590:	4b73      	ldr	r3, [pc, #460]	; (8012760 <udp_input+0x218>)
 8012592:	695a      	ldr	r2, [r3, #20]
 8012594:	4b72      	ldr	r3, [pc, #456]	; (8012760 <udp_input+0x218>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	4619      	mov	r1, r3
 801259a:	4610      	mov	r0, r2
 801259c:	f003 fe20 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 80125a0:	4603      	mov	r3, r0
 80125a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	881b      	ldrh	r3, [r3, #0]
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7f7 fec4 	bl	800a338 <lwip_htons>
 80125b0:	4603      	mov	r3, r0
 80125b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	885b      	ldrh	r3, [r3, #2]
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7f7 febc 	bl	800a338 <lwip_htons>
 80125c0:	4603      	mov	r3, r0
 80125c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80125c8:	2300      	movs	r3, #0
 80125ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80125d0:	4b64      	ldr	r3, [pc, #400]	; (8012764 <udp_input+0x21c>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	627b      	str	r3, [r7, #36]	; 0x24
 80125d6:	e054      	b.n	8012682 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125da:	8a5b      	ldrh	r3, [r3, #18]
 80125dc:	89fa      	ldrh	r2, [r7, #14]
 80125de:	429a      	cmp	r2, r3
 80125e0:	d14a      	bne.n	8012678 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80125e2:	7cfb      	ldrb	r3, [r7, #19]
 80125e4:	461a      	mov	r2, r3
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125ea:	f7ff ff49 	bl	8012480 <udp_input_local_match>
 80125ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d041      	beq.n	8012678 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80125f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f6:	7c1b      	ldrb	r3, [r3, #16]
 80125f8:	f003 0304 	and.w	r3, r3, #4
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d11d      	bne.n	801263c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012600:	69fb      	ldr	r3, [r7, #28]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d102      	bne.n	801260c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012608:	61fb      	str	r3, [r7, #28]
 801260a:	e017      	b.n	801263c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801260c:	7cfb      	ldrb	r3, [r7, #19]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d014      	beq.n	801263c <udp_input+0xf4>
 8012612:	4b53      	ldr	r3, [pc, #332]	; (8012760 <udp_input+0x218>)
 8012614:	695b      	ldr	r3, [r3, #20]
 8012616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801261a:	d10f      	bne.n	801263c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801261c:	69fb      	ldr	r3, [r7, #28]
 801261e:	681a      	ldr	r2, [r3, #0]
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	3304      	adds	r3, #4
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	429a      	cmp	r2, r3
 8012628:	d008      	beq.n	801263c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	3304      	adds	r3, #4
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	429a      	cmp	r2, r3
 8012636:	d101      	bne.n	801263c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263e:	8a9b      	ldrh	r3, [r3, #20]
 8012640:	8a3a      	ldrh	r2, [r7, #16]
 8012642:	429a      	cmp	r2, r3
 8012644:	d118      	bne.n	8012678 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012648:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801264a:	2b00      	cmp	r3, #0
 801264c:	d005      	beq.n	801265a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012650:	685a      	ldr	r2, [r3, #4]
 8012652:	4b43      	ldr	r3, [pc, #268]	; (8012760 <udp_input+0x218>)
 8012654:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012656:	429a      	cmp	r2, r3
 8012658:	d10e      	bne.n	8012678 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d014      	beq.n	801268a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012662:	68da      	ldr	r2, [r3, #12]
 8012664:	6a3b      	ldr	r3, [r7, #32]
 8012666:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012668:	4b3e      	ldr	r3, [pc, #248]	; (8012764 <udp_input+0x21c>)
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012670:	4a3c      	ldr	r2, [pc, #240]	; (8012764 <udp_input+0x21c>)
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012674:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012676:	e008      	b.n	801268a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	627b      	str	r3, [r7, #36]	; 0x24
 8012682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012684:	2b00      	cmp	r3, #0
 8012686:	d1a7      	bne.n	80125d8 <udp_input+0x90>
 8012688:	e000      	b.n	801268c <udp_input+0x144>
        break;
 801268a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268e:	2b00      	cmp	r3, #0
 8012690:	d101      	bne.n	8012696 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <udp_input+0x15a>
    for_us = 1;
 801269c:	2301      	movs	r3, #1
 801269e:	76fb      	strb	r3, [r7, #27]
 80126a0:	e00a      	b.n	80126b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	3304      	adds	r3, #4
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	4b2d      	ldr	r3, [pc, #180]	; (8012760 <udp_input+0x218>)
 80126aa:	695b      	ldr	r3, [r3, #20]
 80126ac:	429a      	cmp	r2, r3
 80126ae:	bf0c      	ite	eq
 80126b0:	2301      	moveq	r3, #1
 80126b2:	2300      	movne	r3, #0
 80126b4:	b2db      	uxtb	r3, r3
 80126b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80126b8:	7efb      	ldrb	r3, [r7, #27]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d041      	beq.n	8012742 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80126be:	2108      	movs	r1, #8
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7f9 f967 	bl	800b994 <pbuf_remove_header>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d00a      	beq.n	80126e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80126cc:	4b20      	ldr	r3, [pc, #128]	; (8012750 <udp_input+0x208>)
 80126ce:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80126d2:	4925      	ldr	r1, [pc, #148]	; (8012768 <udp_input+0x220>)
 80126d4:	4820      	ldr	r0, [pc, #128]	; (8012758 <udp_input+0x210>)
 80126d6:	f004 fef7 	bl	80174c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f7f9 f9e0 	bl	800baa0 <pbuf_free>
      goto end;
 80126e0:	e032      	b.n	8012748 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80126e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d012      	beq.n	801270e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80126e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ea:	699b      	ldr	r3, [r3, #24]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d00a      	beq.n	8012706 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80126f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f2:	699c      	ldr	r4, [r3, #24]
 80126f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f6:	69d8      	ldr	r0, [r3, #28]
 80126f8:	8a3b      	ldrh	r3, [r7, #16]
 80126fa:	9300      	str	r3, [sp, #0]
 80126fc:	4b1b      	ldr	r3, [pc, #108]	; (801276c <udp_input+0x224>)
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012702:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012704:	e021      	b.n	801274a <udp_input+0x202>
        pbuf_free(p);
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7f9 f9ca 	bl	800baa0 <pbuf_free>
        goto end;
 801270c:	e01c      	b.n	8012748 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801270e:	7cfb      	ldrb	r3, [r7, #19]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d112      	bne.n	801273a <udp_input+0x1f2>
 8012714:	4b12      	ldr	r3, [pc, #72]	; (8012760 <udp_input+0x218>)
 8012716:	695b      	ldr	r3, [r3, #20]
 8012718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801271c:	2be0      	cmp	r3, #224	; 0xe0
 801271e:	d00c      	beq.n	801273a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012720:	4b0f      	ldr	r3, [pc, #60]	; (8012760 <udp_input+0x218>)
 8012722:	899b      	ldrh	r3, [r3, #12]
 8012724:	3308      	adds	r3, #8
 8012726:	b29b      	uxth	r3, r3
 8012728:	b21b      	sxth	r3, r3
 801272a:	4619      	mov	r1, r3
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7f9 f9a4 	bl	800ba7a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012732:	2103      	movs	r1, #3
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f003 fa17 	bl	8015b68 <icmp_dest_unreach>
      pbuf_free(p);
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f7f9 f9b0 	bl	800baa0 <pbuf_free>
  return;
 8012740:	e003      	b.n	801274a <udp_input+0x202>
    pbuf_free(p);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7f9 f9ac 	bl	800baa0 <pbuf_free>
  return;
 8012748:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801274a:	372c      	adds	r7, #44	; 0x2c
 801274c:	46bd      	mov	sp, r7
 801274e:	bd90      	pop	{r4, r7, pc}
 8012750:	0801aea4 	.word	0x0801aea4
 8012754:	0801af48 	.word	0x0801af48
 8012758:	0801aef8 	.word	0x0801aef8
 801275c:	0801af60 	.word	0x0801af60
 8012760:	2000bbf8 	.word	0x2000bbf8
 8012764:	2000f344 	.word	0x2000f344
 8012768:	0801af7c 	.word	0x0801af7c
 801276c:	2000bc08 	.word	0x2000bc08

08012770 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b088      	sub	sp, #32
 8012774:	af02      	add	r7, sp, #8
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	607a      	str	r2, [r7, #4]
 801277c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d109      	bne.n	8012798 <udp_sendto_if+0x28>
 8012784:	4b2e      	ldr	r3, [pc, #184]	; (8012840 <udp_sendto_if+0xd0>)
 8012786:	f44f 7220 	mov.w	r2, #640	; 0x280
 801278a:	492e      	ldr	r1, [pc, #184]	; (8012844 <udp_sendto_if+0xd4>)
 801278c:	482e      	ldr	r0, [pc, #184]	; (8012848 <udp_sendto_if+0xd8>)
 801278e:	f004 fe9b 	bl	80174c8 <iprintf>
 8012792:	f06f 030f 	mvn.w	r3, #15
 8012796:	e04f      	b.n	8012838 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d109      	bne.n	80127b2 <udp_sendto_if+0x42>
 801279e:	4b28      	ldr	r3, [pc, #160]	; (8012840 <udp_sendto_if+0xd0>)
 80127a0:	f240 2281 	movw	r2, #641	; 0x281
 80127a4:	4929      	ldr	r1, [pc, #164]	; (801284c <udp_sendto_if+0xdc>)
 80127a6:	4828      	ldr	r0, [pc, #160]	; (8012848 <udp_sendto_if+0xd8>)
 80127a8:	f004 fe8e 	bl	80174c8 <iprintf>
 80127ac:	f06f 030f 	mvn.w	r3, #15
 80127b0:	e042      	b.n	8012838 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d109      	bne.n	80127cc <udp_sendto_if+0x5c>
 80127b8:	4b21      	ldr	r3, [pc, #132]	; (8012840 <udp_sendto_if+0xd0>)
 80127ba:	f240 2282 	movw	r2, #642	; 0x282
 80127be:	4924      	ldr	r1, [pc, #144]	; (8012850 <udp_sendto_if+0xe0>)
 80127c0:	4821      	ldr	r0, [pc, #132]	; (8012848 <udp_sendto_if+0xd8>)
 80127c2:	f004 fe81 	bl	80174c8 <iprintf>
 80127c6:	f06f 030f 	mvn.w	r3, #15
 80127ca:	e035      	b.n	8012838 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80127cc:	6a3b      	ldr	r3, [r7, #32]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d109      	bne.n	80127e6 <udp_sendto_if+0x76>
 80127d2:	4b1b      	ldr	r3, [pc, #108]	; (8012840 <udp_sendto_if+0xd0>)
 80127d4:	f240 2283 	movw	r2, #643	; 0x283
 80127d8:	491e      	ldr	r1, [pc, #120]	; (8012854 <udp_sendto_if+0xe4>)
 80127da:	481b      	ldr	r0, [pc, #108]	; (8012848 <udp_sendto_if+0xd8>)
 80127dc:	f004 fe74 	bl	80174c8 <iprintf>
 80127e0:	f06f 030f 	mvn.w	r3, #15
 80127e4:	e028      	b.n	8012838 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d009      	beq.n	8012800 <udp_sendto_if+0x90>
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d005      	beq.n	8012800 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80127fc:	2be0      	cmp	r3, #224	; 0xe0
 80127fe:	d103      	bne.n	8012808 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012800:	6a3b      	ldr	r3, [r7, #32]
 8012802:	3304      	adds	r3, #4
 8012804:	617b      	str	r3, [r7, #20]
 8012806:	e00b      	b.n	8012820 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	6a3b      	ldr	r3, [r7, #32]
 801280e:	3304      	adds	r3, #4
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	429a      	cmp	r2, r3
 8012814:	d002      	beq.n	801281c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012816:	f06f 0303 	mvn.w	r3, #3
 801281a:	e00d      	b.n	8012838 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012820:	887a      	ldrh	r2, [r7, #2]
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	9301      	str	r3, [sp, #4]
 8012826:	6a3b      	ldr	r3, [r7, #32]
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	4613      	mov	r3, r2
 801282c:	687a      	ldr	r2, [r7, #4]
 801282e:	68b9      	ldr	r1, [r7, #8]
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	f000 f811 	bl	8012858 <udp_sendto_if_src>
 8012836:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012838:	4618      	mov	r0, r3
 801283a:	3718      	adds	r7, #24
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	0801aea4 	.word	0x0801aea4
 8012844:	0801b018 	.word	0x0801b018
 8012848:	0801aef8 	.word	0x0801aef8
 801284c:	0801b034 	.word	0x0801b034
 8012850:	0801b050 	.word	0x0801b050
 8012854:	0801b070 	.word	0x0801b070

08012858 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b08c      	sub	sp, #48	; 0x30
 801285c:	af04      	add	r7, sp, #16
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d109      	bne.n	8012880 <udp_sendto_if_src+0x28>
 801286c:	4b65      	ldr	r3, [pc, #404]	; (8012a04 <udp_sendto_if_src+0x1ac>)
 801286e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012872:	4965      	ldr	r1, [pc, #404]	; (8012a08 <udp_sendto_if_src+0x1b0>)
 8012874:	4865      	ldr	r0, [pc, #404]	; (8012a0c <udp_sendto_if_src+0x1b4>)
 8012876:	f004 fe27 	bl	80174c8 <iprintf>
 801287a:	f06f 030f 	mvn.w	r3, #15
 801287e:	e0bc      	b.n	80129fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d109      	bne.n	801289a <udp_sendto_if_src+0x42>
 8012886:	4b5f      	ldr	r3, [pc, #380]	; (8012a04 <udp_sendto_if_src+0x1ac>)
 8012888:	f240 22d2 	movw	r2, #722	; 0x2d2
 801288c:	4960      	ldr	r1, [pc, #384]	; (8012a10 <udp_sendto_if_src+0x1b8>)
 801288e:	485f      	ldr	r0, [pc, #380]	; (8012a0c <udp_sendto_if_src+0x1b4>)
 8012890:	f004 fe1a 	bl	80174c8 <iprintf>
 8012894:	f06f 030f 	mvn.w	r3, #15
 8012898:	e0af      	b.n	80129fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d109      	bne.n	80128b4 <udp_sendto_if_src+0x5c>
 80128a0:	4b58      	ldr	r3, [pc, #352]	; (8012a04 <udp_sendto_if_src+0x1ac>)
 80128a2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80128a6:	495b      	ldr	r1, [pc, #364]	; (8012a14 <udp_sendto_if_src+0x1bc>)
 80128a8:	4858      	ldr	r0, [pc, #352]	; (8012a0c <udp_sendto_if_src+0x1b4>)
 80128aa:	f004 fe0d 	bl	80174c8 <iprintf>
 80128ae:	f06f 030f 	mvn.w	r3, #15
 80128b2:	e0a2      	b.n	80129fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80128b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d109      	bne.n	80128ce <udp_sendto_if_src+0x76>
 80128ba:	4b52      	ldr	r3, [pc, #328]	; (8012a04 <udp_sendto_if_src+0x1ac>)
 80128bc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80128c0:	4955      	ldr	r1, [pc, #340]	; (8012a18 <udp_sendto_if_src+0x1c0>)
 80128c2:	4852      	ldr	r0, [pc, #328]	; (8012a0c <udp_sendto_if_src+0x1b4>)
 80128c4:	f004 fe00 	bl	80174c8 <iprintf>
 80128c8:	f06f 030f 	mvn.w	r3, #15
 80128cc:	e095      	b.n	80129fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80128ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d109      	bne.n	80128e8 <udp_sendto_if_src+0x90>
 80128d4:	4b4b      	ldr	r3, [pc, #300]	; (8012a04 <udp_sendto_if_src+0x1ac>)
 80128d6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80128da:	4950      	ldr	r1, [pc, #320]	; (8012a1c <udp_sendto_if_src+0x1c4>)
 80128dc:	484b      	ldr	r0, [pc, #300]	; (8012a0c <udp_sendto_if_src+0x1b4>)
 80128de:	f004 fdf3 	bl	80174c8 <iprintf>
 80128e2:	f06f 030f 	mvn.w	r3, #15
 80128e6:	e088      	b.n	80129fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	8a5b      	ldrh	r3, [r3, #18]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d10f      	bne.n	8012910 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80128f0:	68f9      	ldr	r1, [r7, #12]
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	8a5b      	ldrh	r3, [r3, #18]
 80128f6:	461a      	mov	r2, r3
 80128f8:	68f8      	ldr	r0, [r7, #12]
 80128fa:	f000 f893 	bl	8012a24 <udp_bind>
 80128fe:	4603      	mov	r3, r0
 8012900:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012902:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d002      	beq.n	8012910 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801290a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801290e:	e074      	b.n	80129fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	891b      	ldrh	r3, [r3, #8]
 8012914:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012918:	4293      	cmp	r3, r2
 801291a:	d902      	bls.n	8012922 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801291c:	f04f 33ff 	mov.w	r3, #4294967295
 8012920:	e06b      	b.n	80129fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012922:	2108      	movs	r1, #8
 8012924:	68b8      	ldr	r0, [r7, #8]
 8012926:	f7f9 f825 	bl	800b974 <pbuf_add_header>
 801292a:	4603      	mov	r3, r0
 801292c:	2b00      	cmp	r3, #0
 801292e:	d015      	beq.n	801295c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012930:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012934:	2108      	movs	r1, #8
 8012936:	2022      	movs	r0, #34	; 0x22
 8012938:	f7f8 fdd2 	bl	800b4e0 <pbuf_alloc>
 801293c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d102      	bne.n	801294a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012944:	f04f 33ff 	mov.w	r3, #4294967295
 8012948:	e057      	b.n	80129fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	891b      	ldrh	r3, [r3, #8]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d006      	beq.n	8012960 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012952:	68b9      	ldr	r1, [r7, #8]
 8012954:	69f8      	ldr	r0, [r7, #28]
 8012956:	f7f9 f9c7 	bl	800bce8 <pbuf_chain>
 801295a:	e001      	b.n	8012960 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	895b      	ldrh	r3, [r3, #10]
 8012964:	2b07      	cmp	r3, #7
 8012966:	d806      	bhi.n	8012976 <udp_sendto_if_src+0x11e>
 8012968:	4b26      	ldr	r3, [pc, #152]	; (8012a04 <udp_sendto_if_src+0x1ac>)
 801296a:	f240 320e 	movw	r2, #782	; 0x30e
 801296e:	492c      	ldr	r1, [pc, #176]	; (8012a20 <udp_sendto_if_src+0x1c8>)
 8012970:	4826      	ldr	r0, [pc, #152]	; (8012a0c <udp_sendto_if_src+0x1b4>)
 8012972:	f004 fda9 	bl	80174c8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	8a5b      	ldrh	r3, [r3, #18]
 8012980:	4618      	mov	r0, r3
 8012982:	f7f7 fcd9 	bl	800a338 <lwip_htons>
 8012986:	4603      	mov	r3, r0
 8012988:	461a      	mov	r2, r3
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801298e:	887b      	ldrh	r3, [r7, #2]
 8012990:	4618      	mov	r0, r3
 8012992:	f7f7 fcd1 	bl	800a338 <lwip_htons>
 8012996:	4603      	mov	r3, r0
 8012998:	461a      	mov	r2, r3
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	2200      	movs	r2, #0
 80129a2:	719a      	strb	r2, [r3, #6]
 80129a4:	2200      	movs	r2, #0
 80129a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80129a8:	69fb      	ldr	r3, [r7, #28]
 80129aa:	891b      	ldrh	r3, [r3, #8]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f7 fcc3 	bl	800a338 <lwip_htons>
 80129b2:	4603      	mov	r3, r0
 80129b4:	461a      	mov	r2, r3
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80129ba:	2311      	movs	r3, #17
 80129bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	7adb      	ldrb	r3, [r3, #11]
 80129c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	7a9b      	ldrb	r3, [r3, #10]
 80129c8:	7cb9      	ldrb	r1, [r7, #18]
 80129ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129cc:	9202      	str	r2, [sp, #8]
 80129ce:	7cfa      	ldrb	r2, [r7, #19]
 80129d0:	9201      	str	r2, [sp, #4]
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	460b      	mov	r3, r1
 80129d6:	687a      	ldr	r2, [r7, #4]
 80129d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129da:	69f8      	ldr	r0, [r7, #28]
 80129dc:	f003 fb52 	bl	8016084 <ip4_output_if_src>
 80129e0:	4603      	mov	r3, r0
 80129e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80129e4:	69fa      	ldr	r2, [r7, #28]
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d004      	beq.n	80129f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80129ec:	69f8      	ldr	r0, [r7, #28]
 80129ee:	f7f9 f857 	bl	800baa0 <pbuf_free>
    q = NULL;
 80129f2:	2300      	movs	r3, #0
 80129f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80129f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3720      	adds	r7, #32
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	0801aea4 	.word	0x0801aea4
 8012a08:	0801b090 	.word	0x0801b090
 8012a0c:	0801aef8 	.word	0x0801aef8
 8012a10:	0801b0b0 	.word	0x0801b0b0
 8012a14:	0801b0d0 	.word	0x0801b0d0
 8012a18:	0801b0f4 	.word	0x0801b0f4
 8012a1c:	0801b118 	.word	0x0801b118
 8012a20:	0801b13c 	.word	0x0801b13c

08012a24 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b086      	sub	sp, #24
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	4613      	mov	r3, r2
 8012a30:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d101      	bne.n	8012a3c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012a38:	4b39      	ldr	r3, [pc, #228]	; (8012b20 <udp_bind+0xfc>)
 8012a3a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d109      	bne.n	8012a56 <udp_bind+0x32>
 8012a42:	4b38      	ldr	r3, [pc, #224]	; (8012b24 <udp_bind+0x100>)
 8012a44:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012a48:	4937      	ldr	r1, [pc, #220]	; (8012b28 <udp_bind+0x104>)
 8012a4a:	4838      	ldr	r0, [pc, #224]	; (8012b2c <udp_bind+0x108>)
 8012a4c:	f004 fd3c 	bl	80174c8 <iprintf>
 8012a50:	f06f 030f 	mvn.w	r3, #15
 8012a54:	e060      	b.n	8012b18 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012a56:	2300      	movs	r3, #0
 8012a58:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a5a:	4b35      	ldr	r3, [pc, #212]	; (8012b30 <udp_bind+0x10c>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	617b      	str	r3, [r7, #20]
 8012a60:	e009      	b.n	8012a76 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012a62:	68fa      	ldr	r2, [r7, #12]
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d102      	bne.n	8012a70 <udp_bind+0x4c>
      rebind = 1;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	74fb      	strb	r3, [r7, #19]
      break;
 8012a6e:	e005      	b.n	8012a7c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	617b      	str	r3, [r7, #20]
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1f2      	bne.n	8012a62 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012a7c:	88fb      	ldrh	r3, [r7, #6]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d109      	bne.n	8012a96 <udp_bind+0x72>
    port = udp_new_port();
 8012a82:	f7ff fcc5 	bl	8012410 <udp_new_port>
 8012a86:	4603      	mov	r3, r0
 8012a88:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012a8a:	88fb      	ldrh	r3, [r7, #6]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d12c      	bne.n	8012aea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012a90:	f06f 0307 	mvn.w	r3, #7
 8012a94:	e040      	b.n	8012b18 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a96:	4b26      	ldr	r3, [pc, #152]	; (8012b30 <udp_bind+0x10c>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	617b      	str	r3, [r7, #20]
 8012a9c:	e022      	b.n	8012ae4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d01b      	beq.n	8012ade <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	8a5b      	ldrh	r3, [r3, #18]
 8012aaa:	88fa      	ldrh	r2, [r7, #6]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d116      	bne.n	8012ade <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d00d      	beq.n	8012ad8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d00a      	beq.n	8012ad8 <udp_bind+0xb4>
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d006      	beq.n	8012ad8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012aca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d003      	beq.n	8012ad8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d102      	bne.n	8012ade <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012ad8:	f06f 0307 	mvn.w	r3, #7
 8012adc:	e01c      	b.n	8012b18 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	617b      	str	r3, [r7, #20]
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d1d9      	bne.n	8012a9e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d002      	beq.n	8012af6 <udp_bind+0xd2>
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	e000      	b.n	8012af8 <udp_bind+0xd4>
 8012af6:	2300      	movs	r3, #0
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	88fa      	ldrh	r2, [r7, #6]
 8012b00:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012b02:	7cfb      	ldrb	r3, [r7, #19]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d106      	bne.n	8012b16 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012b08:	4b09      	ldr	r3, [pc, #36]	; (8012b30 <udp_bind+0x10c>)
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012b10:	4a07      	ldr	r2, [pc, #28]	; (8012b30 <udp_bind+0x10c>)
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012b16:	2300      	movs	r3, #0
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3718      	adds	r7, #24
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	0801bda8 	.word	0x0801bda8
 8012b24:	0801aea4 	.word	0x0801aea4
 8012b28:	0801b16c 	.word	0x0801b16c
 8012b2c:	0801aef8 	.word	0x0801aef8
 8012b30:	2000f344 	.word	0x2000f344

08012b34 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b086      	sub	sp, #24
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	4613      	mov	r3, r2
 8012b40:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d109      	bne.n	8012b5c <udp_connect+0x28>
 8012b48:	4b2c      	ldr	r3, [pc, #176]	; (8012bfc <udp_connect+0xc8>)
 8012b4a:	f240 4235 	movw	r2, #1077	; 0x435
 8012b4e:	492c      	ldr	r1, [pc, #176]	; (8012c00 <udp_connect+0xcc>)
 8012b50:	482c      	ldr	r0, [pc, #176]	; (8012c04 <udp_connect+0xd0>)
 8012b52:	f004 fcb9 	bl	80174c8 <iprintf>
 8012b56:	f06f 030f 	mvn.w	r3, #15
 8012b5a:	e04b      	b.n	8012bf4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d109      	bne.n	8012b76 <udp_connect+0x42>
 8012b62:	4b26      	ldr	r3, [pc, #152]	; (8012bfc <udp_connect+0xc8>)
 8012b64:	f240 4236 	movw	r2, #1078	; 0x436
 8012b68:	4927      	ldr	r1, [pc, #156]	; (8012c08 <udp_connect+0xd4>)
 8012b6a:	4826      	ldr	r0, [pc, #152]	; (8012c04 <udp_connect+0xd0>)
 8012b6c:	f004 fcac 	bl	80174c8 <iprintf>
 8012b70:	f06f 030f 	mvn.w	r3, #15
 8012b74:	e03e      	b.n	8012bf4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	8a5b      	ldrh	r3, [r3, #18]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d10f      	bne.n	8012b9e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012b7e:	68f9      	ldr	r1, [r7, #12]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	8a5b      	ldrh	r3, [r3, #18]
 8012b84:	461a      	mov	r2, r3
 8012b86:	68f8      	ldr	r0, [r7, #12]
 8012b88:	f7ff ff4c 	bl	8012a24 <udp_bind>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012b90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d002      	beq.n	8012b9e <udp_connect+0x6a>
      return err;
 8012b98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b9c:	e02a      	b.n	8012bf4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <udp_connect+0x76>
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	e000      	b.n	8012bac <udp_connect+0x78>
 8012baa:	2300      	movs	r3, #0
 8012bac:	68fa      	ldr	r2, [r7, #12]
 8012bae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	88fa      	ldrh	r2, [r7, #6]
 8012bb4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	7c1b      	ldrb	r3, [r3, #16]
 8012bba:	f043 0304 	orr.w	r3, r3, #4
 8012bbe:	b2da      	uxtb	r2, r3
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012bc4:	4b11      	ldr	r3, [pc, #68]	; (8012c0c <udp_connect+0xd8>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	617b      	str	r3, [r7, #20]
 8012bca:	e008      	b.n	8012bde <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012bcc:	68fa      	ldr	r2, [r7, #12]
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d101      	bne.n	8012bd8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	e00d      	b.n	8012bf4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	68db      	ldr	r3, [r3, #12]
 8012bdc:	617b      	str	r3, [r7, #20]
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d1f3      	bne.n	8012bcc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012be4:	4b09      	ldr	r3, [pc, #36]	; (8012c0c <udp_connect+0xd8>)
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012bec:	4a07      	ldr	r2, [pc, #28]	; (8012c0c <udp_connect+0xd8>)
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012bf2:	2300      	movs	r3, #0
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3718      	adds	r7, #24
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	0801aea4 	.word	0x0801aea4
 8012c00:	0801b184 	.word	0x0801b184
 8012c04:	0801aef8 	.word	0x0801aef8
 8012c08:	0801b1a0 	.word	0x0801b1a0
 8012c0c:	2000f344 	.word	0x2000f344

08012c10 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d107      	bne.n	8012c32 <udp_recv+0x22>
 8012c22:	4b08      	ldr	r3, [pc, #32]	; (8012c44 <udp_recv+0x34>)
 8012c24:	f240 428a 	movw	r2, #1162	; 0x48a
 8012c28:	4907      	ldr	r1, [pc, #28]	; (8012c48 <udp_recv+0x38>)
 8012c2a:	4808      	ldr	r0, [pc, #32]	; (8012c4c <udp_recv+0x3c>)
 8012c2c:	f004 fc4c 	bl	80174c8 <iprintf>
 8012c30:	e005      	b.n	8012c3e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	687a      	ldr	r2, [r7, #4]
 8012c3c:	61da      	str	r2, [r3, #28]
}
 8012c3e:	3710      	adds	r7, #16
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	0801aea4 	.word	0x0801aea4
 8012c48:	0801b1d8 	.word	0x0801b1d8
 8012c4c:	0801aef8 	.word	0x0801aef8

08012c50 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b084      	sub	sp, #16
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d107      	bne.n	8012c6e <udp_remove+0x1e>
 8012c5e:	4b19      	ldr	r3, [pc, #100]	; (8012cc4 <udp_remove+0x74>)
 8012c60:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012c64:	4918      	ldr	r1, [pc, #96]	; (8012cc8 <udp_remove+0x78>)
 8012c66:	4819      	ldr	r0, [pc, #100]	; (8012ccc <udp_remove+0x7c>)
 8012c68:	f004 fc2e 	bl	80174c8 <iprintf>
 8012c6c:	e026      	b.n	8012cbc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012c6e:	4b18      	ldr	r3, [pc, #96]	; (8012cd0 <udp_remove+0x80>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d105      	bne.n	8012c84 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012c78:	4b15      	ldr	r3, [pc, #84]	; (8012cd0 <udp_remove+0x80>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	4a14      	ldr	r2, [pc, #80]	; (8012cd0 <udp_remove+0x80>)
 8012c80:	6013      	str	r3, [r2, #0]
 8012c82:	e017      	b.n	8012cb4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012c84:	4b12      	ldr	r3, [pc, #72]	; (8012cd0 <udp_remove+0x80>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	60fb      	str	r3, [r7, #12]
 8012c8a:	e010      	b.n	8012cae <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d009      	beq.n	8012ca8 <udp_remove+0x58>
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d104      	bne.n	8012ca8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	68da      	ldr	r2, [r3, #12]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	60da      	str	r2, [r3, #12]
        break;
 8012ca6:	e005      	b.n	8012cb4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	68db      	ldr	r3, [r3, #12]
 8012cac:	60fb      	str	r3, [r7, #12]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d1eb      	bne.n	8012c8c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012cb4:	6879      	ldr	r1, [r7, #4]
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	f7f8 f846 	bl	800ad48 <memp_free>
}
 8012cbc:	3710      	adds	r7, #16
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
 8012cc2:	bf00      	nop
 8012cc4:	0801aea4 	.word	0x0801aea4
 8012cc8:	0801b1f0 	.word	0x0801b1f0
 8012ccc:	0801aef8 	.word	0x0801aef8
 8012cd0:	2000f344 	.word	0x2000f344

08012cd4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012cda:	2000      	movs	r0, #0
 8012cdc:	f7f7 ffe2 	bl	800aca4 <memp_malloc>
 8012ce0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d007      	beq.n	8012cf8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012ce8:	2220      	movs	r2, #32
 8012cea:	2100      	movs	r1, #0
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f004 fbe3 	bl	80174b8 <memset>
    pcb->ttl = UDP_TTL;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	22ff      	movs	r2, #255	; 0xff
 8012cf6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012cf8:	687b      	ldr	r3, [r7, #4]
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3708      	adds	r7, #8
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}

08012d02 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012d02:	b580      	push	{r7, lr}
 8012d04:	b084      	sub	sp, #16
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	4603      	mov	r3, r0
 8012d0a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012d0c:	f7ff ffe2 	bl	8012cd4 <udp_new>
 8012d10:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012d12:	68fb      	ldr	r3, [r7, #12]
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3710      	adds	r7, #16
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b085      	sub	sp, #20
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d01e      	beq.n	8012d6a <udp_netif_ip_addr_changed+0x4e>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d01a      	beq.n	8012d6a <udp_netif_ip_addr_changed+0x4e>
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d017      	beq.n	8012d6a <udp_netif_ip_addr_changed+0x4e>
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d013      	beq.n	8012d6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012d42:	4b0d      	ldr	r3, [pc, #52]	; (8012d78 <udp_netif_ip_addr_changed+0x5c>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	60fb      	str	r3, [r7, #12]
 8012d48:	e00c      	b.n	8012d64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d103      	bne.n	8012d5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	68db      	ldr	r3, [r3, #12]
 8012d62:	60fb      	str	r3, [r7, #12]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d1ef      	bne.n	8012d4a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012d6a:	bf00      	nop
 8012d6c:	3714      	adds	r7, #20
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d74:	4770      	bx	lr
 8012d76:	bf00      	nop
 8012d78:	2000f344 	.word	0x2000f344

08012d7c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012d80:	4b20      	ldr	r3, [pc, #128]	; (8012e04 <dhcp_inc_pcb_refcount+0x88>)
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d133      	bne.n	8012df0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012d88:	4b1f      	ldr	r3, [pc, #124]	; (8012e08 <dhcp_inc_pcb_refcount+0x8c>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d005      	beq.n	8012d9c <dhcp_inc_pcb_refcount+0x20>
 8012d90:	4b1e      	ldr	r3, [pc, #120]	; (8012e0c <dhcp_inc_pcb_refcount+0x90>)
 8012d92:	22e5      	movs	r2, #229	; 0xe5
 8012d94:	491e      	ldr	r1, [pc, #120]	; (8012e10 <dhcp_inc_pcb_refcount+0x94>)
 8012d96:	481f      	ldr	r0, [pc, #124]	; (8012e14 <dhcp_inc_pcb_refcount+0x98>)
 8012d98:	f004 fb96 	bl	80174c8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012d9c:	f7ff ff9a 	bl	8012cd4 <udp_new>
 8012da0:	4602      	mov	r2, r0
 8012da2:	4b19      	ldr	r3, [pc, #100]	; (8012e08 <dhcp_inc_pcb_refcount+0x8c>)
 8012da4:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8012da6:	4b18      	ldr	r3, [pc, #96]	; (8012e08 <dhcp_inc_pcb_refcount+0x8c>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d102      	bne.n	8012db4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012dae:	f04f 33ff 	mov.w	r3, #4294967295
 8012db2:	e024      	b.n	8012dfe <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012db4:	4b14      	ldr	r3, [pc, #80]	; (8012e08 <dhcp_inc_pcb_refcount+0x8c>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	7a5a      	ldrb	r2, [r3, #9]
 8012dba:	4b13      	ldr	r3, [pc, #76]	; (8012e08 <dhcp_inc_pcb_refcount+0x8c>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f042 0220 	orr.w	r2, r2, #32
 8012dc2:	b2d2      	uxtb	r2, r2
 8012dc4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012dc6:	4b10      	ldr	r3, [pc, #64]	; (8012e08 <dhcp_inc_pcb_refcount+0x8c>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2244      	movs	r2, #68	; 0x44
 8012dcc:	4912      	ldr	r1, [pc, #72]	; (8012e18 <dhcp_inc_pcb_refcount+0x9c>)
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7ff fe28 	bl	8012a24 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012dd4:	4b0c      	ldr	r3, [pc, #48]	; (8012e08 <dhcp_inc_pcb_refcount+0x8c>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2243      	movs	r2, #67	; 0x43
 8012dda:	490f      	ldr	r1, [pc, #60]	; (8012e18 <dhcp_inc_pcb_refcount+0x9c>)
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7ff fea9 	bl	8012b34 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012de2:	4b09      	ldr	r3, [pc, #36]	; (8012e08 <dhcp_inc_pcb_refcount+0x8c>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2200      	movs	r2, #0
 8012de8:	490c      	ldr	r1, [pc, #48]	; (8012e1c <dhcp_inc_pcb_refcount+0xa0>)
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7ff ff10 	bl	8012c10 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012df0:	4b04      	ldr	r3, [pc, #16]	; (8012e04 <dhcp_inc_pcb_refcount+0x88>)
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	3301      	adds	r3, #1
 8012df6:	b2da      	uxtb	r2, r3
 8012df8:	4b02      	ldr	r3, [pc, #8]	; (8012e04 <dhcp_inc_pcb_refcount+0x88>)
 8012dfa:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012dfc:	2300      	movs	r3, #0
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	200084e4 	.word	0x200084e4
 8012e08:	200084e0 	.word	0x200084e0
 8012e0c:	0801b208 	.word	0x0801b208
 8012e10:	0801b240 	.word	0x0801b240
 8012e14:	0801b268 	.word	0x0801b268
 8012e18:	0801bda8 	.word	0x0801bda8
 8012e1c:	080146d5 	.word	0x080146d5

08012e20 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012e24:	4b0e      	ldr	r3, [pc, #56]	; (8012e60 <dhcp_dec_pcb_refcount+0x40>)
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d105      	bne.n	8012e38 <dhcp_dec_pcb_refcount+0x18>
 8012e2c:	4b0d      	ldr	r3, [pc, #52]	; (8012e64 <dhcp_dec_pcb_refcount+0x44>)
 8012e2e:	22ff      	movs	r2, #255	; 0xff
 8012e30:	490d      	ldr	r1, [pc, #52]	; (8012e68 <dhcp_dec_pcb_refcount+0x48>)
 8012e32:	480e      	ldr	r0, [pc, #56]	; (8012e6c <dhcp_dec_pcb_refcount+0x4c>)
 8012e34:	f004 fb48 	bl	80174c8 <iprintf>
  dhcp_pcb_refcount--;
 8012e38:	4b09      	ldr	r3, [pc, #36]	; (8012e60 <dhcp_dec_pcb_refcount+0x40>)
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	3b01      	subs	r3, #1
 8012e3e:	b2da      	uxtb	r2, r3
 8012e40:	4b07      	ldr	r3, [pc, #28]	; (8012e60 <dhcp_dec_pcb_refcount+0x40>)
 8012e42:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012e44:	4b06      	ldr	r3, [pc, #24]	; (8012e60 <dhcp_dec_pcb_refcount+0x40>)
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d107      	bne.n	8012e5c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012e4c:	4b08      	ldr	r3, [pc, #32]	; (8012e70 <dhcp_dec_pcb_refcount+0x50>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7ff fefd 	bl	8012c50 <udp_remove>
    dhcp_pcb = NULL;
 8012e56:	4b06      	ldr	r3, [pc, #24]	; (8012e70 <dhcp_dec_pcb_refcount+0x50>)
 8012e58:	2200      	movs	r2, #0
 8012e5a:	601a      	str	r2, [r3, #0]
  }
}
 8012e5c:	bf00      	nop
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	200084e4 	.word	0x200084e4
 8012e64:	0801b208 	.word	0x0801b208
 8012e68:	0801b290 	.word	0x0801b290
 8012e6c:	0801b268 	.word	0x0801b268
 8012e70:	200084e0 	.word	0x200084e0

08012e74 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012e82:	210c      	movs	r1, #12
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f001 f867 	bl	8013f58 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012e8a:	4b06      	ldr	r3, [pc, #24]	; (8012ea4 <dhcp_handle_nak+0x30>)
 8012e8c:	4a05      	ldr	r2, [pc, #20]	; (8012ea4 <dhcp_handle_nak+0x30>)
 8012e8e:	4905      	ldr	r1, [pc, #20]	; (8012ea4 <dhcp_handle_nak+0x30>)
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f7f8 f8fb 	bl	800b08c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f000 fc5a 	bl	8013750 <dhcp_discover>
}
 8012e9c:	bf00      	nop
 8012e9e:	3710      	adds	r7, #16
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	0801bda8 	.word	0x0801bda8

08012ea8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012eb6:	2108      	movs	r1, #8
 8012eb8:	68f8      	ldr	r0, [r7, #12]
 8012eba:	f001 f84d 	bl	8013f58 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	331c      	adds	r3, #28
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f002 fb4c 	bl	8015564 <etharp_query>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	799b      	ldrb	r3, [r3, #6]
 8012ed4:	2bff      	cmp	r3, #255	; 0xff
 8012ed6:	d005      	beq.n	8012ee4 <dhcp_check+0x3c>
    dhcp->tries++;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	799b      	ldrb	r3, [r3, #6]
 8012edc:	3301      	adds	r3, #1
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012ee4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012ee8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012eea:	893b      	ldrh	r3, [r7, #8]
 8012eec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ef0:	4a06      	ldr	r2, [pc, #24]	; (8012f0c <dhcp_check+0x64>)
 8012ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8012ef6:	1152      	asrs	r2, r2, #5
 8012ef8:	17db      	asrs	r3, r3, #31
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012f02:	bf00      	nop
 8012f04:	3710      	adds	r7, #16
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	10624dd3 	.word	0x10624dd3

08012f10 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012f20:	4b0c      	ldr	r3, [pc, #48]	; (8012f54 <dhcp_handle_offer+0x44>)
 8012f22:	789b      	ldrb	r3, [r3, #2]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d011      	beq.n	8012f4c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012f2e:	4b0a      	ldr	r3, [pc, #40]	; (8012f58 <dhcp_handle_offer+0x48>)
 8012f30:	689b      	ldr	r3, [r3, #8]
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7f7 fa15 	bl	800a362 <lwip_htonl>
 8012f38:	4602      	mov	r2, r0
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	691a      	ldr	r2, [r3, #16]
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f000 f808 	bl	8012f5c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012f4c:	bf00      	nop
 8012f4e:	3710      	adds	r7, #16
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	2000f348 	.word	0x2000f348
 8012f58:	2000f350 	.word	0x2000f350

08012f5c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012f5c:	b5b0      	push	{r4, r5, r7, lr}
 8012f5e:	b08a      	sub	sp, #40	; 0x28
 8012f60:	af02      	add	r7, sp, #8
 8012f62:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d109      	bne.n	8012f7e <dhcp_select+0x22>
 8012f6a:	4b71      	ldr	r3, [pc, #452]	; (8013130 <dhcp_select+0x1d4>)
 8012f6c:	f240 1277 	movw	r2, #375	; 0x177
 8012f70:	4970      	ldr	r1, [pc, #448]	; (8013134 <dhcp_select+0x1d8>)
 8012f72:	4871      	ldr	r0, [pc, #452]	; (8013138 <dhcp_select+0x1dc>)
 8012f74:	f004 faa8 	bl	80174c8 <iprintf>
 8012f78:	f06f 030f 	mvn.w	r3, #15
 8012f7c:	e0d3      	b.n	8013126 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f82:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012f84:	69bb      	ldr	r3, [r7, #24]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d109      	bne.n	8012f9e <dhcp_select+0x42>
 8012f8a:	4b69      	ldr	r3, [pc, #420]	; (8013130 <dhcp_select+0x1d4>)
 8012f8c:	f240 1279 	movw	r2, #377	; 0x179
 8012f90:	496a      	ldr	r1, [pc, #424]	; (801313c <dhcp_select+0x1e0>)
 8012f92:	4869      	ldr	r0, [pc, #420]	; (8013138 <dhcp_select+0x1dc>)
 8012f94:	f004 fa98 	bl	80174c8 <iprintf>
 8012f98:	f06f 0305 	mvn.w	r3, #5
 8012f9c:	e0c3      	b.n	8013126 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012f9e:	2101      	movs	r1, #1
 8012fa0:	69b8      	ldr	r0, [r7, #24]
 8012fa2:	f000 ffd9 	bl	8013f58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012fa6:	f107 030c 	add.w	r3, r7, #12
 8012faa:	2203      	movs	r2, #3
 8012fac:	69b9      	ldr	r1, [r7, #24]
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f001 fc5c 	bl	801486c <dhcp_create_msg>
 8012fb4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	f000 8085 	beq.w	80130c8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012fc4:	89b8      	ldrh	r0, [r7, #12]
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012fcc:	2302      	movs	r3, #2
 8012fce:	2239      	movs	r2, #57	; 0x39
 8012fd0:	f000 ffdc 	bl	8013f8c <dhcp_option>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012fd8:	89b8      	ldrh	r0, [r7, #12]
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	f001 f82b 	bl	8014040 <dhcp_option_short>
 8012fea:	4603      	mov	r3, r0
 8012fec:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012fee:	89b8      	ldrh	r0, [r7, #12]
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ff6:	2304      	movs	r3, #4
 8012ff8:	2232      	movs	r2, #50	; 0x32
 8012ffa:	f000 ffc7 	bl	8013f8c <dhcp_option>
 8012ffe:	4603      	mov	r3, r0
 8013000:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013002:	89bc      	ldrh	r4, [r7, #12]
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801300a:	69bb      	ldr	r3, [r7, #24]
 801300c:	69db      	ldr	r3, [r3, #28]
 801300e:	4618      	mov	r0, r3
 8013010:	f7f7 f9a7 	bl	800a362 <lwip_htonl>
 8013014:	4603      	mov	r3, r0
 8013016:	461a      	mov	r2, r3
 8013018:	4629      	mov	r1, r5
 801301a:	4620      	mov	r0, r4
 801301c:	f001 f842 	bl	80140a4 <dhcp_option_long>
 8013020:	4603      	mov	r3, r0
 8013022:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013024:	89b8      	ldrh	r0, [r7, #12]
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801302c:	2304      	movs	r3, #4
 801302e:	2236      	movs	r2, #54	; 0x36
 8013030:	f000 ffac 	bl	8013f8c <dhcp_option>
 8013034:	4603      	mov	r3, r0
 8013036:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013038:	89bc      	ldrh	r4, [r7, #12]
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013040:	69bb      	ldr	r3, [r7, #24]
 8013042:	699b      	ldr	r3, [r3, #24]
 8013044:	4618      	mov	r0, r3
 8013046:	f7f7 f98c 	bl	800a362 <lwip_htonl>
 801304a:	4603      	mov	r3, r0
 801304c:	461a      	mov	r2, r3
 801304e:	4629      	mov	r1, r5
 8013050:	4620      	mov	r0, r4
 8013052:	f001 f827 	bl	80140a4 <dhcp_option_long>
 8013056:	4603      	mov	r3, r0
 8013058:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801305a:	89b8      	ldrh	r0, [r7, #12]
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013062:	2303      	movs	r3, #3
 8013064:	2237      	movs	r2, #55	; 0x37
 8013066:	f000 ff91 	bl	8013f8c <dhcp_option>
 801306a:	4603      	mov	r3, r0
 801306c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801306e:	2300      	movs	r3, #0
 8013070:	77bb      	strb	r3, [r7, #30]
 8013072:	e00e      	b.n	8013092 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013074:	89b8      	ldrh	r0, [r7, #12]
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801307c:	7fbb      	ldrb	r3, [r7, #30]
 801307e:	4a30      	ldr	r2, [pc, #192]	; (8013140 <dhcp_select+0x1e4>)
 8013080:	5cd3      	ldrb	r3, [r2, r3]
 8013082:	461a      	mov	r2, r3
 8013084:	f000 ffb6 	bl	8013ff4 <dhcp_option_byte>
 8013088:	4603      	mov	r3, r0
 801308a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801308c:	7fbb      	ldrb	r3, [r7, #30]
 801308e:	3301      	adds	r3, #1
 8013090:	77bb      	strb	r3, [r7, #30]
 8013092:	7fbb      	ldrb	r3, [r7, #30]
 8013094:	2b02      	cmp	r3, #2
 8013096:	d9ed      	bls.n	8013074 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013098:	89b8      	ldrh	r0, [r7, #12]
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	33f0      	adds	r3, #240	; 0xf0
 801309e:	697a      	ldr	r2, [r7, #20]
 80130a0:	4619      	mov	r1, r3
 80130a2:	f001 fcb9 	bl	8014a18 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80130a6:	4b27      	ldr	r3, [pc, #156]	; (8013144 <dhcp_select+0x1e8>)
 80130a8:	6818      	ldr	r0, [r3, #0]
 80130aa:	4b27      	ldr	r3, [pc, #156]	; (8013148 <dhcp_select+0x1ec>)
 80130ac:	9301      	str	r3, [sp, #4]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	2343      	movs	r3, #67	; 0x43
 80130b4:	4a25      	ldr	r2, [pc, #148]	; (801314c <dhcp_select+0x1f0>)
 80130b6:	6979      	ldr	r1, [r7, #20]
 80130b8:	f7ff fbce 	bl	8012858 <udp_sendto_if_src>
 80130bc:	4603      	mov	r3, r0
 80130be:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80130c0:	6978      	ldr	r0, [r7, #20]
 80130c2:	f7f8 fced 	bl	800baa0 <pbuf_free>
 80130c6:	e001      	b.n	80130cc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80130c8:	23ff      	movs	r3, #255	; 0xff
 80130ca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80130cc:	69bb      	ldr	r3, [r7, #24]
 80130ce:	799b      	ldrb	r3, [r3, #6]
 80130d0:	2bff      	cmp	r3, #255	; 0xff
 80130d2:	d005      	beq.n	80130e0 <dhcp_select+0x184>
    dhcp->tries++;
 80130d4:	69bb      	ldr	r3, [r7, #24]
 80130d6:	799b      	ldrb	r3, [r3, #6]
 80130d8:	3301      	adds	r3, #1
 80130da:	b2da      	uxtb	r2, r3
 80130dc:	69bb      	ldr	r3, [r7, #24]
 80130de:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	799b      	ldrb	r3, [r3, #6]
 80130e4:	2b05      	cmp	r3, #5
 80130e6:	d80d      	bhi.n	8013104 <dhcp_select+0x1a8>
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	799b      	ldrb	r3, [r3, #6]
 80130ec:	461a      	mov	r2, r3
 80130ee:	2301      	movs	r3, #1
 80130f0:	4093      	lsls	r3, r2
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	461a      	mov	r2, r3
 80130f6:	0152      	lsls	r2, r2, #5
 80130f8:	1ad2      	subs	r2, r2, r3
 80130fa:	0092      	lsls	r2, r2, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	00db      	lsls	r3, r3, #3
 8013100:	b29b      	uxth	r3, r3
 8013102:	e001      	b.n	8013108 <dhcp_select+0x1ac>
 8013104:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013108:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801310a:	89fb      	ldrh	r3, [r7, #14]
 801310c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013110:	4a0f      	ldr	r2, [pc, #60]	; (8013150 <dhcp_select+0x1f4>)
 8013112:	fb82 1203 	smull	r1, r2, r2, r3
 8013116:	1152      	asrs	r2, r2, #5
 8013118:	17db      	asrs	r3, r3, #31
 801311a:	1ad3      	subs	r3, r2, r3
 801311c:	b29a      	uxth	r2, r3
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013122:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013126:	4618      	mov	r0, r3
 8013128:	3720      	adds	r7, #32
 801312a:	46bd      	mov	sp, r7
 801312c:	bdb0      	pop	{r4, r5, r7, pc}
 801312e:	bf00      	nop
 8013130:	0801b208 	.word	0x0801b208
 8013134:	0801b2b4 	.word	0x0801b2b4
 8013138:	0801b268 	.word	0x0801b268
 801313c:	0801b2d0 	.word	0x0801b2d0
 8013140:	2000001c 	.word	0x2000001c
 8013144:	200084e0 	.word	0x200084e0
 8013148:	0801bda8 	.word	0x0801bda8
 801314c:	0801bdac 	.word	0x0801bdac
 8013150:	10624dd3 	.word	0x10624dd3

08013154 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801315a:	4b27      	ldr	r3, [pc, #156]	; (80131f8 <dhcp_coarse_tmr+0xa4>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	607b      	str	r3, [r7, #4]
 8013160:	e042      	b.n	80131e8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013166:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d039      	beq.n	80131e2 <dhcp_coarse_tmr+0x8e>
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	795b      	ldrb	r3, [r3, #5]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d035      	beq.n	80131e2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	8a9b      	ldrh	r3, [r3, #20]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d012      	beq.n	80131a4 <dhcp_coarse_tmr+0x50>
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	8a5b      	ldrh	r3, [r3, #18]
 8013182:	3301      	adds	r3, #1
 8013184:	b29a      	uxth	r2, r3
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	825a      	strh	r2, [r3, #18]
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	8a5a      	ldrh	r2, [r3, #18]
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	8a9b      	ldrh	r3, [r3, #20]
 8013192:	429a      	cmp	r2, r3
 8013194:	d106      	bne.n	80131a4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f000 fe44 	bl	8013e24 <dhcp_release_and_stop>
        dhcp_start(netif);
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f000 f969 	bl	8013474 <dhcp_start>
 80131a2:	e01e      	b.n	80131e2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	8a1b      	ldrh	r3, [r3, #16]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d00b      	beq.n	80131c4 <dhcp_coarse_tmr+0x70>
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	8a1b      	ldrh	r3, [r3, #16]
 80131b0:	1e5a      	subs	r2, r3, #1
 80131b2:	b291      	uxth	r1, r2
 80131b4:	683a      	ldr	r2, [r7, #0]
 80131b6:	8211      	strh	r1, [r2, #16]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	d103      	bne.n	80131c4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f000 f8c6 	bl	801334e <dhcp_t2_timeout>
 80131c2:	e00e      	b.n	80131e2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	89db      	ldrh	r3, [r3, #14]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d00a      	beq.n	80131e2 <dhcp_coarse_tmr+0x8e>
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	89db      	ldrh	r3, [r3, #14]
 80131d0:	1e5a      	subs	r2, r3, #1
 80131d2:	b291      	uxth	r1, r2
 80131d4:	683a      	ldr	r2, [r7, #0]
 80131d6:	81d1      	strh	r1, [r2, #14]
 80131d8:	2b01      	cmp	r3, #1
 80131da:	d102      	bne.n	80131e2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f000 f888 	bl	80132f2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	607b      	str	r3, [r7, #4]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d1b9      	bne.n	8013162 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80131ee:	bf00      	nop
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	2000f31c 	.word	0x2000f31c

080131fc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b082      	sub	sp, #8
 8013200:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013202:	4b16      	ldr	r3, [pc, #88]	; (801325c <dhcp_fine_tmr+0x60>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	607b      	str	r3, [r7, #4]
 8013208:	e020      	b.n	801324c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801320e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d017      	beq.n	8013246 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	891b      	ldrh	r3, [r3, #8]
 801321a:	2b01      	cmp	r3, #1
 801321c:	d906      	bls.n	801322c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	891b      	ldrh	r3, [r3, #8]
 8013222:	3b01      	subs	r3, #1
 8013224:	b29a      	uxth	r2, r3
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	811a      	strh	r2, [r3, #8]
 801322a:	e00c      	b.n	8013246 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	891b      	ldrh	r3, [r3, #8]
 8013230:	2b01      	cmp	r3, #1
 8013232:	d108      	bne.n	8013246 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	891b      	ldrh	r3, [r3, #8]
 8013238:	3b01      	subs	r3, #1
 801323a:	b29a      	uxth	r2, r3
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f000 f80d 	bl	8013260 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	607b      	str	r3, [r7, #4]
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d1db      	bne.n	801320a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013252:	bf00      	nop
 8013254:	3708      	adds	r7, #8
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	2000f31c 	.word	0x2000f31c

08013260 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801326c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	795b      	ldrb	r3, [r3, #5]
 8013272:	2b0c      	cmp	r3, #12
 8013274:	d003      	beq.n	801327e <dhcp_timeout+0x1e>
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	795b      	ldrb	r3, [r3, #5]
 801327a:	2b06      	cmp	r3, #6
 801327c:	d103      	bne.n	8013286 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f000 fa66 	bl	8013750 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013284:	e031      	b.n	80132ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	795b      	ldrb	r3, [r3, #5]
 801328a:	2b01      	cmp	r3, #1
 801328c:	d10e      	bne.n	80132ac <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	799b      	ldrb	r3, [r3, #6]
 8013292:	2b05      	cmp	r3, #5
 8013294:	d803      	bhi.n	801329e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f7ff fe60 	bl	8012f5c <dhcp_select>
}
 801329c:	e025      	b.n	80132ea <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f000 fdc0 	bl	8013e24 <dhcp_release_and_stop>
      dhcp_start(netif);
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f000 f8e5 	bl	8013474 <dhcp_start>
}
 80132aa:	e01e      	b.n	80132ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	795b      	ldrb	r3, [r3, #5]
 80132b0:	2b08      	cmp	r3, #8
 80132b2:	d10b      	bne.n	80132cc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	799b      	ldrb	r3, [r3, #6]
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d803      	bhi.n	80132c4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f7ff fdf3 	bl	8012ea8 <dhcp_check>
}
 80132c2:	e012      	b.n	80132ea <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 fae5 	bl	8013894 <dhcp_bind>
}
 80132ca:	e00e      	b.n	80132ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	795b      	ldrb	r3, [r3, #5]
 80132d0:	2b03      	cmp	r3, #3
 80132d2:	d10a      	bne.n	80132ea <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	799b      	ldrb	r3, [r3, #6]
 80132d8:	2b01      	cmp	r3, #1
 80132da:	d803      	bhi.n	80132e4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f000 fceb 	bl	8013cb8 <dhcp_reboot>
}
 80132e2:	e002      	b.n	80132ea <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f000 fa33 	bl	8013750 <dhcp_discover>
}
 80132ea:	bf00      	nop
 80132ec:	3710      	adds	r7, #16
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80132f2:	b580      	push	{r7, lr}
 80132f4:	b084      	sub	sp, #16
 80132f6:	af00      	add	r7, sp, #0
 80132f8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	795b      	ldrb	r3, [r3, #5]
 8013304:	2b01      	cmp	r3, #1
 8013306:	d007      	beq.n	8013318 <dhcp_t1_timeout+0x26>
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	795b      	ldrb	r3, [r3, #5]
 801330c:	2b0a      	cmp	r3, #10
 801330e:	d003      	beq.n	8013318 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013314:	2b05      	cmp	r3, #5
 8013316:	d116      	bne.n	8013346 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 fb95 	bl	8013a48 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	899b      	ldrh	r3, [r3, #12]
 8013322:	461a      	mov	r2, r3
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	8a5b      	ldrh	r3, [r3, #18]
 8013328:	1ad3      	subs	r3, r2, r3
 801332a:	2b01      	cmp	r3, #1
 801332c:	dd0b      	ble.n	8013346 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	899b      	ldrh	r3, [r3, #12]
 8013332:	461a      	mov	r2, r3
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	8a5b      	ldrh	r3, [r3, #18]
 8013338:	1ad3      	subs	r3, r2, r3
 801333a:	0fda      	lsrs	r2, r3, #31
 801333c:	4413      	add	r3, r2
 801333e:	105b      	asrs	r3, r3, #1
 8013340:	b29a      	uxth	r2, r3
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013346:	bf00      	nop
 8013348:	3710      	adds	r7, #16
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}

0801334e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801334e:	b580      	push	{r7, lr}
 8013350:	b084      	sub	sp, #16
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801335a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	795b      	ldrb	r3, [r3, #5]
 8013360:	2b01      	cmp	r3, #1
 8013362:	d00b      	beq.n	801337c <dhcp_t2_timeout+0x2e>
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	795b      	ldrb	r3, [r3, #5]
 8013368:	2b0a      	cmp	r3, #10
 801336a:	d007      	beq.n	801337c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013370:	2b05      	cmp	r3, #5
 8013372:	d003      	beq.n	801337c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	795b      	ldrb	r3, [r3, #5]
 8013378:	2b04      	cmp	r3, #4
 801337a:	d116      	bne.n	80133aa <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f000 fbff 	bl	8013b80 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	8a9b      	ldrh	r3, [r3, #20]
 8013386:	461a      	mov	r2, r3
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	8a5b      	ldrh	r3, [r3, #18]
 801338c:	1ad3      	subs	r3, r2, r3
 801338e:	2b01      	cmp	r3, #1
 8013390:	dd0b      	ble.n	80133aa <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	8a9b      	ldrh	r3, [r3, #20]
 8013396:	461a      	mov	r2, r3
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	8a5b      	ldrh	r3, [r3, #18]
 801339c:	1ad3      	subs	r3, r2, r3
 801339e:	0fda      	lsrs	r2, r3, #31
 80133a0:	4413      	add	r3, r2
 80133a2:	105b      	asrs	r3, r3, #1
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80133aa:	bf00      	nop
 80133ac:	3710      	adds	r7, #16
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
	...

080133b4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b084      	sub	sp, #16
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2200      	movs	r2, #0
 80133c8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2200      	movs	r2, #0
 80133ce:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80133d0:	4b26      	ldr	r3, [pc, #152]	; (801346c <dhcp_handle_ack+0xb8>)
 80133d2:	78db      	ldrb	r3, [r3, #3]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d003      	beq.n	80133e0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80133d8:	4b25      	ldr	r3, [pc, #148]	; (8013470 <dhcp_handle_ack+0xbc>)
 80133da:	68da      	ldr	r2, [r3, #12]
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80133e0:	4b22      	ldr	r3, [pc, #136]	; (801346c <dhcp_handle_ack+0xb8>)
 80133e2:	791b      	ldrb	r3, [r3, #4]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d004      	beq.n	80133f2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80133e8:	4b21      	ldr	r3, [pc, #132]	; (8013470 <dhcp_handle_ack+0xbc>)
 80133ea:	691a      	ldr	r2, [r3, #16]
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80133f0:	e004      	b.n	80133fc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133f6:	085a      	lsrs	r2, r3, #1
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80133fc:	4b1b      	ldr	r3, [pc, #108]	; (801346c <dhcp_handle_ack+0xb8>)
 80133fe:	795b      	ldrb	r3, [r3, #5]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d004      	beq.n	801340e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013404:	4b1a      	ldr	r3, [pc, #104]	; (8013470 <dhcp_handle_ack+0xbc>)
 8013406:	695a      	ldr	r2, [r3, #20]
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	631a      	str	r2, [r3, #48]	; 0x30
 801340c:	e007      	b.n	801341e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013412:	4613      	mov	r3, r2
 8013414:	00db      	lsls	r3, r3, #3
 8013416:	1a9b      	subs	r3, r3, r2
 8013418:	08da      	lsrs	r2, r3, #3
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	691a      	ldr	r2, [r3, #16]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013426:	4b11      	ldr	r3, [pc, #68]	; (801346c <dhcp_handle_ack+0xb8>)
 8013428:	799b      	ldrb	r3, [r3, #6]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00b      	beq.n	8013446 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801342e:	4b10      	ldr	r3, [pc, #64]	; (8013470 <dhcp_handle_ack+0xbc>)
 8013430:	699b      	ldr	r3, [r3, #24]
 8013432:	4618      	mov	r0, r3
 8013434:	f7f6 ff95 	bl	800a362 <lwip_htonl>
 8013438:	4602      	mov	r2, r0
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2201      	movs	r2, #1
 8013442:	71da      	strb	r2, [r3, #7]
 8013444:	e002      	b.n	801344c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2200      	movs	r2, #0
 801344a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801344c:	4b07      	ldr	r3, [pc, #28]	; (801346c <dhcp_handle_ack+0xb8>)
 801344e:	79db      	ldrb	r3, [r3, #7]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d007      	beq.n	8013464 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013454:	4b06      	ldr	r3, [pc, #24]	; (8013470 <dhcp_handle_ack+0xbc>)
 8013456:	69db      	ldr	r3, [r3, #28]
 8013458:	4618      	mov	r0, r3
 801345a:	f7f6 ff82 	bl	800a362 <lwip_htonl>
 801345e:	4602      	mov	r2, r0
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013464:	bf00      	nop
 8013466:	3710      	adds	r7, #16
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	2000f348 	.word	0x2000f348
 8013470:	2000f350 	.word	0x2000f350

08013474 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b084      	sub	sp, #16
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d109      	bne.n	8013496 <dhcp_start+0x22>
 8013482:	4b37      	ldr	r3, [pc, #220]	; (8013560 <dhcp_start+0xec>)
 8013484:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013488:	4936      	ldr	r1, [pc, #216]	; (8013564 <dhcp_start+0xf0>)
 801348a:	4837      	ldr	r0, [pc, #220]	; (8013568 <dhcp_start+0xf4>)
 801348c:	f004 f81c 	bl	80174c8 <iprintf>
 8013490:	f06f 030f 	mvn.w	r3, #15
 8013494:	e060      	b.n	8013558 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801349c:	f003 0301 	and.w	r3, r3, #1
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d109      	bne.n	80134b8 <dhcp_start+0x44>
 80134a4:	4b2e      	ldr	r3, [pc, #184]	; (8013560 <dhcp_start+0xec>)
 80134a6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80134aa:	4930      	ldr	r1, [pc, #192]	; (801356c <dhcp_start+0xf8>)
 80134ac:	482e      	ldr	r0, [pc, #184]	; (8013568 <dhcp_start+0xf4>)
 80134ae:	f004 f80b 	bl	80174c8 <iprintf>
 80134b2:	f06f 030f 	mvn.w	r3, #15
 80134b6:	e04f      	b.n	8013558 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134bc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134c2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80134c6:	d202      	bcs.n	80134ce <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80134c8:	f04f 33ff 	mov.w	r3, #4294967295
 80134cc:	e044      	b.n	8013558 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d10d      	bne.n	80134f0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80134d4:	2034      	movs	r0, #52	; 0x34
 80134d6:	f7f7 fa63 	bl	800a9a0 <mem_malloc>
 80134da:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d102      	bne.n	80134e8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80134e2:	f04f 33ff 	mov.w	r3, #4294967295
 80134e6:	e037      	b.n	8013558 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	625a      	str	r2, [r3, #36]	; 0x24
 80134ee:	e005      	b.n	80134fc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	791b      	ldrb	r3, [r3, #4]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d001      	beq.n	80134fc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80134f8:	f7ff fc92 	bl	8012e20 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80134fc:	2234      	movs	r2, #52	; 0x34
 80134fe:	2100      	movs	r1, #0
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	f003 ffd9 	bl	80174b8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013506:	f7ff fc39 	bl	8012d7c <dhcp_inc_pcb_refcount>
 801350a:	4603      	mov	r3, r0
 801350c:	2b00      	cmp	r3, #0
 801350e:	d002      	beq.n	8013516 <dhcp_start+0xa2>
    return ERR_MEM;
 8013510:	f04f 33ff 	mov.w	r3, #4294967295
 8013514:	e020      	b.n	8013558 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2201      	movs	r2, #1
 801351a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013522:	f003 0304 	and.w	r3, r3, #4
 8013526:	2b00      	cmp	r3, #0
 8013528:	d105      	bne.n	8013536 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801352a:	2102      	movs	r1, #2
 801352c:	68f8      	ldr	r0, [r7, #12]
 801352e:	f000 fd13 	bl	8013f58 <dhcp_set_state>
    return ERR_OK;
 8013532:	2300      	movs	r3, #0
 8013534:	e010      	b.n	8013558 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f000 f90a 	bl	8013750 <dhcp_discover>
 801353c:	4603      	mov	r3, r0
 801353e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013540:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d005      	beq.n	8013554 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 fc6b 	bl	8013e24 <dhcp_release_and_stop>
    return ERR_MEM;
 801354e:	f04f 33ff 	mov.w	r3, #4294967295
 8013552:	e001      	b.n	8013558 <dhcp_start+0xe4>
  }
  return result;
 8013554:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013558:	4618      	mov	r0, r3
 801355a:	3710      	adds	r7, #16
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	0801b208 	.word	0x0801b208
 8013564:	0801b2ec 	.word	0x0801b2ec
 8013568:	0801b268 	.word	0x0801b268
 801356c:	0801b330 	.word	0x0801b330

08013570 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b084      	sub	sp, #16
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801357c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d037      	beq.n	80135f4 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	795b      	ldrb	r3, [r3, #5]
 8013588:	2b0a      	cmp	r3, #10
 801358a:	d820      	bhi.n	80135ce <dhcp_network_changed+0x5e>
 801358c:	a201      	add	r2, pc, #4	; (adr r2, 8013594 <dhcp_network_changed+0x24>)
 801358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013592:	bf00      	nop
 8013594:	080135f9 	.word	0x080135f9
 8013598:	080135cf 	.word	0x080135cf
 801359c:	080135cf 	.word	0x080135cf
 80135a0:	080135c1 	.word	0x080135c1
 80135a4:	080135c1 	.word	0x080135c1
 80135a8:	080135c1 	.word	0x080135c1
 80135ac:	080135cf 	.word	0x080135cf
 80135b0:	080135cf 	.word	0x080135cf
 80135b4:	080135cf 	.word	0x080135cf
 80135b8:	080135cf 	.word	0x080135cf
 80135bc:	080135c1 	.word	0x080135c1
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2200      	movs	r2, #0
 80135c4:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 fb76 	bl	8013cb8 <dhcp_reboot>
      break;
 80135cc:	e015      	b.n	80135fa <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	795b      	ldrb	r3, [r3, #5]
 80135d2:	2b0c      	cmp	r3, #12
 80135d4:	d906      	bls.n	80135e4 <dhcp_network_changed+0x74>
 80135d6:	4b0a      	ldr	r3, [pc, #40]	; (8013600 <dhcp_network_changed+0x90>)
 80135d8:	f240 326d 	movw	r2, #877	; 0x36d
 80135dc:	4909      	ldr	r1, [pc, #36]	; (8013604 <dhcp_network_changed+0x94>)
 80135de:	480a      	ldr	r0, [pc, #40]	; (8013608 <dhcp_network_changed+0x98>)
 80135e0:	f003 ff72 	bl	80174c8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2200      	movs	r2, #0
 80135e8:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f000 f8b0 	bl	8013750 <dhcp_discover>
      break;
 80135f0:	bf00      	nop
 80135f2:	e002      	b.n	80135fa <dhcp_network_changed+0x8a>
    return;
 80135f4:	bf00      	nop
 80135f6:	e000      	b.n	80135fa <dhcp_network_changed+0x8a>
      break;
 80135f8:	bf00      	nop
  }
}
 80135fa:	3710      	adds	r7, #16
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	0801b208 	.word	0x0801b208
 8013604:	0801b354 	.word	0x0801b354
 8013608:	0801b268 	.word	0x0801b268

0801360c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d107      	bne.n	801362c <dhcp_arp_reply+0x20>
 801361c:	4b0e      	ldr	r3, [pc, #56]	; (8013658 <dhcp_arp_reply+0x4c>)
 801361e:	f240 328b 	movw	r2, #907	; 0x38b
 8013622:	490e      	ldr	r1, [pc, #56]	; (801365c <dhcp_arp_reply+0x50>)
 8013624:	480e      	ldr	r0, [pc, #56]	; (8013660 <dhcp_arp_reply+0x54>)
 8013626:	f003 ff4f 	bl	80174c8 <iprintf>
 801362a:	e012      	b.n	8013652 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013630:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d00c      	beq.n	8013652 <dhcp_arp_reply+0x46>
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	795b      	ldrb	r3, [r3, #5]
 801363c:	2b08      	cmp	r3, #8
 801363e:	d108      	bne.n	8013652 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	681a      	ldr	r2, [r3, #0]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	69db      	ldr	r3, [r3, #28]
 8013648:	429a      	cmp	r2, r3
 801364a:	d102      	bne.n	8013652 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f000 f809 	bl	8013664 <dhcp_decline>
    }
  }
}
 8013652:	3710      	adds	r7, #16
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	0801b208 	.word	0x0801b208
 801365c:	0801b2ec 	.word	0x0801b2ec
 8013660:	0801b268 	.word	0x0801b268

08013664 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013664:	b5b0      	push	{r4, r5, r7, lr}
 8013666:	b08a      	sub	sp, #40	; 0x28
 8013668:	af02      	add	r7, sp, #8
 801366a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013670:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013672:	210c      	movs	r1, #12
 8013674:	69b8      	ldr	r0, [r7, #24]
 8013676:	f000 fc6f 	bl	8013f58 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801367a:	f107 030c 	add.w	r3, r7, #12
 801367e:	2204      	movs	r2, #4
 8013680:	69b9      	ldr	r1, [r7, #24]
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f001 f8f2 	bl	801486c <dhcp_create_msg>
 8013688:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d035      	beq.n	80136fc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013696:	89b8      	ldrh	r0, [r7, #12]
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801369e:	2304      	movs	r3, #4
 80136a0:	2232      	movs	r2, #50	; 0x32
 80136a2:	f000 fc73 	bl	8013f8c <dhcp_option>
 80136a6:	4603      	mov	r3, r0
 80136a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80136aa:	89bc      	ldrh	r4, [r7, #12]
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80136b2:	69bb      	ldr	r3, [r7, #24]
 80136b4:	69db      	ldr	r3, [r3, #28]
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7f6 fe53 	bl	800a362 <lwip_htonl>
 80136bc:	4603      	mov	r3, r0
 80136be:	461a      	mov	r2, r3
 80136c0:	4629      	mov	r1, r5
 80136c2:	4620      	mov	r0, r4
 80136c4:	f000 fcee 	bl	80140a4 <dhcp_option_long>
 80136c8:	4603      	mov	r3, r0
 80136ca:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80136cc:	89b8      	ldrh	r0, [r7, #12]
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	33f0      	adds	r3, #240	; 0xf0
 80136d2:	697a      	ldr	r2, [r7, #20]
 80136d4:	4619      	mov	r1, r3
 80136d6:	f001 f99f 	bl	8014a18 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80136da:	4b19      	ldr	r3, [pc, #100]	; (8013740 <dhcp_decline+0xdc>)
 80136dc:	6818      	ldr	r0, [r3, #0]
 80136de:	4b19      	ldr	r3, [pc, #100]	; (8013744 <dhcp_decline+0xe0>)
 80136e0:	9301      	str	r3, [sp, #4]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	9300      	str	r3, [sp, #0]
 80136e6:	2343      	movs	r3, #67	; 0x43
 80136e8:	4a17      	ldr	r2, [pc, #92]	; (8013748 <dhcp_decline+0xe4>)
 80136ea:	6979      	ldr	r1, [r7, #20]
 80136ec:	f7ff f8b4 	bl	8012858 <udp_sendto_if_src>
 80136f0:	4603      	mov	r3, r0
 80136f2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80136f4:	6978      	ldr	r0, [r7, #20]
 80136f6:	f7f8 f9d3 	bl	800baa0 <pbuf_free>
 80136fa:	e001      	b.n	8013700 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80136fc:	23ff      	movs	r3, #255	; 0xff
 80136fe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	799b      	ldrb	r3, [r3, #6]
 8013704:	2bff      	cmp	r3, #255	; 0xff
 8013706:	d005      	beq.n	8013714 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013708:	69bb      	ldr	r3, [r7, #24]
 801370a:	799b      	ldrb	r3, [r3, #6]
 801370c:	3301      	adds	r3, #1
 801370e:	b2da      	uxtb	r2, r3
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013714:	f242 7310 	movw	r3, #10000	; 0x2710
 8013718:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801371a:	89fb      	ldrh	r3, [r7, #14]
 801371c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013720:	4a0a      	ldr	r2, [pc, #40]	; (801374c <dhcp_decline+0xe8>)
 8013722:	fb82 1203 	smull	r1, r2, r2, r3
 8013726:	1152      	asrs	r2, r2, #5
 8013728:	17db      	asrs	r3, r3, #31
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	b29a      	uxth	r2, r3
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013732:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3720      	adds	r7, #32
 801373a:	46bd      	mov	sp, r7
 801373c:	bdb0      	pop	{r4, r5, r7, pc}
 801373e:	bf00      	nop
 8013740:	200084e0 	.word	0x200084e0
 8013744:	0801bda8 	.word	0x0801bda8
 8013748:	0801bdac 	.word	0x0801bdac
 801374c:	10624dd3 	.word	0x10624dd3

08013750 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b08a      	sub	sp, #40	; 0x28
 8013754:	af02      	add	r7, sp, #8
 8013756:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801375c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801375e:	2300      	movs	r3, #0
 8013760:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	2200      	movs	r2, #0
 8013766:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013768:	2106      	movs	r1, #6
 801376a:	69b8      	ldr	r0, [r7, #24]
 801376c:	f000 fbf4 	bl	8013f58 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013770:	f107 0308 	add.w	r3, r7, #8
 8013774:	2201      	movs	r2, #1
 8013776:	69b9      	ldr	r1, [r7, #24]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f001 f877 	bl	801486c <dhcp_create_msg>
 801377e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d04b      	beq.n	801381e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801378c:	8938      	ldrh	r0, [r7, #8]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013794:	2302      	movs	r3, #2
 8013796:	2239      	movs	r2, #57	; 0x39
 8013798:	f000 fbf8 	bl	8013f8c <dhcp_option>
 801379c:	4603      	mov	r3, r0
 801379e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80137a0:	8938      	ldrh	r0, [r7, #8]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137ac:	461a      	mov	r2, r3
 80137ae:	f000 fc47 	bl	8014040 <dhcp_option_short>
 80137b2:	4603      	mov	r3, r0
 80137b4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80137b6:	8938      	ldrh	r0, [r7, #8]
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137be:	2303      	movs	r3, #3
 80137c0:	2237      	movs	r2, #55	; 0x37
 80137c2:	f000 fbe3 	bl	8013f8c <dhcp_option>
 80137c6:	4603      	mov	r3, r0
 80137c8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137ca:	2300      	movs	r3, #0
 80137cc:	77fb      	strb	r3, [r7, #31]
 80137ce:	e00e      	b.n	80137ee <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80137d0:	8938      	ldrh	r0, [r7, #8]
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137d8:	7ffb      	ldrb	r3, [r7, #31]
 80137da:	4a29      	ldr	r2, [pc, #164]	; (8013880 <dhcp_discover+0x130>)
 80137dc:	5cd3      	ldrb	r3, [r2, r3]
 80137de:	461a      	mov	r2, r3
 80137e0:	f000 fc08 	bl	8013ff4 <dhcp_option_byte>
 80137e4:	4603      	mov	r3, r0
 80137e6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137e8:	7ffb      	ldrb	r3, [r7, #31]
 80137ea:	3301      	adds	r3, #1
 80137ec:	77fb      	strb	r3, [r7, #31]
 80137ee:	7ffb      	ldrb	r3, [r7, #31]
 80137f0:	2b02      	cmp	r3, #2
 80137f2:	d9ed      	bls.n	80137d0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80137f4:	8938      	ldrh	r0, [r7, #8]
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	33f0      	adds	r3, #240	; 0xf0
 80137fa:	693a      	ldr	r2, [r7, #16]
 80137fc:	4619      	mov	r1, r3
 80137fe:	f001 f90b 	bl	8014a18 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013802:	4b20      	ldr	r3, [pc, #128]	; (8013884 <dhcp_discover+0x134>)
 8013804:	6818      	ldr	r0, [r3, #0]
 8013806:	4b20      	ldr	r3, [pc, #128]	; (8013888 <dhcp_discover+0x138>)
 8013808:	9301      	str	r3, [sp, #4]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	9300      	str	r3, [sp, #0]
 801380e:	2343      	movs	r3, #67	; 0x43
 8013810:	4a1e      	ldr	r2, [pc, #120]	; (801388c <dhcp_discover+0x13c>)
 8013812:	6939      	ldr	r1, [r7, #16]
 8013814:	f7ff f820 	bl	8012858 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013818:	6938      	ldr	r0, [r7, #16]
 801381a:	f7f8 f941 	bl	800baa0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	799b      	ldrb	r3, [r3, #6]
 8013822:	2bff      	cmp	r3, #255	; 0xff
 8013824:	d005      	beq.n	8013832 <dhcp_discover+0xe2>
    dhcp->tries++;
 8013826:	69bb      	ldr	r3, [r7, #24]
 8013828:	799b      	ldrb	r3, [r3, #6]
 801382a:	3301      	adds	r3, #1
 801382c:	b2da      	uxtb	r2, r3
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	799b      	ldrb	r3, [r3, #6]
 8013836:	2b05      	cmp	r3, #5
 8013838:	d80d      	bhi.n	8013856 <dhcp_discover+0x106>
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	799b      	ldrb	r3, [r3, #6]
 801383e:	461a      	mov	r2, r3
 8013840:	2301      	movs	r3, #1
 8013842:	4093      	lsls	r3, r2
 8013844:	b29b      	uxth	r3, r3
 8013846:	461a      	mov	r2, r3
 8013848:	0152      	lsls	r2, r2, #5
 801384a:	1ad2      	subs	r2, r2, r3
 801384c:	0092      	lsls	r2, r2, #2
 801384e:	4413      	add	r3, r2
 8013850:	00db      	lsls	r3, r3, #3
 8013852:	b29b      	uxth	r3, r3
 8013854:	e001      	b.n	801385a <dhcp_discover+0x10a>
 8013856:	f64e 2360 	movw	r3, #60000	; 0xea60
 801385a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801385c:	897b      	ldrh	r3, [r7, #10]
 801385e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013862:	4a0b      	ldr	r2, [pc, #44]	; (8013890 <dhcp_discover+0x140>)
 8013864:	fb82 1203 	smull	r1, r2, r2, r3
 8013868:	1152      	asrs	r2, r2, #5
 801386a:	17db      	asrs	r3, r3, #31
 801386c:	1ad3      	subs	r3, r2, r3
 801386e:	b29a      	uxth	r2, r3
 8013870:	69bb      	ldr	r3, [r7, #24]
 8013872:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013874:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013878:	4618      	mov	r0, r3
 801387a:	3720      	adds	r7, #32
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}
 8013880:	2000001c 	.word	0x2000001c
 8013884:	200084e0 	.word	0x200084e0
 8013888:	0801bda8 	.word	0x0801bda8
 801388c:	0801bdac 	.word	0x0801bdac
 8013890:	10624dd3 	.word	0x10624dd3

08013894 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b088      	sub	sp, #32
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d107      	bne.n	80138b2 <dhcp_bind+0x1e>
 80138a2:	4b64      	ldr	r3, [pc, #400]	; (8013a34 <dhcp_bind+0x1a0>)
 80138a4:	f240 4215 	movw	r2, #1045	; 0x415
 80138a8:	4963      	ldr	r1, [pc, #396]	; (8013a38 <dhcp_bind+0x1a4>)
 80138aa:	4864      	ldr	r0, [pc, #400]	; (8013a3c <dhcp_bind+0x1a8>)
 80138ac:	f003 fe0c 	bl	80174c8 <iprintf>
 80138b0:	e0bc      	b.n	8013a2c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d107      	bne.n	80138ce <dhcp_bind+0x3a>
 80138be:	4b5d      	ldr	r3, [pc, #372]	; (8013a34 <dhcp_bind+0x1a0>)
 80138c0:	f240 4217 	movw	r2, #1047	; 0x417
 80138c4:	495e      	ldr	r1, [pc, #376]	; (8013a40 <dhcp_bind+0x1ac>)
 80138c6:	485d      	ldr	r0, [pc, #372]	; (8013a3c <dhcp_bind+0x1a8>)
 80138c8:	f003 fdfe 	bl	80174c8 <iprintf>
 80138cc:	e0ae      	b.n	8013a2c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	2200      	movs	r2, #0
 80138d2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80138d4:	69bb      	ldr	r3, [r7, #24]
 80138d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138dc:	d019      	beq.n	8013912 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80138de:	69bb      	ldr	r3, [r7, #24]
 80138e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138e2:	331e      	adds	r3, #30
 80138e4:	4a57      	ldr	r2, [pc, #348]	; (8013a44 <dhcp_bind+0x1b0>)
 80138e6:	fba2 2303 	umull	r2, r3, r2, r3
 80138ea:	095b      	lsrs	r3, r3, #5
 80138ec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80138ee:	69fb      	ldr	r3, [r7, #28]
 80138f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80138f4:	d302      	bcc.n	80138fc <dhcp_bind+0x68>
      timeout = 0xffff;
 80138f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138fa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	b29a      	uxth	r2, r3
 8013900:	69bb      	ldr	r3, [r7, #24]
 8013902:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013904:	69bb      	ldr	r3, [r7, #24]
 8013906:	8a9b      	ldrh	r3, [r3, #20]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d102      	bne.n	8013912 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801390c:	69bb      	ldr	r3, [r7, #24]
 801390e:	2201      	movs	r2, #1
 8013910:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013912:	69bb      	ldr	r3, [r7, #24]
 8013914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801391a:	d01d      	beq.n	8013958 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013920:	331e      	adds	r3, #30
 8013922:	4a48      	ldr	r2, [pc, #288]	; (8013a44 <dhcp_bind+0x1b0>)
 8013924:	fba2 2303 	umull	r2, r3, r2, r3
 8013928:	095b      	lsrs	r3, r3, #5
 801392a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013932:	d302      	bcc.n	801393a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013938:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801393a:	69fb      	ldr	r3, [r7, #28]
 801393c:	b29a      	uxth	r2, r3
 801393e:	69bb      	ldr	r3, [r7, #24]
 8013940:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	895b      	ldrh	r3, [r3, #10]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d102      	bne.n	8013950 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801394a:	69bb      	ldr	r3, [r7, #24]
 801394c:	2201      	movs	r2, #1
 801394e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	895a      	ldrh	r2, [r3, #10]
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013960:	d01d      	beq.n	801399e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013966:	331e      	adds	r3, #30
 8013968:	4a36      	ldr	r2, [pc, #216]	; (8013a44 <dhcp_bind+0x1b0>)
 801396a:	fba2 2303 	umull	r2, r3, r2, r3
 801396e:	095b      	lsrs	r3, r3, #5
 8013970:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013978:	d302      	bcc.n	8013980 <dhcp_bind+0xec>
      timeout = 0xffff;
 801397a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801397e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	b29a      	uxth	r2, r3
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	899b      	ldrh	r3, [r3, #12]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d102      	bne.n	8013996 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	2201      	movs	r2, #1
 8013994:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013996:	69bb      	ldr	r3, [r7, #24]
 8013998:	899a      	ldrh	r2, [r3, #12]
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	895a      	ldrh	r2, [r3, #10]
 80139a2:	69bb      	ldr	r3, [r7, #24]
 80139a4:	899b      	ldrh	r3, [r3, #12]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d306      	bcc.n	80139b8 <dhcp_bind+0x124>
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	899b      	ldrh	r3, [r3, #12]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d002      	beq.n	80139b8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	2200      	movs	r2, #0
 80139b6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80139b8:	69bb      	ldr	r3, [r7, #24]
 80139ba:	79db      	ldrb	r3, [r3, #7]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d003      	beq.n	80139c8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	6a1b      	ldr	r3, [r3, #32]
 80139c4:	613b      	str	r3, [r7, #16]
 80139c6:	e014      	b.n	80139f2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	331c      	adds	r3, #28
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80139d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	db02      	blt.n	80139de <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80139d8:	23ff      	movs	r3, #255	; 0xff
 80139da:	613b      	str	r3, [r7, #16]
 80139dc:	e009      	b.n	80139f2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80139de:	7dfb      	ldrb	r3, [r7, #23]
 80139e0:	2bbf      	cmp	r3, #191	; 0xbf
 80139e2:	d903      	bls.n	80139ec <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80139e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80139e8:	613b      	str	r3, [r7, #16]
 80139ea:	e002      	b.n	80139f2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80139ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139f0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d108      	bne.n	8013a10 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	69da      	ldr	r2, [r3, #28]
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	4013      	ands	r3, r2
 8013a06:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013a0e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013a10:	210a      	movs	r1, #10
 8013a12:	69b8      	ldr	r0, [r7, #24]
 8013a14:	f000 faa0 	bl	8013f58 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013a18:	69bb      	ldr	r3, [r7, #24]
 8013a1a:	f103 011c 	add.w	r1, r3, #28
 8013a1e:	f107 030c 	add.w	r3, r7, #12
 8013a22:	f107 0210 	add.w	r2, r7, #16
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f7f7 fb30 	bl	800b08c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013a2c:	3720      	adds	r7, #32
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
 8013a32:	bf00      	nop
 8013a34:	0801b208 	.word	0x0801b208
 8013a38:	0801b368 	.word	0x0801b368
 8013a3c:	0801b268 	.word	0x0801b268
 8013a40:	0801b384 	.word	0x0801b384
 8013a44:	88888889 	.word	0x88888889

08013a48 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b08a      	sub	sp, #40	; 0x28
 8013a4c:	af02      	add	r7, sp, #8
 8013a4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a54:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013a56:	2105      	movs	r1, #5
 8013a58:	69b8      	ldr	r0, [r7, #24]
 8013a5a:	f000 fa7d 	bl	8013f58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013a5e:	f107 030c 	add.w	r3, r7, #12
 8013a62:	2203      	movs	r2, #3
 8013a64:	69b9      	ldr	r1, [r7, #24]
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 ff00 	bl	801486c <dhcp_create_msg>
 8013a6c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d04e      	beq.n	8013b12 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013a7a:	89b8      	ldrh	r0, [r7, #12]
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a82:	2302      	movs	r3, #2
 8013a84:	2239      	movs	r2, #57	; 0x39
 8013a86:	f000 fa81 	bl	8013f8c <dhcp_option>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013a8e:	89b8      	ldrh	r0, [r7, #12]
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	f000 fad0 	bl	8014040 <dhcp_option_short>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013aa4:	89b8      	ldrh	r0, [r7, #12]
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013aac:	2303      	movs	r3, #3
 8013aae:	2237      	movs	r2, #55	; 0x37
 8013ab0:	f000 fa6c 	bl	8013f8c <dhcp_option>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013ab8:	2300      	movs	r3, #0
 8013aba:	77bb      	strb	r3, [r7, #30]
 8013abc:	e00e      	b.n	8013adc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013abe:	89b8      	ldrh	r0, [r7, #12]
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ac6:	7fbb      	ldrb	r3, [r7, #30]
 8013ac8:	4a2a      	ldr	r2, [pc, #168]	; (8013b74 <dhcp_renew+0x12c>)
 8013aca:	5cd3      	ldrb	r3, [r2, r3]
 8013acc:	461a      	mov	r2, r3
 8013ace:	f000 fa91 	bl	8013ff4 <dhcp_option_byte>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013ad6:	7fbb      	ldrb	r3, [r7, #30]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	77bb      	strb	r3, [r7, #30]
 8013adc:	7fbb      	ldrb	r3, [r7, #30]
 8013ade:	2b02      	cmp	r3, #2
 8013ae0:	d9ed      	bls.n	8013abe <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013ae2:	89b8      	ldrh	r0, [r7, #12]
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	33f0      	adds	r3, #240	; 0xf0
 8013ae8:	697a      	ldr	r2, [r7, #20]
 8013aea:	4619      	mov	r1, r3
 8013aec:	f000 ff94 	bl	8014a18 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013af0:	4b21      	ldr	r3, [pc, #132]	; (8013b78 <dhcp_renew+0x130>)
 8013af2:	6818      	ldr	r0, [r3, #0]
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	f103 0218 	add.w	r2, r3, #24
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	9300      	str	r3, [sp, #0]
 8013afe:	2343      	movs	r3, #67	; 0x43
 8013b00:	6979      	ldr	r1, [r7, #20]
 8013b02:	f7fe fe35 	bl	8012770 <udp_sendto_if>
 8013b06:	4603      	mov	r3, r0
 8013b08:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013b0a:	6978      	ldr	r0, [r7, #20]
 8013b0c:	f7f7 ffc8 	bl	800baa0 <pbuf_free>
 8013b10:	e001      	b.n	8013b16 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013b12:	23ff      	movs	r3, #255	; 0xff
 8013b14:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	799b      	ldrb	r3, [r3, #6]
 8013b1a:	2bff      	cmp	r3, #255	; 0xff
 8013b1c:	d005      	beq.n	8013b2a <dhcp_renew+0xe2>
    dhcp->tries++;
 8013b1e:	69bb      	ldr	r3, [r7, #24]
 8013b20:	799b      	ldrb	r3, [r3, #6]
 8013b22:	3301      	adds	r3, #1
 8013b24:	b2da      	uxtb	r2, r3
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8013b2a:	69bb      	ldr	r3, [r7, #24]
 8013b2c:	799b      	ldrb	r3, [r3, #6]
 8013b2e:	2b09      	cmp	r3, #9
 8013b30:	d80a      	bhi.n	8013b48 <dhcp_renew+0x100>
 8013b32:	69bb      	ldr	r3, [r7, #24]
 8013b34:	799b      	ldrb	r3, [r3, #6]
 8013b36:	b29b      	uxth	r3, r3
 8013b38:	461a      	mov	r2, r3
 8013b3a:	0152      	lsls	r2, r2, #5
 8013b3c:	1ad2      	subs	r2, r2, r3
 8013b3e:	0092      	lsls	r2, r2, #2
 8013b40:	4413      	add	r3, r2
 8013b42:	011b      	lsls	r3, r3, #4
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	e001      	b.n	8013b4c <dhcp_renew+0x104>
 8013b48:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013b4c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013b4e:	89fb      	ldrh	r3, [r7, #14]
 8013b50:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013b54:	4a09      	ldr	r2, [pc, #36]	; (8013b7c <dhcp_renew+0x134>)
 8013b56:	fb82 1203 	smull	r1, r2, r2, r3
 8013b5a:	1152      	asrs	r2, r2, #5
 8013b5c:	17db      	asrs	r3, r3, #31
 8013b5e:	1ad3      	subs	r3, r2, r3
 8013b60:	b29a      	uxth	r2, r3
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3720      	adds	r7, #32
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	2000001c 	.word	0x2000001c
 8013b78:	200084e0 	.word	0x200084e0
 8013b7c:	10624dd3 	.word	0x10624dd3

08013b80 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b08a      	sub	sp, #40	; 0x28
 8013b84:	af02      	add	r7, sp, #8
 8013b86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b8c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013b8e:	2104      	movs	r1, #4
 8013b90:	69b8      	ldr	r0, [r7, #24]
 8013b92:	f000 f9e1 	bl	8013f58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013b96:	f107 030c 	add.w	r3, r7, #12
 8013b9a:	2203      	movs	r2, #3
 8013b9c:	69b9      	ldr	r1, [r7, #24]
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f000 fe64 	bl	801486c <dhcp_create_msg>
 8013ba4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d04c      	beq.n	8013c46 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013bb2:	89b8      	ldrh	r0, [r7, #12]
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bba:	2302      	movs	r3, #2
 8013bbc:	2239      	movs	r2, #57	; 0x39
 8013bbe:	f000 f9e5 	bl	8013f8c <dhcp_option>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013bc6:	89b8      	ldrh	r0, [r7, #12]
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	f000 fa34 	bl	8014040 <dhcp_option_short>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013bdc:	89b8      	ldrh	r0, [r7, #12]
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013be4:	2303      	movs	r3, #3
 8013be6:	2237      	movs	r2, #55	; 0x37
 8013be8:	f000 f9d0 	bl	8013f8c <dhcp_option>
 8013bec:	4603      	mov	r3, r0
 8013bee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	77bb      	strb	r3, [r7, #30]
 8013bf4:	e00e      	b.n	8013c14 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013bf6:	89b8      	ldrh	r0, [r7, #12]
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bfe:	7fbb      	ldrb	r3, [r7, #30]
 8013c00:	4a29      	ldr	r2, [pc, #164]	; (8013ca8 <dhcp_rebind+0x128>)
 8013c02:	5cd3      	ldrb	r3, [r2, r3]
 8013c04:	461a      	mov	r2, r3
 8013c06:	f000 f9f5 	bl	8013ff4 <dhcp_option_byte>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013c0e:	7fbb      	ldrb	r3, [r7, #30]
 8013c10:	3301      	adds	r3, #1
 8013c12:	77bb      	strb	r3, [r7, #30]
 8013c14:	7fbb      	ldrb	r3, [r7, #30]
 8013c16:	2b02      	cmp	r3, #2
 8013c18:	d9ed      	bls.n	8013bf6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013c1a:	89b8      	ldrh	r0, [r7, #12]
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	33f0      	adds	r3, #240	; 0xf0
 8013c20:	697a      	ldr	r2, [r7, #20]
 8013c22:	4619      	mov	r1, r3
 8013c24:	f000 fef8 	bl	8014a18 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013c28:	4b20      	ldr	r3, [pc, #128]	; (8013cac <dhcp_rebind+0x12c>)
 8013c2a:	6818      	ldr	r0, [r3, #0]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	9300      	str	r3, [sp, #0]
 8013c30:	2343      	movs	r3, #67	; 0x43
 8013c32:	4a1f      	ldr	r2, [pc, #124]	; (8013cb0 <dhcp_rebind+0x130>)
 8013c34:	6979      	ldr	r1, [r7, #20]
 8013c36:	f7fe fd9b 	bl	8012770 <udp_sendto_if>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013c3e:	6978      	ldr	r0, [r7, #20]
 8013c40:	f7f7 ff2e 	bl	800baa0 <pbuf_free>
 8013c44:	e001      	b.n	8013c4a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013c46:	23ff      	movs	r3, #255	; 0xff
 8013c48:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	799b      	ldrb	r3, [r3, #6]
 8013c4e:	2bff      	cmp	r3, #255	; 0xff
 8013c50:	d005      	beq.n	8013c5e <dhcp_rebind+0xde>
    dhcp->tries++;
 8013c52:	69bb      	ldr	r3, [r7, #24]
 8013c54:	799b      	ldrb	r3, [r3, #6]
 8013c56:	3301      	adds	r3, #1
 8013c58:	b2da      	uxtb	r2, r3
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013c5e:	69bb      	ldr	r3, [r7, #24]
 8013c60:	799b      	ldrb	r3, [r3, #6]
 8013c62:	2b09      	cmp	r3, #9
 8013c64:	d80a      	bhi.n	8013c7c <dhcp_rebind+0xfc>
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	799b      	ldrb	r3, [r3, #6]
 8013c6a:	b29b      	uxth	r3, r3
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	0152      	lsls	r2, r2, #5
 8013c70:	1ad2      	subs	r2, r2, r3
 8013c72:	0092      	lsls	r2, r2, #2
 8013c74:	4413      	add	r3, r2
 8013c76:	00db      	lsls	r3, r3, #3
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	e001      	b.n	8013c80 <dhcp_rebind+0x100>
 8013c7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8013c80:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013c82:	89fb      	ldrh	r3, [r7, #14]
 8013c84:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013c88:	4a0a      	ldr	r2, [pc, #40]	; (8013cb4 <dhcp_rebind+0x134>)
 8013c8a:	fb82 1203 	smull	r1, r2, r2, r3
 8013c8e:	1152      	asrs	r2, r2, #5
 8013c90:	17db      	asrs	r3, r3, #31
 8013c92:	1ad3      	subs	r3, r2, r3
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013c9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3720      	adds	r7, #32
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	2000001c 	.word	0x2000001c
 8013cac:	200084e0 	.word	0x200084e0
 8013cb0:	0801bdac 	.word	0x0801bdac
 8013cb4:	10624dd3 	.word	0x10624dd3

08013cb8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013cb8:	b5b0      	push	{r4, r5, r7, lr}
 8013cba:	b08a      	sub	sp, #40	; 0x28
 8013cbc:	af02      	add	r7, sp, #8
 8013cbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013cc6:	2103      	movs	r1, #3
 8013cc8:	69b8      	ldr	r0, [r7, #24]
 8013cca:	f000 f945 	bl	8013f58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013cce:	f107 030c 	add.w	r3, r7, #12
 8013cd2:	2203      	movs	r2, #3
 8013cd4:	69b9      	ldr	r1, [r7, #24]
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f000 fdc8 	bl	801486c <dhcp_create_msg>
 8013cdc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d066      	beq.n	8013db2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013cea:	89b8      	ldrh	r0, [r7, #12]
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013cf2:	2302      	movs	r3, #2
 8013cf4:	2239      	movs	r2, #57	; 0x39
 8013cf6:	f000 f949 	bl	8013f8c <dhcp_option>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013cfe:	89b8      	ldrh	r0, [r7, #12]
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	33f0      	adds	r3, #240	; 0xf0
 8013d04:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013d08:	4619      	mov	r1, r3
 8013d0a:	f000 f999 	bl	8014040 <dhcp_option_short>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013d12:	89b8      	ldrh	r0, [r7, #12]
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d1a:	2304      	movs	r3, #4
 8013d1c:	2232      	movs	r2, #50	; 0x32
 8013d1e:	f000 f935 	bl	8013f8c <dhcp_option>
 8013d22:	4603      	mov	r3, r0
 8013d24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013d26:	89bc      	ldrh	r4, [r7, #12]
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	69db      	ldr	r3, [r3, #28]
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7f6 fb15 	bl	800a362 <lwip_htonl>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	4629      	mov	r1, r5
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f000 f9b0 	bl	80140a4 <dhcp_option_long>
 8013d44:	4603      	mov	r3, r0
 8013d46:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013d48:	89b8      	ldrh	r0, [r7, #12]
 8013d4a:	693b      	ldr	r3, [r7, #16]
 8013d4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d50:	2303      	movs	r3, #3
 8013d52:	2237      	movs	r2, #55	; 0x37
 8013d54:	f000 f91a 	bl	8013f8c <dhcp_option>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	77bb      	strb	r3, [r7, #30]
 8013d60:	e00e      	b.n	8013d80 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013d62:	89b8      	ldrh	r0, [r7, #12]
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d6a:	7fbb      	ldrb	r3, [r7, #30]
 8013d6c:	4a29      	ldr	r2, [pc, #164]	; (8013e14 <dhcp_reboot+0x15c>)
 8013d6e:	5cd3      	ldrb	r3, [r2, r3]
 8013d70:	461a      	mov	r2, r3
 8013d72:	f000 f93f 	bl	8013ff4 <dhcp_option_byte>
 8013d76:	4603      	mov	r3, r0
 8013d78:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013d7a:	7fbb      	ldrb	r3, [r7, #30]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	77bb      	strb	r3, [r7, #30]
 8013d80:	7fbb      	ldrb	r3, [r7, #30]
 8013d82:	2b02      	cmp	r3, #2
 8013d84:	d9ed      	bls.n	8013d62 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013d86:	89b8      	ldrh	r0, [r7, #12]
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	33f0      	adds	r3, #240	; 0xf0
 8013d8c:	697a      	ldr	r2, [r7, #20]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	f000 fe42 	bl	8014a18 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013d94:	4b20      	ldr	r3, [pc, #128]	; (8013e18 <dhcp_reboot+0x160>)
 8013d96:	6818      	ldr	r0, [r3, #0]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	9300      	str	r3, [sp, #0]
 8013d9c:	2343      	movs	r3, #67	; 0x43
 8013d9e:	4a1f      	ldr	r2, [pc, #124]	; (8013e1c <dhcp_reboot+0x164>)
 8013da0:	6979      	ldr	r1, [r7, #20]
 8013da2:	f7fe fce5 	bl	8012770 <udp_sendto_if>
 8013da6:	4603      	mov	r3, r0
 8013da8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013daa:	6978      	ldr	r0, [r7, #20]
 8013dac:	f7f7 fe78 	bl	800baa0 <pbuf_free>
 8013db0:	e001      	b.n	8013db6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013db2:	23ff      	movs	r3, #255	; 0xff
 8013db4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	799b      	ldrb	r3, [r3, #6]
 8013dba:	2bff      	cmp	r3, #255	; 0xff
 8013dbc:	d005      	beq.n	8013dca <dhcp_reboot+0x112>
    dhcp->tries++;
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	799b      	ldrb	r3, [r3, #6]
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	b2da      	uxtb	r2, r3
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013dca:	69bb      	ldr	r3, [r7, #24]
 8013dcc:	799b      	ldrb	r3, [r3, #6]
 8013dce:	2b09      	cmp	r3, #9
 8013dd0:	d80a      	bhi.n	8013de8 <dhcp_reboot+0x130>
 8013dd2:	69bb      	ldr	r3, [r7, #24]
 8013dd4:	799b      	ldrb	r3, [r3, #6]
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	461a      	mov	r2, r3
 8013dda:	0152      	lsls	r2, r2, #5
 8013ddc:	1ad2      	subs	r2, r2, r3
 8013dde:	0092      	lsls	r2, r2, #2
 8013de0:	4413      	add	r3, r2
 8013de2:	00db      	lsls	r3, r3, #3
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	e001      	b.n	8013dec <dhcp_reboot+0x134>
 8013de8:	f242 7310 	movw	r3, #10000	; 0x2710
 8013dec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013dee:	89fb      	ldrh	r3, [r7, #14]
 8013df0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013df4:	4a0a      	ldr	r2, [pc, #40]	; (8013e20 <dhcp_reboot+0x168>)
 8013df6:	fb82 1203 	smull	r1, r2, r2, r3
 8013dfa:	1152      	asrs	r2, r2, #5
 8013dfc:	17db      	asrs	r3, r3, #31
 8013dfe:	1ad3      	subs	r3, r2, r3
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	69bb      	ldr	r3, [r7, #24]
 8013e04:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013e06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3720      	adds	r7, #32
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bdb0      	pop	{r4, r5, r7, pc}
 8013e12:	bf00      	nop
 8013e14:	2000001c 	.word	0x2000001c
 8013e18:	200084e0 	.word	0x200084e0
 8013e1c:	0801bdac 	.word	0x0801bdac
 8013e20:	10624dd3 	.word	0x10624dd3

08013e24 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013e24:	b5b0      	push	{r4, r5, r7, lr}
 8013e26:	b08a      	sub	sp, #40	; 0x28
 8013e28:	af02      	add	r7, sp, #8
 8013e2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e30:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	f000 8084 	beq.w	8013f42 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013e3a:	69fb      	ldr	r3, [r7, #28]
 8013e3c:	795b      	ldrb	r3, [r3, #5]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	f000 8081 	beq.w	8013f46 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	699b      	ldr	r3, [r3, #24]
 8013e48:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013e4a:	69fb      	ldr	r3, [r7, #28]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013e50:	69fb      	ldr	r3, [r7, #28]
 8013e52:	2200      	movs	r2, #0
 8013e54:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013e62:	69fb      	ldr	r3, [r7, #28]
 8013e64:	2200      	movs	r2, #0
 8013e66:	631a      	str	r2, [r3, #48]	; 0x30
 8013e68:	69fb      	ldr	r3, [r7, #28]
 8013e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013e70:	69fb      	ldr	r3, [r7, #28]
 8013e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	829a      	strh	r2, [r3, #20]
 8013e7e:	69fb      	ldr	r3, [r7, #28]
 8013e80:	8a9a      	ldrh	r2, [r3, #20]
 8013e82:	69fb      	ldr	r3, [r7, #28]
 8013e84:	825a      	strh	r2, [r3, #18]
 8013e86:	69fb      	ldr	r3, [r7, #28]
 8013e88:	8a5a      	ldrh	r2, [r3, #18]
 8013e8a:	69fb      	ldr	r3, [r7, #28]
 8013e8c:	821a      	strh	r2, [r3, #16]
 8013e8e:	69fb      	ldr	r3, [r7, #28]
 8013e90:	8a1a      	ldrh	r2, [r3, #16]
 8013e92:	69fb      	ldr	r3, [r7, #28]
 8013e94:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f000 fdec 	bl	8014a74 <dhcp_supplied_address>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d03b      	beq.n	8013f1a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013ea2:	f107 030e 	add.w	r3, r7, #14
 8013ea6:	2207      	movs	r2, #7
 8013ea8:	69f9      	ldr	r1, [r7, #28]
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f000 fcde 	bl	801486c <dhcp_create_msg>
 8013eb0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d030      	beq.n	8013f1a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013eb8:	69bb      	ldr	r3, [r7, #24]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013ebe:	89f8      	ldrh	r0, [r7, #14]
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ec6:	2304      	movs	r3, #4
 8013ec8:	2236      	movs	r2, #54	; 0x36
 8013eca:	f000 f85f 	bl	8013f8c <dhcp_option>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013ed2:	89fc      	ldrh	r4, [r7, #14]
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7f6 fa40 	bl	800a362 <lwip_htonl>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	4629      	mov	r1, r5
 8013ee8:	4620      	mov	r0, r4
 8013eea:	f000 f8db 	bl	80140a4 <dhcp_option_long>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013ef2:	89f8      	ldrh	r0, [r7, #14]
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	33f0      	adds	r3, #240	; 0xf0
 8013ef8:	69ba      	ldr	r2, [r7, #24]
 8013efa:	4619      	mov	r1, r3
 8013efc:	f000 fd8c 	bl	8014a18 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013f00:	4b13      	ldr	r3, [pc, #76]	; (8013f50 <dhcp_release_and_stop+0x12c>)
 8013f02:	6818      	ldr	r0, [r3, #0]
 8013f04:	f107 0210 	add.w	r2, r7, #16
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	2343      	movs	r3, #67	; 0x43
 8013f0e:	69b9      	ldr	r1, [r7, #24]
 8013f10:	f7fe fc2e 	bl	8012770 <udp_sendto_if>
      pbuf_free(p_out);
 8013f14:	69b8      	ldr	r0, [r7, #24]
 8013f16:	f7f7 fdc3 	bl	800baa0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013f1a:	4b0e      	ldr	r3, [pc, #56]	; (8013f54 <dhcp_release_and_stop+0x130>)
 8013f1c:	4a0d      	ldr	r2, [pc, #52]	; (8013f54 <dhcp_release_and_stop+0x130>)
 8013f1e:	490d      	ldr	r1, [pc, #52]	; (8013f54 <dhcp_release_and_stop+0x130>)
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f7f7 f8b3 	bl	800b08c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013f26:	2100      	movs	r1, #0
 8013f28:	69f8      	ldr	r0, [r7, #28]
 8013f2a:	f000 f815 	bl	8013f58 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013f2e:	69fb      	ldr	r3, [r7, #28]
 8013f30:	791b      	ldrb	r3, [r3, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d008      	beq.n	8013f48 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013f36:	f7fe ff73 	bl	8012e20 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013f3a:	69fb      	ldr	r3, [r7, #28]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	711a      	strb	r2, [r3, #4]
 8013f40:	e002      	b.n	8013f48 <dhcp_release_and_stop+0x124>
    return;
 8013f42:	bf00      	nop
 8013f44:	e000      	b.n	8013f48 <dhcp_release_and_stop+0x124>
    return;
 8013f46:	bf00      	nop
  }
}
 8013f48:	3720      	adds	r7, #32
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	200084e0 	.word	0x200084e0
 8013f54:	0801bda8 	.word	0x0801bda8

08013f58 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	460b      	mov	r3, r1
 8013f62:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	795b      	ldrb	r3, [r3, #5]
 8013f68:	78fa      	ldrb	r2, [r7, #3]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d008      	beq.n	8013f80 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	78fa      	ldrb	r2, [r7, #3]
 8013f72:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2200      	movs	r2, #0
 8013f78:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	811a      	strh	r2, [r3, #8]
  }
}
 8013f80:	bf00      	nop
 8013f82:	370c      	adds	r7, #12
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr

08013f8c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6039      	str	r1, [r7, #0]
 8013f94:	4611      	mov	r1, r2
 8013f96:	461a      	mov	r2, r3
 8013f98:	4603      	mov	r3, r0
 8013f9a:	80fb      	strh	r3, [r7, #6]
 8013f9c:	460b      	mov	r3, r1
 8013f9e:	717b      	strb	r3, [r7, #5]
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013fa4:	88fa      	ldrh	r2, [r7, #6]
 8013fa6:	793b      	ldrb	r3, [r7, #4]
 8013fa8:	4413      	add	r3, r2
 8013faa:	3302      	adds	r3, #2
 8013fac:	2b44      	cmp	r3, #68	; 0x44
 8013fae:	d906      	bls.n	8013fbe <dhcp_option+0x32>
 8013fb0:	4b0d      	ldr	r3, [pc, #52]	; (8013fe8 <dhcp_option+0x5c>)
 8013fb2:	f240 529a 	movw	r2, #1434	; 0x59a
 8013fb6:	490d      	ldr	r1, [pc, #52]	; (8013fec <dhcp_option+0x60>)
 8013fb8:	480d      	ldr	r0, [pc, #52]	; (8013ff0 <dhcp_option+0x64>)
 8013fba:	f003 fa85 	bl	80174c8 <iprintf>
  options[options_out_len++] = option_type;
 8013fbe:	88fb      	ldrh	r3, [r7, #6]
 8013fc0:	1c5a      	adds	r2, r3, #1
 8013fc2:	80fa      	strh	r2, [r7, #6]
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	4413      	add	r3, r2
 8013fca:	797a      	ldrb	r2, [r7, #5]
 8013fcc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013fce:	88fb      	ldrh	r3, [r7, #6]
 8013fd0:	1c5a      	adds	r2, r3, #1
 8013fd2:	80fa      	strh	r2, [r7, #6]
 8013fd4:	461a      	mov	r2, r3
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	4413      	add	r3, r2
 8013fda:	793a      	ldrb	r2, [r7, #4]
 8013fdc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013fde:	88fb      	ldrh	r3, [r7, #6]
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	0801b208 	.word	0x0801b208
 8013fec:	0801b39c 	.word	0x0801b39c
 8013ff0:	0801b268 	.word	0x0801b268

08013ff4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	6039      	str	r1, [r7, #0]
 8013ffe:	80fb      	strh	r3, [r7, #6]
 8014000:	4613      	mov	r3, r2
 8014002:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014004:	88fb      	ldrh	r3, [r7, #6]
 8014006:	2b43      	cmp	r3, #67	; 0x43
 8014008:	d906      	bls.n	8014018 <dhcp_option_byte+0x24>
 801400a:	4b0a      	ldr	r3, [pc, #40]	; (8014034 <dhcp_option_byte+0x40>)
 801400c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014010:	4909      	ldr	r1, [pc, #36]	; (8014038 <dhcp_option_byte+0x44>)
 8014012:	480a      	ldr	r0, [pc, #40]	; (801403c <dhcp_option_byte+0x48>)
 8014014:	f003 fa58 	bl	80174c8 <iprintf>
  options[options_out_len++] = value;
 8014018:	88fb      	ldrh	r3, [r7, #6]
 801401a:	1c5a      	adds	r2, r3, #1
 801401c:	80fa      	strh	r2, [r7, #6]
 801401e:	461a      	mov	r2, r3
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	4413      	add	r3, r2
 8014024:	797a      	ldrb	r2, [r7, #5]
 8014026:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014028:	88fb      	ldrh	r3, [r7, #6]
}
 801402a:	4618      	mov	r0, r3
 801402c:	3708      	adds	r7, #8
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	0801b208 	.word	0x0801b208
 8014038:	0801b3e0 	.word	0x0801b3e0
 801403c:	0801b268 	.word	0x0801b268

08014040 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	4603      	mov	r3, r0
 8014048:	6039      	str	r1, [r7, #0]
 801404a:	80fb      	strh	r3, [r7, #6]
 801404c:	4613      	mov	r3, r2
 801404e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014050:	88fb      	ldrh	r3, [r7, #6]
 8014052:	3302      	adds	r3, #2
 8014054:	2b44      	cmp	r3, #68	; 0x44
 8014056:	d906      	bls.n	8014066 <dhcp_option_short+0x26>
 8014058:	4b0f      	ldr	r3, [pc, #60]	; (8014098 <dhcp_option_short+0x58>)
 801405a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801405e:	490f      	ldr	r1, [pc, #60]	; (801409c <dhcp_option_short+0x5c>)
 8014060:	480f      	ldr	r0, [pc, #60]	; (80140a0 <dhcp_option_short+0x60>)
 8014062:	f003 fa31 	bl	80174c8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014066:	88bb      	ldrh	r3, [r7, #4]
 8014068:	0a1b      	lsrs	r3, r3, #8
 801406a:	b29a      	uxth	r2, r3
 801406c:	88fb      	ldrh	r3, [r7, #6]
 801406e:	1c59      	adds	r1, r3, #1
 8014070:	80f9      	strh	r1, [r7, #6]
 8014072:	4619      	mov	r1, r3
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	440b      	add	r3, r1
 8014078:	b2d2      	uxtb	r2, r2
 801407a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801407c:	88fb      	ldrh	r3, [r7, #6]
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	80fa      	strh	r2, [r7, #6]
 8014082:	461a      	mov	r2, r3
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	4413      	add	r3, r2
 8014088:	88ba      	ldrh	r2, [r7, #4]
 801408a:	b2d2      	uxtb	r2, r2
 801408c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801408e:	88fb      	ldrh	r3, [r7, #6]
}
 8014090:	4618      	mov	r0, r3
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}
 8014098:	0801b208 	.word	0x0801b208
 801409c:	0801b418 	.word	0x0801b418
 80140a0:	0801b268 	.word	0x0801b268

080140a4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	4603      	mov	r3, r0
 80140ac:	60b9      	str	r1, [r7, #8]
 80140ae:	607a      	str	r2, [r7, #4]
 80140b0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80140b2:	89fb      	ldrh	r3, [r7, #14]
 80140b4:	3304      	adds	r3, #4
 80140b6:	2b44      	cmp	r3, #68	; 0x44
 80140b8:	d906      	bls.n	80140c8 <dhcp_option_long+0x24>
 80140ba:	4b19      	ldr	r3, [pc, #100]	; (8014120 <dhcp_option_long+0x7c>)
 80140bc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80140c0:	4918      	ldr	r1, [pc, #96]	; (8014124 <dhcp_option_long+0x80>)
 80140c2:	4819      	ldr	r0, [pc, #100]	; (8014128 <dhcp_option_long+0x84>)
 80140c4:	f003 fa00 	bl	80174c8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	0e1a      	lsrs	r2, r3, #24
 80140cc:	89fb      	ldrh	r3, [r7, #14]
 80140ce:	1c59      	adds	r1, r3, #1
 80140d0:	81f9      	strh	r1, [r7, #14]
 80140d2:	4619      	mov	r1, r3
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	440b      	add	r3, r1
 80140d8:	b2d2      	uxtb	r2, r2
 80140da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	0c1a      	lsrs	r2, r3, #16
 80140e0:	89fb      	ldrh	r3, [r7, #14]
 80140e2:	1c59      	adds	r1, r3, #1
 80140e4:	81f9      	strh	r1, [r7, #14]
 80140e6:	4619      	mov	r1, r3
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	440b      	add	r3, r1
 80140ec:	b2d2      	uxtb	r2, r2
 80140ee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	0a1a      	lsrs	r2, r3, #8
 80140f4:	89fb      	ldrh	r3, [r7, #14]
 80140f6:	1c59      	adds	r1, r3, #1
 80140f8:	81f9      	strh	r1, [r7, #14]
 80140fa:	4619      	mov	r1, r3
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	440b      	add	r3, r1
 8014100:	b2d2      	uxtb	r2, r2
 8014102:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014104:	89fb      	ldrh	r3, [r7, #14]
 8014106:	1c5a      	adds	r2, r3, #1
 8014108:	81fa      	strh	r2, [r7, #14]
 801410a:	461a      	mov	r2, r3
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	4413      	add	r3, r2
 8014110:	687a      	ldr	r2, [r7, #4]
 8014112:	b2d2      	uxtb	r2, r2
 8014114:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014116:	89fb      	ldrh	r3, [r7, #14]
}
 8014118:	4618      	mov	r0, r3
 801411a:	3710      	adds	r7, #16
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}
 8014120:	0801b208 	.word	0x0801b208
 8014124:	0801b454 	.word	0x0801b454
 8014128:	0801b268 	.word	0x0801b268

0801412c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b090      	sub	sp, #64	; 0x40
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014136:	2300      	movs	r3, #0
 8014138:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801413a:	2300      	movs	r3, #0
 801413c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801413e:	2208      	movs	r2, #8
 8014140:	2100      	movs	r1, #0
 8014142:	48be      	ldr	r0, [pc, #760]	; (801443c <dhcp_parse_reply+0x310>)
 8014144:	f003 f9b8 	bl	80174b8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	895b      	ldrh	r3, [r3, #10]
 801414c:	2b2b      	cmp	r3, #43	; 0x2b
 801414e:	d802      	bhi.n	8014156 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014150:	f06f 0301 	mvn.w	r3, #1
 8014154:	e2a8      	b.n	80146a8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	685b      	ldr	r3, [r3, #4]
 801415a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801415c:	23f0      	movs	r3, #240	; 0xf0
 801415e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	891b      	ldrh	r3, [r3, #8]
 8014164:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801416a:	e00c      	b.n	8014186 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801416e:	895b      	ldrh	r3, [r3, #10]
 8014170:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014172:	1ad3      	subs	r3, r2, r3
 8014174:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014178:	895b      	ldrh	r3, [r3, #10]
 801417a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801417c:	1ad3      	subs	r3, r2, r3
 801417e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014188:	2b00      	cmp	r3, #0
 801418a:	d004      	beq.n	8014196 <dhcp_parse_reply+0x6a>
 801418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801418e:	895b      	ldrh	r3, [r3, #10]
 8014190:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014192:	429a      	cmp	r2, r3
 8014194:	d2ea      	bcs.n	801416c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014198:	2b00      	cmp	r3, #0
 801419a:	d102      	bne.n	80141a2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801419c:	f06f 0301 	mvn.w	r3, #1
 80141a0:	e282      	b.n	80146a8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80141a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80141a4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80141a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80141a8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80141aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80141b0:	e23a      	b.n	8014628 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80141b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141b6:	4413      	add	r3, r2
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80141bc:	2300      	movs	r3, #0
 80141be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80141c2:	f04f 33ff 	mov.w	r3, #4294967295
 80141c6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80141c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141ca:	3302      	adds	r3, #2
 80141cc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80141ce:	8bfa      	ldrh	r2, [r7, #30]
 80141d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d202      	bcs.n	80141dc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80141d6:	f06f 0301 	mvn.w	r3, #1
 80141da:	e265      	b.n	80146a8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80141dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141de:	3301      	adds	r3, #1
 80141e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141e2:	8952      	ldrh	r2, [r2, #10]
 80141e4:	4293      	cmp	r3, r2
 80141e6:	da07      	bge.n	80141f8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80141e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80141ea:	3301      	adds	r3, #1
 80141ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141ee:	4413      	add	r3, r2
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141f6:	e00b      	b.n	8014210 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80141f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d004      	beq.n	801420a <dhcp_parse_reply+0xde>
 8014200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	781b      	ldrb	r3, [r3, #0]
 8014208:	e000      	b.n	801420c <dhcp_parse_reply+0xe0>
 801420a:	2300      	movs	r3, #0
 801420c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014218:	7dfb      	ldrb	r3, [r7, #23]
 801421a:	2b3b      	cmp	r3, #59	; 0x3b
 801421c:	f200 812d 	bhi.w	801447a <dhcp_parse_reply+0x34e>
 8014220:	a201      	add	r2, pc, #4	; (adr r2, 8014228 <dhcp_parse_reply+0xfc>)
 8014222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014226:	bf00      	nop
 8014228:	08014319 	.word	0x08014319
 801422c:	08014329 	.word	0x08014329
 8014230:	0801447b 	.word	0x0801447b
 8014234:	0801434b 	.word	0x0801434b
 8014238:	0801447b 	.word	0x0801447b
 801423c:	0801447b 	.word	0x0801447b
 8014240:	0801447b 	.word	0x0801447b
 8014244:	0801447b 	.word	0x0801447b
 8014248:	0801447b 	.word	0x0801447b
 801424c:	0801447b 	.word	0x0801447b
 8014250:	0801447b 	.word	0x0801447b
 8014254:	0801447b 	.word	0x0801447b
 8014258:	0801447b 	.word	0x0801447b
 801425c:	0801447b 	.word	0x0801447b
 8014260:	0801447b 	.word	0x0801447b
 8014264:	0801447b 	.word	0x0801447b
 8014268:	0801447b 	.word	0x0801447b
 801426c:	0801447b 	.word	0x0801447b
 8014270:	0801447b 	.word	0x0801447b
 8014274:	0801447b 	.word	0x0801447b
 8014278:	0801447b 	.word	0x0801447b
 801427c:	0801447b 	.word	0x0801447b
 8014280:	0801447b 	.word	0x0801447b
 8014284:	0801447b 	.word	0x0801447b
 8014288:	0801447b 	.word	0x0801447b
 801428c:	0801447b 	.word	0x0801447b
 8014290:	0801447b 	.word	0x0801447b
 8014294:	0801447b 	.word	0x0801447b
 8014298:	0801447b 	.word	0x0801447b
 801429c:	0801447b 	.word	0x0801447b
 80142a0:	0801447b 	.word	0x0801447b
 80142a4:	0801447b 	.word	0x0801447b
 80142a8:	0801447b 	.word	0x0801447b
 80142ac:	0801447b 	.word	0x0801447b
 80142b0:	0801447b 	.word	0x0801447b
 80142b4:	0801447b 	.word	0x0801447b
 80142b8:	0801447b 	.word	0x0801447b
 80142bc:	0801447b 	.word	0x0801447b
 80142c0:	0801447b 	.word	0x0801447b
 80142c4:	0801447b 	.word	0x0801447b
 80142c8:	0801447b 	.word	0x0801447b
 80142cc:	0801447b 	.word	0x0801447b
 80142d0:	0801447b 	.word	0x0801447b
 80142d4:	0801447b 	.word	0x0801447b
 80142d8:	0801447b 	.word	0x0801447b
 80142dc:	0801447b 	.word	0x0801447b
 80142e0:	0801447b 	.word	0x0801447b
 80142e4:	0801447b 	.word	0x0801447b
 80142e8:	0801447b 	.word	0x0801447b
 80142ec:	0801447b 	.word	0x0801447b
 80142f0:	0801447b 	.word	0x0801447b
 80142f4:	08014377 	.word	0x08014377
 80142f8:	08014399 	.word	0x08014399
 80142fc:	080143d5 	.word	0x080143d5
 8014300:	080143f7 	.word	0x080143f7
 8014304:	0801447b 	.word	0x0801447b
 8014308:	0801447b 	.word	0x0801447b
 801430c:	0801447b 	.word	0x0801447b
 8014310:	08014419 	.word	0x08014419
 8014314:	08014459 	.word	0x08014459
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014318:	2300      	movs	r3, #0
 801431a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801431e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014326:	e0ac      	b.n	8014482 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801432c:	2b04      	cmp	r3, #4
 801432e:	d009      	beq.n	8014344 <dhcp_parse_reply+0x218>
 8014330:	4b43      	ldr	r3, [pc, #268]	; (8014440 <dhcp_parse_reply+0x314>)
 8014332:	f240 622e 	movw	r2, #1582	; 0x62e
 8014336:	4943      	ldr	r1, [pc, #268]	; (8014444 <dhcp_parse_reply+0x318>)
 8014338:	4843      	ldr	r0, [pc, #268]	; (8014448 <dhcp_parse_reply+0x31c>)
 801433a:	f003 f8c5 	bl	80174c8 <iprintf>
 801433e:	f06f 0305 	mvn.w	r3, #5
 8014342:	e1b1      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014344:	2306      	movs	r3, #6
 8014346:	623b      	str	r3, [r7, #32]
        break;
 8014348:	e09b      	b.n	8014482 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801434a:	2304      	movs	r3, #4
 801434c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014350:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014358:	429a      	cmp	r2, r3
 801435a:	d209      	bcs.n	8014370 <dhcp_parse_reply+0x244>
 801435c:	4b38      	ldr	r3, [pc, #224]	; (8014440 <dhcp_parse_reply+0x314>)
 801435e:	f240 6233 	movw	r2, #1587	; 0x633
 8014362:	493a      	ldr	r1, [pc, #232]	; (801444c <dhcp_parse_reply+0x320>)
 8014364:	4838      	ldr	r0, [pc, #224]	; (8014448 <dhcp_parse_reply+0x31c>)
 8014366:	f003 f8af 	bl	80174c8 <iprintf>
 801436a:	f06f 0305 	mvn.w	r3, #5
 801436e:	e19b      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014370:	2307      	movs	r3, #7
 8014372:	623b      	str	r3, [r7, #32]
        break;
 8014374:	e085      	b.n	8014482 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801437a:	2b04      	cmp	r3, #4
 801437c:	d009      	beq.n	8014392 <dhcp_parse_reply+0x266>
 801437e:	4b30      	ldr	r3, [pc, #192]	; (8014440 <dhcp_parse_reply+0x314>)
 8014380:	f240 6241 	movw	r2, #1601	; 0x641
 8014384:	492f      	ldr	r1, [pc, #188]	; (8014444 <dhcp_parse_reply+0x318>)
 8014386:	4830      	ldr	r0, [pc, #192]	; (8014448 <dhcp_parse_reply+0x31c>)
 8014388:	f003 f89e 	bl	80174c8 <iprintf>
 801438c:	f06f 0305 	mvn.w	r3, #5
 8014390:	e18a      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014392:	2303      	movs	r3, #3
 8014394:	623b      	str	r3, [r7, #32]
        break;
 8014396:	e074      	b.n	8014482 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801439c:	2b01      	cmp	r3, #1
 801439e:	d009      	beq.n	80143b4 <dhcp_parse_reply+0x288>
 80143a0:	4b27      	ldr	r3, [pc, #156]	; (8014440 <dhcp_parse_reply+0x314>)
 80143a2:	f240 624f 	movw	r2, #1615	; 0x64f
 80143a6:	492a      	ldr	r1, [pc, #168]	; (8014450 <dhcp_parse_reply+0x324>)
 80143a8:	4827      	ldr	r0, [pc, #156]	; (8014448 <dhcp_parse_reply+0x31c>)
 80143aa:	f003 f88d 	bl	80174c8 <iprintf>
 80143ae:	f06f 0305 	mvn.w	r3, #5
 80143b2:	e179      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80143b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80143b6:	2bf0      	cmp	r3, #240	; 0xf0
 80143b8:	d009      	beq.n	80143ce <dhcp_parse_reply+0x2a2>
 80143ba:	4b21      	ldr	r3, [pc, #132]	; (8014440 <dhcp_parse_reply+0x314>)
 80143bc:	f240 6251 	movw	r2, #1617	; 0x651
 80143c0:	4924      	ldr	r1, [pc, #144]	; (8014454 <dhcp_parse_reply+0x328>)
 80143c2:	4821      	ldr	r0, [pc, #132]	; (8014448 <dhcp_parse_reply+0x31c>)
 80143c4:	f003 f880 	bl	80174c8 <iprintf>
 80143c8:	f06f 0305 	mvn.w	r3, #5
 80143cc:	e16c      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80143ce:	2300      	movs	r3, #0
 80143d0:	623b      	str	r3, [r7, #32]
        break;
 80143d2:	e056      	b.n	8014482 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80143d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143d8:	2b01      	cmp	r3, #1
 80143da:	d009      	beq.n	80143f0 <dhcp_parse_reply+0x2c4>
 80143dc:	4b18      	ldr	r3, [pc, #96]	; (8014440 <dhcp_parse_reply+0x314>)
 80143de:	f240 6255 	movw	r2, #1621	; 0x655
 80143e2:	491b      	ldr	r1, [pc, #108]	; (8014450 <dhcp_parse_reply+0x324>)
 80143e4:	4818      	ldr	r0, [pc, #96]	; (8014448 <dhcp_parse_reply+0x31c>)
 80143e6:	f003 f86f 	bl	80174c8 <iprintf>
 80143ea:	f06f 0305 	mvn.w	r3, #5
 80143ee:	e15b      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80143f0:	2301      	movs	r3, #1
 80143f2:	623b      	str	r3, [r7, #32]
        break;
 80143f4:	e045      	b.n	8014482 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80143f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143fa:	2b04      	cmp	r3, #4
 80143fc:	d009      	beq.n	8014412 <dhcp_parse_reply+0x2e6>
 80143fe:	4b10      	ldr	r3, [pc, #64]	; (8014440 <dhcp_parse_reply+0x314>)
 8014400:	f240 6259 	movw	r2, #1625	; 0x659
 8014404:	490f      	ldr	r1, [pc, #60]	; (8014444 <dhcp_parse_reply+0x318>)
 8014406:	4810      	ldr	r0, [pc, #64]	; (8014448 <dhcp_parse_reply+0x31c>)
 8014408:	f003 f85e 	bl	80174c8 <iprintf>
 801440c:	f06f 0305 	mvn.w	r3, #5
 8014410:	e14a      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014412:	2302      	movs	r3, #2
 8014414:	623b      	str	r3, [r7, #32]
        break;
 8014416:	e034      	b.n	8014482 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801441c:	2b04      	cmp	r3, #4
 801441e:	d009      	beq.n	8014434 <dhcp_parse_reply+0x308>
 8014420:	4b07      	ldr	r3, [pc, #28]	; (8014440 <dhcp_parse_reply+0x314>)
 8014422:	f240 625d 	movw	r2, #1629	; 0x65d
 8014426:	4907      	ldr	r1, [pc, #28]	; (8014444 <dhcp_parse_reply+0x318>)
 8014428:	4807      	ldr	r0, [pc, #28]	; (8014448 <dhcp_parse_reply+0x31c>)
 801442a:	f003 f84d 	bl	80174c8 <iprintf>
 801442e:	f06f 0305 	mvn.w	r3, #5
 8014432:	e139      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014434:	2304      	movs	r3, #4
 8014436:	623b      	str	r3, [r7, #32]
        break;
 8014438:	e023      	b.n	8014482 <dhcp_parse_reply+0x356>
 801443a:	bf00      	nop
 801443c:	2000f348 	.word	0x2000f348
 8014440:	0801b208 	.word	0x0801b208
 8014444:	0801b490 	.word	0x0801b490
 8014448:	0801b268 	.word	0x0801b268
 801444c:	0801b49c 	.word	0x0801b49c
 8014450:	0801b4b0 	.word	0x0801b4b0
 8014454:	0801b4bc 	.word	0x0801b4bc
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801445c:	2b04      	cmp	r3, #4
 801445e:	d009      	beq.n	8014474 <dhcp_parse_reply+0x348>
 8014460:	4b93      	ldr	r3, [pc, #588]	; (80146b0 <dhcp_parse_reply+0x584>)
 8014462:	f240 6261 	movw	r2, #1633	; 0x661
 8014466:	4993      	ldr	r1, [pc, #588]	; (80146b4 <dhcp_parse_reply+0x588>)
 8014468:	4893      	ldr	r0, [pc, #588]	; (80146b8 <dhcp_parse_reply+0x58c>)
 801446a:	f003 f82d 	bl	80174c8 <iprintf>
 801446e:	f06f 0305 	mvn.w	r3, #5
 8014472:	e119      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014474:	2305      	movs	r3, #5
 8014476:	623b      	str	r3, [r7, #32]
        break;
 8014478:	e003      	b.n	8014482 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801447a:	2300      	movs	r3, #0
 801447c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014480:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014482:	7dfb      	ldrb	r3, [r7, #23]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d103      	bne.n	8014490 <dhcp_parse_reply+0x364>
      offset++;
 8014488:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801448a:	3301      	adds	r3, #1
 801448c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801448e:	e0a1      	b.n	80145d4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014490:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014496:	4413      	add	r3, r2
 8014498:	3302      	adds	r3, #2
 801449a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801449e:	db02      	blt.n	80144a6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80144a0:	f06f 0301 	mvn.w	r3, #1
 80144a4:	e100      	b.n	80146a8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80144a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144aa:	b29a      	uxth	r2, r3
 80144ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80144ae:	4413      	add	r3, r2
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	3302      	adds	r3, #2
 80144b4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80144b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f000 808a 	beq.w	80145d4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80144c0:	2300      	movs	r3, #0
 80144c2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80144c4:	6a3b      	ldr	r3, [r7, #32]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	db02      	blt.n	80144d0 <dhcp_parse_reply+0x3a4>
 80144ca:	6a3b      	ldr	r3, [r7, #32]
 80144cc:	2b07      	cmp	r3, #7
 80144ce:	dd06      	ble.n	80144de <dhcp_parse_reply+0x3b2>
 80144d0:	4b77      	ldr	r3, [pc, #476]	; (80146b0 <dhcp_parse_reply+0x584>)
 80144d2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80144d6:	4979      	ldr	r1, [pc, #484]	; (80146bc <dhcp_parse_reply+0x590>)
 80144d8:	4877      	ldr	r0, [pc, #476]	; (80146b8 <dhcp_parse_reply+0x58c>)
 80144da:	f002 fff5 	bl	80174c8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80144de:	4a78      	ldr	r2, [pc, #480]	; (80146c0 <dhcp_parse_reply+0x594>)
 80144e0:	6a3b      	ldr	r3, [r7, #32]
 80144e2:	4413      	add	r3, r2
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d174      	bne.n	80145d4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80144ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80144ee:	2b04      	cmp	r3, #4
 80144f0:	bf28      	it	cs
 80144f2:	2304      	movcs	r3, #4
 80144f4:	b2db      	uxtb	r3, r3
 80144f6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80144f8:	8bfb      	ldrh	r3, [r7, #30]
 80144fa:	8aba      	ldrh	r2, [r7, #20]
 80144fc:	f107 0108 	add.w	r1, r7, #8
 8014500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014502:	f7f7 fcd3 	bl	800beac <pbuf_copy_partial>
 8014506:	4603      	mov	r3, r0
 8014508:	461a      	mov	r2, r3
 801450a:	8abb      	ldrh	r3, [r7, #20]
 801450c:	4293      	cmp	r3, r2
 801450e:	d002      	beq.n	8014516 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8014510:	f06f 0301 	mvn.w	r3, #1
 8014514:	e0c8      	b.n	80146a8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8014516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801451a:	2b04      	cmp	r3, #4
 801451c:	d933      	bls.n	8014586 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801451e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014522:	f003 0303 	and.w	r3, r3, #3
 8014526:	b2db      	uxtb	r3, r3
 8014528:	2b00      	cmp	r3, #0
 801452a:	d009      	beq.n	8014540 <dhcp_parse_reply+0x414>
 801452c:	4b60      	ldr	r3, [pc, #384]	; (80146b0 <dhcp_parse_reply+0x584>)
 801452e:	f240 6281 	movw	r2, #1665	; 0x681
 8014532:	4964      	ldr	r1, [pc, #400]	; (80146c4 <dhcp_parse_reply+0x598>)
 8014534:	4860      	ldr	r0, [pc, #384]	; (80146b8 <dhcp_parse_reply+0x58c>)
 8014536:	f002 ffc7 	bl	80174c8 <iprintf>
 801453a:	f06f 0305 	mvn.w	r3, #5
 801453e:	e0b3      	b.n	80146a8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014540:	4a5f      	ldr	r2, [pc, #380]	; (80146c0 <dhcp_parse_reply+0x594>)
 8014542:	6a3b      	ldr	r3, [r7, #32]
 8014544:	4413      	add	r3, r2
 8014546:	2201      	movs	r2, #1
 8014548:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	4618      	mov	r0, r3
 801454e:	f7f5 ff08 	bl	800a362 <lwip_htonl>
 8014552:	4601      	mov	r1, r0
 8014554:	4a5c      	ldr	r2, [pc, #368]	; (80146c8 <dhcp_parse_reply+0x59c>)
 8014556:	6a3b      	ldr	r3, [r7, #32]
 8014558:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801455c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014560:	3b04      	subs	r3, #4
 8014562:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014566:	8bfb      	ldrh	r3, [r7, #30]
 8014568:	3304      	adds	r3, #4
 801456a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801456c:	8a7a      	ldrh	r2, [r7, #18]
 801456e:	8bfb      	ldrh	r3, [r7, #30]
 8014570:	429a      	cmp	r2, r3
 8014572:	d202      	bcs.n	801457a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014574:	f06f 0301 	mvn.w	r3, #1
 8014578:	e096      	b.n	80146a8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801457a:	8a7b      	ldrh	r3, [r7, #18]
 801457c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801457e:	6a3b      	ldr	r3, [r7, #32]
 8014580:	3301      	adds	r3, #1
 8014582:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014584:	e79e      	b.n	80144c4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014586:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801458a:	2b04      	cmp	r3, #4
 801458c:	d106      	bne.n	801459c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	4618      	mov	r0, r3
 8014592:	f7f5 fee6 	bl	800a362 <lwip_htonl>
 8014596:	4603      	mov	r3, r0
 8014598:	60bb      	str	r3, [r7, #8]
 801459a:	e011      	b.n	80145c0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801459c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80145a0:	2b01      	cmp	r3, #1
 80145a2:	d009      	beq.n	80145b8 <dhcp_parse_reply+0x48c>
 80145a4:	4b42      	ldr	r3, [pc, #264]	; (80146b0 <dhcp_parse_reply+0x584>)
 80145a6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80145aa:	4948      	ldr	r1, [pc, #288]	; (80146cc <dhcp_parse_reply+0x5a0>)
 80145ac:	4842      	ldr	r0, [pc, #264]	; (80146b8 <dhcp_parse_reply+0x58c>)
 80145ae:	f002 ff8b 	bl	80174c8 <iprintf>
 80145b2:	f06f 0305 	mvn.w	r3, #5
 80145b6:	e077      	b.n	80146a8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80145b8:	f107 0308 	add.w	r3, r7, #8
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80145c0:	4a3f      	ldr	r2, [pc, #252]	; (80146c0 <dhcp_parse_reply+0x594>)
 80145c2:	6a3b      	ldr	r3, [r7, #32]
 80145c4:	4413      	add	r3, r2
 80145c6:	2201      	movs	r2, #1
 80145c8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80145ca:	68ba      	ldr	r2, [r7, #8]
 80145cc:	493e      	ldr	r1, [pc, #248]	; (80146c8 <dhcp_parse_reply+0x59c>)
 80145ce:	6a3b      	ldr	r3, [r7, #32]
 80145d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80145d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d6:	895b      	ldrh	r3, [r3, #10]
 80145d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80145da:	429a      	cmp	r2, r3
 80145dc:	d324      	bcc.n	8014628 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80145de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e0:	895b      	ldrh	r3, [r3, #10]
 80145e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80145e4:	1ad3      	subs	r3, r2, r3
 80145e6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80145e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ea:	895b      	ldrh	r3, [r3, #10]
 80145ec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80145ee:	1ad3      	subs	r3, r2, r3
 80145f0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80145f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80145f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d213      	bcs.n	8014622 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80145fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014602:	2b00      	cmp	r3, #0
 8014604:	d109      	bne.n	801461a <dhcp_parse_reply+0x4ee>
 8014606:	4b2a      	ldr	r3, [pc, #168]	; (80146b0 <dhcp_parse_reply+0x584>)
 8014608:	f240 629d 	movw	r2, #1693	; 0x69d
 801460c:	4930      	ldr	r1, [pc, #192]	; (80146d0 <dhcp_parse_reply+0x5a4>)
 801460e:	482a      	ldr	r0, [pc, #168]	; (80146b8 <dhcp_parse_reply+0x58c>)
 8014610:	f002 ff5a 	bl	80174c8 <iprintf>
 8014614:	f06f 0305 	mvn.w	r3, #5
 8014618:	e046      	b.n	80146a8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014620:	e002      	b.n	8014628 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014622:	f06f 0301 	mvn.w	r3, #1
 8014626:	e03f      	b.n	80146a8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462a:	2b00      	cmp	r3, #0
 801462c:	d00a      	beq.n	8014644 <dhcp_parse_reply+0x518>
 801462e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014630:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014632:	429a      	cmp	r2, r3
 8014634:	d206      	bcs.n	8014644 <dhcp_parse_reply+0x518>
 8014636:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801463a:	4413      	add	r3, r2
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	2bff      	cmp	r3, #255	; 0xff
 8014640:	f47f adb7 	bne.w	80141b2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014644:	4b1e      	ldr	r3, [pc, #120]	; (80146c0 <dhcp_parse_reply+0x594>)
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d018      	beq.n	801467e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801464c:	4b1e      	ldr	r3, [pc, #120]	; (80146c8 <dhcp_parse_reply+0x59c>)
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014652:	4b1b      	ldr	r3, [pc, #108]	; (80146c0 <dhcp_parse_reply+0x594>)
 8014654:	2200      	movs	r2, #0
 8014656:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2b01      	cmp	r3, #1
 801465c:	d102      	bne.n	8014664 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801465e:	2301      	movs	r3, #1
 8014660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014662:	e00c      	b.n	801467e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	2b02      	cmp	r3, #2
 8014668:	d102      	bne.n	8014670 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801466a:	2301      	movs	r3, #1
 801466c:	62bb      	str	r3, [r7, #40]	; 0x28
 801466e:	e006      	b.n	801467e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2b03      	cmp	r3, #3
 8014674:	d103      	bne.n	801467e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014676:	2301      	movs	r3, #1
 8014678:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801467a:	2301      	movs	r3, #1
 801467c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014680:	2b00      	cmp	r3, #0
 8014682:	d006      	beq.n	8014692 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014684:	2300      	movs	r3, #0
 8014686:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014688:	236c      	movs	r3, #108	; 0x6c
 801468a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801468c:	23ec      	movs	r3, #236	; 0xec
 801468e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014690:	e569      	b.n	8014166 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014694:	2b00      	cmp	r3, #0
 8014696:	d006      	beq.n	80146a6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014698:	2300      	movs	r3, #0
 801469a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801469c:	232c      	movs	r3, #44	; 0x2c
 801469e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80146a0:	236c      	movs	r3, #108	; 0x6c
 80146a2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80146a4:	e55f      	b.n	8014166 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80146a6:	2300      	movs	r3, #0
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3740      	adds	r7, #64	; 0x40
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	0801b208 	.word	0x0801b208
 80146b4:	0801b490 	.word	0x0801b490
 80146b8:	0801b268 	.word	0x0801b268
 80146bc:	0801b4d4 	.word	0x0801b4d4
 80146c0:	2000f348 	.word	0x2000f348
 80146c4:	0801b4e8 	.word	0x0801b4e8
 80146c8:	2000f350 	.word	0x2000f350
 80146cc:	0801b500 	.word	0x0801b500
 80146d0:	0801b514 	.word	0x0801b514

080146d4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08a      	sub	sp, #40	; 0x28
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
 80146e0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80146e2:	4b5f      	ldr	r3, [pc, #380]	; (8014860 <dhcp_recv+0x18c>)
 80146e4:	685b      	ldr	r3, [r3, #4]
 80146e6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146e8:	6a3b      	ldr	r3, [r7, #32]
 80146ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ec:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	685b      	ldr	r3, [r3, #4]
 80146f2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80146f4:	69fb      	ldr	r3, [r7, #28]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	f000 809d 	beq.w	8014836 <dhcp_recv+0x162>
 80146fc:	69fb      	ldr	r3, [r7, #28]
 80146fe:	791b      	ldrb	r3, [r3, #4]
 8014700:	2b00      	cmp	r3, #0
 8014702:	f000 8098 	beq.w	8014836 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	895b      	ldrh	r3, [r3, #10]
 801470a:	2b2b      	cmp	r3, #43	; 0x2b
 801470c:	f240 8095 	bls.w	801483a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	2b02      	cmp	r3, #2
 8014716:	f040 8092 	bne.w	801483e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801471a:	2300      	movs	r3, #0
 801471c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014720:	e012      	b.n	8014748 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014726:	6a3a      	ldr	r2, [r7, #32]
 8014728:	4413      	add	r3, r2
 801472a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801472e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014732:	69b9      	ldr	r1, [r7, #24]
 8014734:	440b      	add	r3, r1
 8014736:	7f1b      	ldrb	r3, [r3, #28]
 8014738:	429a      	cmp	r2, r3
 801473a:	f040 8082 	bne.w	8014842 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801473e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014742:	3301      	adds	r3, #1
 8014744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014748:	6a3b      	ldr	r3, [r7, #32]
 801474a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801474e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014752:	429a      	cmp	r2, r3
 8014754:	d203      	bcs.n	801475e <dhcp_recv+0x8a>
 8014756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801475a:	2b05      	cmp	r3, #5
 801475c:	d9e1      	bls.n	8014722 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801475e:	69bb      	ldr	r3, [r7, #24]
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	4618      	mov	r0, r3
 8014764:	f7f5 fdfd 	bl	800a362 <lwip_htonl>
 8014768:	4602      	mov	r2, r0
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	429a      	cmp	r2, r3
 8014770:	d169      	bne.n	8014846 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014772:	69f9      	ldr	r1, [r7, #28]
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f7ff fcd9 	bl	801412c <dhcp_parse_reply>
 801477a:	4603      	mov	r3, r0
 801477c:	2b00      	cmp	r3, #0
 801477e:	d164      	bne.n	801484a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014780:	4b38      	ldr	r3, [pc, #224]	; (8014864 <dhcp_recv+0x190>)
 8014782:	785b      	ldrb	r3, [r3, #1]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d062      	beq.n	801484e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	685b      	ldr	r3, [r3, #4]
 801478c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801478e:	4b36      	ldr	r3, [pc, #216]	; (8014868 <dhcp_recv+0x194>)
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014794:	7cfb      	ldrb	r3, [r7, #19]
 8014796:	2b05      	cmp	r3, #5
 8014798:	d12a      	bne.n	80147f0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801479a:	69fb      	ldr	r3, [r7, #28]
 801479c:	795b      	ldrb	r3, [r3, #5]
 801479e:	2b01      	cmp	r3, #1
 80147a0:	d112      	bne.n	80147c8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80147a2:	6979      	ldr	r1, [r7, #20]
 80147a4:	6a38      	ldr	r0, [r7, #32]
 80147a6:	f7fe fe05 	bl	80133b4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80147aa:	6a3b      	ldr	r3, [r7, #32]
 80147ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80147b0:	f003 0308 	and.w	r3, r3, #8
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d003      	beq.n	80147c0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80147b8:	6a38      	ldr	r0, [r7, #32]
 80147ba:	f7fe fb75 	bl	8012ea8 <dhcp_check>
 80147be:	e047      	b.n	8014850 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80147c0:	6a38      	ldr	r0, [r7, #32]
 80147c2:	f7ff f867 	bl	8013894 <dhcp_bind>
 80147c6:	e043      	b.n	8014850 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80147c8:	69fb      	ldr	r3, [r7, #28]
 80147ca:	795b      	ldrb	r3, [r3, #5]
 80147cc:	2b03      	cmp	r3, #3
 80147ce:	d007      	beq.n	80147e0 <dhcp_recv+0x10c>
 80147d0:	69fb      	ldr	r3, [r7, #28]
 80147d2:	795b      	ldrb	r3, [r3, #5]
 80147d4:	2b04      	cmp	r3, #4
 80147d6:	d003      	beq.n	80147e0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80147d8:	69fb      	ldr	r3, [r7, #28]
 80147da:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80147dc:	2b05      	cmp	r3, #5
 80147de:	d137      	bne.n	8014850 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 80147e0:	6979      	ldr	r1, [r7, #20]
 80147e2:	6a38      	ldr	r0, [r7, #32]
 80147e4:	f7fe fde6 	bl	80133b4 <dhcp_handle_ack>
      dhcp_bind(netif);
 80147e8:	6a38      	ldr	r0, [r7, #32]
 80147ea:	f7ff f853 	bl	8013894 <dhcp_bind>
 80147ee:	e02f      	b.n	8014850 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80147f0:	7cfb      	ldrb	r3, [r7, #19]
 80147f2:	2b06      	cmp	r3, #6
 80147f4:	d113      	bne.n	801481e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80147fa:	2b03      	cmp	r3, #3
 80147fc:	d00b      	beq.n	8014816 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80147fe:	69fb      	ldr	r3, [r7, #28]
 8014800:	795b      	ldrb	r3, [r3, #5]
 8014802:	2b01      	cmp	r3, #1
 8014804:	d007      	beq.n	8014816 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801480a:	2b04      	cmp	r3, #4
 801480c:	d003      	beq.n	8014816 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	795b      	ldrb	r3, [r3, #5]
 8014812:	2b05      	cmp	r3, #5
 8014814:	d103      	bne.n	801481e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014816:	6a38      	ldr	r0, [r7, #32]
 8014818:	f7fe fb2c 	bl	8012e74 <dhcp_handle_nak>
 801481c:	e018      	b.n	8014850 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801481e:	7cfb      	ldrb	r3, [r7, #19]
 8014820:	2b02      	cmp	r3, #2
 8014822:	d108      	bne.n	8014836 <dhcp_recv+0x162>
 8014824:	69fb      	ldr	r3, [r7, #28]
 8014826:	795b      	ldrb	r3, [r3, #5]
 8014828:	2b06      	cmp	r3, #6
 801482a:	d104      	bne.n	8014836 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801482c:	6979      	ldr	r1, [r7, #20]
 801482e:	6a38      	ldr	r0, [r7, #32]
 8014830:	f7fe fb6e 	bl	8012f10 <dhcp_handle_offer>
 8014834:	e00c      	b.n	8014850 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8014836:	bf00      	nop
 8014838:	e00a      	b.n	8014850 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801483a:	bf00      	nop
 801483c:	e008      	b.n	8014850 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801483e:	bf00      	nop
 8014840:	e006      	b.n	8014850 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8014842:	bf00      	nop
 8014844:	e004      	b.n	8014850 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014846:	bf00      	nop
 8014848:	e002      	b.n	8014850 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801484a:	bf00      	nop
 801484c:	e000      	b.n	8014850 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801484e:	bf00      	nop
  pbuf_free(p);
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f7f7 f925 	bl	800baa0 <pbuf_free>
}
 8014856:	bf00      	nop
 8014858:	3728      	adds	r7, #40	; 0x28
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
 801485e:	bf00      	nop
 8014860:	2000bbf8 	.word	0x2000bbf8
 8014864:	2000f348 	.word	0x2000f348
 8014868:	2000f350 	.word	0x2000f350

0801486c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b088      	sub	sp, #32
 8014870:	af00      	add	r7, sp, #0
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	603b      	str	r3, [r7, #0]
 8014878:	4613      	mov	r3, r2
 801487a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d108      	bne.n	8014894 <dhcp_create_msg+0x28>
 8014882:	4b5f      	ldr	r3, [pc, #380]	; (8014a00 <dhcp_create_msg+0x194>)
 8014884:	f240 7269 	movw	r2, #1897	; 0x769
 8014888:	495e      	ldr	r1, [pc, #376]	; (8014a04 <dhcp_create_msg+0x198>)
 801488a:	485f      	ldr	r0, [pc, #380]	; (8014a08 <dhcp_create_msg+0x19c>)
 801488c:	f002 fe1c 	bl	80174c8 <iprintf>
 8014890:	2300      	movs	r3, #0
 8014892:	e0b1      	b.n	80149f8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d108      	bne.n	80148ac <dhcp_create_msg+0x40>
 801489a:	4b59      	ldr	r3, [pc, #356]	; (8014a00 <dhcp_create_msg+0x194>)
 801489c:	f240 726a 	movw	r2, #1898	; 0x76a
 80148a0:	495a      	ldr	r1, [pc, #360]	; (8014a0c <dhcp_create_msg+0x1a0>)
 80148a2:	4859      	ldr	r0, [pc, #356]	; (8014a08 <dhcp_create_msg+0x19c>)
 80148a4:	f002 fe10 	bl	80174c8 <iprintf>
 80148a8:	2300      	movs	r3, #0
 80148aa:	e0a5      	b.n	80149f8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80148ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148b0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80148b4:	2036      	movs	r0, #54	; 0x36
 80148b6:	f7f6 fe13 	bl	800b4e0 <pbuf_alloc>
 80148ba:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80148bc:	69bb      	ldr	r3, [r7, #24]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d101      	bne.n	80148c6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80148c2:	2300      	movs	r3, #0
 80148c4:	e098      	b.n	80149f8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80148c6:	69bb      	ldr	r3, [r7, #24]
 80148c8:	895b      	ldrh	r3, [r3, #10]
 80148ca:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80148ce:	d206      	bcs.n	80148de <dhcp_create_msg+0x72>
 80148d0:	4b4b      	ldr	r3, [pc, #300]	; (8014a00 <dhcp_create_msg+0x194>)
 80148d2:	f240 7272 	movw	r2, #1906	; 0x772
 80148d6:	494e      	ldr	r1, [pc, #312]	; (8014a10 <dhcp_create_msg+0x1a4>)
 80148d8:	484b      	ldr	r0, [pc, #300]	; (8014a08 <dhcp_create_msg+0x19c>)
 80148da:	f002 fdf5 	bl	80174c8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80148de:	79fb      	ldrb	r3, [r7, #7]
 80148e0:	2b03      	cmp	r3, #3
 80148e2:	d103      	bne.n	80148ec <dhcp_create_msg+0x80>
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	795b      	ldrb	r3, [r3, #5]
 80148e8:	2b03      	cmp	r3, #3
 80148ea:	d10d      	bne.n	8014908 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	799b      	ldrb	r3, [r3, #6]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d105      	bne.n	8014900 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80148f4:	f002 fe00 	bl	80174f8 <rand>
 80148f8:	4603      	mov	r3, r0
 80148fa:	461a      	mov	r2, r3
 80148fc:	4b45      	ldr	r3, [pc, #276]	; (8014a14 <dhcp_create_msg+0x1a8>)
 80148fe:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014900:	4b44      	ldr	r3, [pc, #272]	; (8014a14 <dhcp_create_msg+0x1a8>)
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014908:	69bb      	ldr	r3, [r7, #24]
 801490a:	685b      	ldr	r3, [r3, #4]
 801490c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801490e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8014912:	2100      	movs	r1, #0
 8014914:	6978      	ldr	r0, [r7, #20]
 8014916:	f002 fdcf 	bl	80174b8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	2201      	movs	r2, #1
 801491e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	2201      	movs	r2, #1
 8014924:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	4618      	mov	r0, r3
 8014936:	f7f5 fd14 	bl	800a362 <lwip_htonl>
 801493a:	4602      	mov	r2, r0
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014940:	79fb      	ldrb	r3, [r7, #7]
 8014942:	2b08      	cmp	r3, #8
 8014944:	d010      	beq.n	8014968 <dhcp_create_msg+0xfc>
 8014946:	79fb      	ldrb	r3, [r7, #7]
 8014948:	2b04      	cmp	r3, #4
 801494a:	d00d      	beq.n	8014968 <dhcp_create_msg+0xfc>
 801494c:	79fb      	ldrb	r3, [r7, #7]
 801494e:	2b07      	cmp	r3, #7
 8014950:	d00a      	beq.n	8014968 <dhcp_create_msg+0xfc>
 8014952:	79fb      	ldrb	r3, [r7, #7]
 8014954:	2b03      	cmp	r3, #3
 8014956:	d10c      	bne.n	8014972 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801495c:	2b05      	cmp	r3, #5
 801495e:	d003      	beq.n	8014968 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	795b      	ldrb	r3, [r3, #5]
 8014964:	2b04      	cmp	r3, #4
 8014966:	d104      	bne.n	8014972 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	3304      	adds	r3, #4
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014972:	2300      	movs	r3, #0
 8014974:	83fb      	strh	r3, [r7, #30]
 8014976:	e00c      	b.n	8014992 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014978:	8bfa      	ldrh	r2, [r7, #30]
 801497a:	8bfb      	ldrh	r3, [r7, #30]
 801497c:	68f9      	ldr	r1, [r7, #12]
 801497e:	440a      	add	r2, r1
 8014980:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014984:	697a      	ldr	r2, [r7, #20]
 8014986:	4413      	add	r3, r2
 8014988:	460a      	mov	r2, r1
 801498a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801498c:	8bfb      	ldrh	r3, [r7, #30]
 801498e:	3301      	adds	r3, #1
 8014990:	83fb      	strh	r3, [r7, #30]
 8014992:	8bfb      	ldrh	r3, [r7, #30]
 8014994:	2b05      	cmp	r3, #5
 8014996:	d9ef      	bls.n	8014978 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	2200      	movs	r2, #0
 801499c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80149a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80149a4:	2200      	movs	r2, #0
 80149a6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80149aa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80149ae:	2200      	movs	r2, #0
 80149b0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80149b4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80149b8:	2200      	movs	r2, #0
 80149ba:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80149be:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149c8:	2301      	movs	r3, #1
 80149ca:	2235      	movs	r2, #53	; 0x35
 80149cc:	2000      	movs	r0, #0
 80149ce:	f7ff fadd 	bl	8013f8c <dhcp_option>
 80149d2:	4603      	mov	r3, r0
 80149d4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80149d6:	697b      	ldr	r3, [r7, #20]
 80149d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149dc:	79fa      	ldrb	r2, [r7, #7]
 80149de:	8a7b      	ldrh	r3, [r7, #18]
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7ff fb07 	bl	8013ff4 <dhcp_option_byte>
 80149e6:	4603      	mov	r3, r0
 80149e8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d002      	beq.n	80149f6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	8a7a      	ldrh	r2, [r7, #18]
 80149f4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80149f6:	69bb      	ldr	r3, [r7, #24]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3720      	adds	r7, #32
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	0801b208 	.word	0x0801b208
 8014a04:	0801b528 	.word	0x0801b528
 8014a08:	0801b268 	.word	0x0801b268
 8014a0c:	0801b548 	.word	0x0801b548
 8014a10:	0801b568 	.word	0x0801b568
 8014a14:	200084e8 	.word	0x200084e8

08014a18 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b084      	sub	sp, #16
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	4603      	mov	r3, r0
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	607a      	str	r2, [r7, #4]
 8014a24:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8014a26:	89fb      	ldrh	r3, [r7, #14]
 8014a28:	1c5a      	adds	r2, r3, #1
 8014a2a:	81fa      	strh	r2, [r7, #14]
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	4413      	add	r3, r2
 8014a32:	22ff      	movs	r2, #255	; 0xff
 8014a34:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014a36:	e007      	b.n	8014a48 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014a38:	89fb      	ldrh	r3, [r7, #14]
 8014a3a:	1c5a      	adds	r2, r3, #1
 8014a3c:	81fa      	strh	r2, [r7, #14]
 8014a3e:	461a      	mov	r2, r3
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	4413      	add	r3, r2
 8014a44:	2200      	movs	r2, #0
 8014a46:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014a48:	89fb      	ldrh	r3, [r7, #14]
 8014a4a:	2b43      	cmp	r3, #67	; 0x43
 8014a4c:	d904      	bls.n	8014a58 <dhcp_option_trailer+0x40>
 8014a4e:	89fb      	ldrh	r3, [r7, #14]
 8014a50:	f003 0303 	and.w	r3, r3, #3
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d002      	beq.n	8014a5e <dhcp_option_trailer+0x46>
 8014a58:	89fb      	ldrh	r3, [r7, #14]
 8014a5a:	2b43      	cmp	r3, #67	; 0x43
 8014a5c:	d9ec      	bls.n	8014a38 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014a5e:	89fb      	ldrh	r3, [r7, #14]
 8014a60:	33f0      	adds	r3, #240	; 0xf0
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	4619      	mov	r1, r3
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f7f6 fe94 	bl	800b794 <pbuf_realloc>
}
 8014a6c:	bf00      	nop
 8014a6e:	3710      	adds	r7, #16
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}

08014a74 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014a74:	b480      	push	{r7}
 8014a76:	b085      	sub	sp, #20
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d017      	beq.n	8014ab2 <dhcp_supplied_address+0x3e>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d013      	beq.n	8014ab2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a8e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	795b      	ldrb	r3, [r3, #5]
 8014a94:	2b0a      	cmp	r3, #10
 8014a96:	d007      	beq.n	8014aa8 <dhcp_supplied_address+0x34>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	795b      	ldrb	r3, [r3, #5]
 8014a9c:	2b05      	cmp	r3, #5
 8014a9e:	d003      	beq.n	8014aa8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014aa4:	2b04      	cmp	r3, #4
 8014aa6:	d101      	bne.n	8014aac <dhcp_supplied_address+0x38>
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	e000      	b.n	8014aae <dhcp_supplied_address+0x3a>
 8014aac:	2300      	movs	r3, #0
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	e000      	b.n	8014ab4 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014ab2:	2300      	movs	r3, #0
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3714      	adds	r7, #20
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014ac8:	4915      	ldr	r1, [pc, #84]	; (8014b20 <etharp_free_entry+0x60>)
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	4613      	mov	r3, r2
 8014ace:	005b      	lsls	r3, r3, #1
 8014ad0:	4413      	add	r3, r2
 8014ad2:	00db      	lsls	r3, r3, #3
 8014ad4:	440b      	add	r3, r1
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d013      	beq.n	8014b04 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014adc:	4910      	ldr	r1, [pc, #64]	; (8014b20 <etharp_free_entry+0x60>)
 8014ade:	687a      	ldr	r2, [r7, #4]
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	005b      	lsls	r3, r3, #1
 8014ae4:	4413      	add	r3, r2
 8014ae6:	00db      	lsls	r3, r3, #3
 8014ae8:	440b      	add	r3, r1
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7f6 ffd7 	bl	800baa0 <pbuf_free>
    arp_table[i].q = NULL;
 8014af2:	490b      	ldr	r1, [pc, #44]	; (8014b20 <etharp_free_entry+0x60>)
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	4613      	mov	r3, r2
 8014af8:	005b      	lsls	r3, r3, #1
 8014afa:	4413      	add	r3, r2
 8014afc:	00db      	lsls	r3, r3, #3
 8014afe:	440b      	add	r3, r1
 8014b00:	2200      	movs	r2, #0
 8014b02:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014b04:	4906      	ldr	r1, [pc, #24]	; (8014b20 <etharp_free_entry+0x60>)
 8014b06:	687a      	ldr	r2, [r7, #4]
 8014b08:	4613      	mov	r3, r2
 8014b0a:	005b      	lsls	r3, r3, #1
 8014b0c:	4413      	add	r3, r2
 8014b0e:	00db      	lsls	r3, r3, #3
 8014b10:	440b      	add	r3, r1
 8014b12:	3314      	adds	r3, #20
 8014b14:	2200      	movs	r2, #0
 8014b16:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014b18:	bf00      	nop
 8014b1a:	3708      	adds	r7, #8
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	200084ec 	.word	0x200084ec

08014b24 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	607b      	str	r3, [r7, #4]
 8014b2e:	e096      	b.n	8014c5e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014b30:	494f      	ldr	r1, [pc, #316]	; (8014c70 <etharp_tmr+0x14c>)
 8014b32:	687a      	ldr	r2, [r7, #4]
 8014b34:	4613      	mov	r3, r2
 8014b36:	005b      	lsls	r3, r3, #1
 8014b38:	4413      	add	r3, r2
 8014b3a:	00db      	lsls	r3, r3, #3
 8014b3c:	440b      	add	r3, r1
 8014b3e:	3314      	adds	r3, #20
 8014b40:	781b      	ldrb	r3, [r3, #0]
 8014b42:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014b44:	78fb      	ldrb	r3, [r7, #3]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f000 8086 	beq.w	8014c58 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014b4c:	4948      	ldr	r1, [pc, #288]	; (8014c70 <etharp_tmr+0x14c>)
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	4613      	mov	r3, r2
 8014b52:	005b      	lsls	r3, r3, #1
 8014b54:	4413      	add	r3, r2
 8014b56:	00db      	lsls	r3, r3, #3
 8014b58:	440b      	add	r3, r1
 8014b5a:	3312      	adds	r3, #18
 8014b5c:	881b      	ldrh	r3, [r3, #0]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	b298      	uxth	r0, r3
 8014b62:	4943      	ldr	r1, [pc, #268]	; (8014c70 <etharp_tmr+0x14c>)
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	4613      	mov	r3, r2
 8014b68:	005b      	lsls	r3, r3, #1
 8014b6a:	4413      	add	r3, r2
 8014b6c:	00db      	lsls	r3, r3, #3
 8014b6e:	440b      	add	r3, r1
 8014b70:	3312      	adds	r3, #18
 8014b72:	4602      	mov	r2, r0
 8014b74:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014b76:	493e      	ldr	r1, [pc, #248]	; (8014c70 <etharp_tmr+0x14c>)
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	4613      	mov	r3, r2
 8014b7c:	005b      	lsls	r3, r3, #1
 8014b7e:	4413      	add	r3, r2
 8014b80:	00db      	lsls	r3, r3, #3
 8014b82:	440b      	add	r3, r1
 8014b84:	3312      	adds	r3, #18
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014b8c:	d215      	bcs.n	8014bba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014b8e:	4938      	ldr	r1, [pc, #224]	; (8014c70 <etharp_tmr+0x14c>)
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	4613      	mov	r3, r2
 8014b94:	005b      	lsls	r3, r3, #1
 8014b96:	4413      	add	r3, r2
 8014b98:	00db      	lsls	r3, r3, #3
 8014b9a:	440b      	add	r3, r1
 8014b9c:	3314      	adds	r3, #20
 8014b9e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014ba0:	2b01      	cmp	r3, #1
 8014ba2:	d10e      	bne.n	8014bc2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014ba4:	4932      	ldr	r1, [pc, #200]	; (8014c70 <etharp_tmr+0x14c>)
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	005b      	lsls	r3, r3, #1
 8014bac:	4413      	add	r3, r2
 8014bae:	00db      	lsls	r3, r3, #3
 8014bb0:	440b      	add	r3, r1
 8014bb2:	3312      	adds	r3, #18
 8014bb4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014bb6:	2b04      	cmp	r3, #4
 8014bb8:	d903      	bls.n	8014bc2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f7ff ff80 	bl	8014ac0 <etharp_free_entry>
 8014bc0:	e04a      	b.n	8014c58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014bc2:	492b      	ldr	r1, [pc, #172]	; (8014c70 <etharp_tmr+0x14c>)
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	005b      	lsls	r3, r3, #1
 8014bca:	4413      	add	r3, r2
 8014bcc:	00db      	lsls	r3, r3, #3
 8014bce:	440b      	add	r3, r1
 8014bd0:	3314      	adds	r3, #20
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	2b03      	cmp	r3, #3
 8014bd6:	d10a      	bne.n	8014bee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014bd8:	4925      	ldr	r1, [pc, #148]	; (8014c70 <etharp_tmr+0x14c>)
 8014bda:	687a      	ldr	r2, [r7, #4]
 8014bdc:	4613      	mov	r3, r2
 8014bde:	005b      	lsls	r3, r3, #1
 8014be0:	4413      	add	r3, r2
 8014be2:	00db      	lsls	r3, r3, #3
 8014be4:	440b      	add	r3, r1
 8014be6:	3314      	adds	r3, #20
 8014be8:	2204      	movs	r2, #4
 8014bea:	701a      	strb	r2, [r3, #0]
 8014bec:	e034      	b.n	8014c58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014bee:	4920      	ldr	r1, [pc, #128]	; (8014c70 <etharp_tmr+0x14c>)
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	4613      	mov	r3, r2
 8014bf4:	005b      	lsls	r3, r3, #1
 8014bf6:	4413      	add	r3, r2
 8014bf8:	00db      	lsls	r3, r3, #3
 8014bfa:	440b      	add	r3, r1
 8014bfc:	3314      	adds	r3, #20
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	2b04      	cmp	r3, #4
 8014c02:	d10a      	bne.n	8014c1a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014c04:	491a      	ldr	r1, [pc, #104]	; (8014c70 <etharp_tmr+0x14c>)
 8014c06:	687a      	ldr	r2, [r7, #4]
 8014c08:	4613      	mov	r3, r2
 8014c0a:	005b      	lsls	r3, r3, #1
 8014c0c:	4413      	add	r3, r2
 8014c0e:	00db      	lsls	r3, r3, #3
 8014c10:	440b      	add	r3, r1
 8014c12:	3314      	adds	r3, #20
 8014c14:	2202      	movs	r2, #2
 8014c16:	701a      	strb	r2, [r3, #0]
 8014c18:	e01e      	b.n	8014c58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c1a:	4915      	ldr	r1, [pc, #84]	; (8014c70 <etharp_tmr+0x14c>)
 8014c1c:	687a      	ldr	r2, [r7, #4]
 8014c1e:	4613      	mov	r3, r2
 8014c20:	005b      	lsls	r3, r3, #1
 8014c22:	4413      	add	r3, r2
 8014c24:	00db      	lsls	r3, r3, #3
 8014c26:	440b      	add	r3, r1
 8014c28:	3314      	adds	r3, #20
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d113      	bne.n	8014c58 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014c30:	490f      	ldr	r1, [pc, #60]	; (8014c70 <etharp_tmr+0x14c>)
 8014c32:	687a      	ldr	r2, [r7, #4]
 8014c34:	4613      	mov	r3, r2
 8014c36:	005b      	lsls	r3, r3, #1
 8014c38:	4413      	add	r3, r2
 8014c3a:	00db      	lsls	r3, r3, #3
 8014c3c:	440b      	add	r3, r1
 8014c3e:	3308      	adds	r3, #8
 8014c40:	6818      	ldr	r0, [r3, #0]
 8014c42:	687a      	ldr	r2, [r7, #4]
 8014c44:	4613      	mov	r3, r2
 8014c46:	005b      	lsls	r3, r3, #1
 8014c48:	4413      	add	r3, r2
 8014c4a:	00db      	lsls	r3, r3, #3
 8014c4c:	4a08      	ldr	r2, [pc, #32]	; (8014c70 <etharp_tmr+0x14c>)
 8014c4e:	4413      	add	r3, r2
 8014c50:	3304      	adds	r3, #4
 8014c52:	4619      	mov	r1, r3
 8014c54:	f000 fe72 	bl	801593c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	3301      	adds	r3, #1
 8014c5c:	607b      	str	r3, [r7, #4]
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2b09      	cmp	r3, #9
 8014c62:	f77f af65 	ble.w	8014b30 <etharp_tmr+0xc>
      }
    }
  }
}
 8014c66:	bf00      	nop
 8014c68:	3708      	adds	r7, #8
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	200084ec 	.word	0x200084ec

08014c74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b08a      	sub	sp, #40	; 0x28
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	607a      	str	r2, [r7, #4]
 8014c80:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014c82:	230a      	movs	r3, #10
 8014c84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014c86:	230a      	movs	r3, #10
 8014c88:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014c8a:	230a      	movs	r3, #10
 8014c8c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014c92:	230a      	movs	r3, #10
 8014c94:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014c96:	2300      	movs	r3, #0
 8014c98:	83bb      	strh	r3, [r7, #28]
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	837b      	strh	r3, [r7, #26]
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	843b      	strh	r3, [r7, #32]
 8014ca6:	e0ae      	b.n	8014e06 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014ca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cac:	49a6      	ldr	r1, [pc, #664]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014cae:	4613      	mov	r3, r2
 8014cb0:	005b      	lsls	r3, r3, #1
 8014cb2:	4413      	add	r3, r2
 8014cb4:	00db      	lsls	r3, r3, #3
 8014cb6:	440b      	add	r3, r1
 8014cb8:	3314      	adds	r3, #20
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014cbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014cc2:	2b0a      	cmp	r3, #10
 8014cc4:	d105      	bne.n	8014cd2 <etharp_find_entry+0x5e>
 8014cc6:	7dfb      	ldrb	r3, [r7, #23]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d102      	bne.n	8014cd2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014ccc:	8c3b      	ldrh	r3, [r7, #32]
 8014cce:	847b      	strh	r3, [r7, #34]	; 0x22
 8014cd0:	e095      	b.n	8014dfe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014cd2:	7dfb      	ldrb	r3, [r7, #23]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	f000 8092 	beq.w	8014dfe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014cda:	7dfb      	ldrb	r3, [r7, #23]
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	d009      	beq.n	8014cf4 <etharp_find_entry+0x80>
 8014ce0:	7dfb      	ldrb	r3, [r7, #23]
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d806      	bhi.n	8014cf4 <etharp_find_entry+0x80>
 8014ce6:	4b99      	ldr	r3, [pc, #612]	; (8014f4c <etharp_find_entry+0x2d8>)
 8014ce8:	f44f 7292 	mov.w	r2, #292	; 0x124
 8014cec:	4998      	ldr	r1, [pc, #608]	; (8014f50 <etharp_find_entry+0x2dc>)
 8014cee:	4899      	ldr	r0, [pc, #612]	; (8014f54 <etharp_find_entry+0x2e0>)
 8014cf0:	f002 fbea 	bl	80174c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d020      	beq.n	8014d3c <etharp_find_entry+0xc8>
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	6819      	ldr	r1, [r3, #0]
 8014cfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d02:	4891      	ldr	r0, [pc, #580]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014d04:	4613      	mov	r3, r2
 8014d06:	005b      	lsls	r3, r3, #1
 8014d08:	4413      	add	r3, r2
 8014d0a:	00db      	lsls	r3, r3, #3
 8014d0c:	4403      	add	r3, r0
 8014d0e:	3304      	adds	r3, #4
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	4299      	cmp	r1, r3
 8014d14:	d112      	bne.n	8014d3c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00c      	beq.n	8014d36 <etharp_find_entry+0xc2>
 8014d1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d20:	4989      	ldr	r1, [pc, #548]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014d22:	4613      	mov	r3, r2
 8014d24:	005b      	lsls	r3, r3, #1
 8014d26:	4413      	add	r3, r2
 8014d28:	00db      	lsls	r3, r3, #3
 8014d2a:	440b      	add	r3, r1
 8014d2c:	3308      	adds	r3, #8
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	429a      	cmp	r2, r3
 8014d34:	d102      	bne.n	8014d3c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014d36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d3a:	e100      	b.n	8014f3e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014d3c:	7dfb      	ldrb	r3, [r7, #23]
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d140      	bne.n	8014dc4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014d42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d46:	4980      	ldr	r1, [pc, #512]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014d48:	4613      	mov	r3, r2
 8014d4a:	005b      	lsls	r3, r3, #1
 8014d4c:	4413      	add	r3, r2
 8014d4e:	00db      	lsls	r3, r3, #3
 8014d50:	440b      	add	r3, r1
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d01a      	beq.n	8014d8e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014d58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d5c:	497a      	ldr	r1, [pc, #488]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014d5e:	4613      	mov	r3, r2
 8014d60:	005b      	lsls	r3, r3, #1
 8014d62:	4413      	add	r3, r2
 8014d64:	00db      	lsls	r3, r3, #3
 8014d66:	440b      	add	r3, r1
 8014d68:	3312      	adds	r3, #18
 8014d6a:	881b      	ldrh	r3, [r3, #0]
 8014d6c:	8bba      	ldrh	r2, [r7, #28]
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	d845      	bhi.n	8014dfe <etharp_find_entry+0x18a>
            old_queue = i;
 8014d72:	8c3b      	ldrh	r3, [r7, #32]
 8014d74:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014d76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d7a:	4973      	ldr	r1, [pc, #460]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	005b      	lsls	r3, r3, #1
 8014d80:	4413      	add	r3, r2
 8014d82:	00db      	lsls	r3, r3, #3
 8014d84:	440b      	add	r3, r1
 8014d86:	3312      	adds	r3, #18
 8014d88:	881b      	ldrh	r3, [r3, #0]
 8014d8a:	83bb      	strh	r3, [r7, #28]
 8014d8c:	e037      	b.n	8014dfe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014d8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d92:	496d      	ldr	r1, [pc, #436]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014d94:	4613      	mov	r3, r2
 8014d96:	005b      	lsls	r3, r3, #1
 8014d98:	4413      	add	r3, r2
 8014d9a:	00db      	lsls	r3, r3, #3
 8014d9c:	440b      	add	r3, r1
 8014d9e:	3312      	adds	r3, #18
 8014da0:	881b      	ldrh	r3, [r3, #0]
 8014da2:	8b7a      	ldrh	r2, [r7, #26]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d82a      	bhi.n	8014dfe <etharp_find_entry+0x18a>
            old_pending = i;
 8014da8:	8c3b      	ldrh	r3, [r7, #32]
 8014daa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014dac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014db0:	4965      	ldr	r1, [pc, #404]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014db2:	4613      	mov	r3, r2
 8014db4:	005b      	lsls	r3, r3, #1
 8014db6:	4413      	add	r3, r2
 8014db8:	00db      	lsls	r3, r3, #3
 8014dba:	440b      	add	r3, r1
 8014dbc:	3312      	adds	r3, #18
 8014dbe:	881b      	ldrh	r3, [r3, #0]
 8014dc0:	837b      	strh	r3, [r7, #26]
 8014dc2:	e01c      	b.n	8014dfe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014dc4:	7dfb      	ldrb	r3, [r7, #23]
 8014dc6:	2b01      	cmp	r3, #1
 8014dc8:	d919      	bls.n	8014dfe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014dca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dce:	495e      	ldr	r1, [pc, #376]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014dd0:	4613      	mov	r3, r2
 8014dd2:	005b      	lsls	r3, r3, #1
 8014dd4:	4413      	add	r3, r2
 8014dd6:	00db      	lsls	r3, r3, #3
 8014dd8:	440b      	add	r3, r1
 8014dda:	3312      	adds	r3, #18
 8014ddc:	881b      	ldrh	r3, [r3, #0]
 8014dde:	8b3a      	ldrh	r2, [r7, #24]
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d80c      	bhi.n	8014dfe <etharp_find_entry+0x18a>
            old_stable = i;
 8014de4:	8c3b      	ldrh	r3, [r7, #32]
 8014de6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014de8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dec:	4956      	ldr	r1, [pc, #344]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014dee:	4613      	mov	r3, r2
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	4413      	add	r3, r2
 8014df4:	00db      	lsls	r3, r3, #3
 8014df6:	440b      	add	r3, r1
 8014df8:	3312      	adds	r3, #18
 8014dfa:	881b      	ldrh	r3, [r3, #0]
 8014dfc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014dfe:	8c3b      	ldrh	r3, [r7, #32]
 8014e00:	3301      	adds	r3, #1
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	843b      	strh	r3, [r7, #32]
 8014e06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e0a:	2b09      	cmp	r3, #9
 8014e0c:	f77f af4c 	ble.w	8014ca8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014e10:	7afb      	ldrb	r3, [r7, #11]
 8014e12:	f003 0302 	and.w	r3, r3, #2
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d108      	bne.n	8014e2c <etharp_find_entry+0x1b8>
 8014e1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014e1e:	2b0a      	cmp	r3, #10
 8014e20:	d107      	bne.n	8014e32 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014e22:	7afb      	ldrb	r3, [r7, #11]
 8014e24:	f003 0301 	and.w	r3, r3, #1
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d102      	bne.n	8014e32 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e30:	e085      	b.n	8014f3e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014e32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014e36:	2b09      	cmp	r3, #9
 8014e38:	dc02      	bgt.n	8014e40 <etharp_find_entry+0x1cc>
    i = empty;
 8014e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e3c:	843b      	strh	r3, [r7, #32]
 8014e3e:	e039      	b.n	8014eb4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014e40:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014e44:	2b09      	cmp	r3, #9
 8014e46:	dc14      	bgt.n	8014e72 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014e4a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014e4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e50:	493d      	ldr	r1, [pc, #244]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014e52:	4613      	mov	r3, r2
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	4413      	add	r3, r2
 8014e58:	00db      	lsls	r3, r3, #3
 8014e5a:	440b      	add	r3, r1
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d018      	beq.n	8014e94 <etharp_find_entry+0x220>
 8014e62:	4b3a      	ldr	r3, [pc, #232]	; (8014f4c <etharp_find_entry+0x2d8>)
 8014e64:	f240 126d 	movw	r2, #365	; 0x16d
 8014e68:	493b      	ldr	r1, [pc, #236]	; (8014f58 <etharp_find_entry+0x2e4>)
 8014e6a:	483a      	ldr	r0, [pc, #232]	; (8014f54 <etharp_find_entry+0x2e0>)
 8014e6c:	f002 fb2c 	bl	80174c8 <iprintf>
 8014e70:	e010      	b.n	8014e94 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014e72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014e76:	2b09      	cmp	r3, #9
 8014e78:	dc02      	bgt.n	8014e80 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014e7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014e7c:	843b      	strh	r3, [r7, #32]
 8014e7e:	e009      	b.n	8014e94 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014e80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014e84:	2b09      	cmp	r3, #9
 8014e86:	dc02      	bgt.n	8014e8e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014e88:	8bfb      	ldrh	r3, [r7, #30]
 8014e8a:	843b      	strh	r3, [r7, #32]
 8014e8c:	e002      	b.n	8014e94 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e92:	e054      	b.n	8014f3e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014e94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e98:	2b09      	cmp	r3, #9
 8014e9a:	dd06      	ble.n	8014eaa <etharp_find_entry+0x236>
 8014e9c:	4b2b      	ldr	r3, [pc, #172]	; (8014f4c <etharp_find_entry+0x2d8>)
 8014e9e:	f240 127f 	movw	r2, #383	; 0x17f
 8014ea2:	492e      	ldr	r1, [pc, #184]	; (8014f5c <etharp_find_entry+0x2e8>)
 8014ea4:	482b      	ldr	r0, [pc, #172]	; (8014f54 <etharp_find_entry+0x2e0>)
 8014ea6:	f002 fb0f 	bl	80174c8 <iprintf>
    etharp_free_entry(i);
 8014eaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff fe06 	bl	8014ac0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014eb4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014eb8:	2b09      	cmp	r3, #9
 8014eba:	dd06      	ble.n	8014eca <etharp_find_entry+0x256>
 8014ebc:	4b23      	ldr	r3, [pc, #140]	; (8014f4c <etharp_find_entry+0x2d8>)
 8014ebe:	f240 1283 	movw	r2, #387	; 0x183
 8014ec2:	4926      	ldr	r1, [pc, #152]	; (8014f5c <etharp_find_entry+0x2e8>)
 8014ec4:	4823      	ldr	r0, [pc, #140]	; (8014f54 <etharp_find_entry+0x2e0>)
 8014ec6:	f002 faff 	bl	80174c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014eca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ece:	491e      	ldr	r1, [pc, #120]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014ed0:	4613      	mov	r3, r2
 8014ed2:	005b      	lsls	r3, r3, #1
 8014ed4:	4413      	add	r3, r2
 8014ed6:	00db      	lsls	r3, r3, #3
 8014ed8:	440b      	add	r3, r1
 8014eda:	3314      	adds	r3, #20
 8014edc:	781b      	ldrb	r3, [r3, #0]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d006      	beq.n	8014ef0 <etharp_find_entry+0x27c>
 8014ee2:	4b1a      	ldr	r3, [pc, #104]	; (8014f4c <etharp_find_entry+0x2d8>)
 8014ee4:	f240 1285 	movw	r2, #389	; 0x185
 8014ee8:	491d      	ldr	r1, [pc, #116]	; (8014f60 <etharp_find_entry+0x2ec>)
 8014eea:	481a      	ldr	r0, [pc, #104]	; (8014f54 <etharp_find_entry+0x2e0>)
 8014eec:	f002 faec 	bl	80174c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d00b      	beq.n	8014f0e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014ef6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	6819      	ldr	r1, [r3, #0]
 8014efe:	4812      	ldr	r0, [pc, #72]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014f00:	4613      	mov	r3, r2
 8014f02:	005b      	lsls	r3, r3, #1
 8014f04:	4413      	add	r3, r2
 8014f06:	00db      	lsls	r3, r3, #3
 8014f08:	4403      	add	r3, r0
 8014f0a:	3304      	adds	r3, #4
 8014f0c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014f0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f12:	490d      	ldr	r1, [pc, #52]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014f14:	4613      	mov	r3, r2
 8014f16:	005b      	lsls	r3, r3, #1
 8014f18:	4413      	add	r3, r2
 8014f1a:	00db      	lsls	r3, r3, #3
 8014f1c:	440b      	add	r3, r1
 8014f1e:	3312      	adds	r3, #18
 8014f20:	2200      	movs	r2, #0
 8014f22:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014f24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f28:	4907      	ldr	r1, [pc, #28]	; (8014f48 <etharp_find_entry+0x2d4>)
 8014f2a:	4613      	mov	r3, r2
 8014f2c:	005b      	lsls	r3, r3, #1
 8014f2e:	4413      	add	r3, r2
 8014f30:	00db      	lsls	r3, r3, #3
 8014f32:	440b      	add	r3, r1
 8014f34:	3308      	adds	r3, #8
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014f3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3728      	adds	r7, #40	; 0x28
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
 8014f46:	bf00      	nop
 8014f48:	200084ec 	.word	0x200084ec
 8014f4c:	0801b5a8 	.word	0x0801b5a8
 8014f50:	0801b5e0 	.word	0x0801b5e0
 8014f54:	0801b620 	.word	0x0801b620
 8014f58:	0801b648 	.word	0x0801b648
 8014f5c:	0801b660 	.word	0x0801b660
 8014f60:	0801b674 	.word	0x0801b674

08014f64 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b088      	sub	sp, #32
 8014f68:	af02      	add	r7, sp, #8
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f78:	2b06      	cmp	r3, #6
 8014f7a:	d006      	beq.n	8014f8a <etharp_update_arp_entry+0x26>
 8014f7c:	4b48      	ldr	r3, [pc, #288]	; (80150a0 <etharp_update_arp_entry+0x13c>)
 8014f7e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014f82:	4948      	ldr	r1, [pc, #288]	; (80150a4 <etharp_update_arp_entry+0x140>)
 8014f84:	4848      	ldr	r0, [pc, #288]	; (80150a8 <etharp_update_arp_entry+0x144>)
 8014f86:	f002 fa9f 	bl	80174c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d012      	beq.n	8014fb6 <etharp_update_arp_entry+0x52>
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d00e      	beq.n	8014fb6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	68f9      	ldr	r1, [r7, #12]
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f001 f91e 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 8014fa4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d105      	bne.n	8014fb6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014faa:	68bb      	ldr	r3, [r7, #8]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014fb2:	2be0      	cmp	r3, #224	; 0xe0
 8014fb4:	d102      	bne.n	8014fbc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014fb6:	f06f 030f 	mvn.w	r3, #15
 8014fba:	e06c      	b.n	8015096 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014fbc:	78fb      	ldrb	r3, [r7, #3]
 8014fbe:	68fa      	ldr	r2, [r7, #12]
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	68b8      	ldr	r0, [r7, #8]
 8014fc4:	f7ff fe56 	bl	8014c74 <etharp_find_entry>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014fcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	da02      	bge.n	8014fda <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014fd4:	8afb      	ldrh	r3, [r7, #22]
 8014fd6:	b25b      	sxtb	r3, r3
 8014fd8:	e05d      	b.n	8015096 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014fda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fde:	4933      	ldr	r1, [pc, #204]	; (80150ac <etharp_update_arp_entry+0x148>)
 8014fe0:	4613      	mov	r3, r2
 8014fe2:	005b      	lsls	r3, r3, #1
 8014fe4:	4413      	add	r3, r2
 8014fe6:	00db      	lsls	r3, r3, #3
 8014fe8:	440b      	add	r3, r1
 8014fea:	3314      	adds	r3, #20
 8014fec:	2202      	movs	r2, #2
 8014fee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014ff0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ff4:	492d      	ldr	r1, [pc, #180]	; (80150ac <etharp_update_arp_entry+0x148>)
 8014ff6:	4613      	mov	r3, r2
 8014ff8:	005b      	lsls	r3, r3, #1
 8014ffa:	4413      	add	r3, r2
 8014ffc:	00db      	lsls	r3, r3, #3
 8014ffe:	440b      	add	r3, r1
 8015000:	3308      	adds	r3, #8
 8015002:	68fa      	ldr	r2, [r7, #12]
 8015004:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015006:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801500a:	4613      	mov	r3, r2
 801500c:	005b      	lsls	r3, r3, #1
 801500e:	4413      	add	r3, r2
 8015010:	00db      	lsls	r3, r3, #3
 8015012:	3308      	adds	r3, #8
 8015014:	4a25      	ldr	r2, [pc, #148]	; (80150ac <etharp_update_arp_entry+0x148>)
 8015016:	4413      	add	r3, r2
 8015018:	3304      	adds	r3, #4
 801501a:	2206      	movs	r2, #6
 801501c:	6879      	ldr	r1, [r7, #4]
 801501e:	4618      	mov	r0, r3
 8015020:	f002 fa3f 	bl	80174a2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015024:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015028:	4920      	ldr	r1, [pc, #128]	; (80150ac <etharp_update_arp_entry+0x148>)
 801502a:	4613      	mov	r3, r2
 801502c:	005b      	lsls	r3, r3, #1
 801502e:	4413      	add	r3, r2
 8015030:	00db      	lsls	r3, r3, #3
 8015032:	440b      	add	r3, r1
 8015034:	3312      	adds	r3, #18
 8015036:	2200      	movs	r2, #0
 8015038:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801503a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801503e:	491b      	ldr	r1, [pc, #108]	; (80150ac <etharp_update_arp_entry+0x148>)
 8015040:	4613      	mov	r3, r2
 8015042:	005b      	lsls	r3, r3, #1
 8015044:	4413      	add	r3, r2
 8015046:	00db      	lsls	r3, r3, #3
 8015048:	440b      	add	r3, r1
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d021      	beq.n	8015094 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015050:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015054:	4915      	ldr	r1, [pc, #84]	; (80150ac <etharp_update_arp_entry+0x148>)
 8015056:	4613      	mov	r3, r2
 8015058:	005b      	lsls	r3, r3, #1
 801505a:	4413      	add	r3, r2
 801505c:	00db      	lsls	r3, r3, #3
 801505e:	440b      	add	r3, r1
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015064:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015068:	4910      	ldr	r1, [pc, #64]	; (80150ac <etharp_update_arp_entry+0x148>)
 801506a:	4613      	mov	r3, r2
 801506c:	005b      	lsls	r3, r3, #1
 801506e:	4413      	add	r3, r2
 8015070:	00db      	lsls	r3, r3, #3
 8015072:	440b      	add	r3, r1
 8015074:	2200      	movs	r2, #0
 8015076:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801507e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015082:	9300      	str	r3, [sp, #0]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6939      	ldr	r1, [r7, #16]
 8015088:	68f8      	ldr	r0, [r7, #12]
 801508a:	f001 ffad 	bl	8016fe8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801508e:	6938      	ldr	r0, [r7, #16]
 8015090:	f7f6 fd06 	bl	800baa0 <pbuf_free>
  }
  return ERR_OK;
 8015094:	2300      	movs	r3, #0
}
 8015096:	4618      	mov	r0, r3
 8015098:	3718      	adds	r7, #24
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	0801b5a8 	.word	0x0801b5a8
 80150a4:	0801b6a0 	.word	0x0801b6a0
 80150a8:	0801b620 	.word	0x0801b620
 80150ac:	200084ec 	.word	0x200084ec

080150b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150b8:	2300      	movs	r3, #0
 80150ba:	60fb      	str	r3, [r7, #12]
 80150bc:	e01e      	b.n	80150fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80150be:	4913      	ldr	r1, [pc, #76]	; (801510c <etharp_cleanup_netif+0x5c>)
 80150c0:	68fa      	ldr	r2, [r7, #12]
 80150c2:	4613      	mov	r3, r2
 80150c4:	005b      	lsls	r3, r3, #1
 80150c6:	4413      	add	r3, r2
 80150c8:	00db      	lsls	r3, r3, #3
 80150ca:	440b      	add	r3, r1
 80150cc:	3314      	adds	r3, #20
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80150d2:	7afb      	ldrb	r3, [r7, #11]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d00e      	beq.n	80150f6 <etharp_cleanup_netif+0x46>
 80150d8:	490c      	ldr	r1, [pc, #48]	; (801510c <etharp_cleanup_netif+0x5c>)
 80150da:	68fa      	ldr	r2, [r7, #12]
 80150dc:	4613      	mov	r3, r2
 80150de:	005b      	lsls	r3, r3, #1
 80150e0:	4413      	add	r3, r2
 80150e2:	00db      	lsls	r3, r3, #3
 80150e4:	440b      	add	r3, r1
 80150e6:	3308      	adds	r3, #8
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	687a      	ldr	r2, [r7, #4]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d102      	bne.n	80150f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80150f0:	68f8      	ldr	r0, [r7, #12]
 80150f2:	f7ff fce5 	bl	8014ac0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	3301      	adds	r3, #1
 80150fa:	60fb      	str	r3, [r7, #12]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	2b09      	cmp	r3, #9
 8015100:	dddd      	ble.n	80150be <etharp_cleanup_netif+0xe>
    }
  }
}
 8015102:	bf00      	nop
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
 801510a:	bf00      	nop
 801510c:	200084ec 	.word	0x200084ec

08015110 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015110:	b5b0      	push	{r4, r5, r7, lr}
 8015112:	b08a      	sub	sp, #40	; 0x28
 8015114:	af04      	add	r7, sp, #16
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d107      	bne.n	8015130 <etharp_input+0x20>
 8015120:	4b3f      	ldr	r3, [pc, #252]	; (8015220 <etharp_input+0x110>)
 8015122:	f240 228a 	movw	r2, #650	; 0x28a
 8015126:	493f      	ldr	r1, [pc, #252]	; (8015224 <etharp_input+0x114>)
 8015128:	483f      	ldr	r0, [pc, #252]	; (8015228 <etharp_input+0x118>)
 801512a:	f002 f9cd 	bl	80174c8 <iprintf>
 801512e:	e074      	b.n	801521a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	881b      	ldrh	r3, [r3, #0]
 801513a:	b29b      	uxth	r3, r3
 801513c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015140:	d10c      	bne.n	801515c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015146:	2b06      	cmp	r3, #6
 8015148:	d108      	bne.n	801515c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801514e:	2b04      	cmp	r3, #4
 8015150:	d104      	bne.n	801515c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	885b      	ldrh	r3, [r3, #2]
 8015156:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015158:	2b08      	cmp	r3, #8
 801515a:	d003      	beq.n	8015164 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801515c:	6878      	ldr	r0, [r7, #4]
 801515e:	f7f6 fc9f 	bl	800baa0 <pbuf_free>
    return;
 8015162:	e05a      	b.n	801521a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	330e      	adds	r3, #14
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	3318      	adds	r3, #24
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	3304      	adds	r3, #4
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d102      	bne.n	8015184 <etharp_input+0x74>
    for_us = 0;
 801517e:	2300      	movs	r3, #0
 8015180:	75fb      	strb	r3, [r7, #23]
 8015182:	e009      	b.n	8015198 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015184:	68ba      	ldr	r2, [r7, #8]
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	3304      	adds	r3, #4
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	429a      	cmp	r2, r3
 801518e:	bf0c      	ite	eq
 8015190:	2301      	moveq	r3, #1
 8015192:	2300      	movne	r3, #0
 8015194:	b2db      	uxtb	r3, r3
 8015196:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	f103 0208 	add.w	r2, r3, #8
 801519e:	7dfb      	ldrb	r3, [r7, #23]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d001      	beq.n	80151a8 <etharp_input+0x98>
 80151a4:	2301      	movs	r3, #1
 80151a6:	e000      	b.n	80151aa <etharp_input+0x9a>
 80151a8:	2302      	movs	r3, #2
 80151aa:	f107 010c 	add.w	r1, r7, #12
 80151ae:	6838      	ldr	r0, [r7, #0]
 80151b0:	f7ff fed8 	bl	8014f64 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	88db      	ldrh	r3, [r3, #6]
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151be:	d003      	beq.n	80151c8 <etharp_input+0xb8>
 80151c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151c4:	d01e      	beq.n	8015204 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80151c6:	e025      	b.n	8015214 <etharp_input+0x104>
      if (for_us) {
 80151c8:	7dfb      	ldrb	r3, [r7, #23]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d021      	beq.n	8015212 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80151e4:	693a      	ldr	r2, [r7, #16]
 80151e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80151e8:	2102      	movs	r1, #2
 80151ea:	9103      	str	r1, [sp, #12]
 80151ec:	f107 010c 	add.w	r1, r7, #12
 80151f0:	9102      	str	r1, [sp, #8]
 80151f2:	9201      	str	r2, [sp, #4]
 80151f4:	9300      	str	r3, [sp, #0]
 80151f6:	462b      	mov	r3, r5
 80151f8:	4622      	mov	r2, r4
 80151fa:	4601      	mov	r1, r0
 80151fc:	6838      	ldr	r0, [r7, #0]
 80151fe:	f000 faef 	bl	80157e0 <etharp_raw>
      break;
 8015202:	e006      	b.n	8015212 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015204:	f107 030c 	add.w	r3, r7, #12
 8015208:	4619      	mov	r1, r3
 801520a:	6838      	ldr	r0, [r7, #0]
 801520c:	f7fe f9fe 	bl	801360c <dhcp_arp_reply>
      break;
 8015210:	e000      	b.n	8015214 <etharp_input+0x104>
      break;
 8015212:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	f7f6 fc43 	bl	800baa0 <pbuf_free>
}
 801521a:	3718      	adds	r7, #24
 801521c:	46bd      	mov	sp, r7
 801521e:	bdb0      	pop	{r4, r5, r7, pc}
 8015220:	0801b5a8 	.word	0x0801b5a8
 8015224:	0801b6f8 	.word	0x0801b6f8
 8015228:	0801b620 	.word	0x0801b620

0801522c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b086      	sub	sp, #24
 8015230:	af02      	add	r7, sp, #8
 8015232:	60f8      	str	r0, [r7, #12]
 8015234:	60b9      	str	r1, [r7, #8]
 8015236:	4613      	mov	r3, r2
 8015238:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801523a:	79fa      	ldrb	r2, [r7, #7]
 801523c:	4944      	ldr	r1, [pc, #272]	; (8015350 <etharp_output_to_arp_index+0x124>)
 801523e:	4613      	mov	r3, r2
 8015240:	005b      	lsls	r3, r3, #1
 8015242:	4413      	add	r3, r2
 8015244:	00db      	lsls	r3, r3, #3
 8015246:	440b      	add	r3, r1
 8015248:	3314      	adds	r3, #20
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	2b01      	cmp	r3, #1
 801524e:	d806      	bhi.n	801525e <etharp_output_to_arp_index+0x32>
 8015250:	4b40      	ldr	r3, [pc, #256]	; (8015354 <etharp_output_to_arp_index+0x128>)
 8015252:	f240 22ef 	movw	r2, #751	; 0x2ef
 8015256:	4940      	ldr	r1, [pc, #256]	; (8015358 <etharp_output_to_arp_index+0x12c>)
 8015258:	4840      	ldr	r0, [pc, #256]	; (801535c <etharp_output_to_arp_index+0x130>)
 801525a:	f002 f935 	bl	80174c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801525e:	79fa      	ldrb	r2, [r7, #7]
 8015260:	493b      	ldr	r1, [pc, #236]	; (8015350 <etharp_output_to_arp_index+0x124>)
 8015262:	4613      	mov	r3, r2
 8015264:	005b      	lsls	r3, r3, #1
 8015266:	4413      	add	r3, r2
 8015268:	00db      	lsls	r3, r3, #3
 801526a:	440b      	add	r3, r1
 801526c:	3314      	adds	r3, #20
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	2b02      	cmp	r3, #2
 8015272:	d153      	bne.n	801531c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015274:	79fa      	ldrb	r2, [r7, #7]
 8015276:	4936      	ldr	r1, [pc, #216]	; (8015350 <etharp_output_to_arp_index+0x124>)
 8015278:	4613      	mov	r3, r2
 801527a:	005b      	lsls	r3, r3, #1
 801527c:	4413      	add	r3, r2
 801527e:	00db      	lsls	r3, r3, #3
 8015280:	440b      	add	r3, r1
 8015282:	3312      	adds	r3, #18
 8015284:	881b      	ldrh	r3, [r3, #0]
 8015286:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801528a:	d919      	bls.n	80152c0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801528c:	79fa      	ldrb	r2, [r7, #7]
 801528e:	4613      	mov	r3, r2
 8015290:	005b      	lsls	r3, r3, #1
 8015292:	4413      	add	r3, r2
 8015294:	00db      	lsls	r3, r3, #3
 8015296:	4a2e      	ldr	r2, [pc, #184]	; (8015350 <etharp_output_to_arp_index+0x124>)
 8015298:	4413      	add	r3, r2
 801529a:	3304      	adds	r3, #4
 801529c:	4619      	mov	r1, r3
 801529e:	68f8      	ldr	r0, [r7, #12]
 80152a0:	f000 fb4c 	bl	801593c <etharp_request>
 80152a4:	4603      	mov	r3, r0
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d138      	bne.n	801531c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80152aa:	79fa      	ldrb	r2, [r7, #7]
 80152ac:	4928      	ldr	r1, [pc, #160]	; (8015350 <etharp_output_to_arp_index+0x124>)
 80152ae:	4613      	mov	r3, r2
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	4413      	add	r3, r2
 80152b4:	00db      	lsls	r3, r3, #3
 80152b6:	440b      	add	r3, r1
 80152b8:	3314      	adds	r3, #20
 80152ba:	2203      	movs	r2, #3
 80152bc:	701a      	strb	r2, [r3, #0]
 80152be:	e02d      	b.n	801531c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80152c0:	79fa      	ldrb	r2, [r7, #7]
 80152c2:	4923      	ldr	r1, [pc, #140]	; (8015350 <etharp_output_to_arp_index+0x124>)
 80152c4:	4613      	mov	r3, r2
 80152c6:	005b      	lsls	r3, r3, #1
 80152c8:	4413      	add	r3, r2
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	440b      	add	r3, r1
 80152ce:	3312      	adds	r3, #18
 80152d0:	881b      	ldrh	r3, [r3, #0]
 80152d2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80152d6:	d321      	bcc.n	801531c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80152d8:	79fa      	ldrb	r2, [r7, #7]
 80152da:	4613      	mov	r3, r2
 80152dc:	005b      	lsls	r3, r3, #1
 80152de:	4413      	add	r3, r2
 80152e0:	00db      	lsls	r3, r3, #3
 80152e2:	4a1b      	ldr	r2, [pc, #108]	; (8015350 <etharp_output_to_arp_index+0x124>)
 80152e4:	4413      	add	r3, r2
 80152e6:	1d19      	adds	r1, r3, #4
 80152e8:	79fa      	ldrb	r2, [r7, #7]
 80152ea:	4613      	mov	r3, r2
 80152ec:	005b      	lsls	r3, r3, #1
 80152ee:	4413      	add	r3, r2
 80152f0:	00db      	lsls	r3, r3, #3
 80152f2:	3308      	adds	r3, #8
 80152f4:	4a16      	ldr	r2, [pc, #88]	; (8015350 <etharp_output_to_arp_index+0x124>)
 80152f6:	4413      	add	r3, r2
 80152f8:	3304      	adds	r3, #4
 80152fa:	461a      	mov	r2, r3
 80152fc:	68f8      	ldr	r0, [r7, #12]
 80152fe:	f000 fafb 	bl	80158f8 <etharp_request_dst>
 8015302:	4603      	mov	r3, r0
 8015304:	2b00      	cmp	r3, #0
 8015306:	d109      	bne.n	801531c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015308:	79fa      	ldrb	r2, [r7, #7]
 801530a:	4911      	ldr	r1, [pc, #68]	; (8015350 <etharp_output_to_arp_index+0x124>)
 801530c:	4613      	mov	r3, r2
 801530e:	005b      	lsls	r3, r3, #1
 8015310:	4413      	add	r3, r2
 8015312:	00db      	lsls	r3, r3, #3
 8015314:	440b      	add	r3, r1
 8015316:	3314      	adds	r3, #20
 8015318:	2203      	movs	r2, #3
 801531a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015322:	79fa      	ldrb	r2, [r7, #7]
 8015324:	4613      	mov	r3, r2
 8015326:	005b      	lsls	r3, r3, #1
 8015328:	4413      	add	r3, r2
 801532a:	00db      	lsls	r3, r3, #3
 801532c:	3308      	adds	r3, #8
 801532e:	4a08      	ldr	r2, [pc, #32]	; (8015350 <etharp_output_to_arp_index+0x124>)
 8015330:	4413      	add	r3, r2
 8015332:	1d1a      	adds	r2, r3, #4
 8015334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015338:	9300      	str	r3, [sp, #0]
 801533a:	4613      	mov	r3, r2
 801533c:	460a      	mov	r2, r1
 801533e:	68b9      	ldr	r1, [r7, #8]
 8015340:	68f8      	ldr	r0, [r7, #12]
 8015342:	f001 fe51 	bl	8016fe8 <ethernet_output>
 8015346:	4603      	mov	r3, r0
}
 8015348:	4618      	mov	r0, r3
 801534a:	3710      	adds	r7, #16
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}
 8015350:	200084ec 	.word	0x200084ec
 8015354:	0801b5a8 	.word	0x0801b5a8
 8015358:	0801b718 	.word	0x0801b718
 801535c:	0801b620 	.word	0x0801b620

08015360 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b08a      	sub	sp, #40	; 0x28
 8015364:	af02      	add	r7, sp, #8
 8015366:	60f8      	str	r0, [r7, #12]
 8015368:	60b9      	str	r1, [r7, #8]
 801536a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d106      	bne.n	8015384 <etharp_output+0x24>
 8015376:	4b73      	ldr	r3, [pc, #460]	; (8015544 <etharp_output+0x1e4>)
 8015378:	f240 321e 	movw	r2, #798	; 0x31e
 801537c:	4972      	ldr	r1, [pc, #456]	; (8015548 <etharp_output+0x1e8>)
 801537e:	4873      	ldr	r0, [pc, #460]	; (801554c <etharp_output+0x1ec>)
 8015380:	f002 f8a2 	bl	80174c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d106      	bne.n	8015398 <etharp_output+0x38>
 801538a:	4b6e      	ldr	r3, [pc, #440]	; (8015544 <etharp_output+0x1e4>)
 801538c:	f240 321f 	movw	r2, #799	; 0x31f
 8015390:	496f      	ldr	r1, [pc, #444]	; (8015550 <etharp_output+0x1f0>)
 8015392:	486e      	ldr	r0, [pc, #440]	; (801554c <etharp_output+0x1ec>)
 8015394:	f002 f898 	bl	80174c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d106      	bne.n	80153ac <etharp_output+0x4c>
 801539e:	4b69      	ldr	r3, [pc, #420]	; (8015544 <etharp_output+0x1e4>)
 80153a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80153a4:	496b      	ldr	r1, [pc, #428]	; (8015554 <etharp_output+0x1f4>)
 80153a6:	4869      	ldr	r0, [pc, #420]	; (801554c <etharp_output+0x1ec>)
 80153a8:	f002 f88e 	bl	80174c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	68f9      	ldr	r1, [r7, #12]
 80153b2:	4618      	mov	r0, r3
 80153b4:	f000 ff14 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 80153b8:	4603      	mov	r3, r0
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d002      	beq.n	80153c4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80153be:	4b66      	ldr	r3, [pc, #408]	; (8015558 <etharp_output+0x1f8>)
 80153c0:	61fb      	str	r3, [r7, #28]
 80153c2:	e0af      	b.n	8015524 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153cc:	2be0      	cmp	r3, #224	; 0xe0
 80153ce:	d118      	bne.n	8015402 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80153d0:	2301      	movs	r3, #1
 80153d2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80153d4:	2300      	movs	r3, #0
 80153d6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80153d8:	235e      	movs	r3, #94	; 0x5e
 80153da:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	3301      	adds	r3, #1
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153e6:	b2db      	uxtb	r3, r3
 80153e8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	3302      	adds	r3, #2
 80153ee:	781b      	ldrb	r3, [r3, #0]
 80153f0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	3303      	adds	r3, #3
 80153f6:	781b      	ldrb	r3, [r3, #0]
 80153f8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80153fa:	f107 0310 	add.w	r3, r7, #16
 80153fe:	61fb      	str	r3, [r7, #28]
 8015400:	e090      	b.n	8015524 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	681a      	ldr	r2, [r3, #0]
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	3304      	adds	r3, #4
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	405a      	eors	r2, r3
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	3308      	adds	r3, #8
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	4013      	ands	r3, r2
 8015416:	2b00      	cmp	r3, #0
 8015418:	d012      	beq.n	8015440 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015420:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015424:	4293      	cmp	r3, r2
 8015426:	d00b      	beq.n	8015440 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	330c      	adds	r3, #12
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d003      	beq.n	801543a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	330c      	adds	r3, #12
 8015436:	61bb      	str	r3, [r7, #24]
 8015438:	e002      	b.n	8015440 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801543a:	f06f 0303 	mvn.w	r3, #3
 801543e:	e07d      	b.n	801553c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015440:	4b46      	ldr	r3, [pc, #280]	; (801555c <etharp_output+0x1fc>)
 8015442:	781b      	ldrb	r3, [r3, #0]
 8015444:	4619      	mov	r1, r3
 8015446:	4a46      	ldr	r2, [pc, #280]	; (8015560 <etharp_output+0x200>)
 8015448:	460b      	mov	r3, r1
 801544a:	005b      	lsls	r3, r3, #1
 801544c:	440b      	add	r3, r1
 801544e:	00db      	lsls	r3, r3, #3
 8015450:	4413      	add	r3, r2
 8015452:	3314      	adds	r3, #20
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	2b01      	cmp	r3, #1
 8015458:	d925      	bls.n	80154a6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801545a:	4b40      	ldr	r3, [pc, #256]	; (801555c <etharp_output+0x1fc>)
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	4619      	mov	r1, r3
 8015460:	4a3f      	ldr	r2, [pc, #252]	; (8015560 <etharp_output+0x200>)
 8015462:	460b      	mov	r3, r1
 8015464:	005b      	lsls	r3, r3, #1
 8015466:	440b      	add	r3, r1
 8015468:	00db      	lsls	r3, r3, #3
 801546a:	4413      	add	r3, r2
 801546c:	3308      	adds	r3, #8
 801546e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015470:	68fa      	ldr	r2, [r7, #12]
 8015472:	429a      	cmp	r2, r3
 8015474:	d117      	bne.n	80154a6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	681a      	ldr	r2, [r3, #0]
 801547a:	4b38      	ldr	r3, [pc, #224]	; (801555c <etharp_output+0x1fc>)
 801547c:	781b      	ldrb	r3, [r3, #0]
 801547e:	4618      	mov	r0, r3
 8015480:	4937      	ldr	r1, [pc, #220]	; (8015560 <etharp_output+0x200>)
 8015482:	4603      	mov	r3, r0
 8015484:	005b      	lsls	r3, r3, #1
 8015486:	4403      	add	r3, r0
 8015488:	00db      	lsls	r3, r3, #3
 801548a:	440b      	add	r3, r1
 801548c:	3304      	adds	r3, #4
 801548e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015490:	429a      	cmp	r2, r3
 8015492:	d108      	bne.n	80154a6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015494:	4b31      	ldr	r3, [pc, #196]	; (801555c <etharp_output+0x1fc>)
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	461a      	mov	r2, r3
 801549a:	68b9      	ldr	r1, [r7, #8]
 801549c:	68f8      	ldr	r0, [r7, #12]
 801549e:	f7ff fec5 	bl	801522c <etharp_output_to_arp_index>
 80154a2:	4603      	mov	r3, r0
 80154a4:	e04a      	b.n	801553c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80154a6:	2300      	movs	r3, #0
 80154a8:	75fb      	strb	r3, [r7, #23]
 80154aa:	e031      	b.n	8015510 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80154ac:	7dfa      	ldrb	r2, [r7, #23]
 80154ae:	492c      	ldr	r1, [pc, #176]	; (8015560 <etharp_output+0x200>)
 80154b0:	4613      	mov	r3, r2
 80154b2:	005b      	lsls	r3, r3, #1
 80154b4:	4413      	add	r3, r2
 80154b6:	00db      	lsls	r3, r3, #3
 80154b8:	440b      	add	r3, r1
 80154ba:	3314      	adds	r3, #20
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d923      	bls.n	801550a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80154c2:	7dfa      	ldrb	r2, [r7, #23]
 80154c4:	4926      	ldr	r1, [pc, #152]	; (8015560 <etharp_output+0x200>)
 80154c6:	4613      	mov	r3, r2
 80154c8:	005b      	lsls	r3, r3, #1
 80154ca:	4413      	add	r3, r2
 80154cc:	00db      	lsls	r3, r3, #3
 80154ce:	440b      	add	r3, r1
 80154d0:	3308      	adds	r3, #8
 80154d2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80154d4:	68fa      	ldr	r2, [r7, #12]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d117      	bne.n	801550a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	6819      	ldr	r1, [r3, #0]
 80154de:	7dfa      	ldrb	r2, [r7, #23]
 80154e0:	481f      	ldr	r0, [pc, #124]	; (8015560 <etharp_output+0x200>)
 80154e2:	4613      	mov	r3, r2
 80154e4:	005b      	lsls	r3, r3, #1
 80154e6:	4413      	add	r3, r2
 80154e8:	00db      	lsls	r3, r3, #3
 80154ea:	4403      	add	r3, r0
 80154ec:	3304      	adds	r3, #4
 80154ee:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80154f0:	4299      	cmp	r1, r3
 80154f2:	d10a      	bne.n	801550a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80154f4:	4a19      	ldr	r2, [pc, #100]	; (801555c <etharp_output+0x1fc>)
 80154f6:	7dfb      	ldrb	r3, [r7, #23]
 80154f8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80154fa:	7dfb      	ldrb	r3, [r7, #23]
 80154fc:	461a      	mov	r2, r3
 80154fe:	68b9      	ldr	r1, [r7, #8]
 8015500:	68f8      	ldr	r0, [r7, #12]
 8015502:	f7ff fe93 	bl	801522c <etharp_output_to_arp_index>
 8015506:	4603      	mov	r3, r0
 8015508:	e018      	b.n	801553c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801550a:	7dfb      	ldrb	r3, [r7, #23]
 801550c:	3301      	adds	r3, #1
 801550e:	75fb      	strb	r3, [r7, #23]
 8015510:	7dfb      	ldrb	r3, [r7, #23]
 8015512:	2b09      	cmp	r3, #9
 8015514:	d9ca      	bls.n	80154ac <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015516:	68ba      	ldr	r2, [r7, #8]
 8015518:	69b9      	ldr	r1, [r7, #24]
 801551a:	68f8      	ldr	r0, [r7, #12]
 801551c:	f000 f822 	bl	8015564 <etharp_query>
 8015520:	4603      	mov	r3, r0
 8015522:	e00b      	b.n	801553c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801552a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801552e:	9300      	str	r3, [sp, #0]
 8015530:	69fb      	ldr	r3, [r7, #28]
 8015532:	68b9      	ldr	r1, [r7, #8]
 8015534:	68f8      	ldr	r0, [r7, #12]
 8015536:	f001 fd57 	bl	8016fe8 <ethernet_output>
 801553a:	4603      	mov	r3, r0
}
 801553c:	4618      	mov	r0, r3
 801553e:	3720      	adds	r7, #32
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}
 8015544:	0801b5a8 	.word	0x0801b5a8
 8015548:	0801b6f8 	.word	0x0801b6f8
 801554c:	0801b620 	.word	0x0801b620
 8015550:	0801b748 	.word	0x0801b748
 8015554:	0801b6e8 	.word	0x0801b6e8
 8015558:	0801bdb0 	.word	0x0801bdb0
 801555c:	200085dc 	.word	0x200085dc
 8015560:	200084ec 	.word	0x200084ec

08015564 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b08c      	sub	sp, #48	; 0x30
 8015568:	af02      	add	r7, sp, #8
 801556a:	60f8      	str	r0, [r7, #12]
 801556c:	60b9      	str	r1, [r7, #8]
 801556e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	332a      	adds	r3, #42	; 0x2a
 8015574:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015576:	23ff      	movs	r3, #255	; 0xff
 8015578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801557c:	2300      	movs	r3, #0
 801557e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	68f9      	ldr	r1, [r7, #12]
 8015586:	4618      	mov	r0, r3
 8015588:	f000 fe2a 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 801558c:	4603      	mov	r3, r0
 801558e:	2b00      	cmp	r3, #0
 8015590:	d10c      	bne.n	80155ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801559a:	2be0      	cmp	r3, #224	; 0xe0
 801559c:	d006      	beq.n	80155ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d003      	beq.n	80155ac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d102      	bne.n	80155b2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80155ac:	f06f 030f 	mvn.w	r3, #15
 80155b0:	e102      	b.n	80157b8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80155b2:	68fa      	ldr	r2, [r7, #12]
 80155b4:	2101      	movs	r1, #1
 80155b6:	68b8      	ldr	r0, [r7, #8]
 80155b8:	f7ff fb5c 	bl	8014c74 <etharp_find_entry>
 80155bc:	4603      	mov	r3, r0
 80155be:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80155c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	da02      	bge.n	80155ce <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80155c8:	8a7b      	ldrh	r3, [r7, #18]
 80155ca:	b25b      	sxtb	r3, r3
 80155cc:	e0f4      	b.n	80157b8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80155ce:	8a7b      	ldrh	r3, [r7, #18]
 80155d0:	2b7e      	cmp	r3, #126	; 0x7e
 80155d2:	d906      	bls.n	80155e2 <etharp_query+0x7e>
 80155d4:	4b7a      	ldr	r3, [pc, #488]	; (80157c0 <etharp_query+0x25c>)
 80155d6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80155da:	497a      	ldr	r1, [pc, #488]	; (80157c4 <etharp_query+0x260>)
 80155dc:	487a      	ldr	r0, [pc, #488]	; (80157c8 <etharp_query+0x264>)
 80155de:	f001 ff73 	bl	80174c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80155e2:	8a7b      	ldrh	r3, [r7, #18]
 80155e4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80155e6:	7c7a      	ldrb	r2, [r7, #17]
 80155e8:	4978      	ldr	r1, [pc, #480]	; (80157cc <etharp_query+0x268>)
 80155ea:	4613      	mov	r3, r2
 80155ec:	005b      	lsls	r3, r3, #1
 80155ee:	4413      	add	r3, r2
 80155f0:	00db      	lsls	r3, r3, #3
 80155f2:	440b      	add	r3, r1
 80155f4:	3314      	adds	r3, #20
 80155f6:	781b      	ldrb	r3, [r3, #0]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d115      	bne.n	8015628 <etharp_query+0xc4>
    is_new_entry = 1;
 80155fc:	2301      	movs	r3, #1
 80155fe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015600:	7c7a      	ldrb	r2, [r7, #17]
 8015602:	4972      	ldr	r1, [pc, #456]	; (80157cc <etharp_query+0x268>)
 8015604:	4613      	mov	r3, r2
 8015606:	005b      	lsls	r3, r3, #1
 8015608:	4413      	add	r3, r2
 801560a:	00db      	lsls	r3, r3, #3
 801560c:	440b      	add	r3, r1
 801560e:	3314      	adds	r3, #20
 8015610:	2201      	movs	r2, #1
 8015612:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015614:	7c7a      	ldrb	r2, [r7, #17]
 8015616:	496d      	ldr	r1, [pc, #436]	; (80157cc <etharp_query+0x268>)
 8015618:	4613      	mov	r3, r2
 801561a:	005b      	lsls	r3, r3, #1
 801561c:	4413      	add	r3, r2
 801561e:	00db      	lsls	r3, r3, #3
 8015620:	440b      	add	r3, r1
 8015622:	3308      	adds	r3, #8
 8015624:	68fa      	ldr	r2, [r7, #12]
 8015626:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015628:	7c7a      	ldrb	r2, [r7, #17]
 801562a:	4968      	ldr	r1, [pc, #416]	; (80157cc <etharp_query+0x268>)
 801562c:	4613      	mov	r3, r2
 801562e:	005b      	lsls	r3, r3, #1
 8015630:	4413      	add	r3, r2
 8015632:	00db      	lsls	r3, r3, #3
 8015634:	440b      	add	r3, r1
 8015636:	3314      	adds	r3, #20
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	2b01      	cmp	r3, #1
 801563c:	d011      	beq.n	8015662 <etharp_query+0xfe>
 801563e:	7c7a      	ldrb	r2, [r7, #17]
 8015640:	4962      	ldr	r1, [pc, #392]	; (80157cc <etharp_query+0x268>)
 8015642:	4613      	mov	r3, r2
 8015644:	005b      	lsls	r3, r3, #1
 8015646:	4413      	add	r3, r2
 8015648:	00db      	lsls	r3, r3, #3
 801564a:	440b      	add	r3, r1
 801564c:	3314      	adds	r3, #20
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	2b01      	cmp	r3, #1
 8015652:	d806      	bhi.n	8015662 <etharp_query+0xfe>
 8015654:	4b5a      	ldr	r3, [pc, #360]	; (80157c0 <etharp_query+0x25c>)
 8015656:	f240 32cf 	movw	r2, #975	; 0x3cf
 801565a:	495d      	ldr	r1, [pc, #372]	; (80157d0 <etharp_query+0x26c>)
 801565c:	485a      	ldr	r0, [pc, #360]	; (80157c8 <etharp_query+0x264>)
 801565e:	f001 ff33 	bl	80174c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015662:	6a3b      	ldr	r3, [r7, #32]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d102      	bne.n	801566e <etharp_query+0x10a>
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d10c      	bne.n	8015688 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801566e:	68b9      	ldr	r1, [r7, #8]
 8015670:	68f8      	ldr	r0, [r7, #12]
 8015672:	f000 f963 	bl	801593c <etharp_request>
 8015676:	4603      	mov	r3, r0
 8015678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d102      	bne.n	8015688 <etharp_query+0x124>
      return result;
 8015682:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015686:	e097      	b.n	80157b8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d106      	bne.n	801569c <etharp_query+0x138>
 801568e:	4b4c      	ldr	r3, [pc, #304]	; (80157c0 <etharp_query+0x25c>)
 8015690:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015694:	494f      	ldr	r1, [pc, #316]	; (80157d4 <etharp_query+0x270>)
 8015696:	484c      	ldr	r0, [pc, #304]	; (80157c8 <etharp_query+0x264>)
 8015698:	f001 ff16 	bl	80174c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801569c:	7c7a      	ldrb	r2, [r7, #17]
 801569e:	494b      	ldr	r1, [pc, #300]	; (80157cc <etharp_query+0x268>)
 80156a0:	4613      	mov	r3, r2
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	4413      	add	r3, r2
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	440b      	add	r3, r1
 80156aa:	3314      	adds	r3, #20
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	2b01      	cmp	r3, #1
 80156b0:	d918      	bls.n	80156e4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80156b2:	4a49      	ldr	r2, [pc, #292]	; (80157d8 <etharp_query+0x274>)
 80156b4:	7c7b      	ldrb	r3, [r7, #17]
 80156b6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80156b8:	7c7a      	ldrb	r2, [r7, #17]
 80156ba:	4613      	mov	r3, r2
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	4413      	add	r3, r2
 80156c0:	00db      	lsls	r3, r3, #3
 80156c2:	3308      	adds	r3, #8
 80156c4:	4a41      	ldr	r2, [pc, #260]	; (80157cc <etharp_query+0x268>)
 80156c6:	4413      	add	r3, r2
 80156c8:	1d1a      	adds	r2, r3, #4
 80156ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80156ce:	9300      	str	r3, [sp, #0]
 80156d0:	4613      	mov	r3, r2
 80156d2:	697a      	ldr	r2, [r7, #20]
 80156d4:	6879      	ldr	r1, [r7, #4]
 80156d6:	68f8      	ldr	r0, [r7, #12]
 80156d8:	f001 fc86 	bl	8016fe8 <ethernet_output>
 80156dc:	4603      	mov	r3, r0
 80156de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156e2:	e067      	b.n	80157b4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80156e4:	7c7a      	ldrb	r2, [r7, #17]
 80156e6:	4939      	ldr	r1, [pc, #228]	; (80157cc <etharp_query+0x268>)
 80156e8:	4613      	mov	r3, r2
 80156ea:	005b      	lsls	r3, r3, #1
 80156ec:	4413      	add	r3, r2
 80156ee:	00db      	lsls	r3, r3, #3
 80156f0:	440b      	add	r3, r1
 80156f2:	3314      	adds	r3, #20
 80156f4:	781b      	ldrb	r3, [r3, #0]
 80156f6:	2b01      	cmp	r3, #1
 80156f8:	d15c      	bne.n	80157b4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80156fa:	2300      	movs	r3, #0
 80156fc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015702:	e01c      	b.n	801573e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	895a      	ldrh	r2, [r3, #10]
 8015708:	69fb      	ldr	r3, [r7, #28]
 801570a:	891b      	ldrh	r3, [r3, #8]
 801570c:	429a      	cmp	r2, r3
 801570e:	d10a      	bne.n	8015726 <etharp_query+0x1c2>
 8015710:	69fb      	ldr	r3, [r7, #28]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d006      	beq.n	8015726 <etharp_query+0x1c2>
 8015718:	4b29      	ldr	r3, [pc, #164]	; (80157c0 <etharp_query+0x25c>)
 801571a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801571e:	492f      	ldr	r1, [pc, #188]	; (80157dc <etharp_query+0x278>)
 8015720:	4829      	ldr	r0, [pc, #164]	; (80157c8 <etharp_query+0x264>)
 8015722:	f001 fed1 	bl	80174c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015726:	69fb      	ldr	r3, [r7, #28]
 8015728:	7b1b      	ldrb	r3, [r3, #12]
 801572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801572e:	2b00      	cmp	r3, #0
 8015730:	d002      	beq.n	8015738 <etharp_query+0x1d4>
        copy_needed = 1;
 8015732:	2301      	movs	r3, #1
 8015734:	61bb      	str	r3, [r7, #24]
        break;
 8015736:	e005      	b.n	8015744 <etharp_query+0x1e0>
      }
      p = p->next;
 8015738:	69fb      	ldr	r3, [r7, #28]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801573e:	69fb      	ldr	r3, [r7, #28]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d1df      	bne.n	8015704 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8015744:	69bb      	ldr	r3, [r7, #24]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d007      	beq.n	801575a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015750:	200e      	movs	r0, #14
 8015752:	f7f6 fc1d 	bl	800bf90 <pbuf_clone>
 8015756:	61f8      	str	r0, [r7, #28]
 8015758:	e004      	b.n	8015764 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801575e:	69f8      	ldr	r0, [r7, #28]
 8015760:	f7f6 fa44 	bl	800bbec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d021      	beq.n	80157ae <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801576a:	7c7a      	ldrb	r2, [r7, #17]
 801576c:	4917      	ldr	r1, [pc, #92]	; (80157cc <etharp_query+0x268>)
 801576e:	4613      	mov	r3, r2
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	4413      	add	r3, r2
 8015774:	00db      	lsls	r3, r3, #3
 8015776:	440b      	add	r3, r1
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d00a      	beq.n	8015794 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801577e:	7c7a      	ldrb	r2, [r7, #17]
 8015780:	4912      	ldr	r1, [pc, #72]	; (80157cc <etharp_query+0x268>)
 8015782:	4613      	mov	r3, r2
 8015784:	005b      	lsls	r3, r3, #1
 8015786:	4413      	add	r3, r2
 8015788:	00db      	lsls	r3, r3, #3
 801578a:	440b      	add	r3, r1
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	4618      	mov	r0, r3
 8015790:	f7f6 f986 	bl	800baa0 <pbuf_free>
      }
      arp_table[i].q = p;
 8015794:	7c7a      	ldrb	r2, [r7, #17]
 8015796:	490d      	ldr	r1, [pc, #52]	; (80157cc <etharp_query+0x268>)
 8015798:	4613      	mov	r3, r2
 801579a:	005b      	lsls	r3, r3, #1
 801579c:	4413      	add	r3, r2
 801579e:	00db      	lsls	r3, r3, #3
 80157a0:	440b      	add	r3, r1
 80157a2:	69fa      	ldr	r2, [r7, #28]
 80157a4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80157a6:	2300      	movs	r3, #0
 80157a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157ac:	e002      	b.n	80157b4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80157ae:	23ff      	movs	r3, #255	; 0xff
 80157b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80157b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3728      	adds	r7, #40	; 0x28
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	0801b5a8 	.word	0x0801b5a8
 80157c4:	0801b754 	.word	0x0801b754
 80157c8:	0801b620 	.word	0x0801b620
 80157cc:	200084ec 	.word	0x200084ec
 80157d0:	0801b764 	.word	0x0801b764
 80157d4:	0801b748 	.word	0x0801b748
 80157d8:	200085dc 	.word	0x200085dc
 80157dc:	0801b78c 	.word	0x0801b78c

080157e0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b08a      	sub	sp, #40	; 0x28
 80157e4:	af02      	add	r7, sp, #8
 80157e6:	60f8      	str	r0, [r7, #12]
 80157e8:	60b9      	str	r1, [r7, #8]
 80157ea:	607a      	str	r2, [r7, #4]
 80157ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80157ee:	2300      	movs	r3, #0
 80157f0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d106      	bne.n	8015806 <etharp_raw+0x26>
 80157f8:	4b3a      	ldr	r3, [pc, #232]	; (80158e4 <etharp_raw+0x104>)
 80157fa:	f240 4257 	movw	r2, #1111	; 0x457
 80157fe:	493a      	ldr	r1, [pc, #232]	; (80158e8 <etharp_raw+0x108>)
 8015800:	483a      	ldr	r0, [pc, #232]	; (80158ec <etharp_raw+0x10c>)
 8015802:	f001 fe61 	bl	80174c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015806:	f44f 7220 	mov.w	r2, #640	; 0x280
 801580a:	211c      	movs	r1, #28
 801580c:	200e      	movs	r0, #14
 801580e:	f7f5 fe67 	bl	800b4e0 <pbuf_alloc>
 8015812:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015814:	69bb      	ldr	r3, [r7, #24]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d102      	bne.n	8015820 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801581a:	f04f 33ff 	mov.w	r3, #4294967295
 801581e:	e05d      	b.n	80158dc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015820:	69bb      	ldr	r3, [r7, #24]
 8015822:	895b      	ldrh	r3, [r3, #10]
 8015824:	2b1b      	cmp	r3, #27
 8015826:	d806      	bhi.n	8015836 <etharp_raw+0x56>
 8015828:	4b2e      	ldr	r3, [pc, #184]	; (80158e4 <etharp_raw+0x104>)
 801582a:	f240 4263 	movw	r2, #1123	; 0x463
 801582e:	4930      	ldr	r1, [pc, #192]	; (80158f0 <etharp_raw+0x110>)
 8015830:	482e      	ldr	r0, [pc, #184]	; (80158ec <etharp_raw+0x10c>)
 8015832:	f001 fe49 	bl	80174c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801583c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801583e:	4618      	mov	r0, r3
 8015840:	f7f4 fd7a 	bl	800a338 <lwip_htons>
 8015844:	4603      	mov	r3, r0
 8015846:	461a      	mov	r2, r3
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015852:	2b06      	cmp	r3, #6
 8015854:	d006      	beq.n	8015864 <etharp_raw+0x84>
 8015856:	4b23      	ldr	r3, [pc, #140]	; (80158e4 <etharp_raw+0x104>)
 8015858:	f240 426a 	movw	r2, #1130	; 0x46a
 801585c:	4925      	ldr	r1, [pc, #148]	; (80158f4 <etharp_raw+0x114>)
 801585e:	4823      	ldr	r0, [pc, #140]	; (80158ec <etharp_raw+0x10c>)
 8015860:	f001 fe32 	bl	80174c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	3308      	adds	r3, #8
 8015868:	2206      	movs	r2, #6
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	4618      	mov	r0, r3
 801586e:	f001 fe18 	bl	80174a2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	3312      	adds	r3, #18
 8015876:	2206      	movs	r2, #6
 8015878:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801587a:	4618      	mov	r0, r3
 801587c:	f001 fe11 	bl	80174a2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	330e      	adds	r3, #14
 8015884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015886:	6812      	ldr	r2, [r2, #0]
 8015888:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	3318      	adds	r3, #24
 801588e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015890:	6812      	ldr	r2, [r2, #0]
 8015892:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	2200      	movs	r2, #0
 8015898:	701a      	strb	r2, [r3, #0]
 801589a:	2200      	movs	r2, #0
 801589c:	f042 0201 	orr.w	r2, r2, #1
 80158a0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80158a2:	697b      	ldr	r3, [r7, #20]
 80158a4:	2200      	movs	r2, #0
 80158a6:	f042 0208 	orr.w	r2, r2, #8
 80158aa:	709a      	strb	r2, [r3, #2]
 80158ac:	2200      	movs	r2, #0
 80158ae:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	2206      	movs	r2, #6
 80158b4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80158b6:	697b      	ldr	r3, [r7, #20]
 80158b8:	2204      	movs	r2, #4
 80158ba:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80158bc:	f640 0306 	movw	r3, #2054	; 0x806
 80158c0:	9300      	str	r3, [sp, #0]
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	68ba      	ldr	r2, [r7, #8]
 80158c6:	69b9      	ldr	r1, [r7, #24]
 80158c8:	68f8      	ldr	r0, [r7, #12]
 80158ca:	f001 fb8d 	bl	8016fe8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80158ce:	69b8      	ldr	r0, [r7, #24]
 80158d0:	f7f6 f8e6 	bl	800baa0 <pbuf_free>
  p = NULL;
 80158d4:	2300      	movs	r3, #0
 80158d6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80158d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3720      	adds	r7, #32
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	0801b5a8 	.word	0x0801b5a8
 80158e8:	0801b6f8 	.word	0x0801b6f8
 80158ec:	0801b620 	.word	0x0801b620
 80158f0:	0801b7a8 	.word	0x0801b7a8
 80158f4:	0801b7dc 	.word	0x0801b7dc

080158f8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b088      	sub	sp, #32
 80158fc:	af04      	add	r7, sp, #16
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015914:	2201      	movs	r2, #1
 8015916:	9203      	str	r2, [sp, #12]
 8015918:	68ba      	ldr	r2, [r7, #8]
 801591a:	9202      	str	r2, [sp, #8]
 801591c:	4a06      	ldr	r2, [pc, #24]	; (8015938 <etharp_request_dst+0x40>)
 801591e:	9201      	str	r2, [sp, #4]
 8015920:	9300      	str	r3, [sp, #0]
 8015922:	4603      	mov	r3, r0
 8015924:	687a      	ldr	r2, [r7, #4]
 8015926:	68f8      	ldr	r0, [r7, #12]
 8015928:	f7ff ff5a 	bl	80157e0 <etharp_raw>
 801592c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801592e:	4618      	mov	r0, r3
 8015930:	3710      	adds	r7, #16
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}
 8015936:	bf00      	nop
 8015938:	0801bdb8 	.word	0x0801bdb8

0801593c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015946:	4a05      	ldr	r2, [pc, #20]	; (801595c <etharp_request+0x20>)
 8015948:	6839      	ldr	r1, [r7, #0]
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f7ff ffd4 	bl	80158f8 <etharp_request_dst>
 8015950:	4603      	mov	r3, r0
}
 8015952:	4618      	mov	r0, r3
 8015954:	3708      	adds	r7, #8
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
 801595a:	bf00      	nop
 801595c:	0801bdb0 	.word	0x0801bdb0

08015960 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b08e      	sub	sp, #56	; 0x38
 8015964:	af04      	add	r7, sp, #16
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801596a:	4b79      	ldr	r3, [pc, #484]	; (8015b50 <icmp_input+0x1f0>)
 801596c:	689b      	ldr	r3, [r3, #8]
 801596e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	f003 030f 	and.w	r3, r3, #15
 8015978:	b2db      	uxtb	r3, r3
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	b2db      	uxtb	r3, r3
 801597e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015982:	2b13      	cmp	r3, #19
 8015984:	f240 80cd 	bls.w	8015b22 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	895b      	ldrh	r3, [r3, #10]
 801598c:	2b03      	cmp	r3, #3
 801598e:	f240 80ca 	bls.w	8015b26 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801599c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	f000 80b7 	beq.w	8015b14 <icmp_input+0x1b4>
 80159a6:	2b08      	cmp	r3, #8
 80159a8:	f040 80b7 	bne.w	8015b1a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80159ac:	4b69      	ldr	r3, [pc, #420]	; (8015b54 <icmp_input+0x1f4>)
 80159ae:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80159b0:	4b67      	ldr	r3, [pc, #412]	; (8015b50 <icmp_input+0x1f0>)
 80159b2:	695b      	ldr	r3, [r3, #20]
 80159b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159b8:	2be0      	cmp	r3, #224	; 0xe0
 80159ba:	f000 80bb 	beq.w	8015b34 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80159be:	4b64      	ldr	r3, [pc, #400]	; (8015b50 <icmp_input+0x1f0>)
 80159c0:	695a      	ldr	r2, [r3, #20]
 80159c2:	4b63      	ldr	r3, [pc, #396]	; (8015b50 <icmp_input+0x1f0>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	4619      	mov	r1, r3
 80159c8:	4610      	mov	r0, r2
 80159ca:	f000 fc09 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 80159ce:	4603      	mov	r3, r0
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	f040 80b1 	bne.w	8015b38 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	891b      	ldrh	r3, [r3, #8]
 80159da:	2b07      	cmp	r3, #7
 80159dc:	f240 80a5 	bls.w	8015b2a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80159e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159e2:	330e      	adds	r3, #14
 80159e4:	4619      	mov	r1, r3
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f7f5 ffc4 	bl	800b974 <pbuf_add_header>
 80159ec:	4603      	mov	r3, r0
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d04b      	beq.n	8015a8a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	891a      	ldrh	r2, [r3, #8]
 80159f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159f8:	4413      	add	r3, r2
 80159fa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	891b      	ldrh	r3, [r3, #8]
 8015a00:	8b7a      	ldrh	r2, [r7, #26]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	f0c0 809a 	bcc.w	8015b3c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015a08:	8b7b      	ldrh	r3, [r7, #26]
 8015a0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a0e:	4619      	mov	r1, r3
 8015a10:	200e      	movs	r0, #14
 8015a12:	f7f5 fd65 	bl	800b4e0 <pbuf_alloc>
 8015a16:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	f000 8090 	beq.w	8015b40 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	895b      	ldrh	r3, [r3, #10]
 8015a24:	461a      	mov	r2, r3
 8015a26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a28:	3308      	adds	r3, #8
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d203      	bcs.n	8015a36 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015a2e:	6978      	ldr	r0, [r7, #20]
 8015a30:	f7f6 f836 	bl	800baa0 <pbuf_free>
          goto icmperr;
 8015a34:	e085      	b.n	8015b42 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f001 fd2f 	bl	80174a2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015a44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a46:	4619      	mov	r1, r3
 8015a48:	6978      	ldr	r0, [r7, #20]
 8015a4a:	f7f5 ffa3 	bl	800b994 <pbuf_remove_header>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d009      	beq.n	8015a68 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015a54:	4b40      	ldr	r3, [pc, #256]	; (8015b58 <icmp_input+0x1f8>)
 8015a56:	22b6      	movs	r2, #182	; 0xb6
 8015a58:	4940      	ldr	r1, [pc, #256]	; (8015b5c <icmp_input+0x1fc>)
 8015a5a:	4841      	ldr	r0, [pc, #260]	; (8015b60 <icmp_input+0x200>)
 8015a5c:	f001 fd34 	bl	80174c8 <iprintf>
          pbuf_free(r);
 8015a60:	6978      	ldr	r0, [r7, #20]
 8015a62:	f7f6 f81d 	bl	800baa0 <pbuf_free>
          goto icmperr;
 8015a66:	e06c      	b.n	8015b42 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015a68:	6879      	ldr	r1, [r7, #4]
 8015a6a:	6978      	ldr	r0, [r7, #20]
 8015a6c:	f7f6 f94c 	bl	800bd08 <pbuf_copy>
 8015a70:	4603      	mov	r3, r0
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d003      	beq.n	8015a7e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015a76:	6978      	ldr	r0, [r7, #20]
 8015a78:	f7f6 f812 	bl	800baa0 <pbuf_free>
          goto icmperr;
 8015a7c:	e061      	b.n	8015b42 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f7f6 f80e 	bl	800baa0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	607b      	str	r3, [r7, #4]
 8015a88:	e00f      	b.n	8015aaa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015a8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a8c:	330e      	adds	r3, #14
 8015a8e:	4619      	mov	r1, r3
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f7f5 ff7f 	bl	800b994 <pbuf_remove_header>
 8015a96:	4603      	mov	r3, r0
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d006      	beq.n	8015aaa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015a9c:	4b2e      	ldr	r3, [pc, #184]	; (8015b58 <icmp_input+0x1f8>)
 8015a9e:	22c7      	movs	r2, #199	; 0xc7
 8015aa0:	4930      	ldr	r1, [pc, #192]	; (8015b64 <icmp_input+0x204>)
 8015aa2:	482f      	ldr	r0, [pc, #188]	; (8015b60 <icmp_input+0x200>)
 8015aa4:	f001 fd10 	bl	80174c8 <iprintf>
          goto icmperr;
 8015aa8:	e04b      	b.n	8015b42 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	6878      	ldr	r0, [r7, #4]
 8015ab6:	f7f5 ff5d 	bl	800b974 <pbuf_add_header>
 8015aba:	4603      	mov	r3, r0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d12b      	bne.n	8015b18 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	685b      	ldr	r3, [r3, #4]
 8015ac4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015ac6:	69fb      	ldr	r3, [r7, #28]
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015ace:	4b20      	ldr	r3, [pc, #128]	; (8015b50 <icmp_input+0x1f0>)
 8015ad0:	691a      	ldr	r2, [r3, #16]
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015ad6:	693b      	ldr	r3, [r7, #16]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	2200      	movs	r2, #0
 8015ae0:	709a      	strb	r2, [r3, #2]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	22ff      	movs	r2, #255	; 0xff
 8015aea:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	2200      	movs	r2, #0
 8015af0:	729a      	strb	r2, [r3, #10]
 8015af2:	2200      	movs	r2, #0
 8015af4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	9302      	str	r3, [sp, #8]
 8015afa:	2301      	movs	r3, #1
 8015afc:	9301      	str	r3, [sp, #4]
 8015afe:	2300      	movs	r3, #0
 8015b00:	9300      	str	r3, [sp, #0]
 8015b02:	23ff      	movs	r3, #255	; 0xff
 8015b04:	2200      	movs	r2, #0
 8015b06:	69f9      	ldr	r1, [r7, #28]
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f000 fa91 	bl	8016030 <ip4_output_if>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015b12:	e001      	b.n	8015b18 <icmp_input+0x1b8>
      break;
 8015b14:	bf00      	nop
 8015b16:	e000      	b.n	8015b1a <icmp_input+0x1ba>
      break;
 8015b18:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f7f5 ffc0 	bl	800baa0 <pbuf_free>
  return;
 8015b20:	e013      	b.n	8015b4a <icmp_input+0x1ea>
    goto lenerr;
 8015b22:	bf00      	nop
 8015b24:	e002      	b.n	8015b2c <icmp_input+0x1cc>
    goto lenerr;
 8015b26:	bf00      	nop
 8015b28:	e000      	b.n	8015b2c <icmp_input+0x1cc>
        goto lenerr;
 8015b2a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f7f5 ffb7 	bl	800baa0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b32:	e00a      	b.n	8015b4a <icmp_input+0x1ea>
        goto icmperr;
 8015b34:	bf00      	nop
 8015b36:	e004      	b.n	8015b42 <icmp_input+0x1e2>
        goto icmperr;
 8015b38:	bf00      	nop
 8015b3a:	e002      	b.n	8015b42 <icmp_input+0x1e2>
          goto icmperr;
 8015b3c:	bf00      	nop
 8015b3e:	e000      	b.n	8015b42 <icmp_input+0x1e2>
          goto icmperr;
 8015b40:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	f7f5 ffac 	bl	800baa0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b48:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015b4a:	3728      	adds	r7, #40	; 0x28
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}
 8015b50:	2000bbf8 	.word	0x2000bbf8
 8015b54:	2000bc0c 	.word	0x2000bc0c
 8015b58:	0801b820 	.word	0x0801b820
 8015b5c:	0801b858 	.word	0x0801b858
 8015b60:	0801b890 	.word	0x0801b890
 8015b64:	0801b8b8 	.word	0x0801b8b8

08015b68 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	460b      	mov	r3, r1
 8015b72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015b74:	78fb      	ldrb	r3, [r7, #3]
 8015b76:	461a      	mov	r2, r3
 8015b78:	2103      	movs	r1, #3
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f000 f814 	bl	8015ba8 <icmp_send_response>
}
 8015b80:	bf00      	nop
 8015b82:	3708      	adds	r7, #8
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b082      	sub	sp, #8
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	460b      	mov	r3, r1
 8015b92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015b94:	78fb      	ldrb	r3, [r7, #3]
 8015b96:	461a      	mov	r2, r3
 8015b98:	210b      	movs	r1, #11
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	f000 f804 	bl	8015ba8 <icmp_send_response>
}
 8015ba0:	bf00      	nop
 8015ba2:	3708      	adds	r7, #8
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}

08015ba8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b08c      	sub	sp, #48	; 0x30
 8015bac:	af04      	add	r7, sp, #16
 8015bae:	6078      	str	r0, [r7, #4]
 8015bb0:	460b      	mov	r3, r1
 8015bb2:	70fb      	strb	r3, [r7, #3]
 8015bb4:	4613      	mov	r3, r2
 8015bb6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015bb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015bbc:	2124      	movs	r1, #36	; 0x24
 8015bbe:	2022      	movs	r0, #34	; 0x22
 8015bc0:	f7f5 fc8e 	bl	800b4e0 <pbuf_alloc>
 8015bc4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d04c      	beq.n	8015c66 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015bcc:	69fb      	ldr	r3, [r7, #28]
 8015bce:	895b      	ldrh	r3, [r3, #10]
 8015bd0:	2b23      	cmp	r3, #35	; 0x23
 8015bd2:	d806      	bhi.n	8015be2 <icmp_send_response+0x3a>
 8015bd4:	4b26      	ldr	r3, [pc, #152]	; (8015c70 <icmp_send_response+0xc8>)
 8015bd6:	f240 1269 	movw	r2, #361	; 0x169
 8015bda:	4926      	ldr	r1, [pc, #152]	; (8015c74 <icmp_send_response+0xcc>)
 8015bdc:	4826      	ldr	r0, [pc, #152]	; (8015c78 <icmp_send_response+0xd0>)
 8015bde:	f001 fc73 	bl	80174c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015be8:	69fb      	ldr	r3, [r7, #28]
 8015bea:	685b      	ldr	r3, [r3, #4]
 8015bec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	78fa      	ldrb	r2, [r7, #3]
 8015bf2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	78ba      	ldrb	r2, [r7, #2]
 8015bf8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	711a      	strb	r2, [r3, #4]
 8015c00:	2200      	movs	r2, #0
 8015c02:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	2200      	movs	r2, #0
 8015c08:	719a      	strb	r2, [r3, #6]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015c0e:	69fb      	ldr	r3, [r7, #28]
 8015c10:	685b      	ldr	r3, [r3, #4]
 8015c12:	f103 0008 	add.w	r0, r3, #8
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	221c      	movs	r2, #28
 8015c1c:	4619      	mov	r1, r3
 8015c1e:	f001 fc40 	bl	80174a2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015c28:	f107 030c 	add.w	r3, r7, #12
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f000 f825 	bl	8015c7c <ip4_route>
 8015c32:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d011      	beq.n	8015c5e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	709a      	strb	r2, [r3, #2]
 8015c40:	2200      	movs	r2, #0
 8015c42:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015c44:	f107 020c 	add.w	r2, r7, #12
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	9302      	str	r3, [sp, #8]
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	9301      	str	r3, [sp, #4]
 8015c50:	2300      	movs	r3, #0
 8015c52:	9300      	str	r3, [sp, #0]
 8015c54:	23ff      	movs	r3, #255	; 0xff
 8015c56:	2100      	movs	r1, #0
 8015c58:	69f8      	ldr	r0, [r7, #28]
 8015c5a:	f000 f9e9 	bl	8016030 <ip4_output_if>
  }
  pbuf_free(q);
 8015c5e:	69f8      	ldr	r0, [r7, #28]
 8015c60:	f7f5 ff1e 	bl	800baa0 <pbuf_free>
 8015c64:	e000      	b.n	8015c68 <icmp_send_response+0xc0>
    return;
 8015c66:	bf00      	nop
}
 8015c68:	3720      	adds	r7, #32
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	0801b820 	.word	0x0801b820
 8015c74:	0801b8ec 	.word	0x0801b8ec
 8015c78:	0801b890 	.word	0x0801b890

08015c7c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	b085      	sub	sp, #20
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015c84:	4b33      	ldr	r3, [pc, #204]	; (8015d54 <ip4_route+0xd8>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	60fb      	str	r3, [r7, #12]
 8015c8a:	e036      	b.n	8015cfa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c92:	f003 0301 	and.w	r3, r3, #1
 8015c96:	b2db      	uxtb	r3, r3
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d02b      	beq.n	8015cf4 <ip4_route+0x78>
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ca2:	089b      	lsrs	r3, r3, #2
 8015ca4:	f003 0301 	and.w	r3, r3, #1
 8015ca8:	b2db      	uxtb	r3, r3
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d022      	beq.n	8015cf4 <ip4_route+0x78>
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	3304      	adds	r3, #4
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d01d      	beq.n	8015cf4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	3304      	adds	r3, #4
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	405a      	eors	r2, r3
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	3308      	adds	r3, #8
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	4013      	ands	r3, r2
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d101      	bne.n	8015cd4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	e038      	b.n	8015d46 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015cda:	f003 0302 	and.w	r3, r3, #2
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d108      	bne.n	8015cf4 <ip4_route+0x78>
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681a      	ldr	r2, [r3, #0]
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	330c      	adds	r3, #12
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d101      	bne.n	8015cf4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	e028      	b.n	8015d46 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	60fb      	str	r3, [r7, #12]
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d1c5      	bne.n	8015c8c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015d00:	4b15      	ldr	r3, [pc, #84]	; (8015d58 <ip4_route+0xdc>)
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d01a      	beq.n	8015d3e <ip4_route+0xc2>
 8015d08:	4b13      	ldr	r3, [pc, #76]	; (8015d58 <ip4_route+0xdc>)
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d10:	f003 0301 	and.w	r3, r3, #1
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d012      	beq.n	8015d3e <ip4_route+0xc2>
 8015d18:	4b0f      	ldr	r3, [pc, #60]	; (8015d58 <ip4_route+0xdc>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d20:	f003 0304 	and.w	r3, r3, #4
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d00a      	beq.n	8015d3e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015d28:	4b0b      	ldr	r3, [pc, #44]	; (8015d58 <ip4_route+0xdc>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	3304      	adds	r3, #4
 8015d2e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d004      	beq.n	8015d3e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	b2db      	uxtb	r3, r3
 8015d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8015d3c:	d101      	bne.n	8015d42 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	e001      	b.n	8015d46 <ip4_route+0xca>
  }

  return netif_default;
 8015d42:	4b05      	ldr	r3, [pc, #20]	; (8015d58 <ip4_route+0xdc>)
 8015d44:	681b      	ldr	r3, [r3, #0]
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3714      	adds	r7, #20
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d50:	4770      	bx	lr
 8015d52:	bf00      	nop
 8015d54:	2000f31c 	.word	0x2000f31c
 8015d58:	2000f320 	.word	0x2000f320

08015d5c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d6a:	f003 0301 	and.w	r3, r3, #1
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d016      	beq.n	8015da2 <ip4_input_accept+0x46>
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	3304      	adds	r3, #4
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d011      	beq.n	8015da2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d7e:	4b0b      	ldr	r3, [pc, #44]	; (8015dac <ip4_input_accept+0x50>)
 8015d80:	695a      	ldr	r2, [r3, #20]
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	3304      	adds	r3, #4
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	429a      	cmp	r2, r3
 8015d8a:	d008      	beq.n	8015d9e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015d8c:	4b07      	ldr	r3, [pc, #28]	; (8015dac <ip4_input_accept+0x50>)
 8015d8e:	695b      	ldr	r3, [r3, #20]
 8015d90:	6879      	ldr	r1, [r7, #4]
 8015d92:	4618      	mov	r0, r3
 8015d94:	f000 fa24 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 8015d98:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d001      	beq.n	8015da2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015d9e:	2301      	movs	r3, #1
 8015da0:	e000      	b.n	8015da4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015da2:	2300      	movs	r3, #0
}
 8015da4:	4618      	mov	r0, r3
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	2000bbf8 	.word	0x2000bbf8

08015db0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b088      	sub	sp, #32
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
 8015db8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015dba:	2301      	movs	r3, #1
 8015dbc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015dc4:	69fb      	ldr	r3, [r7, #28]
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	091b      	lsrs	r3, r3, #4
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	2b04      	cmp	r3, #4
 8015dce:	d004      	beq.n	8015dda <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f7f5 fe65 	bl	800baa0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	e121      	b.n	801601e <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015dda:	69fb      	ldr	r3, [r7, #28]
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	f003 030f 	and.w	r3, r3, #15
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	009b      	lsls	r3, r3, #2
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015dea:	69fb      	ldr	r3, [r7, #28]
 8015dec:	885b      	ldrh	r3, [r3, #2]
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7f4 faa1 	bl	800a338 <lwip_htons>
 8015df6:	4603      	mov	r3, r0
 8015df8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	891b      	ldrh	r3, [r3, #8]
 8015dfe:	8a3a      	ldrh	r2, [r7, #16]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d204      	bcs.n	8015e0e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015e04:	8a3b      	ldrh	r3, [r7, #16]
 8015e06:	4619      	mov	r1, r3
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f7f5 fcc3 	bl	800b794 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	895b      	ldrh	r3, [r3, #10]
 8015e12:	8a7a      	ldrh	r2, [r7, #18]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d807      	bhi.n	8015e28 <ip4_input+0x78>
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	891b      	ldrh	r3, [r3, #8]
 8015e1c:	8a3a      	ldrh	r2, [r7, #16]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d802      	bhi.n	8015e28 <ip4_input+0x78>
 8015e22:	8a7b      	ldrh	r3, [r7, #18]
 8015e24:	2b13      	cmp	r3, #19
 8015e26:	d804      	bhi.n	8015e32 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f7f5 fe39 	bl	800baa0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	e0f5      	b.n	801601e <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015e32:	69fb      	ldr	r3, [r7, #28]
 8015e34:	691b      	ldr	r3, [r3, #16]
 8015e36:	4a7c      	ldr	r2, [pc, #496]	; (8016028 <ip4_input+0x278>)
 8015e38:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	68db      	ldr	r3, [r3, #12]
 8015e3e:	4a7a      	ldr	r2, [pc, #488]	; (8016028 <ip4_input+0x278>)
 8015e40:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015e42:	4b79      	ldr	r3, [pc, #484]	; (8016028 <ip4_input+0x278>)
 8015e44:	695b      	ldr	r3, [r3, #20]
 8015e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e4a:	2be0      	cmp	r3, #224	; 0xe0
 8015e4c:	d112      	bne.n	8015e74 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015e54:	f003 0301 	and.w	r3, r3, #1
 8015e58:	b2db      	uxtb	r3, r3
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d007      	beq.n	8015e6e <ip4_input+0xbe>
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	3304      	adds	r3, #4
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d002      	beq.n	8015e6e <ip4_input+0xbe>
      netif = inp;
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	61bb      	str	r3, [r7, #24]
 8015e6c:	e02a      	b.n	8015ec4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	61bb      	str	r3, [r7, #24]
 8015e72:	e027      	b.n	8015ec4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015e74:	6838      	ldr	r0, [r7, #0]
 8015e76:	f7ff ff71 	bl	8015d5c <ip4_input_accept>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d002      	beq.n	8015e86 <ip4_input+0xd6>
      netif = inp;
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	61bb      	str	r3, [r7, #24]
 8015e84:	e01e      	b.n	8015ec4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015e86:	2300      	movs	r3, #0
 8015e88:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015e8a:	4b67      	ldr	r3, [pc, #412]	; (8016028 <ip4_input+0x278>)
 8015e8c:	695b      	ldr	r3, [r3, #20]
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	2b7f      	cmp	r3, #127	; 0x7f
 8015e92:	d017      	beq.n	8015ec4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015e94:	4b65      	ldr	r3, [pc, #404]	; (801602c <ip4_input+0x27c>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	61bb      	str	r3, [r7, #24]
 8015e9a:	e00e      	b.n	8015eba <ip4_input+0x10a>
          if (netif == inp) {
 8015e9c:	69ba      	ldr	r2, [r7, #24]
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d006      	beq.n	8015eb2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015ea4:	69b8      	ldr	r0, [r7, #24]
 8015ea6:	f7ff ff59 	bl	8015d5c <ip4_input_accept>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d108      	bne.n	8015ec2 <ip4_input+0x112>
 8015eb0:	e000      	b.n	8015eb4 <ip4_input+0x104>
            continue;
 8015eb2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	61bb      	str	r3, [r7, #24]
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d1ed      	bne.n	8015e9c <ip4_input+0xec>
 8015ec0:	e000      	b.n	8015ec4 <ip4_input+0x114>
            break;
 8015ec2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015ec4:	69bb      	ldr	r3, [r7, #24]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d111      	bne.n	8015eee <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015eca:	69fb      	ldr	r3, [r7, #28]
 8015ecc:	7a5b      	ldrb	r3, [r3, #9]
 8015ece:	2b11      	cmp	r3, #17
 8015ed0:	d10d      	bne.n	8015eee <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015ed2:	8a7b      	ldrh	r3, [r7, #18]
 8015ed4:	69fa      	ldr	r2, [r7, #28]
 8015ed6:	4413      	add	r3, r2
 8015ed8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	885b      	ldrh	r3, [r3, #2]
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015ee4:	d103      	bne.n	8015eee <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015eea:	2300      	movs	r3, #0
 8015eec:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d017      	beq.n	8015f24 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015ef4:	4b4c      	ldr	r3, [pc, #304]	; (8016028 <ip4_input+0x278>)
 8015ef6:	691b      	ldr	r3, [r3, #16]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d013      	beq.n	8015f24 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015efc:	4b4a      	ldr	r3, [pc, #296]	; (8016028 <ip4_input+0x278>)
 8015efe:	691b      	ldr	r3, [r3, #16]
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	4618      	mov	r0, r3
 8015f04:	f000 f96c 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d105      	bne.n	8015f1a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015f0e:	4b46      	ldr	r3, [pc, #280]	; (8016028 <ip4_input+0x278>)
 8015f10:	691b      	ldr	r3, [r3, #16]
 8015f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015f16:	2be0      	cmp	r3, #224	; 0xe0
 8015f18:	d104      	bne.n	8015f24 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f7f5 fdc0 	bl	800baa0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015f20:	2300      	movs	r3, #0
 8015f22:	e07c      	b.n	801601e <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015f24:	69bb      	ldr	r3, [r7, #24]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d104      	bne.n	8015f34 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f7f5 fdb8 	bl	800baa0 <pbuf_free>
    return ERR_OK;
 8015f30:	2300      	movs	r3, #0
 8015f32:	e074      	b.n	801601e <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015f34:	69fb      	ldr	r3, [r7, #28]
 8015f36:	88db      	ldrh	r3, [r3, #6]
 8015f38:	b29b      	uxth	r3, r3
 8015f3a:	461a      	mov	r2, r3
 8015f3c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015f40:	4013      	ands	r3, r2
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d00b      	beq.n	8015f5e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f000 fc90 	bl	801686c <ip4_reass>
 8015f4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d101      	bne.n	8015f58 <ip4_input+0x1a8>
      return ERR_OK;
 8015f54:	2300      	movs	r3, #0
 8015f56:	e062      	b.n	801601e <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	685b      	ldr	r3, [r3, #4]
 8015f5c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015f5e:	4a32      	ldr	r2, [pc, #200]	; (8016028 <ip4_input+0x278>)
 8015f60:	69bb      	ldr	r3, [r7, #24]
 8015f62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015f64:	4a30      	ldr	r2, [pc, #192]	; (8016028 <ip4_input+0x278>)
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015f6a:	4a2f      	ldr	r2, [pc, #188]	; (8016028 <ip4_input+0x278>)
 8015f6c:	69fb      	ldr	r3, [r7, #28]
 8015f6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015f70:	69fb      	ldr	r3, [r7, #28]
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	f003 030f 	and.w	r3, r3, #15
 8015f78:	b2db      	uxtb	r3, r3
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	b29a      	uxth	r2, r3
 8015f80:	4b29      	ldr	r3, [pc, #164]	; (8016028 <ip4_input+0x278>)
 8015f82:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015f84:	8a7b      	ldrh	r3, [r7, #18]
 8015f86:	4619      	mov	r1, r3
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f7f5 fd03 	bl	800b994 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015f8e:	69fb      	ldr	r3, [r7, #28]
 8015f90:	7a5b      	ldrb	r3, [r3, #9]
 8015f92:	2b06      	cmp	r3, #6
 8015f94:	d009      	beq.n	8015faa <ip4_input+0x1fa>
 8015f96:	2b11      	cmp	r3, #17
 8015f98:	d002      	beq.n	8015fa0 <ip4_input+0x1f0>
 8015f9a:	2b01      	cmp	r3, #1
 8015f9c:	d00a      	beq.n	8015fb4 <ip4_input+0x204>
 8015f9e:	e00e      	b.n	8015fbe <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015fa0:	6839      	ldr	r1, [r7, #0]
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f7fc fad0 	bl	8012548 <udp_input>
        break;
 8015fa8:	e026      	b.n	8015ff8 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015faa:	6839      	ldr	r1, [r7, #0]
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f7f7 fe7f 	bl	800dcb0 <tcp_input>
        break;
 8015fb2:	e021      	b.n	8015ff8 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015fb4:	6839      	ldr	r1, [r7, #0]
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f7ff fcd2 	bl	8015960 <icmp_input>
        break;
 8015fbc:	e01c      	b.n	8015ff8 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015fbe:	4b1a      	ldr	r3, [pc, #104]	; (8016028 <ip4_input+0x278>)
 8015fc0:	695b      	ldr	r3, [r3, #20]
 8015fc2:	69b9      	ldr	r1, [r7, #24]
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f000 f90b 	bl	80161e0 <ip4_addr_isbroadcast_u32>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d10f      	bne.n	8015ff0 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015fd0:	4b15      	ldr	r3, [pc, #84]	; (8016028 <ip4_input+0x278>)
 8015fd2:	695b      	ldr	r3, [r3, #20]
 8015fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015fd8:	2be0      	cmp	r3, #224	; 0xe0
 8015fda:	d009      	beq.n	8015ff0 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015fdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f7f5 fd49 	bl	800ba7a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015fe8:	2102      	movs	r1, #2
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f7ff fdbc 	bl	8015b68 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f7f5 fd55 	bl	800baa0 <pbuf_free>
        break;
 8015ff6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015ff8:	4b0b      	ldr	r3, [pc, #44]	; (8016028 <ip4_input+0x278>)
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015ffe:	4b0a      	ldr	r3, [pc, #40]	; (8016028 <ip4_input+0x278>)
 8016000:	2200      	movs	r2, #0
 8016002:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016004:	4b08      	ldr	r3, [pc, #32]	; (8016028 <ip4_input+0x278>)
 8016006:	2200      	movs	r2, #0
 8016008:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801600a:	4b07      	ldr	r3, [pc, #28]	; (8016028 <ip4_input+0x278>)
 801600c:	2200      	movs	r2, #0
 801600e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016010:	4b05      	ldr	r3, [pc, #20]	; (8016028 <ip4_input+0x278>)
 8016012:	2200      	movs	r2, #0
 8016014:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016016:	4b04      	ldr	r3, [pc, #16]	; (8016028 <ip4_input+0x278>)
 8016018:	2200      	movs	r2, #0
 801601a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801601c:	2300      	movs	r3, #0
}
 801601e:	4618      	mov	r0, r3
 8016020:	3720      	adds	r7, #32
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	2000bbf8 	.word	0x2000bbf8
 801602c:	2000f31c 	.word	0x2000f31c

08016030 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b08a      	sub	sp, #40	; 0x28
 8016034:	af04      	add	r7, sp, #16
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
 801603c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d009      	beq.n	801605c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d003      	beq.n	8016056 <ip4_output_if+0x26>
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d102      	bne.n	801605c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016058:	3304      	adds	r3, #4
 801605a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801605c:	78fa      	ldrb	r2, [r7, #3]
 801605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016060:	9302      	str	r3, [sp, #8]
 8016062:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016066:	9301      	str	r3, [sp, #4]
 8016068:	f897 3020 	ldrb.w	r3, [r7, #32]
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	4613      	mov	r3, r2
 8016070:	687a      	ldr	r2, [r7, #4]
 8016072:	6979      	ldr	r1, [r7, #20]
 8016074:	68f8      	ldr	r0, [r7, #12]
 8016076:	f000 f805 	bl	8016084 <ip4_output_if_src>
 801607a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801607c:	4618      	mov	r0, r3
 801607e:	3718      	adds	r7, #24
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b088      	sub	sp, #32
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
 8016090:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	7b9b      	ldrb	r3, [r3, #14]
 8016096:	2b01      	cmp	r3, #1
 8016098:	d006      	beq.n	80160a8 <ip4_output_if_src+0x24>
 801609a:	4b4b      	ldr	r3, [pc, #300]	; (80161c8 <ip4_output_if_src+0x144>)
 801609c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80160a0:	494a      	ldr	r1, [pc, #296]	; (80161cc <ip4_output_if_src+0x148>)
 80160a2:	484b      	ldr	r0, [pc, #300]	; (80161d0 <ip4_output_if_src+0x14c>)
 80160a4:	f001 fa10 	bl	80174c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d060      	beq.n	8016170 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80160ae:	2314      	movs	r3, #20
 80160b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80160b2:	2114      	movs	r1, #20
 80160b4:	68f8      	ldr	r0, [r7, #12]
 80160b6:	f7f5 fc5d 	bl	800b974 <pbuf_add_header>
 80160ba:	4603      	mov	r3, r0
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d002      	beq.n	80160c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80160c0:	f06f 0301 	mvn.w	r3, #1
 80160c4:	e07c      	b.n	80161c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	685b      	ldr	r3, [r3, #4]
 80160ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	895b      	ldrh	r3, [r3, #10]
 80160d0:	2b13      	cmp	r3, #19
 80160d2:	d806      	bhi.n	80160e2 <ip4_output_if_src+0x5e>
 80160d4:	4b3c      	ldr	r3, [pc, #240]	; (80161c8 <ip4_output_if_src+0x144>)
 80160d6:	f240 3289 	movw	r2, #905	; 0x389
 80160da:	493e      	ldr	r1, [pc, #248]	; (80161d4 <ip4_output_if_src+0x150>)
 80160dc:	483c      	ldr	r0, [pc, #240]	; (80161d0 <ip4_output_if_src+0x14c>)
 80160de:	f001 f9f3 	bl	80174c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80160e2:	69fb      	ldr	r3, [r7, #28]
 80160e4:	78fa      	ldrb	r2, [r7, #3]
 80160e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80160e8:	69fb      	ldr	r3, [r7, #28]
 80160ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80160ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	681a      	ldr	r2, [r3, #0]
 80160f4:	69fb      	ldr	r3, [r7, #28]
 80160f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80160f8:	8b7b      	ldrh	r3, [r7, #26]
 80160fa:	089b      	lsrs	r3, r3, #2
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016104:	b2da      	uxtb	r2, r3
 8016106:	69fb      	ldr	r3, [r7, #28]
 8016108:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801610a:	69fb      	ldr	r3, [r7, #28]
 801610c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016110:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	891b      	ldrh	r3, [r3, #8]
 8016116:	4618      	mov	r0, r3
 8016118:	f7f4 f90e 	bl	800a338 <lwip_htons>
 801611c:	4603      	mov	r3, r0
 801611e:	461a      	mov	r2, r3
 8016120:	69fb      	ldr	r3, [r7, #28]
 8016122:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016124:	69fb      	ldr	r3, [r7, #28]
 8016126:	2200      	movs	r2, #0
 8016128:	719a      	strb	r2, [r3, #6]
 801612a:	2200      	movs	r2, #0
 801612c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801612e:	4b2a      	ldr	r3, [pc, #168]	; (80161d8 <ip4_output_if_src+0x154>)
 8016130:	881b      	ldrh	r3, [r3, #0]
 8016132:	4618      	mov	r0, r3
 8016134:	f7f4 f900 	bl	800a338 <lwip_htons>
 8016138:	4603      	mov	r3, r0
 801613a:	461a      	mov	r2, r3
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016140:	4b25      	ldr	r3, [pc, #148]	; (80161d8 <ip4_output_if_src+0x154>)
 8016142:	881b      	ldrh	r3, [r3, #0]
 8016144:	3301      	adds	r3, #1
 8016146:	b29a      	uxth	r2, r3
 8016148:	4b23      	ldr	r3, [pc, #140]	; (80161d8 <ip4_output_if_src+0x154>)
 801614a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d104      	bne.n	801615c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016152:	4b22      	ldr	r3, [pc, #136]	; (80161dc <ip4_output_if_src+0x158>)
 8016154:	681a      	ldr	r2, [r3, #0]
 8016156:	69fb      	ldr	r3, [r7, #28]
 8016158:	60da      	str	r2, [r3, #12]
 801615a:	e003      	b.n	8016164 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	69fb      	ldr	r3, [r7, #28]
 8016162:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	2200      	movs	r2, #0
 8016168:	729a      	strb	r2, [r3, #10]
 801616a:	2200      	movs	r2, #0
 801616c:	72da      	strb	r2, [r3, #11]
 801616e:	e00f      	b.n	8016190 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	895b      	ldrh	r3, [r3, #10]
 8016174:	2b13      	cmp	r3, #19
 8016176:	d802      	bhi.n	801617e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016178:	f06f 0301 	mvn.w	r3, #1
 801617c:	e020      	b.n	80161c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016184:	69fb      	ldr	r3, [r7, #28]
 8016186:	691b      	ldr	r3, [r3, #16]
 8016188:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801618a:	f107 0314 	add.w	r3, r7, #20
 801618e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016194:	2b00      	cmp	r3, #0
 8016196:	d00c      	beq.n	80161b2 <ip4_output_if_src+0x12e>
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	891a      	ldrh	r2, [r3, #8]
 801619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d906      	bls.n	80161b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80161a8:	68f8      	ldr	r0, [r7, #12]
 80161aa:	f000 fd4b 	bl	8016c44 <ip4_frag>
 80161ae:	4603      	mov	r3, r0
 80161b0:	e006      	b.n	80161c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80161b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b4:	695b      	ldr	r3, [r3, #20]
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	68f9      	ldr	r1, [r7, #12]
 80161ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161bc:	4798      	blx	r3
 80161be:	4603      	mov	r3, r0
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	3720      	adds	r7, #32
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	0801b918 	.word	0x0801b918
 80161cc:	0801b94c 	.word	0x0801b94c
 80161d0:	0801b958 	.word	0x0801b958
 80161d4:	0801b980 	.word	0x0801b980
 80161d8:	200085de 	.word	0x200085de
 80161dc:	0801bda8 	.word	0x0801bda8

080161e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b085      	sub	sp, #20
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161f4:	d002      	beq.n	80161fc <ip4_addr_isbroadcast_u32+0x1c>
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d101      	bne.n	8016200 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80161fc:	2301      	movs	r3, #1
 80161fe:	e02a      	b.n	8016256 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016200:	683b      	ldr	r3, [r7, #0]
 8016202:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016206:	f003 0302 	and.w	r3, r3, #2
 801620a:	2b00      	cmp	r3, #0
 801620c:	d101      	bne.n	8016212 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801620e:	2300      	movs	r3, #0
 8016210:	e021      	b.n	8016256 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	3304      	adds	r3, #4
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	429a      	cmp	r2, r3
 801621c:	d101      	bne.n	8016222 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801621e:	2300      	movs	r3, #0
 8016220:	e019      	b.n	8016256 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016222:	68fa      	ldr	r2, [r7, #12]
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	3304      	adds	r3, #4
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	405a      	eors	r2, r3
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	3308      	adds	r3, #8
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	4013      	ands	r3, r2
 8016234:	2b00      	cmp	r3, #0
 8016236:	d10d      	bne.n	8016254 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	3308      	adds	r3, #8
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	43da      	mvns	r2, r3
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	3308      	adds	r3, #8
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801624c:	429a      	cmp	r2, r3
 801624e:	d101      	bne.n	8016254 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016250:	2301      	movs	r3, #1
 8016252:	e000      	b.n	8016256 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016254:	2300      	movs	r3, #0
  }
}
 8016256:	4618      	mov	r0, r3
 8016258:	3714      	adds	r7, #20
 801625a:	46bd      	mov	sp, r7
 801625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016260:	4770      	bx	lr
	...

08016264 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801626a:	2300      	movs	r3, #0
 801626c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801626e:	4b12      	ldr	r3, [pc, #72]	; (80162b8 <ip_reass_tmr+0x54>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016274:	e018      	b.n	80162a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	7fdb      	ldrb	r3, [r3, #31]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d00b      	beq.n	8016296 <ip_reass_tmr+0x32>
      r->timer--;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	7fdb      	ldrb	r3, [r3, #31]
 8016282:	3b01      	subs	r3, #1
 8016284:	b2da      	uxtb	r2, r3
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	60fb      	str	r3, [r7, #12]
 8016294:	e008      	b.n	80162a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80162a0:	68b9      	ldr	r1, [r7, #8]
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f000 f80a 	bl	80162bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d1e3      	bne.n	8016276 <ip_reass_tmr+0x12>
    }
  }
}
 80162ae:	bf00      	nop
 80162b0:	3710      	adds	r7, #16
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	200085e0 	.word	0x200085e0

080162bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b088      	sub	sp, #32
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
 80162c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80162ca:	683a      	ldr	r2, [r7, #0]
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	d105      	bne.n	80162de <ip_reass_free_complete_datagram+0x22>
 80162d2:	4b45      	ldr	r3, [pc, #276]	; (80163e8 <ip_reass_free_complete_datagram+0x12c>)
 80162d4:	22ab      	movs	r2, #171	; 0xab
 80162d6:	4945      	ldr	r1, [pc, #276]	; (80163ec <ip_reass_free_complete_datagram+0x130>)
 80162d8:	4845      	ldr	r0, [pc, #276]	; (80163f0 <ip_reass_free_complete_datagram+0x134>)
 80162da:	f001 f8f5 	bl	80174c8 <iprintf>
  if (prev != NULL) {
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d00a      	beq.n	80162fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	687a      	ldr	r2, [r7, #4]
 80162ea:	429a      	cmp	r2, r3
 80162ec:	d005      	beq.n	80162fa <ip_reass_free_complete_datagram+0x3e>
 80162ee:	4b3e      	ldr	r3, [pc, #248]	; (80163e8 <ip_reass_free_complete_datagram+0x12c>)
 80162f0:	22ad      	movs	r2, #173	; 0xad
 80162f2:	4940      	ldr	r1, [pc, #256]	; (80163f4 <ip_reass_free_complete_datagram+0x138>)
 80162f4:	483e      	ldr	r0, [pc, #248]	; (80163f0 <ip_reass_free_complete_datagram+0x134>)
 80162f6:	f001 f8e7 	bl	80174c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	685b      	ldr	r3, [r3, #4]
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016302:	697b      	ldr	r3, [r7, #20]
 8016304:	889b      	ldrh	r3, [r3, #4]
 8016306:	b29b      	uxth	r3, r3
 8016308:	2b00      	cmp	r3, #0
 801630a:	d12a      	bne.n	8016362 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	685b      	ldr	r3, [r3, #4]
 8016310:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801631a:	69bb      	ldr	r3, [r7, #24]
 801631c:	6858      	ldr	r0, [r3, #4]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	3308      	adds	r3, #8
 8016322:	2214      	movs	r2, #20
 8016324:	4619      	mov	r1, r3
 8016326:	f001 f8bc 	bl	80174a2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801632a:	2101      	movs	r1, #1
 801632c:	69b8      	ldr	r0, [r7, #24]
 801632e:	f7ff fc2b 	bl	8015b88 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016332:	69b8      	ldr	r0, [r7, #24]
 8016334:	f7f5 fc42 	bl	800bbbc <pbuf_clen>
 8016338:	4603      	mov	r3, r0
 801633a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801633c:	8bfa      	ldrh	r2, [r7, #30]
 801633e:	8a7b      	ldrh	r3, [r7, #18]
 8016340:	4413      	add	r3, r2
 8016342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016346:	db05      	blt.n	8016354 <ip_reass_free_complete_datagram+0x98>
 8016348:	4b27      	ldr	r3, [pc, #156]	; (80163e8 <ip_reass_free_complete_datagram+0x12c>)
 801634a:	22bc      	movs	r2, #188	; 0xbc
 801634c:	492a      	ldr	r1, [pc, #168]	; (80163f8 <ip_reass_free_complete_datagram+0x13c>)
 801634e:	4828      	ldr	r0, [pc, #160]	; (80163f0 <ip_reass_free_complete_datagram+0x134>)
 8016350:	f001 f8ba 	bl	80174c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016354:	8bfa      	ldrh	r2, [r7, #30]
 8016356:	8a7b      	ldrh	r3, [r7, #18]
 8016358:	4413      	add	r3, r2
 801635a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801635c:	69b8      	ldr	r0, [r7, #24]
 801635e:	f7f5 fb9f 	bl	800baa0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	685b      	ldr	r3, [r3, #4]
 8016366:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016368:	e01f      	b.n	80163aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801636a:	69bb      	ldr	r3, [r7, #24]
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016370:	69bb      	ldr	r3, [r7, #24]
 8016372:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801637a:	68f8      	ldr	r0, [r7, #12]
 801637c:	f7f5 fc1e 	bl	800bbbc <pbuf_clen>
 8016380:	4603      	mov	r3, r0
 8016382:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016384:	8bfa      	ldrh	r2, [r7, #30]
 8016386:	8a7b      	ldrh	r3, [r7, #18]
 8016388:	4413      	add	r3, r2
 801638a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801638e:	db05      	blt.n	801639c <ip_reass_free_complete_datagram+0xe0>
 8016390:	4b15      	ldr	r3, [pc, #84]	; (80163e8 <ip_reass_free_complete_datagram+0x12c>)
 8016392:	22cc      	movs	r2, #204	; 0xcc
 8016394:	4918      	ldr	r1, [pc, #96]	; (80163f8 <ip_reass_free_complete_datagram+0x13c>)
 8016396:	4816      	ldr	r0, [pc, #88]	; (80163f0 <ip_reass_free_complete_datagram+0x134>)
 8016398:	f001 f896 	bl	80174c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801639c:	8bfa      	ldrh	r2, [r7, #30]
 801639e:	8a7b      	ldrh	r3, [r7, #18]
 80163a0:	4413      	add	r3, r2
 80163a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80163a4:	68f8      	ldr	r0, [r7, #12]
 80163a6:	f7f5 fb7b 	bl	800baa0 <pbuf_free>
  while (p != NULL) {
 80163aa:	69bb      	ldr	r3, [r7, #24]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d1dc      	bne.n	801636a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80163b0:	6839      	ldr	r1, [r7, #0]
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f000 f8c2 	bl	801653c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80163b8:	4b10      	ldr	r3, [pc, #64]	; (80163fc <ip_reass_free_complete_datagram+0x140>)
 80163ba:	881b      	ldrh	r3, [r3, #0]
 80163bc:	8bfa      	ldrh	r2, [r7, #30]
 80163be:	429a      	cmp	r2, r3
 80163c0:	d905      	bls.n	80163ce <ip_reass_free_complete_datagram+0x112>
 80163c2:	4b09      	ldr	r3, [pc, #36]	; (80163e8 <ip_reass_free_complete_datagram+0x12c>)
 80163c4:	22d2      	movs	r2, #210	; 0xd2
 80163c6:	490e      	ldr	r1, [pc, #56]	; (8016400 <ip_reass_free_complete_datagram+0x144>)
 80163c8:	4809      	ldr	r0, [pc, #36]	; (80163f0 <ip_reass_free_complete_datagram+0x134>)
 80163ca:	f001 f87d 	bl	80174c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80163ce:	4b0b      	ldr	r3, [pc, #44]	; (80163fc <ip_reass_free_complete_datagram+0x140>)
 80163d0:	881a      	ldrh	r2, [r3, #0]
 80163d2:	8bfb      	ldrh	r3, [r7, #30]
 80163d4:	1ad3      	subs	r3, r2, r3
 80163d6:	b29a      	uxth	r2, r3
 80163d8:	4b08      	ldr	r3, [pc, #32]	; (80163fc <ip_reass_free_complete_datagram+0x140>)
 80163da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80163dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3720      	adds	r7, #32
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	0801b9b0 	.word	0x0801b9b0
 80163ec:	0801b9ec 	.word	0x0801b9ec
 80163f0:	0801b9f8 	.word	0x0801b9f8
 80163f4:	0801ba20 	.word	0x0801ba20
 80163f8:	0801ba34 	.word	0x0801ba34
 80163fc:	200085e4 	.word	0x200085e4
 8016400:	0801ba54 	.word	0x0801ba54

08016404 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b08a      	sub	sp, #40	; 0x28
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801640e:	2300      	movs	r3, #0
 8016410:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016412:	2300      	movs	r3, #0
 8016414:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016416:	2300      	movs	r3, #0
 8016418:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801641a:	2300      	movs	r3, #0
 801641c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801641e:	2300      	movs	r3, #0
 8016420:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016422:	4b28      	ldr	r3, [pc, #160]	; (80164c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016428:	e030      	b.n	801648c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642c:	695a      	ldr	r2, [r3, #20]
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	68db      	ldr	r3, [r3, #12]
 8016432:	429a      	cmp	r2, r3
 8016434:	d10c      	bne.n	8016450 <ip_reass_remove_oldest_datagram+0x4c>
 8016436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016438:	699a      	ldr	r2, [r3, #24]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	691b      	ldr	r3, [r3, #16]
 801643e:	429a      	cmp	r2, r3
 8016440:	d106      	bne.n	8016450 <ip_reass_remove_oldest_datagram+0x4c>
 8016442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016444:	899a      	ldrh	r2, [r3, #12]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	889b      	ldrh	r3, [r3, #4]
 801644a:	b29b      	uxth	r3, r3
 801644c:	429a      	cmp	r2, r3
 801644e:	d014      	beq.n	801647a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	3301      	adds	r3, #1
 8016454:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016456:	6a3b      	ldr	r3, [r7, #32]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d104      	bne.n	8016466 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016460:	69fb      	ldr	r3, [r7, #28]
 8016462:	61bb      	str	r3, [r7, #24]
 8016464:	e009      	b.n	801647a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016468:	7fda      	ldrb	r2, [r3, #31]
 801646a:	6a3b      	ldr	r3, [r7, #32]
 801646c:	7fdb      	ldrb	r3, [r3, #31]
 801646e:	429a      	cmp	r2, r3
 8016470:	d803      	bhi.n	801647a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016474:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d001      	beq.n	8016486 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016484:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648e:	2b00      	cmp	r3, #0
 8016490:	d1cb      	bne.n	801642a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016492:	6a3b      	ldr	r3, [r7, #32]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d008      	beq.n	80164aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016498:	69b9      	ldr	r1, [r7, #24]
 801649a:	6a38      	ldr	r0, [r7, #32]
 801649c:	f7ff ff0e 	bl	80162bc <ip_reass_free_complete_datagram>
 80164a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80164a2:	697a      	ldr	r2, [r7, #20]
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	4413      	add	r3, r2
 80164a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80164aa:	697a      	ldr	r2, [r7, #20]
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	429a      	cmp	r2, r3
 80164b0:	da02      	bge.n	80164b8 <ip_reass_remove_oldest_datagram+0xb4>
 80164b2:	693b      	ldr	r3, [r7, #16]
 80164b4:	2b01      	cmp	r3, #1
 80164b6:	dcac      	bgt.n	8016412 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80164b8:	697b      	ldr	r3, [r7, #20]
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3728      	adds	r7, #40	; 0x28
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	200085e0 	.word	0x200085e0

080164c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
 80164d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80164d2:	2004      	movs	r0, #4
 80164d4:	f7f4 fbe6 	bl	800aca4 <memp_malloc>
 80164d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d110      	bne.n	8016502 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80164e0:	6839      	ldr	r1, [r7, #0]
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f7ff ff8e 	bl	8016404 <ip_reass_remove_oldest_datagram>
 80164e8:	4602      	mov	r2, r0
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	4293      	cmp	r3, r2
 80164ee:	dc03      	bgt.n	80164f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80164f0:	2004      	movs	r0, #4
 80164f2:	f7f4 fbd7 	bl	800aca4 <memp_malloc>
 80164f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d101      	bne.n	8016502 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80164fe:	2300      	movs	r3, #0
 8016500:	e016      	b.n	8016530 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016502:	2220      	movs	r2, #32
 8016504:	2100      	movs	r1, #0
 8016506:	68f8      	ldr	r0, [r7, #12]
 8016508:	f000 ffd6 	bl	80174b8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	220f      	movs	r2, #15
 8016510:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016512:	4b09      	ldr	r3, [pc, #36]	; (8016538 <ip_reass_enqueue_new_datagram+0x70>)
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801651a:	4a07      	ldr	r2, [pc, #28]	; (8016538 <ip_reass_enqueue_new_datagram+0x70>)
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	3308      	adds	r3, #8
 8016524:	2214      	movs	r2, #20
 8016526:	6879      	ldr	r1, [r7, #4]
 8016528:	4618      	mov	r0, r3
 801652a:	f000 ffba 	bl	80174a2 <memcpy>
  return ipr;
 801652e:	68fb      	ldr	r3, [r7, #12]
}
 8016530:	4618      	mov	r0, r3
 8016532:	3710      	adds	r7, #16
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}
 8016538:	200085e0 	.word	0x200085e0

0801653c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b082      	sub	sp, #8
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016546:	4b10      	ldr	r3, [pc, #64]	; (8016588 <ip_reass_dequeue_datagram+0x4c>)
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	687a      	ldr	r2, [r7, #4]
 801654c:	429a      	cmp	r2, r3
 801654e:	d104      	bne.n	801655a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	4a0c      	ldr	r2, [pc, #48]	; (8016588 <ip_reass_dequeue_datagram+0x4c>)
 8016556:	6013      	str	r3, [r2, #0]
 8016558:	e00d      	b.n	8016576 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d106      	bne.n	801656e <ip_reass_dequeue_datagram+0x32>
 8016560:	4b0a      	ldr	r3, [pc, #40]	; (801658c <ip_reass_dequeue_datagram+0x50>)
 8016562:	f240 1245 	movw	r2, #325	; 0x145
 8016566:	490a      	ldr	r1, [pc, #40]	; (8016590 <ip_reass_dequeue_datagram+0x54>)
 8016568:	480a      	ldr	r0, [pc, #40]	; (8016594 <ip_reass_dequeue_datagram+0x58>)
 801656a:	f000 ffad 	bl	80174c8 <iprintf>
    prev->next = ipr->next;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	681a      	ldr	r2, [r3, #0]
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016576:	6879      	ldr	r1, [r7, #4]
 8016578:	2004      	movs	r0, #4
 801657a:	f7f4 fbe5 	bl	800ad48 <memp_free>
}
 801657e:	bf00      	nop
 8016580:	3708      	adds	r7, #8
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}
 8016586:	bf00      	nop
 8016588:	200085e0 	.word	0x200085e0
 801658c:	0801b9b0 	.word	0x0801b9b0
 8016590:	0801ba78 	.word	0x0801ba78
 8016594:	0801b9f8 	.word	0x0801b9f8

08016598 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b08c      	sub	sp, #48	; 0x30
 801659c:	af00      	add	r7, sp, #0
 801659e:	60f8      	str	r0, [r7, #12]
 80165a0:	60b9      	str	r1, [r7, #8]
 80165a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80165a4:	2300      	movs	r3, #0
 80165a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80165a8:	2301      	movs	r3, #1
 80165aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	685b      	ldr	r3, [r3, #4]
 80165b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80165b2:	69fb      	ldr	r3, [r7, #28]
 80165b4:	885b      	ldrh	r3, [r3, #2]
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7f3 febd 	bl	800a338 <lwip_htons>
 80165be:	4603      	mov	r3, r0
 80165c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80165c2:	69fb      	ldr	r3, [r7, #28]
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	f003 030f 	and.w	r3, r3, #15
 80165ca:	b2db      	uxtb	r3, r3
 80165cc:	009b      	lsls	r3, r3, #2
 80165ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80165d0:	7e7b      	ldrb	r3, [r7, #25]
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	8b7a      	ldrh	r2, [r7, #26]
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d202      	bcs.n	80165e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80165da:	f04f 33ff 	mov.w	r3, #4294967295
 80165de:	e135      	b.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80165e0:	7e7b      	ldrb	r3, [r7, #25]
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	8b7a      	ldrh	r2, [r7, #26]
 80165e6:	1ad3      	subs	r3, r2, r3
 80165e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80165ea:	69fb      	ldr	r3, [r7, #28]
 80165ec:	88db      	ldrh	r3, [r3, #6]
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7f3 fea1 	bl	800a338 <lwip_htons>
 80165f6:	4603      	mov	r3, r0
 80165f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165fc:	b29b      	uxth	r3, r3
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660a:	2200      	movs	r2, #0
 801660c:	701a      	strb	r2, [r3, #0]
 801660e:	2200      	movs	r2, #0
 8016610:	705a      	strb	r2, [r3, #1]
 8016612:	2200      	movs	r2, #0
 8016614:	709a      	strb	r2, [r3, #2]
 8016616:	2200      	movs	r2, #0
 8016618:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661c:	8afa      	ldrh	r2, [r7, #22]
 801661e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016620:	8afa      	ldrh	r2, [r7, #22]
 8016622:	8b7b      	ldrh	r3, [r7, #26]
 8016624:	4413      	add	r3, r2
 8016626:	b29a      	uxth	r2, r3
 8016628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662e:	88db      	ldrh	r3, [r3, #6]
 8016630:	b29b      	uxth	r3, r3
 8016632:	8afa      	ldrh	r2, [r7, #22]
 8016634:	429a      	cmp	r2, r3
 8016636:	d902      	bls.n	801663e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016638:	f04f 33ff 	mov.w	r3, #4294967295
 801663c:	e106      	b.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	627b      	str	r3, [r7, #36]	; 0x24
 8016644:	e068      	b.n	8016718 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664e:	889b      	ldrh	r3, [r3, #4]
 8016650:	b29a      	uxth	r2, r3
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	889b      	ldrh	r3, [r3, #4]
 8016656:	b29b      	uxth	r3, r3
 8016658:	429a      	cmp	r2, r3
 801665a:	d235      	bcs.n	80166c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016660:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016664:	2b00      	cmp	r3, #0
 8016666:	d020      	beq.n	80166aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801666a:	889b      	ldrh	r3, [r3, #4]
 801666c:	b29a      	uxth	r2, r3
 801666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016670:	88db      	ldrh	r3, [r3, #6]
 8016672:	b29b      	uxth	r3, r3
 8016674:	429a      	cmp	r2, r3
 8016676:	d307      	bcc.n	8016688 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801667a:	88db      	ldrh	r3, [r3, #6]
 801667c:	b29a      	uxth	r2, r3
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	889b      	ldrh	r3, [r3, #4]
 8016682:	b29b      	uxth	r3, r3
 8016684:	429a      	cmp	r2, r3
 8016686:	d902      	bls.n	801668e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016688:	f04f 33ff 	mov.w	r3, #4294967295
 801668c:	e0de      	b.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016690:	68ba      	ldr	r2, [r7, #8]
 8016692:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016696:	88db      	ldrh	r3, [r3, #6]
 8016698:	b29a      	uxth	r2, r3
 801669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669c:	889b      	ldrh	r3, [r3, #4]
 801669e:	b29b      	uxth	r3, r3
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d03d      	beq.n	8016720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80166a4:	2300      	movs	r3, #0
 80166a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80166a8:	e03a      	b.n	8016720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80166aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ac:	88db      	ldrh	r3, [r3, #6]
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	693b      	ldr	r3, [r7, #16]
 80166b2:	889b      	ldrh	r3, [r3, #4]
 80166b4:	b29b      	uxth	r3, r3
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d902      	bls.n	80166c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166ba:	f04f 33ff 	mov.w	r3, #4294967295
 80166be:	e0c5      	b.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	68ba      	ldr	r2, [r7, #8]
 80166c4:	605a      	str	r2, [r3, #4]
      break;
 80166c6:	e02b      	b.n	8016720 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80166c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ca:	889b      	ldrh	r3, [r3, #4]
 80166cc:	b29a      	uxth	r2, r3
 80166ce:	693b      	ldr	r3, [r7, #16]
 80166d0:	889b      	ldrh	r3, [r3, #4]
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d102      	bne.n	80166de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166d8:	f04f 33ff 	mov.w	r3, #4294967295
 80166dc:	e0b6      	b.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80166de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e0:	889b      	ldrh	r3, [r3, #4]
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	88db      	ldrh	r3, [r3, #6]
 80166e8:	b29b      	uxth	r3, r3
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d202      	bcs.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166ee:	f04f 33ff 	mov.w	r3, #4294967295
 80166f2:	e0ab      	b.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80166f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d009      	beq.n	801670e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80166fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166fc:	88db      	ldrh	r3, [r3, #6]
 80166fe:	b29a      	uxth	r2, r3
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	889b      	ldrh	r3, [r3, #4]
 8016704:	b29b      	uxth	r3, r3
 8016706:	429a      	cmp	r2, r3
 8016708:	d001      	beq.n	801670e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801670a:	2300      	movs	r3, #0
 801670c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016714:	693b      	ldr	r3, [r7, #16]
 8016716:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671a:	2b00      	cmp	r3, #0
 801671c:	d193      	bne.n	8016646 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801671e:	e000      	b.n	8016722 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016720:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016724:	2b00      	cmp	r3, #0
 8016726:	d12d      	bne.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672a:	2b00      	cmp	r3, #0
 801672c:	d01c      	beq.n	8016768 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016730:	88db      	ldrh	r3, [r3, #6]
 8016732:	b29a      	uxth	r2, r3
 8016734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016736:	889b      	ldrh	r3, [r3, #4]
 8016738:	b29b      	uxth	r3, r3
 801673a:	429a      	cmp	r2, r3
 801673c:	d906      	bls.n	801674c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801673e:	4b45      	ldr	r3, [pc, #276]	; (8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016740:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016744:	4944      	ldr	r1, [pc, #272]	; (8016858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016746:	4845      	ldr	r0, [pc, #276]	; (801685c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016748:	f000 febe 	bl	80174c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801674e:	68ba      	ldr	r2, [r7, #8]
 8016750:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016754:	88db      	ldrh	r3, [r3, #6]
 8016756:	b29a      	uxth	r2, r3
 8016758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801675a:	889b      	ldrh	r3, [r3, #4]
 801675c:	b29b      	uxth	r3, r3
 801675e:	429a      	cmp	r2, r3
 8016760:	d010      	beq.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016762:	2300      	movs	r3, #0
 8016764:	623b      	str	r3, [r7, #32]
 8016766:	e00d      	b.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d006      	beq.n	801677e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016770:	4b38      	ldr	r3, [pc, #224]	; (8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016772:	f240 12bf 	movw	r2, #447	; 0x1bf
 8016776:	493a      	ldr	r1, [pc, #232]	; (8016860 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016778:	4838      	ldr	r0, [pc, #224]	; (801685c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801677a:	f000 fea5 	bl	80174c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	68ba      	ldr	r2, [r7, #8]
 8016782:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d105      	bne.n	8016796 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	7f9b      	ldrb	r3, [r3, #30]
 801678e:	f003 0301 	and.w	r3, r3, #1
 8016792:	2b00      	cmp	r3, #0
 8016794:	d059      	beq.n	801684a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016796:	6a3b      	ldr	r3, [r7, #32]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d04f      	beq.n	801683c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	685b      	ldr	r3, [r3, #4]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d006      	beq.n	80167b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	685b      	ldr	r3, [r3, #4]
 80167aa:	889b      	ldrh	r3, [r3, #4]
 80167ac:	b29b      	uxth	r3, r3
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d002      	beq.n	80167b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80167b2:	2300      	movs	r3, #0
 80167b4:	623b      	str	r3, [r7, #32]
 80167b6:	e041      	b.n	801683c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80167b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80167bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80167c2:	e012      	b.n	80167ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80167c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c6:	685b      	ldr	r3, [r3, #4]
 80167c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80167ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167cc:	88db      	ldrh	r3, [r3, #6]
 80167ce:	b29a      	uxth	r2, r3
 80167d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d2:	889b      	ldrh	r3, [r3, #4]
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d002      	beq.n	80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80167da:	2300      	movs	r3, #0
 80167dc:	623b      	str	r3, [r7, #32]
            break;
 80167de:	e007      	b.n	80167f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80167e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80167e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80167ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d1e9      	bne.n	80167c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80167f0:	6a3b      	ldr	r3, [r7, #32]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d022      	beq.n	801683c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	685b      	ldr	r3, [r3, #4]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d106      	bne.n	801680c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80167fe:	4b15      	ldr	r3, [pc, #84]	; (8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016800:	f240 12df 	movw	r2, #479	; 0x1df
 8016804:	4917      	ldr	r1, [pc, #92]	; (8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016806:	4815      	ldr	r0, [pc, #84]	; (801685c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016808:	f000 fe5e 	bl	80174c8 <iprintf>
          LWIP_ASSERT("sanity check",
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	685b      	ldr	r3, [r3, #4]
 8016812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016814:	429a      	cmp	r2, r3
 8016816:	d106      	bne.n	8016826 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016818:	4b0e      	ldr	r3, [pc, #56]	; (8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801681a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801681e:	4911      	ldr	r1, [pc, #68]	; (8016864 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016820:	480e      	ldr	r0, [pc, #56]	; (801685c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016822:	f000 fe51 	bl	80174c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d006      	beq.n	801683c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801682e:	4b09      	ldr	r3, [pc, #36]	; (8016854 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016830:	f240 12e3 	movw	r2, #483	; 0x1e3
 8016834:	490c      	ldr	r1, [pc, #48]	; (8016868 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016836:	4809      	ldr	r0, [pc, #36]	; (801685c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016838:	f000 fe46 	bl	80174c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801683c:	6a3b      	ldr	r3, [r7, #32]
 801683e:	2b00      	cmp	r3, #0
 8016840:	bf14      	ite	ne
 8016842:	2301      	movne	r3, #1
 8016844:	2300      	moveq	r3, #0
 8016846:	b2db      	uxtb	r3, r3
 8016848:	e000      	b.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801684a:	2300      	movs	r3, #0
}
 801684c:	4618      	mov	r0, r3
 801684e:	3730      	adds	r7, #48	; 0x30
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}
 8016854:	0801b9b0 	.word	0x0801b9b0
 8016858:	0801ba94 	.word	0x0801ba94
 801685c:	0801b9f8 	.word	0x0801b9f8
 8016860:	0801bab4 	.word	0x0801bab4
 8016864:	0801baec 	.word	0x0801baec
 8016868:	0801bafc 	.word	0x0801bafc

0801686c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b08e      	sub	sp, #56	; 0x38
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	f003 030f 	and.w	r3, r3, #15
 8016882:	b2db      	uxtb	r3, r3
 8016884:	009b      	lsls	r3, r3, #2
 8016886:	b2db      	uxtb	r3, r3
 8016888:	2b14      	cmp	r3, #20
 801688a:	f040 8167 	bne.w	8016b5c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016890:	88db      	ldrh	r3, [r3, #6]
 8016892:	b29b      	uxth	r3, r3
 8016894:	4618      	mov	r0, r3
 8016896:	f7f3 fd4f 	bl	800a338 <lwip_htons>
 801689a:	4603      	mov	r3, r0
 801689c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168a0:	b29b      	uxth	r3, r3
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80168a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a8:	885b      	ldrh	r3, [r3, #2]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7f3 fd43 	bl	800a338 <lwip_htons>
 80168b2:	4603      	mov	r3, r0
 80168b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80168b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b8:	781b      	ldrb	r3, [r3, #0]
 80168ba:	f003 030f 	and.w	r3, r3, #15
 80168be:	b2db      	uxtb	r3, r3
 80168c0:	009b      	lsls	r3, r3, #2
 80168c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80168c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80168ce:	429a      	cmp	r2, r3
 80168d0:	f0c0 8146 	bcc.w	8016b60 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80168d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80168d8:	b29b      	uxth	r3, r3
 80168da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80168dc:	1ad3      	subs	r3, r2, r3
 80168de:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f7f5 f96b 	bl	800bbbc <pbuf_clen>
 80168e6:	4603      	mov	r3, r0
 80168e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80168ea:	4ba3      	ldr	r3, [pc, #652]	; (8016b78 <ip4_reass+0x30c>)
 80168ec:	881b      	ldrh	r3, [r3, #0]
 80168ee:	461a      	mov	r2, r3
 80168f0:	8c3b      	ldrh	r3, [r7, #32]
 80168f2:	4413      	add	r3, r2
 80168f4:	2b0a      	cmp	r3, #10
 80168f6:	dd10      	ble.n	801691a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80168f8:	8c3b      	ldrh	r3, [r7, #32]
 80168fa:	4619      	mov	r1, r3
 80168fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168fe:	f7ff fd81 	bl	8016404 <ip_reass_remove_oldest_datagram>
 8016902:	4603      	mov	r3, r0
 8016904:	2b00      	cmp	r3, #0
 8016906:	f000 812d 	beq.w	8016b64 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801690a:	4b9b      	ldr	r3, [pc, #620]	; (8016b78 <ip4_reass+0x30c>)
 801690c:	881b      	ldrh	r3, [r3, #0]
 801690e:	461a      	mov	r2, r3
 8016910:	8c3b      	ldrh	r3, [r7, #32]
 8016912:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016914:	2b0a      	cmp	r3, #10
 8016916:	f300 8125 	bgt.w	8016b64 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801691a:	4b98      	ldr	r3, [pc, #608]	; (8016b7c <ip4_reass+0x310>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	633b      	str	r3, [r7, #48]	; 0x30
 8016920:	e015      	b.n	801694e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016924:	695a      	ldr	r2, [r3, #20]
 8016926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016928:	68db      	ldr	r3, [r3, #12]
 801692a:	429a      	cmp	r2, r3
 801692c:	d10c      	bne.n	8016948 <ip4_reass+0xdc>
 801692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016930:	699a      	ldr	r2, [r3, #24]
 8016932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016934:	691b      	ldr	r3, [r3, #16]
 8016936:	429a      	cmp	r2, r3
 8016938:	d106      	bne.n	8016948 <ip4_reass+0xdc>
 801693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801693c:	899a      	ldrh	r2, [r3, #12]
 801693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016940:	889b      	ldrh	r3, [r3, #4]
 8016942:	b29b      	uxth	r3, r3
 8016944:	429a      	cmp	r2, r3
 8016946:	d006      	beq.n	8016956 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	633b      	str	r3, [r7, #48]	; 0x30
 801694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016950:	2b00      	cmp	r3, #0
 8016952:	d1e6      	bne.n	8016922 <ip4_reass+0xb6>
 8016954:	e000      	b.n	8016958 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016956:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801695a:	2b00      	cmp	r3, #0
 801695c:	d109      	bne.n	8016972 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801695e:	8c3b      	ldrh	r3, [r7, #32]
 8016960:	4619      	mov	r1, r3
 8016962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016964:	f7ff fdb0 	bl	80164c8 <ip_reass_enqueue_new_datagram>
 8016968:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696c:	2b00      	cmp	r3, #0
 801696e:	d11c      	bne.n	80169aa <ip4_reass+0x13e>
      goto nullreturn;
 8016970:	e0f9      	b.n	8016b66 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016974:	88db      	ldrh	r3, [r3, #6]
 8016976:	b29b      	uxth	r3, r3
 8016978:	4618      	mov	r0, r3
 801697a:	f7f3 fcdd 	bl	800a338 <lwip_htons>
 801697e:	4603      	mov	r3, r0
 8016980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016984:	2b00      	cmp	r3, #0
 8016986:	d110      	bne.n	80169aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698a:	89db      	ldrh	r3, [r3, #14]
 801698c:	4618      	mov	r0, r3
 801698e:	f7f3 fcd3 	bl	800a338 <lwip_htons>
 8016992:	4603      	mov	r3, r0
 8016994:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016998:	2b00      	cmp	r3, #0
 801699a:	d006      	beq.n	80169aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699e:	3308      	adds	r3, #8
 80169a0:	2214      	movs	r2, #20
 80169a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169a4:	4618      	mov	r0, r3
 80169a6:	f000 fd7c 	bl	80174a2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80169aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ac:	88db      	ldrh	r3, [r3, #6]
 80169ae:	b29b      	uxth	r3, r3
 80169b0:	f003 0320 	and.w	r3, r3, #32
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	bf0c      	ite	eq
 80169b8:	2301      	moveq	r3, #1
 80169ba:	2300      	movne	r3, #0
 80169bc:	b2db      	uxtb	r3, r3
 80169be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80169c0:	69fb      	ldr	r3, [r7, #28]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d00e      	beq.n	80169e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80169c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80169c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169ca:	4413      	add	r3, r2
 80169cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80169ce:	8b7a      	ldrh	r2, [r7, #26]
 80169d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80169d2:	429a      	cmp	r2, r3
 80169d4:	f0c0 80a0 	bcc.w	8016b18 <ip4_reass+0x2ac>
 80169d8:	8b7b      	ldrh	r3, [r7, #26]
 80169da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80169de:	4293      	cmp	r3, r2
 80169e0:	f200 809a 	bhi.w	8016b18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80169e4:	69fa      	ldr	r2, [r7, #28]
 80169e6:	6879      	ldr	r1, [r7, #4]
 80169e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169ea:	f7ff fdd5 	bl	8016598 <ip_reass_chain_frag_into_datagram_and_validate>
 80169ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169f6:	f000 8091 	beq.w	8016b1c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80169fa:	4b5f      	ldr	r3, [pc, #380]	; (8016b78 <ip4_reass+0x30c>)
 80169fc:	881a      	ldrh	r2, [r3, #0]
 80169fe:	8c3b      	ldrh	r3, [r7, #32]
 8016a00:	4413      	add	r3, r2
 8016a02:	b29a      	uxth	r2, r3
 8016a04:	4b5c      	ldr	r3, [pc, #368]	; (8016b78 <ip4_reass+0x30c>)
 8016a06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016a08:	69fb      	ldr	r3, [r7, #28]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d00d      	beq.n	8016a2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016a0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a12:	4413      	add	r3, r2
 8016a14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a18:	8a7a      	ldrh	r2, [r7, #18]
 8016a1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a1e:	7f9b      	ldrb	r3, [r3, #30]
 8016a20:	f043 0301 	orr.w	r3, r3, #1
 8016a24:	b2da      	uxtb	r2, r3
 8016a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	2b01      	cmp	r3, #1
 8016a2e:	d171      	bne.n	8016b14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a32:	8b9b      	ldrh	r3, [r3, #28]
 8016a34:	3314      	adds	r3, #20
 8016a36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	685b      	ldr	r3, [r3, #4]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a44:	685b      	ldr	r3, [r3, #4]
 8016a46:	685b      	ldr	r3, [r3, #4]
 8016a48:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a4c:	3308      	adds	r3, #8
 8016a4e:	2214      	movs	r2, #20
 8016a50:	4619      	mov	r1, r3
 8016a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a54:	f000 fd25 	bl	80174a2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016a58:	8a3b      	ldrh	r3, [r7, #16]
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f7f3 fc6c 	bl	800a338 <lwip_htons>
 8016a60:	4603      	mov	r3, r0
 8016a62:	461a      	mov	r2, r3
 8016a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	719a      	strb	r2, [r3, #6]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a74:	2200      	movs	r2, #0
 8016a76:	729a      	strb	r2, [r3, #10]
 8016a78:	2200      	movs	r2, #0
 8016a7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a7e:	685b      	ldr	r3, [r3, #4]
 8016a80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016a82:	e00d      	b.n	8016aa0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a86:	685b      	ldr	r3, [r3, #4]
 8016a88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016a8a:	2114      	movs	r1, #20
 8016a8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016a8e:	f7f4 ff81 	bl	800b994 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016a92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f7f5 f8d1 	bl	800bc3c <pbuf_cat>
      r = iprh->next_pbuf;
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d1ee      	bne.n	8016a84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016aa6:	4b35      	ldr	r3, [pc, #212]	; (8016b7c <ip4_reass+0x310>)
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d102      	bne.n	8016ab6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ab4:	e010      	b.n	8016ad8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016ab6:	4b31      	ldr	r3, [pc, #196]	; (8016b7c <ip4_reass+0x310>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016abc:	e007      	b.n	8016ace <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	d006      	beq.n	8016ad6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d1f4      	bne.n	8016abe <ip4_reass+0x252>
 8016ad4:	e000      	b.n	8016ad8 <ip4_reass+0x26c>
          break;
 8016ad6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016adc:	f7ff fd2e 	bl	801653c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f7f5 f86b 	bl	800bbbc <pbuf_clen>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016aea:	4b23      	ldr	r3, [pc, #140]	; (8016b78 <ip4_reass+0x30c>)
 8016aec:	881b      	ldrh	r3, [r3, #0]
 8016aee:	8c3a      	ldrh	r2, [r7, #32]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d906      	bls.n	8016b02 <ip4_reass+0x296>
 8016af4:	4b22      	ldr	r3, [pc, #136]	; (8016b80 <ip4_reass+0x314>)
 8016af6:	f240 229b 	movw	r2, #667	; 0x29b
 8016afa:	4922      	ldr	r1, [pc, #136]	; (8016b84 <ip4_reass+0x318>)
 8016afc:	4822      	ldr	r0, [pc, #136]	; (8016b88 <ip4_reass+0x31c>)
 8016afe:	f000 fce3 	bl	80174c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016b02:	4b1d      	ldr	r3, [pc, #116]	; (8016b78 <ip4_reass+0x30c>)
 8016b04:	881a      	ldrh	r2, [r3, #0]
 8016b06:	8c3b      	ldrh	r3, [r7, #32]
 8016b08:	1ad3      	subs	r3, r2, r3
 8016b0a:	b29a      	uxth	r2, r3
 8016b0c:	4b1a      	ldr	r3, [pc, #104]	; (8016b78 <ip4_reass+0x30c>)
 8016b0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	e02c      	b.n	8016b6e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016b14:	2300      	movs	r3, #0
 8016b16:	e02a      	b.n	8016b6e <ip4_reass+0x302>

nullreturn_ipr:
 8016b18:	bf00      	nop
 8016b1a:	e000      	b.n	8016b1e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016b1c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d106      	bne.n	8016b32 <ip4_reass+0x2c6>
 8016b24:	4b16      	ldr	r3, [pc, #88]	; (8016b80 <ip4_reass+0x314>)
 8016b26:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016b2a:	4918      	ldr	r1, [pc, #96]	; (8016b8c <ip4_reass+0x320>)
 8016b2c:	4816      	ldr	r0, [pc, #88]	; (8016b88 <ip4_reass+0x31c>)
 8016b2e:	f000 fccb 	bl	80174c8 <iprintf>
  if (ipr->p == NULL) {
 8016b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b34:	685b      	ldr	r3, [r3, #4]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d114      	bne.n	8016b64 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016b3a:	4b10      	ldr	r3, [pc, #64]	; (8016b7c <ip4_reass+0x310>)
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d006      	beq.n	8016b52 <ip4_reass+0x2e6>
 8016b44:	4b0e      	ldr	r3, [pc, #56]	; (8016b80 <ip4_reass+0x314>)
 8016b46:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016b4a:	4911      	ldr	r1, [pc, #68]	; (8016b90 <ip4_reass+0x324>)
 8016b4c:	480e      	ldr	r0, [pc, #56]	; (8016b88 <ip4_reass+0x31c>)
 8016b4e:	f000 fcbb 	bl	80174c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016b52:	2100      	movs	r1, #0
 8016b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b56:	f7ff fcf1 	bl	801653c <ip_reass_dequeue_datagram>
 8016b5a:	e004      	b.n	8016b66 <ip4_reass+0x2fa>
    goto nullreturn;
 8016b5c:	bf00      	nop
 8016b5e:	e002      	b.n	8016b66 <ip4_reass+0x2fa>
    goto nullreturn;
 8016b60:	bf00      	nop
 8016b62:	e000      	b.n	8016b66 <ip4_reass+0x2fa>
  }

nullreturn:
 8016b64:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f7f4 ff9a 	bl	800baa0 <pbuf_free>
  return NULL;
 8016b6c:	2300      	movs	r3, #0
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3738      	adds	r7, #56	; 0x38
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}
 8016b76:	bf00      	nop
 8016b78:	200085e4 	.word	0x200085e4
 8016b7c:	200085e0 	.word	0x200085e0
 8016b80:	0801b9b0 	.word	0x0801b9b0
 8016b84:	0801bb20 	.word	0x0801bb20
 8016b88:	0801b9f8 	.word	0x0801b9f8
 8016b8c:	0801bb3c 	.word	0x0801bb3c
 8016b90:	0801bb48 	.word	0x0801bb48

08016b94 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016b98:	2005      	movs	r0, #5
 8016b9a:	f7f4 f883 	bl	800aca4 <memp_malloc>
 8016b9e:	4603      	mov	r3, r0
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d106      	bne.n	8016bc0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016bb2:	4b07      	ldr	r3, [pc, #28]	; (8016bd0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016bb4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016bb8:	4906      	ldr	r1, [pc, #24]	; (8016bd4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016bba:	4807      	ldr	r0, [pc, #28]	; (8016bd8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016bbc:	f000 fc84 	bl	80174c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016bc0:	6879      	ldr	r1, [r7, #4]
 8016bc2:	2005      	movs	r0, #5
 8016bc4:	f7f4 f8c0 	bl	800ad48 <memp_free>
}
 8016bc8:	bf00      	nop
 8016bca:	3708      	adds	r7, #8
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	0801b9b0 	.word	0x0801b9b0
 8016bd4:	0801bb68 	.word	0x0801bb68
 8016bd8:	0801b9f8 	.word	0x0801b9f8

08016bdc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d106      	bne.n	8016bfc <ipfrag_free_pbuf_custom+0x20>
 8016bee:	4b11      	ldr	r3, [pc, #68]	; (8016c34 <ipfrag_free_pbuf_custom+0x58>)
 8016bf0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016bf4:	4910      	ldr	r1, [pc, #64]	; (8016c38 <ipfrag_free_pbuf_custom+0x5c>)
 8016bf6:	4811      	ldr	r0, [pc, #68]	; (8016c3c <ipfrag_free_pbuf_custom+0x60>)
 8016bf8:	f000 fc66 	bl	80174c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016bfc:	68fa      	ldr	r2, [r7, #12]
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d006      	beq.n	8016c12 <ipfrag_free_pbuf_custom+0x36>
 8016c04:	4b0b      	ldr	r3, [pc, #44]	; (8016c34 <ipfrag_free_pbuf_custom+0x58>)
 8016c06:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016c0a:	490d      	ldr	r1, [pc, #52]	; (8016c40 <ipfrag_free_pbuf_custom+0x64>)
 8016c0c:	480b      	ldr	r0, [pc, #44]	; (8016c3c <ipfrag_free_pbuf_custom+0x60>)
 8016c0e:	f000 fc5b 	bl	80174c8 <iprintf>
  if (pcr->original != NULL) {
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	695b      	ldr	r3, [r3, #20]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d004      	beq.n	8016c24 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	695b      	ldr	r3, [r3, #20]
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f7f4 ff3e 	bl	800baa0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016c24:	68f8      	ldr	r0, [r7, #12]
 8016c26:	f7ff ffbd 	bl	8016ba4 <ip_frag_free_pbuf_custom_ref>
}
 8016c2a:	bf00      	nop
 8016c2c:	3710      	adds	r7, #16
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	bf00      	nop
 8016c34:	0801b9b0 	.word	0x0801b9b0
 8016c38:	0801bb74 	.word	0x0801bb74
 8016c3c:	0801b9f8 	.word	0x0801b9f8
 8016c40:	0801bb80 	.word	0x0801bb80

08016c44 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b094      	sub	sp, #80	; 0x50
 8016c48:	af02      	add	r7, sp, #8
 8016c4a:	60f8      	str	r0, [r7, #12]
 8016c4c:	60b9      	str	r1, [r7, #8]
 8016c4e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016c50:	2300      	movs	r3, #0
 8016c52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c5a:	3b14      	subs	r3, #20
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	da00      	bge.n	8016c62 <ip4_frag+0x1e>
 8016c60:	3307      	adds	r3, #7
 8016c62:	10db      	asrs	r3, r3, #3
 8016c64:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016c66:	2314      	movs	r3, #20
 8016c68:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c72:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c76:	781b      	ldrb	r3, [r3, #0]
 8016c78:	f003 030f 	and.w	r3, r3, #15
 8016c7c:	b2db      	uxtb	r3, r3
 8016c7e:	009b      	lsls	r3, r3, #2
 8016c80:	b2db      	uxtb	r3, r3
 8016c82:	2b14      	cmp	r3, #20
 8016c84:	d002      	beq.n	8016c8c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016c86:	f06f 0305 	mvn.w	r3, #5
 8016c8a:	e10f      	b.n	8016eac <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	895b      	ldrh	r3, [r3, #10]
 8016c90:	2b13      	cmp	r3, #19
 8016c92:	d809      	bhi.n	8016ca8 <ip4_frag+0x64>
 8016c94:	4b87      	ldr	r3, [pc, #540]	; (8016eb4 <ip4_frag+0x270>)
 8016c96:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016c9a:	4987      	ldr	r1, [pc, #540]	; (8016eb8 <ip4_frag+0x274>)
 8016c9c:	4887      	ldr	r0, [pc, #540]	; (8016ebc <ip4_frag+0x278>)
 8016c9e:	f000 fc13 	bl	80174c8 <iprintf>
 8016ca2:	f06f 0305 	mvn.w	r3, #5
 8016ca6:	e101      	b.n	8016eac <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016caa:	88db      	ldrh	r3, [r3, #6]
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f7f3 fb42 	bl	800a338 <lwip_htons>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016cb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016cba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016cbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016cc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016cc8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	891b      	ldrh	r3, [r3, #8]
 8016cce:	3b14      	subs	r3, #20
 8016cd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016cd4:	e0e0      	b.n	8016e98 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016cd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016cd8:	00db      	lsls	r3, r3, #3
 8016cda:	b29b      	uxth	r3, r3
 8016cdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ce0:	4293      	cmp	r3, r2
 8016ce2:	bf28      	it	cs
 8016ce4:	4613      	movcs	r3, r2
 8016ce6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016ce8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cec:	2114      	movs	r1, #20
 8016cee:	200e      	movs	r0, #14
 8016cf0:	f7f4 fbf6 	bl	800b4e0 <pbuf_alloc>
 8016cf4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	f000 80d4 	beq.w	8016ea6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d00:	895b      	ldrh	r3, [r3, #10]
 8016d02:	2b13      	cmp	r3, #19
 8016d04:	d806      	bhi.n	8016d14 <ip4_frag+0xd0>
 8016d06:	4b6b      	ldr	r3, [pc, #428]	; (8016eb4 <ip4_frag+0x270>)
 8016d08:	f240 3225 	movw	r2, #805	; 0x325
 8016d0c:	496c      	ldr	r1, [pc, #432]	; (8016ec0 <ip4_frag+0x27c>)
 8016d0e:	486b      	ldr	r0, [pc, #428]	; (8016ebc <ip4_frag+0x278>)
 8016d10:	f000 fbda 	bl	80174c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d16:	685b      	ldr	r3, [r3, #4]
 8016d18:	2214      	movs	r2, #20
 8016d1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f000 fbc0 	bl	80174a2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016d28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016d2e:	e064      	b.n	8016dfa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	895a      	ldrh	r2, [r3, #10]
 8016d34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016d36:	1ad3      	subs	r3, r2, r3
 8016d38:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	895b      	ldrh	r3, [r3, #10]
 8016d3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d906      	bls.n	8016d52 <ip4_frag+0x10e>
 8016d44:	4b5b      	ldr	r3, [pc, #364]	; (8016eb4 <ip4_frag+0x270>)
 8016d46:	f240 322d 	movw	r2, #813	; 0x32d
 8016d4a:	495e      	ldr	r1, [pc, #376]	; (8016ec4 <ip4_frag+0x280>)
 8016d4c:	485b      	ldr	r0, [pc, #364]	; (8016ebc <ip4_frag+0x278>)
 8016d4e:	f000 fbbb 	bl	80174c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016d52:	8bfa      	ldrh	r2, [r7, #30]
 8016d54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016d58:	4293      	cmp	r3, r2
 8016d5a:	bf28      	it	cs
 8016d5c:	4613      	movcs	r3, r2
 8016d5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016d62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d105      	bne.n	8016d76 <ip4_frag+0x132>
        poff = 0;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	60fb      	str	r3, [r7, #12]
        continue;
 8016d74:	e041      	b.n	8016dfa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016d76:	f7ff ff0d 	bl	8016b94 <ip_frag_alloc_pbuf_custom_ref>
 8016d7a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016d7c:	69bb      	ldr	r3, [r7, #24]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d103      	bne.n	8016d8a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d84:	f7f4 fe8c 	bl	800baa0 <pbuf_free>
        goto memerr;
 8016d88:	e08e      	b.n	8016ea8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016d8a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016d90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016d92:	4413      	add	r3, r2
 8016d94:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016d98:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016d9c:	9201      	str	r2, [sp, #4]
 8016d9e:	9300      	str	r3, [sp, #0]
 8016da0:	4603      	mov	r3, r0
 8016da2:	2241      	movs	r2, #65	; 0x41
 8016da4:	2000      	movs	r0, #0
 8016da6:	f7f4 fcc1 	bl	800b72c <pbuf_alloced_custom>
 8016daa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d106      	bne.n	8016dc0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016db2:	69b8      	ldr	r0, [r7, #24]
 8016db4:	f7ff fef6 	bl	8016ba4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dba:	f7f4 fe71 	bl	800baa0 <pbuf_free>
        goto memerr;
 8016dbe:	e073      	b.n	8016ea8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8016dc0:	68f8      	ldr	r0, [r7, #12]
 8016dc2:	f7f4 ff13 	bl	800bbec <pbuf_ref>
      pcr->original = p;
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	68fa      	ldr	r2, [r7, #12]
 8016dca:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016dcc:	69bb      	ldr	r3, [r7, #24]
 8016dce:	4a3e      	ldr	r2, [pc, #248]	; (8016ec8 <ip4_frag+0x284>)
 8016dd0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016dd2:	6979      	ldr	r1, [r7, #20]
 8016dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dd6:	f7f4 ff31 	bl	800bc3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016dda:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016dde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016de2:	1ad3      	subs	r3, r2, r3
 8016de4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016de8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d004      	beq.n	8016dfa <ip4_frag+0x1b6>
        poff = 0;
 8016df0:	2300      	movs	r3, #0
 8016df2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016dfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d196      	bne.n	8016d30 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016e02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016e04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016e08:	4413      	add	r3, r2
 8016e0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016e0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e14:	3b14      	subs	r3, #20
 8016e16:	429a      	cmp	r2, r3
 8016e18:	bfd4      	ite	le
 8016e1a:	2301      	movle	r3, #1
 8016e1c:	2300      	movgt	r3, #0
 8016e1e:	b2db      	uxtb	r3, r3
 8016e20:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016e22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016e26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016e2c:	6a3b      	ldr	r3, [r7, #32]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d002      	beq.n	8016e38 <ip4_frag+0x1f4>
 8016e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d003      	beq.n	8016e40 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016e38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016e3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016e40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7f3 fa78 	bl	800a338 <lwip_htons>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e4e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016e50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016e52:	3314      	adds	r3, #20
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	4618      	mov	r0, r3
 8016e58:	f7f3 fa6e 	bl	800a338 <lwip_htons>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	461a      	mov	r2, r3
 8016e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e62:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e66:	2200      	movs	r2, #0
 8016e68:	729a      	strb	r2, [r3, #10]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	695b      	ldr	r3, [r3, #20]
 8016e72:	687a      	ldr	r2, [r7, #4]
 8016e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e76:	68b8      	ldr	r0, [r7, #8]
 8016e78:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e7c:	f7f4 fe10 	bl	800baa0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016e80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016e86:	1ad3      	subs	r3, r2, r3
 8016e88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016e8c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016e90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016e92:	4413      	add	r3, r2
 8016e94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016e98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	f47f af1a 	bne.w	8016cd6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	e002      	b.n	8016eac <ip4_frag+0x268>
      goto memerr;
 8016ea6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3748      	adds	r7, #72	; 0x48
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}
 8016eb4:	0801b9b0 	.word	0x0801b9b0
 8016eb8:	0801bb8c 	.word	0x0801bb8c
 8016ebc:	0801b9f8 	.word	0x0801b9f8
 8016ec0:	0801bba8 	.word	0x0801bba8
 8016ec4:	0801bbc8 	.word	0x0801bbc8
 8016ec8:	08016bdd 	.word	0x08016bdd

08016ecc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b086      	sub	sp, #24
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
 8016ed4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016ed6:	230e      	movs	r3, #14
 8016ed8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	895b      	ldrh	r3, [r3, #10]
 8016ede:	2b0e      	cmp	r3, #14
 8016ee0:	d96e      	bls.n	8016fc0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	7bdb      	ldrb	r3, [r3, #15]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d106      	bne.n	8016ef8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016eea:	683b      	ldr	r3, [r7, #0]
 8016eec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	b2da      	uxtb	r2, r3
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	7b1a      	ldrb	r2, [r3, #12]
 8016f02:	7b5b      	ldrb	r3, [r3, #13]
 8016f04:	021b      	lsls	r3, r3, #8
 8016f06:	4313      	orrs	r3, r2
 8016f08:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	f003 0301 	and.w	r3, r3, #1
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d023      	beq.n	8016f5e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016f16:	693b      	ldr	r3, [r7, #16]
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	2b01      	cmp	r3, #1
 8016f1c:	d10f      	bne.n	8016f3e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	785b      	ldrb	r3, [r3, #1]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d11b      	bne.n	8016f5e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016f26:	693b      	ldr	r3, [r7, #16]
 8016f28:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016f2a:	2b5e      	cmp	r3, #94	; 0x5e
 8016f2c:	d117      	bne.n	8016f5e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	7b5b      	ldrb	r3, [r3, #13]
 8016f32:	f043 0310 	orr.w	r3, r3, #16
 8016f36:	b2da      	uxtb	r2, r3
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	735a      	strb	r2, [r3, #13]
 8016f3c:	e00f      	b.n	8016f5e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016f3e:	693b      	ldr	r3, [r7, #16]
 8016f40:	2206      	movs	r2, #6
 8016f42:	4928      	ldr	r1, [pc, #160]	; (8016fe4 <ethernet_input+0x118>)
 8016f44:	4618      	mov	r0, r3
 8016f46:	f000 fa9d 	bl	8017484 <memcmp>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d106      	bne.n	8016f5e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	7b5b      	ldrb	r3, [r3, #13]
 8016f54:	f043 0308 	orr.w	r3, r3, #8
 8016f58:	b2da      	uxtb	r2, r3
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016f5e:	89fb      	ldrh	r3, [r7, #14]
 8016f60:	2b08      	cmp	r3, #8
 8016f62:	d003      	beq.n	8016f6c <ethernet_input+0xa0>
 8016f64:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016f68:	d014      	beq.n	8016f94 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016f6a:	e032      	b.n	8016fd2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016f72:	f003 0308 	and.w	r3, r3, #8
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d024      	beq.n	8016fc4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016f7a:	8afb      	ldrh	r3, [r7, #22]
 8016f7c:	4619      	mov	r1, r3
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f7f4 fd08 	bl	800b994 <pbuf_remove_header>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d11e      	bne.n	8016fc8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016f8a:	6839      	ldr	r1, [r7, #0]
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	f7fe ff0f 	bl	8015db0 <ip4_input>
      break;
 8016f92:	e013      	b.n	8016fbc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016f9a:	f003 0308 	and.w	r3, r3, #8
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d014      	beq.n	8016fcc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016fa2:	8afb      	ldrh	r3, [r7, #22]
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f7f4 fcf4 	bl	800b994 <pbuf_remove_header>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d10e      	bne.n	8016fd0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016fb2:	6839      	ldr	r1, [r7, #0]
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	f7fe f8ab 	bl	8015110 <etharp_input>
      break;
 8016fba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	e00c      	b.n	8016fda <ethernet_input+0x10e>
    goto free_and_return;
 8016fc0:	bf00      	nop
 8016fc2:	e006      	b.n	8016fd2 <ethernet_input+0x106>
        goto free_and_return;
 8016fc4:	bf00      	nop
 8016fc6:	e004      	b.n	8016fd2 <ethernet_input+0x106>
        goto free_and_return;
 8016fc8:	bf00      	nop
 8016fca:	e002      	b.n	8016fd2 <ethernet_input+0x106>
        goto free_and_return;
 8016fcc:	bf00      	nop
 8016fce:	e000      	b.n	8016fd2 <ethernet_input+0x106>
        goto free_and_return;
 8016fd0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f7f4 fd64 	bl	800baa0 <pbuf_free>
  return ERR_OK;
 8016fd8:	2300      	movs	r3, #0
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3718      	adds	r7, #24
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	0801bdb0 	.word	0x0801bdb0

08016fe8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b086      	sub	sp, #24
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	60f8      	str	r0, [r7, #12]
 8016ff0:	60b9      	str	r1, [r7, #8]
 8016ff2:	607a      	str	r2, [r7, #4]
 8016ff4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016ff6:	8c3b      	ldrh	r3, [r7, #32]
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7f3 f99d 	bl	800a338 <lwip_htons>
 8016ffe:	4603      	mov	r3, r0
 8017000:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017002:	210e      	movs	r1, #14
 8017004:	68b8      	ldr	r0, [r7, #8]
 8017006:	f7f4 fcb5 	bl	800b974 <pbuf_add_header>
 801700a:	4603      	mov	r3, r0
 801700c:	2b00      	cmp	r3, #0
 801700e:	d125      	bne.n	801705c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	685b      	ldr	r3, [r3, #4]
 8017014:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	8afa      	ldrh	r2, [r7, #22]
 801701a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	2206      	movs	r2, #6
 8017020:	6839      	ldr	r1, [r7, #0]
 8017022:	4618      	mov	r0, r3
 8017024:	f000 fa3d 	bl	80174a2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017028:	693b      	ldr	r3, [r7, #16]
 801702a:	3306      	adds	r3, #6
 801702c:	2206      	movs	r2, #6
 801702e:	6879      	ldr	r1, [r7, #4]
 8017030:	4618      	mov	r0, r3
 8017032:	f000 fa36 	bl	80174a2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801703c:	2b06      	cmp	r3, #6
 801703e:	d006      	beq.n	801704e <ethernet_output+0x66>
 8017040:	4b0a      	ldr	r3, [pc, #40]	; (801706c <ethernet_output+0x84>)
 8017042:	f240 1233 	movw	r2, #307	; 0x133
 8017046:	490a      	ldr	r1, [pc, #40]	; (8017070 <ethernet_output+0x88>)
 8017048:	480a      	ldr	r0, [pc, #40]	; (8017074 <ethernet_output+0x8c>)
 801704a:	f000 fa3d 	bl	80174c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	699b      	ldr	r3, [r3, #24]
 8017052:	68b9      	ldr	r1, [r7, #8]
 8017054:	68f8      	ldr	r0, [r7, #12]
 8017056:	4798      	blx	r3
 8017058:	4603      	mov	r3, r0
 801705a:	e002      	b.n	8017062 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801705c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801705e:	f06f 0301 	mvn.w	r3, #1
}
 8017062:	4618      	mov	r0, r3
 8017064:	3718      	adds	r7, #24
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
 801706a:	bf00      	nop
 801706c:	0801bbd8 	.word	0x0801bbd8
 8017070:	0801bc10 	.word	0x0801bc10
 8017074:	0801bc44 	.word	0x0801bc44

08017078 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b086      	sub	sp, #24
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
 8017080:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	60bb      	str	r3, [r7, #8]
 8017086:	2304      	movs	r3, #4
 8017088:	60fb      	str	r3, [r7, #12]
 801708a:	2300      	movs	r3, #0
 801708c:	613b      	str	r3, [r7, #16]
 801708e:	2300      	movs	r3, #0
 8017090:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017092:	f107 0308 	add.w	r3, r7, #8
 8017096:	2100      	movs	r1, #0
 8017098:	4618      	mov	r0, r3
 801709a:	f7ee f8ba 	bl	8005212 <osMessageCreate>
 801709e:	4602      	mov	r2, r0
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d102      	bne.n	80170b2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80170ac:	f04f 33ff 	mov.w	r3, #4294967295
 80170b0:	e000      	b.n	80170b4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80170b2:	2300      	movs	r3, #0
}
 80170b4:	4618      	mov	r0, r3
 80170b6:	3718      	adds	r7, #24
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bd80      	pop	{r7, pc}

080170bc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b082      	sub	sp, #8
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	4618      	mov	r0, r3
 80170ca:	f7ee f97f 	bl	80053cc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7ee f990 	bl	80053f8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80170d8:	bf00      	nop
 80170da:	3708      	adds	r7, #8
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b084      	sub	sp, #16
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
 80170e8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	6839      	ldr	r1, [r7, #0]
 80170f0:	2200      	movs	r2, #0
 80170f2:	4618      	mov	r0, r3
 80170f4:	f7ee f8b6 	bl	8005264 <osMessagePut>
 80170f8:	4603      	mov	r3, r0
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d102      	bne.n	8017104 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80170fe:	2300      	movs	r3, #0
 8017100:	73fb      	strb	r3, [r7, #15]
 8017102:	e001      	b.n	8017108 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017104:	23ff      	movs	r3, #255	; 0xff
 8017106:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017108:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801710c:	4618      	mov	r0, r3
 801710e:	3710      	adds	r7, #16
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}

08017114 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b08c      	sub	sp, #48	; 0x30
 8017118:	af00      	add	r7, sp, #0
 801711a:	61f8      	str	r0, [r7, #28]
 801711c:	61b9      	str	r1, [r7, #24]
 801711e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017120:	f7ed fe9f 	bl	8004e62 <osKernelSysTick>
 8017124:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017126:	697b      	ldr	r3, [r7, #20]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d017      	beq.n	801715c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801712c:	69fb      	ldr	r3, [r7, #28]
 801712e:	6819      	ldr	r1, [r3, #0]
 8017130:	f107 0320 	add.w	r3, r7, #32
 8017134:	697a      	ldr	r2, [r7, #20]
 8017136:	4618      	mov	r0, r3
 8017138:	f7ee f8d4 	bl	80052e4 <osMessageGet>

    if(event.status == osEventMessage)
 801713c:	6a3b      	ldr	r3, [r7, #32]
 801713e:	2b10      	cmp	r3, #16
 8017140:	d109      	bne.n	8017156 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017144:	461a      	mov	r2, r3
 8017146:	69bb      	ldr	r3, [r7, #24]
 8017148:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801714a:	f7ed fe8a 	bl	8004e62 <osKernelSysTick>
 801714e:	4602      	mov	r2, r0
 8017150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017152:	1ad3      	subs	r3, r2, r3
 8017154:	e019      	b.n	801718a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017156:	f04f 33ff 	mov.w	r3, #4294967295
 801715a:	e016      	b.n	801718a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801715c:	69fb      	ldr	r3, [r7, #28]
 801715e:	6819      	ldr	r1, [r3, #0]
 8017160:	463b      	mov	r3, r7
 8017162:	f04f 32ff 	mov.w	r2, #4294967295
 8017166:	4618      	mov	r0, r3
 8017168:	f7ee f8bc 	bl	80052e4 <osMessageGet>
 801716c:	f107 0320 	add.w	r3, r7, #32
 8017170:	463a      	mov	r2, r7
 8017172:	ca07      	ldmia	r2, {r0, r1, r2}
 8017174:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717a:	461a      	mov	r2, r3
 801717c:	69bb      	ldr	r3, [r7, #24]
 801717e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017180:	f7ed fe6f 	bl	8004e62 <osKernelSysTick>
 8017184:	4602      	mov	r2, r0
 8017186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017188:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801718a:	4618      	mov	r0, r3
 801718c:	3730      	adds	r7, #48	; 0x30
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}

08017192 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017192:	b580      	push	{r7, lr}
 8017194:	b086      	sub	sp, #24
 8017196:	af00      	add	r7, sp, #0
 8017198:	6078      	str	r0, [r7, #4]
 801719a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6819      	ldr	r1, [r3, #0]
 80171a0:	f107 030c 	add.w	r3, r7, #12
 80171a4:	2200      	movs	r2, #0
 80171a6:	4618      	mov	r0, r3
 80171a8:	f7ee f89c 	bl	80052e4 <osMessageGet>

  if(event.status == osEventMessage)
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	2b10      	cmp	r3, #16
 80171b0:	d105      	bne.n	80171be <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80171b2:	693b      	ldr	r3, [r7, #16]
 80171b4:	461a      	mov	r2, r3
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80171ba:	2300      	movs	r3, #0
 80171bc:	e001      	b.n	80171c2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80171be:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	3718      	adds	r7, #24
 80171c6:	46bd      	mov	sp, r7
 80171c8:	bd80      	pop	{r7, pc}

080171ca <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80171ca:	b480      	push	{r7}
 80171cc:	b083      	sub	sp, #12
 80171ce:	af00      	add	r7, sp, #0
 80171d0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d101      	bne.n	80171de <sys_mbox_valid+0x14>
    return 0;
 80171da:	2300      	movs	r3, #0
 80171dc:	e000      	b.n	80171e0 <sys_mbox_valid+0x16>
  else
    return 1;
 80171de:	2301      	movs	r3, #1
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	370c      	adds	r7, #12
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr

080171ec <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80171ec:	b480      	push	{r7}
 80171ee:	b083      	sub	sp, #12
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2200      	movs	r2, #0
 80171f8:	601a      	str	r2, [r3, #0]
}
 80171fa:	bf00      	nop
 80171fc:	370c      	adds	r7, #12
 80171fe:	46bd      	mov	sp, r7
 8017200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017204:	4770      	bx	lr

08017206 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017206:	b580      	push	{r7, lr}
 8017208:	b084      	sub	sp, #16
 801720a:	af00      	add	r7, sp, #0
 801720c:	6078      	str	r0, [r7, #4]
 801720e:	460b      	mov	r3, r1
 8017210:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017212:	2300      	movs	r3, #0
 8017214:	60bb      	str	r3, [r7, #8]
 8017216:	2300      	movs	r3, #0
 8017218:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801721a:	f107 0308 	add.w	r3, r7, #8
 801721e:	2101      	movs	r1, #1
 8017220:	4618      	mov	r0, r3
 8017222:	f7ed ff2b 	bl	800507c <osSemaphoreCreate>
 8017226:	4602      	mov	r2, r0
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d102      	bne.n	801723a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017234:	f04f 33ff 	mov.w	r3, #4294967295
 8017238:	e009      	b.n	801724e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801723a:	78fb      	ldrb	r3, [r7, #3]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d105      	bne.n	801724c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	2100      	movs	r1, #0
 8017246:	4618      	mov	r0, r3
 8017248:	f7ed ff4c 	bl	80050e4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801724c:	2300      	movs	r3, #0
}
 801724e:	4618      	mov	r0, r3
 8017250:	3710      	adds	r7, #16
 8017252:	46bd      	mov	sp, r7
 8017254:	bd80      	pop	{r7, pc}

08017256 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017256:	b580      	push	{r7, lr}
 8017258:	b084      	sub	sp, #16
 801725a:	af00      	add	r7, sp, #0
 801725c:	6078      	str	r0, [r7, #4]
 801725e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017260:	f7ed fdff 	bl	8004e62 <osKernelSysTick>
 8017264:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d011      	beq.n	8017290 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	6839      	ldr	r1, [r7, #0]
 8017272:	4618      	mov	r0, r3
 8017274:	f7ed ff36 	bl	80050e4 <osSemaphoreWait>
 8017278:	4603      	mov	r3, r0
 801727a:	2b00      	cmp	r3, #0
 801727c:	d105      	bne.n	801728a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801727e:	f7ed fdf0 	bl	8004e62 <osKernelSysTick>
 8017282:	4602      	mov	r2, r0
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	1ad3      	subs	r3, r2, r3
 8017288:	e012      	b.n	80172b0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801728a:	f04f 33ff 	mov.w	r3, #4294967295
 801728e:	e00f      	b.n	80172b0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017290:	bf00      	nop
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	f04f 31ff 	mov.w	r1, #4294967295
 801729a:	4618      	mov	r0, r3
 801729c:	f7ed ff22 	bl	80050e4 <osSemaphoreWait>
 80172a0:	4603      	mov	r3, r0
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d1f5      	bne.n	8017292 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80172a6:	f7ed fddc 	bl	8004e62 <osKernelSysTick>
 80172aa:	4602      	mov	r2, r0
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	3710      	adds	r7, #16
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b082      	sub	sp, #8
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4618      	mov	r0, r3
 80172c6:	f7ed ff5b 	bl	8005180 <osSemaphoreRelease>
}
 80172ca:	bf00      	nop
 80172cc:	3708      	adds	r7, #8
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}

080172d2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80172d2:	b580      	push	{r7, lr}
 80172d4:	b082      	sub	sp, #8
 80172d6:	af00      	add	r7, sp, #0
 80172d8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	4618      	mov	r0, r3
 80172e0:	f7ed ff84 	bl	80051ec <osSemaphoreDelete>
}
 80172e4:	bf00      	nop
 80172e6:	3708      	adds	r7, #8
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}

080172ec <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80172ec:	b480      	push	{r7}
 80172ee:	b083      	sub	sp, #12
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d101      	bne.n	8017300 <sys_sem_valid+0x14>
    return 0;
 80172fc:	2300      	movs	r3, #0
 80172fe:	e000      	b.n	8017302 <sys_sem_valid+0x16>
  else
    return 1;
 8017300:	2301      	movs	r3, #1
}
 8017302:	4618      	mov	r0, r3
 8017304:	370c      	adds	r7, #12
 8017306:	46bd      	mov	sp, r7
 8017308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730c:	4770      	bx	lr

0801730e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801730e:	b480      	push	{r7}
 8017310:	b083      	sub	sp, #12
 8017312:	af00      	add	r7, sp, #0
 8017314:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2200      	movs	r2, #0
 801731a:	601a      	str	r2, [r3, #0]
}
 801731c:	bf00      	nop
 801731e:	370c      	adds	r7, #12
 8017320:	46bd      	mov	sp, r7
 8017322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017326:	4770      	bx	lr

08017328 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801732c:	4803      	ldr	r0, [pc, #12]	; (801733c <sys_init+0x14>)
 801732e:	f7ed fe08 	bl	8004f42 <osMutexCreate>
 8017332:	4602      	mov	r2, r0
 8017334:	4b02      	ldr	r3, [pc, #8]	; (8017340 <sys_init+0x18>)
 8017336:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017338:	bf00      	nop
 801733a:	bd80      	pop	{r7, pc}
 801733c:	0801bdc0 	.word	0x0801bdc0
 8017340:	2000f374 	.word	0x2000f374

08017344 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017344:	b580      	push	{r7, lr}
 8017346:	b084      	sub	sp, #16
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801734c:	2300      	movs	r3, #0
 801734e:	60bb      	str	r3, [r7, #8]
 8017350:	2300      	movs	r3, #0
 8017352:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017354:	f107 0308 	add.w	r3, r7, #8
 8017358:	4618      	mov	r0, r3
 801735a:	f7ed fdf2 	bl	8004f42 <osMutexCreate>
 801735e:	4602      	mov	r2, r0
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d102      	bne.n	8017372 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801736c:	f04f 33ff 	mov.w	r3, #4294967295
 8017370:	e000      	b.n	8017374 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017372:	2300      	movs	r3, #0
}
 8017374:	4618      	mov	r0, r3
 8017376:	3710      	adds	r7, #16
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}

0801737c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	f04f 31ff 	mov.w	r1, #4294967295
 801738c:	4618      	mov	r0, r3
 801738e:	f7ed fdf1 	bl	8004f74 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017392:	bf00      	nop
 8017394:	3708      	adds	r7, #8
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}

0801739a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801739a:	b580      	push	{r7, lr}
 801739c:	b082      	sub	sp, #8
 801739e:	af00      	add	r7, sp, #0
 80173a0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7ed fe32 	bl	8005010 <osMutexRelease>
}
 80173ac:	bf00      	nop
 80173ae:	3708      	adds	r7, #8
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b08c      	sub	sp, #48	; 0x30
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	60b9      	str	r1, [r7, #8]
 80173be:	607a      	str	r2, [r7, #4]
 80173c0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80173c2:	f107 0314 	add.w	r3, r7, #20
 80173c6:	2200      	movs	r2, #0
 80173c8:	601a      	str	r2, [r3, #0]
 80173ca:	605a      	str	r2, [r3, #4]
 80173cc:	609a      	str	r2, [r3, #8]
 80173ce:	60da      	str	r2, [r3, #12]
 80173d0:	611a      	str	r2, [r3, #16]
 80173d2:	615a      	str	r2, [r3, #20]
 80173d4:	619a      	str	r2, [r3, #24]
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	617b      	str	r3, [r7, #20]
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	61bb      	str	r3, [r7, #24]
 80173de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173e0:	b21b      	sxth	r3, r3
 80173e2:	83bb      	strh	r3, [r7, #28]
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80173e8:	f107 0314 	add.w	r3, r7, #20
 80173ec:	6879      	ldr	r1, [r7, #4]
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7ed fd47 	bl	8004e82 <osThreadCreate>
 80173f4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3730      	adds	r7, #48	; 0x30
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
	...

08017400 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017404:	4b04      	ldr	r3, [pc, #16]	; (8017418 <sys_arch_protect+0x18>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	f04f 31ff 	mov.w	r1, #4294967295
 801740c:	4618      	mov	r0, r3
 801740e:	f7ed fdb1 	bl	8004f74 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017412:	2301      	movs	r3, #1
}
 8017414:	4618      	mov	r0, r3
 8017416:	bd80      	pop	{r7, pc}
 8017418:	2000f374 	.word	0x2000f374

0801741c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b082      	sub	sp, #8
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017424:	4b04      	ldr	r3, [pc, #16]	; (8017438 <sys_arch_unprotect+0x1c>)
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	4618      	mov	r0, r3
 801742a:	f7ed fdf1 	bl	8005010 <osMutexRelease>
}
 801742e:	bf00      	nop
 8017430:	3708      	adds	r7, #8
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}
 8017436:	bf00      	nop
 8017438:	2000f374 	.word	0x2000f374

0801743c <__libc_init_array>:
 801743c:	b570      	push	{r4, r5, r6, lr}
 801743e:	4e0d      	ldr	r6, [pc, #52]	; (8017474 <__libc_init_array+0x38>)
 8017440:	4c0d      	ldr	r4, [pc, #52]	; (8017478 <__libc_init_array+0x3c>)
 8017442:	1ba4      	subs	r4, r4, r6
 8017444:	10a4      	asrs	r4, r4, #2
 8017446:	2500      	movs	r5, #0
 8017448:	42a5      	cmp	r5, r4
 801744a:	d109      	bne.n	8017460 <__libc_init_array+0x24>
 801744c:	4e0b      	ldr	r6, [pc, #44]	; (801747c <__libc_init_array+0x40>)
 801744e:	4c0c      	ldr	r4, [pc, #48]	; (8017480 <__libc_init_array+0x44>)
 8017450:	f000 ff5a 	bl	8018308 <_init>
 8017454:	1ba4      	subs	r4, r4, r6
 8017456:	10a4      	asrs	r4, r4, #2
 8017458:	2500      	movs	r5, #0
 801745a:	42a5      	cmp	r5, r4
 801745c:	d105      	bne.n	801746a <__libc_init_array+0x2e>
 801745e:	bd70      	pop	{r4, r5, r6, pc}
 8017460:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017464:	4798      	blx	r3
 8017466:	3501      	adds	r5, #1
 8017468:	e7ee      	b.n	8017448 <__libc_init_array+0xc>
 801746a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801746e:	4798      	blx	r3
 8017470:	3501      	adds	r5, #1
 8017472:	e7f2      	b.n	801745a <__libc_init_array+0x1e>
 8017474:	0801be68 	.word	0x0801be68
 8017478:	0801be68 	.word	0x0801be68
 801747c:	0801be68 	.word	0x0801be68
 8017480:	0801be6c 	.word	0x0801be6c

08017484 <memcmp>:
 8017484:	b530      	push	{r4, r5, lr}
 8017486:	2400      	movs	r4, #0
 8017488:	42a2      	cmp	r2, r4
 801748a:	d101      	bne.n	8017490 <memcmp+0xc>
 801748c:	2000      	movs	r0, #0
 801748e:	e007      	b.n	80174a0 <memcmp+0x1c>
 8017490:	5d03      	ldrb	r3, [r0, r4]
 8017492:	3401      	adds	r4, #1
 8017494:	190d      	adds	r5, r1, r4
 8017496:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801749a:	42ab      	cmp	r3, r5
 801749c:	d0f4      	beq.n	8017488 <memcmp+0x4>
 801749e:	1b58      	subs	r0, r3, r5
 80174a0:	bd30      	pop	{r4, r5, pc}

080174a2 <memcpy>:
 80174a2:	b510      	push	{r4, lr}
 80174a4:	1e43      	subs	r3, r0, #1
 80174a6:	440a      	add	r2, r1
 80174a8:	4291      	cmp	r1, r2
 80174aa:	d100      	bne.n	80174ae <memcpy+0xc>
 80174ac:	bd10      	pop	{r4, pc}
 80174ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80174b6:	e7f7      	b.n	80174a8 <memcpy+0x6>

080174b8 <memset>:
 80174b8:	4402      	add	r2, r0
 80174ba:	4603      	mov	r3, r0
 80174bc:	4293      	cmp	r3, r2
 80174be:	d100      	bne.n	80174c2 <memset+0xa>
 80174c0:	4770      	bx	lr
 80174c2:	f803 1b01 	strb.w	r1, [r3], #1
 80174c6:	e7f9      	b.n	80174bc <memset+0x4>

080174c8 <iprintf>:
 80174c8:	b40f      	push	{r0, r1, r2, r3}
 80174ca:	4b0a      	ldr	r3, [pc, #40]	; (80174f4 <iprintf+0x2c>)
 80174cc:	b513      	push	{r0, r1, r4, lr}
 80174ce:	681c      	ldr	r4, [r3, #0]
 80174d0:	b124      	cbz	r4, 80174dc <iprintf+0x14>
 80174d2:	69a3      	ldr	r3, [r4, #24]
 80174d4:	b913      	cbnz	r3, 80174dc <iprintf+0x14>
 80174d6:	4620      	mov	r0, r4
 80174d8:	f000 f882 	bl	80175e0 <__sinit>
 80174dc:	ab05      	add	r3, sp, #20
 80174de:	9a04      	ldr	r2, [sp, #16]
 80174e0:	68a1      	ldr	r1, [r4, #8]
 80174e2:	9301      	str	r3, [sp, #4]
 80174e4:	4620      	mov	r0, r4
 80174e6:	f000 f9df 	bl	80178a8 <_vfiprintf_r>
 80174ea:	b002      	add	sp, #8
 80174ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174f0:	b004      	add	sp, #16
 80174f2:	4770      	bx	lr
 80174f4:	20000020 	.word	0x20000020

080174f8 <rand>:
 80174f8:	b538      	push	{r3, r4, r5, lr}
 80174fa:	4b13      	ldr	r3, [pc, #76]	; (8017548 <rand+0x50>)
 80174fc:	681c      	ldr	r4, [r3, #0]
 80174fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017500:	b97b      	cbnz	r3, 8017522 <rand+0x2a>
 8017502:	2018      	movs	r0, #24
 8017504:	f000 f8f6 	bl	80176f4 <malloc>
 8017508:	4a10      	ldr	r2, [pc, #64]	; (801754c <rand+0x54>)
 801750a:	4b11      	ldr	r3, [pc, #68]	; (8017550 <rand+0x58>)
 801750c:	63a0      	str	r0, [r4, #56]	; 0x38
 801750e:	e9c0 2300 	strd	r2, r3, [r0]
 8017512:	4b10      	ldr	r3, [pc, #64]	; (8017554 <rand+0x5c>)
 8017514:	6083      	str	r3, [r0, #8]
 8017516:	230b      	movs	r3, #11
 8017518:	8183      	strh	r3, [r0, #12]
 801751a:	2201      	movs	r2, #1
 801751c:	2300      	movs	r3, #0
 801751e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017522:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017524:	480c      	ldr	r0, [pc, #48]	; (8017558 <rand+0x60>)
 8017526:	690a      	ldr	r2, [r1, #16]
 8017528:	694b      	ldr	r3, [r1, #20]
 801752a:	4c0c      	ldr	r4, [pc, #48]	; (801755c <rand+0x64>)
 801752c:	4350      	muls	r0, r2
 801752e:	fb04 0003 	mla	r0, r4, r3, r0
 8017532:	fba2 2304 	umull	r2, r3, r2, r4
 8017536:	4403      	add	r3, r0
 8017538:	1c54      	adds	r4, r2, #1
 801753a:	f143 0500 	adc.w	r5, r3, #0
 801753e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017542:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017546:	bd38      	pop	{r3, r4, r5, pc}
 8017548:	20000020 	.word	0x20000020
 801754c:	abcd330e 	.word	0xabcd330e
 8017550:	e66d1234 	.word	0xe66d1234
 8017554:	0005deec 	.word	0x0005deec
 8017558:	5851f42d 	.word	0x5851f42d
 801755c:	4c957f2d 	.word	0x4c957f2d

08017560 <std>:
 8017560:	2300      	movs	r3, #0
 8017562:	b510      	push	{r4, lr}
 8017564:	4604      	mov	r4, r0
 8017566:	e9c0 3300 	strd	r3, r3, [r0]
 801756a:	6083      	str	r3, [r0, #8]
 801756c:	8181      	strh	r1, [r0, #12]
 801756e:	6643      	str	r3, [r0, #100]	; 0x64
 8017570:	81c2      	strh	r2, [r0, #14]
 8017572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017576:	6183      	str	r3, [r0, #24]
 8017578:	4619      	mov	r1, r3
 801757a:	2208      	movs	r2, #8
 801757c:	305c      	adds	r0, #92	; 0x5c
 801757e:	f7ff ff9b 	bl	80174b8 <memset>
 8017582:	4b05      	ldr	r3, [pc, #20]	; (8017598 <std+0x38>)
 8017584:	6263      	str	r3, [r4, #36]	; 0x24
 8017586:	4b05      	ldr	r3, [pc, #20]	; (801759c <std+0x3c>)
 8017588:	62a3      	str	r3, [r4, #40]	; 0x28
 801758a:	4b05      	ldr	r3, [pc, #20]	; (80175a0 <std+0x40>)
 801758c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801758e:	4b05      	ldr	r3, [pc, #20]	; (80175a4 <std+0x44>)
 8017590:	6224      	str	r4, [r4, #32]
 8017592:	6323      	str	r3, [r4, #48]	; 0x30
 8017594:	bd10      	pop	{r4, pc}
 8017596:	bf00      	nop
 8017598:	08017e05 	.word	0x08017e05
 801759c:	08017e27 	.word	0x08017e27
 80175a0:	08017e5f 	.word	0x08017e5f
 80175a4:	08017e83 	.word	0x08017e83

080175a8 <_cleanup_r>:
 80175a8:	4901      	ldr	r1, [pc, #4]	; (80175b0 <_cleanup_r+0x8>)
 80175aa:	f000 b885 	b.w	80176b8 <_fwalk_reent>
 80175ae:	bf00      	nop
 80175b0:	0801815d 	.word	0x0801815d

080175b4 <__sfmoreglue>:
 80175b4:	b570      	push	{r4, r5, r6, lr}
 80175b6:	1e4a      	subs	r2, r1, #1
 80175b8:	2568      	movs	r5, #104	; 0x68
 80175ba:	4355      	muls	r5, r2
 80175bc:	460e      	mov	r6, r1
 80175be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80175c2:	f000 f8ed 	bl	80177a0 <_malloc_r>
 80175c6:	4604      	mov	r4, r0
 80175c8:	b140      	cbz	r0, 80175dc <__sfmoreglue+0x28>
 80175ca:	2100      	movs	r1, #0
 80175cc:	e9c0 1600 	strd	r1, r6, [r0]
 80175d0:	300c      	adds	r0, #12
 80175d2:	60a0      	str	r0, [r4, #8]
 80175d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80175d8:	f7ff ff6e 	bl	80174b8 <memset>
 80175dc:	4620      	mov	r0, r4
 80175de:	bd70      	pop	{r4, r5, r6, pc}

080175e0 <__sinit>:
 80175e0:	6983      	ldr	r3, [r0, #24]
 80175e2:	b510      	push	{r4, lr}
 80175e4:	4604      	mov	r4, r0
 80175e6:	bb33      	cbnz	r3, 8017636 <__sinit+0x56>
 80175e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80175ec:	6503      	str	r3, [r0, #80]	; 0x50
 80175ee:	4b12      	ldr	r3, [pc, #72]	; (8017638 <__sinit+0x58>)
 80175f0:	4a12      	ldr	r2, [pc, #72]	; (801763c <__sinit+0x5c>)
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	6282      	str	r2, [r0, #40]	; 0x28
 80175f6:	4298      	cmp	r0, r3
 80175f8:	bf04      	itt	eq
 80175fa:	2301      	moveq	r3, #1
 80175fc:	6183      	streq	r3, [r0, #24]
 80175fe:	f000 f81f 	bl	8017640 <__sfp>
 8017602:	6060      	str	r0, [r4, #4]
 8017604:	4620      	mov	r0, r4
 8017606:	f000 f81b 	bl	8017640 <__sfp>
 801760a:	60a0      	str	r0, [r4, #8]
 801760c:	4620      	mov	r0, r4
 801760e:	f000 f817 	bl	8017640 <__sfp>
 8017612:	2200      	movs	r2, #0
 8017614:	60e0      	str	r0, [r4, #12]
 8017616:	2104      	movs	r1, #4
 8017618:	6860      	ldr	r0, [r4, #4]
 801761a:	f7ff ffa1 	bl	8017560 <std>
 801761e:	2201      	movs	r2, #1
 8017620:	2109      	movs	r1, #9
 8017622:	68a0      	ldr	r0, [r4, #8]
 8017624:	f7ff ff9c 	bl	8017560 <std>
 8017628:	2202      	movs	r2, #2
 801762a:	2112      	movs	r1, #18
 801762c:	68e0      	ldr	r0, [r4, #12]
 801762e:	f7ff ff97 	bl	8017560 <std>
 8017632:	2301      	movs	r3, #1
 8017634:	61a3      	str	r3, [r4, #24]
 8017636:	bd10      	pop	{r4, pc}
 8017638:	0801bdc8 	.word	0x0801bdc8
 801763c:	080175a9 	.word	0x080175a9

08017640 <__sfp>:
 8017640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017642:	4b1b      	ldr	r3, [pc, #108]	; (80176b0 <__sfp+0x70>)
 8017644:	681e      	ldr	r6, [r3, #0]
 8017646:	69b3      	ldr	r3, [r6, #24]
 8017648:	4607      	mov	r7, r0
 801764a:	b913      	cbnz	r3, 8017652 <__sfp+0x12>
 801764c:	4630      	mov	r0, r6
 801764e:	f7ff ffc7 	bl	80175e0 <__sinit>
 8017652:	3648      	adds	r6, #72	; 0x48
 8017654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017658:	3b01      	subs	r3, #1
 801765a:	d503      	bpl.n	8017664 <__sfp+0x24>
 801765c:	6833      	ldr	r3, [r6, #0]
 801765e:	b133      	cbz	r3, 801766e <__sfp+0x2e>
 8017660:	6836      	ldr	r6, [r6, #0]
 8017662:	e7f7      	b.n	8017654 <__sfp+0x14>
 8017664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017668:	b16d      	cbz	r5, 8017686 <__sfp+0x46>
 801766a:	3468      	adds	r4, #104	; 0x68
 801766c:	e7f4      	b.n	8017658 <__sfp+0x18>
 801766e:	2104      	movs	r1, #4
 8017670:	4638      	mov	r0, r7
 8017672:	f7ff ff9f 	bl	80175b4 <__sfmoreglue>
 8017676:	6030      	str	r0, [r6, #0]
 8017678:	2800      	cmp	r0, #0
 801767a:	d1f1      	bne.n	8017660 <__sfp+0x20>
 801767c:	230c      	movs	r3, #12
 801767e:	603b      	str	r3, [r7, #0]
 8017680:	4604      	mov	r4, r0
 8017682:	4620      	mov	r0, r4
 8017684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017686:	4b0b      	ldr	r3, [pc, #44]	; (80176b4 <__sfp+0x74>)
 8017688:	6665      	str	r5, [r4, #100]	; 0x64
 801768a:	e9c4 5500 	strd	r5, r5, [r4]
 801768e:	60a5      	str	r5, [r4, #8]
 8017690:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017694:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017698:	2208      	movs	r2, #8
 801769a:	4629      	mov	r1, r5
 801769c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80176a0:	f7ff ff0a 	bl	80174b8 <memset>
 80176a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80176a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80176ac:	e7e9      	b.n	8017682 <__sfp+0x42>
 80176ae:	bf00      	nop
 80176b0:	0801bdc8 	.word	0x0801bdc8
 80176b4:	ffff0001 	.word	0xffff0001

080176b8 <_fwalk_reent>:
 80176b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176bc:	4680      	mov	r8, r0
 80176be:	4689      	mov	r9, r1
 80176c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80176c4:	2600      	movs	r6, #0
 80176c6:	b914      	cbnz	r4, 80176ce <_fwalk_reent+0x16>
 80176c8:	4630      	mov	r0, r6
 80176ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80176d2:	3f01      	subs	r7, #1
 80176d4:	d501      	bpl.n	80176da <_fwalk_reent+0x22>
 80176d6:	6824      	ldr	r4, [r4, #0]
 80176d8:	e7f5      	b.n	80176c6 <_fwalk_reent+0xe>
 80176da:	89ab      	ldrh	r3, [r5, #12]
 80176dc:	2b01      	cmp	r3, #1
 80176de:	d907      	bls.n	80176f0 <_fwalk_reent+0x38>
 80176e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80176e4:	3301      	adds	r3, #1
 80176e6:	d003      	beq.n	80176f0 <_fwalk_reent+0x38>
 80176e8:	4629      	mov	r1, r5
 80176ea:	4640      	mov	r0, r8
 80176ec:	47c8      	blx	r9
 80176ee:	4306      	orrs	r6, r0
 80176f0:	3568      	adds	r5, #104	; 0x68
 80176f2:	e7ee      	b.n	80176d2 <_fwalk_reent+0x1a>

080176f4 <malloc>:
 80176f4:	4b02      	ldr	r3, [pc, #8]	; (8017700 <malloc+0xc>)
 80176f6:	4601      	mov	r1, r0
 80176f8:	6818      	ldr	r0, [r3, #0]
 80176fa:	f000 b851 	b.w	80177a0 <_malloc_r>
 80176fe:	bf00      	nop
 8017700:	20000020 	.word	0x20000020

08017704 <_free_r>:
 8017704:	b538      	push	{r3, r4, r5, lr}
 8017706:	4605      	mov	r5, r0
 8017708:	2900      	cmp	r1, #0
 801770a:	d045      	beq.n	8017798 <_free_r+0x94>
 801770c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017710:	1f0c      	subs	r4, r1, #4
 8017712:	2b00      	cmp	r3, #0
 8017714:	bfb8      	it	lt
 8017716:	18e4      	addlt	r4, r4, r3
 8017718:	f000 fdc0 	bl	801829c <__malloc_lock>
 801771c:	4a1f      	ldr	r2, [pc, #124]	; (801779c <_free_r+0x98>)
 801771e:	6813      	ldr	r3, [r2, #0]
 8017720:	4610      	mov	r0, r2
 8017722:	b933      	cbnz	r3, 8017732 <_free_r+0x2e>
 8017724:	6063      	str	r3, [r4, #4]
 8017726:	6014      	str	r4, [r2, #0]
 8017728:	4628      	mov	r0, r5
 801772a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801772e:	f000 bdb6 	b.w	801829e <__malloc_unlock>
 8017732:	42a3      	cmp	r3, r4
 8017734:	d90c      	bls.n	8017750 <_free_r+0x4c>
 8017736:	6821      	ldr	r1, [r4, #0]
 8017738:	1862      	adds	r2, r4, r1
 801773a:	4293      	cmp	r3, r2
 801773c:	bf04      	itt	eq
 801773e:	681a      	ldreq	r2, [r3, #0]
 8017740:	685b      	ldreq	r3, [r3, #4]
 8017742:	6063      	str	r3, [r4, #4]
 8017744:	bf04      	itt	eq
 8017746:	1852      	addeq	r2, r2, r1
 8017748:	6022      	streq	r2, [r4, #0]
 801774a:	6004      	str	r4, [r0, #0]
 801774c:	e7ec      	b.n	8017728 <_free_r+0x24>
 801774e:	4613      	mov	r3, r2
 8017750:	685a      	ldr	r2, [r3, #4]
 8017752:	b10a      	cbz	r2, 8017758 <_free_r+0x54>
 8017754:	42a2      	cmp	r2, r4
 8017756:	d9fa      	bls.n	801774e <_free_r+0x4a>
 8017758:	6819      	ldr	r1, [r3, #0]
 801775a:	1858      	adds	r0, r3, r1
 801775c:	42a0      	cmp	r0, r4
 801775e:	d10b      	bne.n	8017778 <_free_r+0x74>
 8017760:	6820      	ldr	r0, [r4, #0]
 8017762:	4401      	add	r1, r0
 8017764:	1858      	adds	r0, r3, r1
 8017766:	4282      	cmp	r2, r0
 8017768:	6019      	str	r1, [r3, #0]
 801776a:	d1dd      	bne.n	8017728 <_free_r+0x24>
 801776c:	6810      	ldr	r0, [r2, #0]
 801776e:	6852      	ldr	r2, [r2, #4]
 8017770:	605a      	str	r2, [r3, #4]
 8017772:	4401      	add	r1, r0
 8017774:	6019      	str	r1, [r3, #0]
 8017776:	e7d7      	b.n	8017728 <_free_r+0x24>
 8017778:	d902      	bls.n	8017780 <_free_r+0x7c>
 801777a:	230c      	movs	r3, #12
 801777c:	602b      	str	r3, [r5, #0]
 801777e:	e7d3      	b.n	8017728 <_free_r+0x24>
 8017780:	6820      	ldr	r0, [r4, #0]
 8017782:	1821      	adds	r1, r4, r0
 8017784:	428a      	cmp	r2, r1
 8017786:	bf04      	itt	eq
 8017788:	6811      	ldreq	r1, [r2, #0]
 801778a:	6852      	ldreq	r2, [r2, #4]
 801778c:	6062      	str	r2, [r4, #4]
 801778e:	bf04      	itt	eq
 8017790:	1809      	addeq	r1, r1, r0
 8017792:	6021      	streq	r1, [r4, #0]
 8017794:	605c      	str	r4, [r3, #4]
 8017796:	e7c7      	b.n	8017728 <_free_r+0x24>
 8017798:	bd38      	pop	{r3, r4, r5, pc}
 801779a:	bf00      	nop
 801779c:	200085e8 	.word	0x200085e8

080177a0 <_malloc_r>:
 80177a0:	b570      	push	{r4, r5, r6, lr}
 80177a2:	1ccd      	adds	r5, r1, #3
 80177a4:	f025 0503 	bic.w	r5, r5, #3
 80177a8:	3508      	adds	r5, #8
 80177aa:	2d0c      	cmp	r5, #12
 80177ac:	bf38      	it	cc
 80177ae:	250c      	movcc	r5, #12
 80177b0:	2d00      	cmp	r5, #0
 80177b2:	4606      	mov	r6, r0
 80177b4:	db01      	blt.n	80177ba <_malloc_r+0x1a>
 80177b6:	42a9      	cmp	r1, r5
 80177b8:	d903      	bls.n	80177c2 <_malloc_r+0x22>
 80177ba:	230c      	movs	r3, #12
 80177bc:	6033      	str	r3, [r6, #0]
 80177be:	2000      	movs	r0, #0
 80177c0:	bd70      	pop	{r4, r5, r6, pc}
 80177c2:	f000 fd6b 	bl	801829c <__malloc_lock>
 80177c6:	4a21      	ldr	r2, [pc, #132]	; (801784c <_malloc_r+0xac>)
 80177c8:	6814      	ldr	r4, [r2, #0]
 80177ca:	4621      	mov	r1, r4
 80177cc:	b991      	cbnz	r1, 80177f4 <_malloc_r+0x54>
 80177ce:	4c20      	ldr	r4, [pc, #128]	; (8017850 <_malloc_r+0xb0>)
 80177d0:	6823      	ldr	r3, [r4, #0]
 80177d2:	b91b      	cbnz	r3, 80177dc <_malloc_r+0x3c>
 80177d4:	4630      	mov	r0, r6
 80177d6:	f000 fb05 	bl	8017de4 <_sbrk_r>
 80177da:	6020      	str	r0, [r4, #0]
 80177dc:	4629      	mov	r1, r5
 80177de:	4630      	mov	r0, r6
 80177e0:	f000 fb00 	bl	8017de4 <_sbrk_r>
 80177e4:	1c43      	adds	r3, r0, #1
 80177e6:	d124      	bne.n	8017832 <_malloc_r+0x92>
 80177e8:	230c      	movs	r3, #12
 80177ea:	6033      	str	r3, [r6, #0]
 80177ec:	4630      	mov	r0, r6
 80177ee:	f000 fd56 	bl	801829e <__malloc_unlock>
 80177f2:	e7e4      	b.n	80177be <_malloc_r+0x1e>
 80177f4:	680b      	ldr	r3, [r1, #0]
 80177f6:	1b5b      	subs	r3, r3, r5
 80177f8:	d418      	bmi.n	801782c <_malloc_r+0x8c>
 80177fa:	2b0b      	cmp	r3, #11
 80177fc:	d90f      	bls.n	801781e <_malloc_r+0x7e>
 80177fe:	600b      	str	r3, [r1, #0]
 8017800:	50cd      	str	r5, [r1, r3]
 8017802:	18cc      	adds	r4, r1, r3
 8017804:	4630      	mov	r0, r6
 8017806:	f000 fd4a 	bl	801829e <__malloc_unlock>
 801780a:	f104 000b 	add.w	r0, r4, #11
 801780e:	1d23      	adds	r3, r4, #4
 8017810:	f020 0007 	bic.w	r0, r0, #7
 8017814:	1ac3      	subs	r3, r0, r3
 8017816:	d0d3      	beq.n	80177c0 <_malloc_r+0x20>
 8017818:	425a      	negs	r2, r3
 801781a:	50e2      	str	r2, [r4, r3]
 801781c:	e7d0      	b.n	80177c0 <_malloc_r+0x20>
 801781e:	428c      	cmp	r4, r1
 8017820:	684b      	ldr	r3, [r1, #4]
 8017822:	bf16      	itet	ne
 8017824:	6063      	strne	r3, [r4, #4]
 8017826:	6013      	streq	r3, [r2, #0]
 8017828:	460c      	movne	r4, r1
 801782a:	e7eb      	b.n	8017804 <_malloc_r+0x64>
 801782c:	460c      	mov	r4, r1
 801782e:	6849      	ldr	r1, [r1, #4]
 8017830:	e7cc      	b.n	80177cc <_malloc_r+0x2c>
 8017832:	1cc4      	adds	r4, r0, #3
 8017834:	f024 0403 	bic.w	r4, r4, #3
 8017838:	42a0      	cmp	r0, r4
 801783a:	d005      	beq.n	8017848 <_malloc_r+0xa8>
 801783c:	1a21      	subs	r1, r4, r0
 801783e:	4630      	mov	r0, r6
 8017840:	f000 fad0 	bl	8017de4 <_sbrk_r>
 8017844:	3001      	adds	r0, #1
 8017846:	d0cf      	beq.n	80177e8 <_malloc_r+0x48>
 8017848:	6025      	str	r5, [r4, #0]
 801784a:	e7db      	b.n	8017804 <_malloc_r+0x64>
 801784c:	200085e8 	.word	0x200085e8
 8017850:	200085ec 	.word	0x200085ec

08017854 <__sfputc_r>:
 8017854:	6893      	ldr	r3, [r2, #8]
 8017856:	3b01      	subs	r3, #1
 8017858:	2b00      	cmp	r3, #0
 801785a:	b410      	push	{r4}
 801785c:	6093      	str	r3, [r2, #8]
 801785e:	da08      	bge.n	8017872 <__sfputc_r+0x1e>
 8017860:	6994      	ldr	r4, [r2, #24]
 8017862:	42a3      	cmp	r3, r4
 8017864:	db01      	blt.n	801786a <__sfputc_r+0x16>
 8017866:	290a      	cmp	r1, #10
 8017868:	d103      	bne.n	8017872 <__sfputc_r+0x1e>
 801786a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801786e:	f000 bb0d 	b.w	8017e8c <__swbuf_r>
 8017872:	6813      	ldr	r3, [r2, #0]
 8017874:	1c58      	adds	r0, r3, #1
 8017876:	6010      	str	r0, [r2, #0]
 8017878:	7019      	strb	r1, [r3, #0]
 801787a:	4608      	mov	r0, r1
 801787c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017880:	4770      	bx	lr

08017882 <__sfputs_r>:
 8017882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017884:	4606      	mov	r6, r0
 8017886:	460f      	mov	r7, r1
 8017888:	4614      	mov	r4, r2
 801788a:	18d5      	adds	r5, r2, r3
 801788c:	42ac      	cmp	r4, r5
 801788e:	d101      	bne.n	8017894 <__sfputs_r+0x12>
 8017890:	2000      	movs	r0, #0
 8017892:	e007      	b.n	80178a4 <__sfputs_r+0x22>
 8017894:	463a      	mov	r2, r7
 8017896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801789a:	4630      	mov	r0, r6
 801789c:	f7ff ffda 	bl	8017854 <__sfputc_r>
 80178a0:	1c43      	adds	r3, r0, #1
 80178a2:	d1f3      	bne.n	801788c <__sfputs_r+0xa>
 80178a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080178a8 <_vfiprintf_r>:
 80178a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ac:	460c      	mov	r4, r1
 80178ae:	b09d      	sub	sp, #116	; 0x74
 80178b0:	4617      	mov	r7, r2
 80178b2:	461d      	mov	r5, r3
 80178b4:	4606      	mov	r6, r0
 80178b6:	b118      	cbz	r0, 80178c0 <_vfiprintf_r+0x18>
 80178b8:	6983      	ldr	r3, [r0, #24]
 80178ba:	b90b      	cbnz	r3, 80178c0 <_vfiprintf_r+0x18>
 80178bc:	f7ff fe90 	bl	80175e0 <__sinit>
 80178c0:	4b7c      	ldr	r3, [pc, #496]	; (8017ab4 <_vfiprintf_r+0x20c>)
 80178c2:	429c      	cmp	r4, r3
 80178c4:	d158      	bne.n	8017978 <_vfiprintf_r+0xd0>
 80178c6:	6874      	ldr	r4, [r6, #4]
 80178c8:	89a3      	ldrh	r3, [r4, #12]
 80178ca:	0718      	lsls	r0, r3, #28
 80178cc:	d55e      	bpl.n	801798c <_vfiprintf_r+0xe4>
 80178ce:	6923      	ldr	r3, [r4, #16]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d05b      	beq.n	801798c <_vfiprintf_r+0xe4>
 80178d4:	2300      	movs	r3, #0
 80178d6:	9309      	str	r3, [sp, #36]	; 0x24
 80178d8:	2320      	movs	r3, #32
 80178da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80178de:	2330      	movs	r3, #48	; 0x30
 80178e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80178e4:	9503      	str	r5, [sp, #12]
 80178e6:	f04f 0b01 	mov.w	fp, #1
 80178ea:	46b8      	mov	r8, r7
 80178ec:	4645      	mov	r5, r8
 80178ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80178f2:	b10b      	cbz	r3, 80178f8 <_vfiprintf_r+0x50>
 80178f4:	2b25      	cmp	r3, #37	; 0x25
 80178f6:	d154      	bne.n	80179a2 <_vfiprintf_r+0xfa>
 80178f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80178fc:	d00b      	beq.n	8017916 <_vfiprintf_r+0x6e>
 80178fe:	4653      	mov	r3, sl
 8017900:	463a      	mov	r2, r7
 8017902:	4621      	mov	r1, r4
 8017904:	4630      	mov	r0, r6
 8017906:	f7ff ffbc 	bl	8017882 <__sfputs_r>
 801790a:	3001      	adds	r0, #1
 801790c:	f000 80c2 	beq.w	8017a94 <_vfiprintf_r+0x1ec>
 8017910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017912:	4453      	add	r3, sl
 8017914:	9309      	str	r3, [sp, #36]	; 0x24
 8017916:	f898 3000 	ldrb.w	r3, [r8]
 801791a:	2b00      	cmp	r3, #0
 801791c:	f000 80ba 	beq.w	8017a94 <_vfiprintf_r+0x1ec>
 8017920:	2300      	movs	r3, #0
 8017922:	f04f 32ff 	mov.w	r2, #4294967295
 8017926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801792a:	9304      	str	r3, [sp, #16]
 801792c:	9307      	str	r3, [sp, #28]
 801792e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017932:	931a      	str	r3, [sp, #104]	; 0x68
 8017934:	46a8      	mov	r8, r5
 8017936:	2205      	movs	r2, #5
 8017938:	f818 1b01 	ldrb.w	r1, [r8], #1
 801793c:	485e      	ldr	r0, [pc, #376]	; (8017ab8 <_vfiprintf_r+0x210>)
 801793e:	f7e8 fc57 	bl	80001f0 <memchr>
 8017942:	9b04      	ldr	r3, [sp, #16]
 8017944:	bb78      	cbnz	r0, 80179a6 <_vfiprintf_r+0xfe>
 8017946:	06d9      	lsls	r1, r3, #27
 8017948:	bf44      	itt	mi
 801794a:	2220      	movmi	r2, #32
 801794c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017950:	071a      	lsls	r2, r3, #28
 8017952:	bf44      	itt	mi
 8017954:	222b      	movmi	r2, #43	; 0x2b
 8017956:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801795a:	782a      	ldrb	r2, [r5, #0]
 801795c:	2a2a      	cmp	r2, #42	; 0x2a
 801795e:	d02a      	beq.n	80179b6 <_vfiprintf_r+0x10e>
 8017960:	9a07      	ldr	r2, [sp, #28]
 8017962:	46a8      	mov	r8, r5
 8017964:	2000      	movs	r0, #0
 8017966:	250a      	movs	r5, #10
 8017968:	4641      	mov	r1, r8
 801796a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801796e:	3b30      	subs	r3, #48	; 0x30
 8017970:	2b09      	cmp	r3, #9
 8017972:	d969      	bls.n	8017a48 <_vfiprintf_r+0x1a0>
 8017974:	b360      	cbz	r0, 80179d0 <_vfiprintf_r+0x128>
 8017976:	e024      	b.n	80179c2 <_vfiprintf_r+0x11a>
 8017978:	4b50      	ldr	r3, [pc, #320]	; (8017abc <_vfiprintf_r+0x214>)
 801797a:	429c      	cmp	r4, r3
 801797c:	d101      	bne.n	8017982 <_vfiprintf_r+0xda>
 801797e:	68b4      	ldr	r4, [r6, #8]
 8017980:	e7a2      	b.n	80178c8 <_vfiprintf_r+0x20>
 8017982:	4b4f      	ldr	r3, [pc, #316]	; (8017ac0 <_vfiprintf_r+0x218>)
 8017984:	429c      	cmp	r4, r3
 8017986:	bf08      	it	eq
 8017988:	68f4      	ldreq	r4, [r6, #12]
 801798a:	e79d      	b.n	80178c8 <_vfiprintf_r+0x20>
 801798c:	4621      	mov	r1, r4
 801798e:	4630      	mov	r0, r6
 8017990:	f000 fae0 	bl	8017f54 <__swsetup_r>
 8017994:	2800      	cmp	r0, #0
 8017996:	d09d      	beq.n	80178d4 <_vfiprintf_r+0x2c>
 8017998:	f04f 30ff 	mov.w	r0, #4294967295
 801799c:	b01d      	add	sp, #116	; 0x74
 801799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a2:	46a8      	mov	r8, r5
 80179a4:	e7a2      	b.n	80178ec <_vfiprintf_r+0x44>
 80179a6:	4a44      	ldr	r2, [pc, #272]	; (8017ab8 <_vfiprintf_r+0x210>)
 80179a8:	1a80      	subs	r0, r0, r2
 80179aa:	fa0b f000 	lsl.w	r0, fp, r0
 80179ae:	4318      	orrs	r0, r3
 80179b0:	9004      	str	r0, [sp, #16]
 80179b2:	4645      	mov	r5, r8
 80179b4:	e7be      	b.n	8017934 <_vfiprintf_r+0x8c>
 80179b6:	9a03      	ldr	r2, [sp, #12]
 80179b8:	1d11      	adds	r1, r2, #4
 80179ba:	6812      	ldr	r2, [r2, #0]
 80179bc:	9103      	str	r1, [sp, #12]
 80179be:	2a00      	cmp	r2, #0
 80179c0:	db01      	blt.n	80179c6 <_vfiprintf_r+0x11e>
 80179c2:	9207      	str	r2, [sp, #28]
 80179c4:	e004      	b.n	80179d0 <_vfiprintf_r+0x128>
 80179c6:	4252      	negs	r2, r2
 80179c8:	f043 0302 	orr.w	r3, r3, #2
 80179cc:	9207      	str	r2, [sp, #28]
 80179ce:	9304      	str	r3, [sp, #16]
 80179d0:	f898 3000 	ldrb.w	r3, [r8]
 80179d4:	2b2e      	cmp	r3, #46	; 0x2e
 80179d6:	d10e      	bne.n	80179f6 <_vfiprintf_r+0x14e>
 80179d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80179dc:	2b2a      	cmp	r3, #42	; 0x2a
 80179de:	d138      	bne.n	8017a52 <_vfiprintf_r+0x1aa>
 80179e0:	9b03      	ldr	r3, [sp, #12]
 80179e2:	1d1a      	adds	r2, r3, #4
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	9203      	str	r2, [sp, #12]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	bfb8      	it	lt
 80179ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80179f0:	f108 0802 	add.w	r8, r8, #2
 80179f4:	9305      	str	r3, [sp, #20]
 80179f6:	4d33      	ldr	r5, [pc, #204]	; (8017ac4 <_vfiprintf_r+0x21c>)
 80179f8:	f898 1000 	ldrb.w	r1, [r8]
 80179fc:	2203      	movs	r2, #3
 80179fe:	4628      	mov	r0, r5
 8017a00:	f7e8 fbf6 	bl	80001f0 <memchr>
 8017a04:	b140      	cbz	r0, 8017a18 <_vfiprintf_r+0x170>
 8017a06:	2340      	movs	r3, #64	; 0x40
 8017a08:	1b40      	subs	r0, r0, r5
 8017a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8017a0e:	9b04      	ldr	r3, [sp, #16]
 8017a10:	4303      	orrs	r3, r0
 8017a12:	f108 0801 	add.w	r8, r8, #1
 8017a16:	9304      	str	r3, [sp, #16]
 8017a18:	f898 1000 	ldrb.w	r1, [r8]
 8017a1c:	482a      	ldr	r0, [pc, #168]	; (8017ac8 <_vfiprintf_r+0x220>)
 8017a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a22:	2206      	movs	r2, #6
 8017a24:	f108 0701 	add.w	r7, r8, #1
 8017a28:	f7e8 fbe2 	bl	80001f0 <memchr>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	d037      	beq.n	8017aa0 <_vfiprintf_r+0x1f8>
 8017a30:	4b26      	ldr	r3, [pc, #152]	; (8017acc <_vfiprintf_r+0x224>)
 8017a32:	bb1b      	cbnz	r3, 8017a7c <_vfiprintf_r+0x1d4>
 8017a34:	9b03      	ldr	r3, [sp, #12]
 8017a36:	3307      	adds	r3, #7
 8017a38:	f023 0307 	bic.w	r3, r3, #7
 8017a3c:	3308      	adds	r3, #8
 8017a3e:	9303      	str	r3, [sp, #12]
 8017a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a42:	444b      	add	r3, r9
 8017a44:	9309      	str	r3, [sp, #36]	; 0x24
 8017a46:	e750      	b.n	80178ea <_vfiprintf_r+0x42>
 8017a48:	fb05 3202 	mla	r2, r5, r2, r3
 8017a4c:	2001      	movs	r0, #1
 8017a4e:	4688      	mov	r8, r1
 8017a50:	e78a      	b.n	8017968 <_vfiprintf_r+0xc0>
 8017a52:	2300      	movs	r3, #0
 8017a54:	f108 0801 	add.w	r8, r8, #1
 8017a58:	9305      	str	r3, [sp, #20]
 8017a5a:	4619      	mov	r1, r3
 8017a5c:	250a      	movs	r5, #10
 8017a5e:	4640      	mov	r0, r8
 8017a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a64:	3a30      	subs	r2, #48	; 0x30
 8017a66:	2a09      	cmp	r2, #9
 8017a68:	d903      	bls.n	8017a72 <_vfiprintf_r+0x1ca>
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d0c3      	beq.n	80179f6 <_vfiprintf_r+0x14e>
 8017a6e:	9105      	str	r1, [sp, #20]
 8017a70:	e7c1      	b.n	80179f6 <_vfiprintf_r+0x14e>
 8017a72:	fb05 2101 	mla	r1, r5, r1, r2
 8017a76:	2301      	movs	r3, #1
 8017a78:	4680      	mov	r8, r0
 8017a7a:	e7f0      	b.n	8017a5e <_vfiprintf_r+0x1b6>
 8017a7c:	ab03      	add	r3, sp, #12
 8017a7e:	9300      	str	r3, [sp, #0]
 8017a80:	4622      	mov	r2, r4
 8017a82:	4b13      	ldr	r3, [pc, #76]	; (8017ad0 <_vfiprintf_r+0x228>)
 8017a84:	a904      	add	r1, sp, #16
 8017a86:	4630      	mov	r0, r6
 8017a88:	f3af 8000 	nop.w
 8017a8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017a90:	4681      	mov	r9, r0
 8017a92:	d1d5      	bne.n	8017a40 <_vfiprintf_r+0x198>
 8017a94:	89a3      	ldrh	r3, [r4, #12]
 8017a96:	065b      	lsls	r3, r3, #25
 8017a98:	f53f af7e 	bmi.w	8017998 <_vfiprintf_r+0xf0>
 8017a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a9e:	e77d      	b.n	801799c <_vfiprintf_r+0xf4>
 8017aa0:	ab03      	add	r3, sp, #12
 8017aa2:	9300      	str	r3, [sp, #0]
 8017aa4:	4622      	mov	r2, r4
 8017aa6:	4b0a      	ldr	r3, [pc, #40]	; (8017ad0 <_vfiprintf_r+0x228>)
 8017aa8:	a904      	add	r1, sp, #16
 8017aaa:	4630      	mov	r0, r6
 8017aac:	f000 f888 	bl	8017bc0 <_printf_i>
 8017ab0:	e7ec      	b.n	8017a8c <_vfiprintf_r+0x1e4>
 8017ab2:	bf00      	nop
 8017ab4:	0801bdec 	.word	0x0801bdec
 8017ab8:	0801be2c 	.word	0x0801be2c
 8017abc:	0801be0c 	.word	0x0801be0c
 8017ac0:	0801bdcc 	.word	0x0801bdcc
 8017ac4:	0801be32 	.word	0x0801be32
 8017ac8:	0801be36 	.word	0x0801be36
 8017acc:	00000000 	.word	0x00000000
 8017ad0:	08017883 	.word	0x08017883

08017ad4 <_printf_common>:
 8017ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ad8:	4691      	mov	r9, r2
 8017ada:	461f      	mov	r7, r3
 8017adc:	688a      	ldr	r2, [r1, #8]
 8017ade:	690b      	ldr	r3, [r1, #16]
 8017ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017ae4:	4293      	cmp	r3, r2
 8017ae6:	bfb8      	it	lt
 8017ae8:	4613      	movlt	r3, r2
 8017aea:	f8c9 3000 	str.w	r3, [r9]
 8017aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017af2:	4606      	mov	r6, r0
 8017af4:	460c      	mov	r4, r1
 8017af6:	b112      	cbz	r2, 8017afe <_printf_common+0x2a>
 8017af8:	3301      	adds	r3, #1
 8017afa:	f8c9 3000 	str.w	r3, [r9]
 8017afe:	6823      	ldr	r3, [r4, #0]
 8017b00:	0699      	lsls	r1, r3, #26
 8017b02:	bf42      	ittt	mi
 8017b04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017b08:	3302      	addmi	r3, #2
 8017b0a:	f8c9 3000 	strmi.w	r3, [r9]
 8017b0e:	6825      	ldr	r5, [r4, #0]
 8017b10:	f015 0506 	ands.w	r5, r5, #6
 8017b14:	d107      	bne.n	8017b26 <_printf_common+0x52>
 8017b16:	f104 0a19 	add.w	sl, r4, #25
 8017b1a:	68e3      	ldr	r3, [r4, #12]
 8017b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8017b20:	1a9b      	subs	r3, r3, r2
 8017b22:	42ab      	cmp	r3, r5
 8017b24:	dc28      	bgt.n	8017b78 <_printf_common+0xa4>
 8017b26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017b2a:	6822      	ldr	r2, [r4, #0]
 8017b2c:	3300      	adds	r3, #0
 8017b2e:	bf18      	it	ne
 8017b30:	2301      	movne	r3, #1
 8017b32:	0692      	lsls	r2, r2, #26
 8017b34:	d42d      	bmi.n	8017b92 <_printf_common+0xbe>
 8017b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b3a:	4639      	mov	r1, r7
 8017b3c:	4630      	mov	r0, r6
 8017b3e:	47c0      	blx	r8
 8017b40:	3001      	adds	r0, #1
 8017b42:	d020      	beq.n	8017b86 <_printf_common+0xb2>
 8017b44:	6823      	ldr	r3, [r4, #0]
 8017b46:	68e5      	ldr	r5, [r4, #12]
 8017b48:	f8d9 2000 	ldr.w	r2, [r9]
 8017b4c:	f003 0306 	and.w	r3, r3, #6
 8017b50:	2b04      	cmp	r3, #4
 8017b52:	bf08      	it	eq
 8017b54:	1aad      	subeq	r5, r5, r2
 8017b56:	68a3      	ldr	r3, [r4, #8]
 8017b58:	6922      	ldr	r2, [r4, #16]
 8017b5a:	bf0c      	ite	eq
 8017b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b60:	2500      	movne	r5, #0
 8017b62:	4293      	cmp	r3, r2
 8017b64:	bfc4      	itt	gt
 8017b66:	1a9b      	subgt	r3, r3, r2
 8017b68:	18ed      	addgt	r5, r5, r3
 8017b6a:	f04f 0900 	mov.w	r9, #0
 8017b6e:	341a      	adds	r4, #26
 8017b70:	454d      	cmp	r5, r9
 8017b72:	d11a      	bne.n	8017baa <_printf_common+0xd6>
 8017b74:	2000      	movs	r0, #0
 8017b76:	e008      	b.n	8017b8a <_printf_common+0xb6>
 8017b78:	2301      	movs	r3, #1
 8017b7a:	4652      	mov	r2, sl
 8017b7c:	4639      	mov	r1, r7
 8017b7e:	4630      	mov	r0, r6
 8017b80:	47c0      	blx	r8
 8017b82:	3001      	adds	r0, #1
 8017b84:	d103      	bne.n	8017b8e <_printf_common+0xba>
 8017b86:	f04f 30ff 	mov.w	r0, #4294967295
 8017b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b8e:	3501      	adds	r5, #1
 8017b90:	e7c3      	b.n	8017b1a <_printf_common+0x46>
 8017b92:	18e1      	adds	r1, r4, r3
 8017b94:	1c5a      	adds	r2, r3, #1
 8017b96:	2030      	movs	r0, #48	; 0x30
 8017b98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b9c:	4422      	add	r2, r4
 8017b9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ba6:	3302      	adds	r3, #2
 8017ba8:	e7c5      	b.n	8017b36 <_printf_common+0x62>
 8017baa:	2301      	movs	r3, #1
 8017bac:	4622      	mov	r2, r4
 8017bae:	4639      	mov	r1, r7
 8017bb0:	4630      	mov	r0, r6
 8017bb2:	47c0      	blx	r8
 8017bb4:	3001      	adds	r0, #1
 8017bb6:	d0e6      	beq.n	8017b86 <_printf_common+0xb2>
 8017bb8:	f109 0901 	add.w	r9, r9, #1
 8017bbc:	e7d8      	b.n	8017b70 <_printf_common+0x9c>
	...

08017bc0 <_printf_i>:
 8017bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017bc8:	460c      	mov	r4, r1
 8017bca:	7e09      	ldrb	r1, [r1, #24]
 8017bcc:	b085      	sub	sp, #20
 8017bce:	296e      	cmp	r1, #110	; 0x6e
 8017bd0:	4617      	mov	r7, r2
 8017bd2:	4606      	mov	r6, r0
 8017bd4:	4698      	mov	r8, r3
 8017bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017bd8:	f000 80b3 	beq.w	8017d42 <_printf_i+0x182>
 8017bdc:	d822      	bhi.n	8017c24 <_printf_i+0x64>
 8017bde:	2963      	cmp	r1, #99	; 0x63
 8017be0:	d036      	beq.n	8017c50 <_printf_i+0x90>
 8017be2:	d80a      	bhi.n	8017bfa <_printf_i+0x3a>
 8017be4:	2900      	cmp	r1, #0
 8017be6:	f000 80b9 	beq.w	8017d5c <_printf_i+0x19c>
 8017bea:	2958      	cmp	r1, #88	; 0x58
 8017bec:	f000 8083 	beq.w	8017cf6 <_printf_i+0x136>
 8017bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017bf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017bf8:	e032      	b.n	8017c60 <_printf_i+0xa0>
 8017bfa:	2964      	cmp	r1, #100	; 0x64
 8017bfc:	d001      	beq.n	8017c02 <_printf_i+0x42>
 8017bfe:	2969      	cmp	r1, #105	; 0x69
 8017c00:	d1f6      	bne.n	8017bf0 <_printf_i+0x30>
 8017c02:	6820      	ldr	r0, [r4, #0]
 8017c04:	6813      	ldr	r3, [r2, #0]
 8017c06:	0605      	lsls	r5, r0, #24
 8017c08:	f103 0104 	add.w	r1, r3, #4
 8017c0c:	d52a      	bpl.n	8017c64 <_printf_i+0xa4>
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	6011      	str	r1, [r2, #0]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	da03      	bge.n	8017c1e <_printf_i+0x5e>
 8017c16:	222d      	movs	r2, #45	; 0x2d
 8017c18:	425b      	negs	r3, r3
 8017c1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017c1e:	486f      	ldr	r0, [pc, #444]	; (8017ddc <_printf_i+0x21c>)
 8017c20:	220a      	movs	r2, #10
 8017c22:	e039      	b.n	8017c98 <_printf_i+0xd8>
 8017c24:	2973      	cmp	r1, #115	; 0x73
 8017c26:	f000 809d 	beq.w	8017d64 <_printf_i+0x1a4>
 8017c2a:	d808      	bhi.n	8017c3e <_printf_i+0x7e>
 8017c2c:	296f      	cmp	r1, #111	; 0x6f
 8017c2e:	d020      	beq.n	8017c72 <_printf_i+0xb2>
 8017c30:	2970      	cmp	r1, #112	; 0x70
 8017c32:	d1dd      	bne.n	8017bf0 <_printf_i+0x30>
 8017c34:	6823      	ldr	r3, [r4, #0]
 8017c36:	f043 0320 	orr.w	r3, r3, #32
 8017c3a:	6023      	str	r3, [r4, #0]
 8017c3c:	e003      	b.n	8017c46 <_printf_i+0x86>
 8017c3e:	2975      	cmp	r1, #117	; 0x75
 8017c40:	d017      	beq.n	8017c72 <_printf_i+0xb2>
 8017c42:	2978      	cmp	r1, #120	; 0x78
 8017c44:	d1d4      	bne.n	8017bf0 <_printf_i+0x30>
 8017c46:	2378      	movs	r3, #120	; 0x78
 8017c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017c4c:	4864      	ldr	r0, [pc, #400]	; (8017de0 <_printf_i+0x220>)
 8017c4e:	e055      	b.n	8017cfc <_printf_i+0x13c>
 8017c50:	6813      	ldr	r3, [r2, #0]
 8017c52:	1d19      	adds	r1, r3, #4
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	6011      	str	r1, [r2, #0]
 8017c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c60:	2301      	movs	r3, #1
 8017c62:	e08c      	b.n	8017d7e <_printf_i+0x1be>
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	6011      	str	r1, [r2, #0]
 8017c68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017c6c:	bf18      	it	ne
 8017c6e:	b21b      	sxthne	r3, r3
 8017c70:	e7cf      	b.n	8017c12 <_printf_i+0x52>
 8017c72:	6813      	ldr	r3, [r2, #0]
 8017c74:	6825      	ldr	r5, [r4, #0]
 8017c76:	1d18      	adds	r0, r3, #4
 8017c78:	6010      	str	r0, [r2, #0]
 8017c7a:	0628      	lsls	r0, r5, #24
 8017c7c:	d501      	bpl.n	8017c82 <_printf_i+0xc2>
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	e002      	b.n	8017c88 <_printf_i+0xc8>
 8017c82:	0668      	lsls	r0, r5, #25
 8017c84:	d5fb      	bpl.n	8017c7e <_printf_i+0xbe>
 8017c86:	881b      	ldrh	r3, [r3, #0]
 8017c88:	4854      	ldr	r0, [pc, #336]	; (8017ddc <_printf_i+0x21c>)
 8017c8a:	296f      	cmp	r1, #111	; 0x6f
 8017c8c:	bf14      	ite	ne
 8017c8e:	220a      	movne	r2, #10
 8017c90:	2208      	moveq	r2, #8
 8017c92:	2100      	movs	r1, #0
 8017c94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017c98:	6865      	ldr	r5, [r4, #4]
 8017c9a:	60a5      	str	r5, [r4, #8]
 8017c9c:	2d00      	cmp	r5, #0
 8017c9e:	f2c0 8095 	blt.w	8017dcc <_printf_i+0x20c>
 8017ca2:	6821      	ldr	r1, [r4, #0]
 8017ca4:	f021 0104 	bic.w	r1, r1, #4
 8017ca8:	6021      	str	r1, [r4, #0]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d13d      	bne.n	8017d2a <_printf_i+0x16a>
 8017cae:	2d00      	cmp	r5, #0
 8017cb0:	f040 808e 	bne.w	8017dd0 <_printf_i+0x210>
 8017cb4:	4665      	mov	r5, ip
 8017cb6:	2a08      	cmp	r2, #8
 8017cb8:	d10b      	bne.n	8017cd2 <_printf_i+0x112>
 8017cba:	6823      	ldr	r3, [r4, #0]
 8017cbc:	07db      	lsls	r3, r3, #31
 8017cbe:	d508      	bpl.n	8017cd2 <_printf_i+0x112>
 8017cc0:	6923      	ldr	r3, [r4, #16]
 8017cc2:	6862      	ldr	r2, [r4, #4]
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	bfde      	ittt	le
 8017cc8:	2330      	movle	r3, #48	; 0x30
 8017cca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017cce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017cd2:	ebac 0305 	sub.w	r3, ip, r5
 8017cd6:	6123      	str	r3, [r4, #16]
 8017cd8:	f8cd 8000 	str.w	r8, [sp]
 8017cdc:	463b      	mov	r3, r7
 8017cde:	aa03      	add	r2, sp, #12
 8017ce0:	4621      	mov	r1, r4
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	f7ff fef6 	bl	8017ad4 <_printf_common>
 8017ce8:	3001      	adds	r0, #1
 8017cea:	d14d      	bne.n	8017d88 <_printf_i+0x1c8>
 8017cec:	f04f 30ff 	mov.w	r0, #4294967295
 8017cf0:	b005      	add	sp, #20
 8017cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cf6:	4839      	ldr	r0, [pc, #228]	; (8017ddc <_printf_i+0x21c>)
 8017cf8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017cfc:	6813      	ldr	r3, [r2, #0]
 8017cfe:	6821      	ldr	r1, [r4, #0]
 8017d00:	1d1d      	adds	r5, r3, #4
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	6015      	str	r5, [r2, #0]
 8017d06:	060a      	lsls	r2, r1, #24
 8017d08:	d50b      	bpl.n	8017d22 <_printf_i+0x162>
 8017d0a:	07ca      	lsls	r2, r1, #31
 8017d0c:	bf44      	itt	mi
 8017d0e:	f041 0120 	orrmi.w	r1, r1, #32
 8017d12:	6021      	strmi	r1, [r4, #0]
 8017d14:	b91b      	cbnz	r3, 8017d1e <_printf_i+0x15e>
 8017d16:	6822      	ldr	r2, [r4, #0]
 8017d18:	f022 0220 	bic.w	r2, r2, #32
 8017d1c:	6022      	str	r2, [r4, #0]
 8017d1e:	2210      	movs	r2, #16
 8017d20:	e7b7      	b.n	8017c92 <_printf_i+0xd2>
 8017d22:	064d      	lsls	r5, r1, #25
 8017d24:	bf48      	it	mi
 8017d26:	b29b      	uxthmi	r3, r3
 8017d28:	e7ef      	b.n	8017d0a <_printf_i+0x14a>
 8017d2a:	4665      	mov	r5, ip
 8017d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8017d30:	fb02 3311 	mls	r3, r2, r1, r3
 8017d34:	5cc3      	ldrb	r3, [r0, r3]
 8017d36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017d3a:	460b      	mov	r3, r1
 8017d3c:	2900      	cmp	r1, #0
 8017d3e:	d1f5      	bne.n	8017d2c <_printf_i+0x16c>
 8017d40:	e7b9      	b.n	8017cb6 <_printf_i+0xf6>
 8017d42:	6813      	ldr	r3, [r2, #0]
 8017d44:	6825      	ldr	r5, [r4, #0]
 8017d46:	6961      	ldr	r1, [r4, #20]
 8017d48:	1d18      	adds	r0, r3, #4
 8017d4a:	6010      	str	r0, [r2, #0]
 8017d4c:	0628      	lsls	r0, r5, #24
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	d501      	bpl.n	8017d56 <_printf_i+0x196>
 8017d52:	6019      	str	r1, [r3, #0]
 8017d54:	e002      	b.n	8017d5c <_printf_i+0x19c>
 8017d56:	066a      	lsls	r2, r5, #25
 8017d58:	d5fb      	bpl.n	8017d52 <_printf_i+0x192>
 8017d5a:	8019      	strh	r1, [r3, #0]
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	6123      	str	r3, [r4, #16]
 8017d60:	4665      	mov	r5, ip
 8017d62:	e7b9      	b.n	8017cd8 <_printf_i+0x118>
 8017d64:	6813      	ldr	r3, [r2, #0]
 8017d66:	1d19      	adds	r1, r3, #4
 8017d68:	6011      	str	r1, [r2, #0]
 8017d6a:	681d      	ldr	r5, [r3, #0]
 8017d6c:	6862      	ldr	r2, [r4, #4]
 8017d6e:	2100      	movs	r1, #0
 8017d70:	4628      	mov	r0, r5
 8017d72:	f7e8 fa3d 	bl	80001f0 <memchr>
 8017d76:	b108      	cbz	r0, 8017d7c <_printf_i+0x1bc>
 8017d78:	1b40      	subs	r0, r0, r5
 8017d7a:	6060      	str	r0, [r4, #4]
 8017d7c:	6863      	ldr	r3, [r4, #4]
 8017d7e:	6123      	str	r3, [r4, #16]
 8017d80:	2300      	movs	r3, #0
 8017d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d86:	e7a7      	b.n	8017cd8 <_printf_i+0x118>
 8017d88:	6923      	ldr	r3, [r4, #16]
 8017d8a:	462a      	mov	r2, r5
 8017d8c:	4639      	mov	r1, r7
 8017d8e:	4630      	mov	r0, r6
 8017d90:	47c0      	blx	r8
 8017d92:	3001      	adds	r0, #1
 8017d94:	d0aa      	beq.n	8017cec <_printf_i+0x12c>
 8017d96:	6823      	ldr	r3, [r4, #0]
 8017d98:	079b      	lsls	r3, r3, #30
 8017d9a:	d413      	bmi.n	8017dc4 <_printf_i+0x204>
 8017d9c:	68e0      	ldr	r0, [r4, #12]
 8017d9e:	9b03      	ldr	r3, [sp, #12]
 8017da0:	4298      	cmp	r0, r3
 8017da2:	bfb8      	it	lt
 8017da4:	4618      	movlt	r0, r3
 8017da6:	e7a3      	b.n	8017cf0 <_printf_i+0x130>
 8017da8:	2301      	movs	r3, #1
 8017daa:	464a      	mov	r2, r9
 8017dac:	4639      	mov	r1, r7
 8017dae:	4630      	mov	r0, r6
 8017db0:	47c0      	blx	r8
 8017db2:	3001      	adds	r0, #1
 8017db4:	d09a      	beq.n	8017cec <_printf_i+0x12c>
 8017db6:	3501      	adds	r5, #1
 8017db8:	68e3      	ldr	r3, [r4, #12]
 8017dba:	9a03      	ldr	r2, [sp, #12]
 8017dbc:	1a9b      	subs	r3, r3, r2
 8017dbe:	42ab      	cmp	r3, r5
 8017dc0:	dcf2      	bgt.n	8017da8 <_printf_i+0x1e8>
 8017dc2:	e7eb      	b.n	8017d9c <_printf_i+0x1dc>
 8017dc4:	2500      	movs	r5, #0
 8017dc6:	f104 0919 	add.w	r9, r4, #25
 8017dca:	e7f5      	b.n	8017db8 <_printf_i+0x1f8>
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d1ac      	bne.n	8017d2a <_printf_i+0x16a>
 8017dd0:	7803      	ldrb	r3, [r0, #0]
 8017dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017dd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017dda:	e76c      	b.n	8017cb6 <_printf_i+0xf6>
 8017ddc:	0801be3d 	.word	0x0801be3d
 8017de0:	0801be4e 	.word	0x0801be4e

08017de4 <_sbrk_r>:
 8017de4:	b538      	push	{r3, r4, r5, lr}
 8017de6:	4c06      	ldr	r4, [pc, #24]	; (8017e00 <_sbrk_r+0x1c>)
 8017de8:	2300      	movs	r3, #0
 8017dea:	4605      	mov	r5, r0
 8017dec:	4608      	mov	r0, r1
 8017dee:	6023      	str	r3, [r4, #0]
 8017df0:	f7e8 ff64 	bl	8000cbc <_sbrk>
 8017df4:	1c43      	adds	r3, r0, #1
 8017df6:	d102      	bne.n	8017dfe <_sbrk_r+0x1a>
 8017df8:	6823      	ldr	r3, [r4, #0]
 8017dfa:	b103      	cbz	r3, 8017dfe <_sbrk_r+0x1a>
 8017dfc:	602b      	str	r3, [r5, #0]
 8017dfe:	bd38      	pop	{r3, r4, r5, pc}
 8017e00:	2000f370 	.word	0x2000f370

08017e04 <__sread>:
 8017e04:	b510      	push	{r4, lr}
 8017e06:	460c      	mov	r4, r1
 8017e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e0c:	f000 fa48 	bl	80182a0 <_read_r>
 8017e10:	2800      	cmp	r0, #0
 8017e12:	bfab      	itete	ge
 8017e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017e16:	89a3      	ldrhlt	r3, [r4, #12]
 8017e18:	181b      	addge	r3, r3, r0
 8017e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017e1e:	bfac      	ite	ge
 8017e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8017e22:	81a3      	strhlt	r3, [r4, #12]
 8017e24:	bd10      	pop	{r4, pc}

08017e26 <__swrite>:
 8017e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e2a:	461f      	mov	r7, r3
 8017e2c:	898b      	ldrh	r3, [r1, #12]
 8017e2e:	05db      	lsls	r3, r3, #23
 8017e30:	4605      	mov	r5, r0
 8017e32:	460c      	mov	r4, r1
 8017e34:	4616      	mov	r6, r2
 8017e36:	d505      	bpl.n	8017e44 <__swrite+0x1e>
 8017e38:	2302      	movs	r3, #2
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e40:	f000 f9b6 	bl	80181b0 <_lseek_r>
 8017e44:	89a3      	ldrh	r3, [r4, #12]
 8017e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017e4e:	81a3      	strh	r3, [r4, #12]
 8017e50:	4632      	mov	r2, r6
 8017e52:	463b      	mov	r3, r7
 8017e54:	4628      	mov	r0, r5
 8017e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e5a:	f000 b869 	b.w	8017f30 <_write_r>

08017e5e <__sseek>:
 8017e5e:	b510      	push	{r4, lr}
 8017e60:	460c      	mov	r4, r1
 8017e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e66:	f000 f9a3 	bl	80181b0 <_lseek_r>
 8017e6a:	1c43      	adds	r3, r0, #1
 8017e6c:	89a3      	ldrh	r3, [r4, #12]
 8017e6e:	bf15      	itete	ne
 8017e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8017e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017e7a:	81a3      	strheq	r3, [r4, #12]
 8017e7c:	bf18      	it	ne
 8017e7e:	81a3      	strhne	r3, [r4, #12]
 8017e80:	bd10      	pop	{r4, pc}

08017e82 <__sclose>:
 8017e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e86:	f000 b8d3 	b.w	8018030 <_close_r>
	...

08017e8c <__swbuf_r>:
 8017e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e8e:	460e      	mov	r6, r1
 8017e90:	4614      	mov	r4, r2
 8017e92:	4605      	mov	r5, r0
 8017e94:	b118      	cbz	r0, 8017e9e <__swbuf_r+0x12>
 8017e96:	6983      	ldr	r3, [r0, #24]
 8017e98:	b90b      	cbnz	r3, 8017e9e <__swbuf_r+0x12>
 8017e9a:	f7ff fba1 	bl	80175e0 <__sinit>
 8017e9e:	4b21      	ldr	r3, [pc, #132]	; (8017f24 <__swbuf_r+0x98>)
 8017ea0:	429c      	cmp	r4, r3
 8017ea2:	d12a      	bne.n	8017efa <__swbuf_r+0x6e>
 8017ea4:	686c      	ldr	r4, [r5, #4]
 8017ea6:	69a3      	ldr	r3, [r4, #24]
 8017ea8:	60a3      	str	r3, [r4, #8]
 8017eaa:	89a3      	ldrh	r3, [r4, #12]
 8017eac:	071a      	lsls	r2, r3, #28
 8017eae:	d52e      	bpl.n	8017f0e <__swbuf_r+0x82>
 8017eb0:	6923      	ldr	r3, [r4, #16]
 8017eb2:	b363      	cbz	r3, 8017f0e <__swbuf_r+0x82>
 8017eb4:	6923      	ldr	r3, [r4, #16]
 8017eb6:	6820      	ldr	r0, [r4, #0]
 8017eb8:	1ac0      	subs	r0, r0, r3
 8017eba:	6963      	ldr	r3, [r4, #20]
 8017ebc:	b2f6      	uxtb	r6, r6
 8017ebe:	4283      	cmp	r3, r0
 8017ec0:	4637      	mov	r7, r6
 8017ec2:	dc04      	bgt.n	8017ece <__swbuf_r+0x42>
 8017ec4:	4621      	mov	r1, r4
 8017ec6:	4628      	mov	r0, r5
 8017ec8:	f000 f948 	bl	801815c <_fflush_r>
 8017ecc:	bb28      	cbnz	r0, 8017f1a <__swbuf_r+0x8e>
 8017ece:	68a3      	ldr	r3, [r4, #8]
 8017ed0:	3b01      	subs	r3, #1
 8017ed2:	60a3      	str	r3, [r4, #8]
 8017ed4:	6823      	ldr	r3, [r4, #0]
 8017ed6:	1c5a      	adds	r2, r3, #1
 8017ed8:	6022      	str	r2, [r4, #0]
 8017eda:	701e      	strb	r6, [r3, #0]
 8017edc:	6963      	ldr	r3, [r4, #20]
 8017ede:	3001      	adds	r0, #1
 8017ee0:	4283      	cmp	r3, r0
 8017ee2:	d004      	beq.n	8017eee <__swbuf_r+0x62>
 8017ee4:	89a3      	ldrh	r3, [r4, #12]
 8017ee6:	07db      	lsls	r3, r3, #31
 8017ee8:	d519      	bpl.n	8017f1e <__swbuf_r+0x92>
 8017eea:	2e0a      	cmp	r6, #10
 8017eec:	d117      	bne.n	8017f1e <__swbuf_r+0x92>
 8017eee:	4621      	mov	r1, r4
 8017ef0:	4628      	mov	r0, r5
 8017ef2:	f000 f933 	bl	801815c <_fflush_r>
 8017ef6:	b190      	cbz	r0, 8017f1e <__swbuf_r+0x92>
 8017ef8:	e00f      	b.n	8017f1a <__swbuf_r+0x8e>
 8017efa:	4b0b      	ldr	r3, [pc, #44]	; (8017f28 <__swbuf_r+0x9c>)
 8017efc:	429c      	cmp	r4, r3
 8017efe:	d101      	bne.n	8017f04 <__swbuf_r+0x78>
 8017f00:	68ac      	ldr	r4, [r5, #8]
 8017f02:	e7d0      	b.n	8017ea6 <__swbuf_r+0x1a>
 8017f04:	4b09      	ldr	r3, [pc, #36]	; (8017f2c <__swbuf_r+0xa0>)
 8017f06:	429c      	cmp	r4, r3
 8017f08:	bf08      	it	eq
 8017f0a:	68ec      	ldreq	r4, [r5, #12]
 8017f0c:	e7cb      	b.n	8017ea6 <__swbuf_r+0x1a>
 8017f0e:	4621      	mov	r1, r4
 8017f10:	4628      	mov	r0, r5
 8017f12:	f000 f81f 	bl	8017f54 <__swsetup_r>
 8017f16:	2800      	cmp	r0, #0
 8017f18:	d0cc      	beq.n	8017eb4 <__swbuf_r+0x28>
 8017f1a:	f04f 37ff 	mov.w	r7, #4294967295
 8017f1e:	4638      	mov	r0, r7
 8017f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f22:	bf00      	nop
 8017f24:	0801bdec 	.word	0x0801bdec
 8017f28:	0801be0c 	.word	0x0801be0c
 8017f2c:	0801bdcc 	.word	0x0801bdcc

08017f30 <_write_r>:
 8017f30:	b538      	push	{r3, r4, r5, lr}
 8017f32:	4c07      	ldr	r4, [pc, #28]	; (8017f50 <_write_r+0x20>)
 8017f34:	4605      	mov	r5, r0
 8017f36:	4608      	mov	r0, r1
 8017f38:	4611      	mov	r1, r2
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	6022      	str	r2, [r4, #0]
 8017f3e:	461a      	mov	r2, r3
 8017f40:	f7e8 fe6b 	bl	8000c1a <_write>
 8017f44:	1c43      	adds	r3, r0, #1
 8017f46:	d102      	bne.n	8017f4e <_write_r+0x1e>
 8017f48:	6823      	ldr	r3, [r4, #0]
 8017f4a:	b103      	cbz	r3, 8017f4e <_write_r+0x1e>
 8017f4c:	602b      	str	r3, [r5, #0]
 8017f4e:	bd38      	pop	{r3, r4, r5, pc}
 8017f50:	2000f370 	.word	0x2000f370

08017f54 <__swsetup_r>:
 8017f54:	4b32      	ldr	r3, [pc, #200]	; (8018020 <__swsetup_r+0xcc>)
 8017f56:	b570      	push	{r4, r5, r6, lr}
 8017f58:	681d      	ldr	r5, [r3, #0]
 8017f5a:	4606      	mov	r6, r0
 8017f5c:	460c      	mov	r4, r1
 8017f5e:	b125      	cbz	r5, 8017f6a <__swsetup_r+0x16>
 8017f60:	69ab      	ldr	r3, [r5, #24]
 8017f62:	b913      	cbnz	r3, 8017f6a <__swsetup_r+0x16>
 8017f64:	4628      	mov	r0, r5
 8017f66:	f7ff fb3b 	bl	80175e0 <__sinit>
 8017f6a:	4b2e      	ldr	r3, [pc, #184]	; (8018024 <__swsetup_r+0xd0>)
 8017f6c:	429c      	cmp	r4, r3
 8017f6e:	d10f      	bne.n	8017f90 <__swsetup_r+0x3c>
 8017f70:	686c      	ldr	r4, [r5, #4]
 8017f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f76:	b29a      	uxth	r2, r3
 8017f78:	0715      	lsls	r5, r2, #28
 8017f7a:	d42c      	bmi.n	8017fd6 <__swsetup_r+0x82>
 8017f7c:	06d0      	lsls	r0, r2, #27
 8017f7e:	d411      	bmi.n	8017fa4 <__swsetup_r+0x50>
 8017f80:	2209      	movs	r2, #9
 8017f82:	6032      	str	r2, [r6, #0]
 8017f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f88:	81a3      	strh	r3, [r4, #12]
 8017f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8017f8e:	e03e      	b.n	801800e <__swsetup_r+0xba>
 8017f90:	4b25      	ldr	r3, [pc, #148]	; (8018028 <__swsetup_r+0xd4>)
 8017f92:	429c      	cmp	r4, r3
 8017f94:	d101      	bne.n	8017f9a <__swsetup_r+0x46>
 8017f96:	68ac      	ldr	r4, [r5, #8]
 8017f98:	e7eb      	b.n	8017f72 <__swsetup_r+0x1e>
 8017f9a:	4b24      	ldr	r3, [pc, #144]	; (801802c <__swsetup_r+0xd8>)
 8017f9c:	429c      	cmp	r4, r3
 8017f9e:	bf08      	it	eq
 8017fa0:	68ec      	ldreq	r4, [r5, #12]
 8017fa2:	e7e6      	b.n	8017f72 <__swsetup_r+0x1e>
 8017fa4:	0751      	lsls	r1, r2, #29
 8017fa6:	d512      	bpl.n	8017fce <__swsetup_r+0x7a>
 8017fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017faa:	b141      	cbz	r1, 8017fbe <__swsetup_r+0x6a>
 8017fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fb0:	4299      	cmp	r1, r3
 8017fb2:	d002      	beq.n	8017fba <__swsetup_r+0x66>
 8017fb4:	4630      	mov	r0, r6
 8017fb6:	f7ff fba5 	bl	8017704 <_free_r>
 8017fba:	2300      	movs	r3, #0
 8017fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8017fbe:	89a3      	ldrh	r3, [r4, #12]
 8017fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017fc4:	81a3      	strh	r3, [r4, #12]
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	6063      	str	r3, [r4, #4]
 8017fca:	6923      	ldr	r3, [r4, #16]
 8017fcc:	6023      	str	r3, [r4, #0]
 8017fce:	89a3      	ldrh	r3, [r4, #12]
 8017fd0:	f043 0308 	orr.w	r3, r3, #8
 8017fd4:	81a3      	strh	r3, [r4, #12]
 8017fd6:	6923      	ldr	r3, [r4, #16]
 8017fd8:	b94b      	cbnz	r3, 8017fee <__swsetup_r+0x9a>
 8017fda:	89a3      	ldrh	r3, [r4, #12]
 8017fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017fe4:	d003      	beq.n	8017fee <__swsetup_r+0x9a>
 8017fe6:	4621      	mov	r1, r4
 8017fe8:	4630      	mov	r0, r6
 8017fea:	f000 f917 	bl	801821c <__smakebuf_r>
 8017fee:	89a2      	ldrh	r2, [r4, #12]
 8017ff0:	f012 0301 	ands.w	r3, r2, #1
 8017ff4:	d00c      	beq.n	8018010 <__swsetup_r+0xbc>
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	60a3      	str	r3, [r4, #8]
 8017ffa:	6963      	ldr	r3, [r4, #20]
 8017ffc:	425b      	negs	r3, r3
 8017ffe:	61a3      	str	r3, [r4, #24]
 8018000:	6923      	ldr	r3, [r4, #16]
 8018002:	b953      	cbnz	r3, 801801a <__swsetup_r+0xc6>
 8018004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018008:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801800c:	d1ba      	bne.n	8017f84 <__swsetup_r+0x30>
 801800e:	bd70      	pop	{r4, r5, r6, pc}
 8018010:	0792      	lsls	r2, r2, #30
 8018012:	bf58      	it	pl
 8018014:	6963      	ldrpl	r3, [r4, #20]
 8018016:	60a3      	str	r3, [r4, #8]
 8018018:	e7f2      	b.n	8018000 <__swsetup_r+0xac>
 801801a:	2000      	movs	r0, #0
 801801c:	e7f7      	b.n	801800e <__swsetup_r+0xba>
 801801e:	bf00      	nop
 8018020:	20000020 	.word	0x20000020
 8018024:	0801bdec 	.word	0x0801bdec
 8018028:	0801be0c 	.word	0x0801be0c
 801802c:	0801bdcc 	.word	0x0801bdcc

08018030 <_close_r>:
 8018030:	b538      	push	{r3, r4, r5, lr}
 8018032:	4c06      	ldr	r4, [pc, #24]	; (801804c <_close_r+0x1c>)
 8018034:	2300      	movs	r3, #0
 8018036:	4605      	mov	r5, r0
 8018038:	4608      	mov	r0, r1
 801803a:	6023      	str	r3, [r4, #0]
 801803c:	f7e8 fe09 	bl	8000c52 <_close>
 8018040:	1c43      	adds	r3, r0, #1
 8018042:	d102      	bne.n	801804a <_close_r+0x1a>
 8018044:	6823      	ldr	r3, [r4, #0]
 8018046:	b103      	cbz	r3, 801804a <_close_r+0x1a>
 8018048:	602b      	str	r3, [r5, #0]
 801804a:	bd38      	pop	{r3, r4, r5, pc}
 801804c:	2000f370 	.word	0x2000f370

08018050 <__sflush_r>:
 8018050:	898a      	ldrh	r2, [r1, #12]
 8018052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018056:	4605      	mov	r5, r0
 8018058:	0710      	lsls	r0, r2, #28
 801805a:	460c      	mov	r4, r1
 801805c:	d458      	bmi.n	8018110 <__sflush_r+0xc0>
 801805e:	684b      	ldr	r3, [r1, #4]
 8018060:	2b00      	cmp	r3, #0
 8018062:	dc05      	bgt.n	8018070 <__sflush_r+0x20>
 8018064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018066:	2b00      	cmp	r3, #0
 8018068:	dc02      	bgt.n	8018070 <__sflush_r+0x20>
 801806a:	2000      	movs	r0, #0
 801806c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018072:	2e00      	cmp	r6, #0
 8018074:	d0f9      	beq.n	801806a <__sflush_r+0x1a>
 8018076:	2300      	movs	r3, #0
 8018078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801807c:	682f      	ldr	r7, [r5, #0]
 801807e:	6a21      	ldr	r1, [r4, #32]
 8018080:	602b      	str	r3, [r5, #0]
 8018082:	d032      	beq.n	80180ea <__sflush_r+0x9a>
 8018084:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018086:	89a3      	ldrh	r3, [r4, #12]
 8018088:	075a      	lsls	r2, r3, #29
 801808a:	d505      	bpl.n	8018098 <__sflush_r+0x48>
 801808c:	6863      	ldr	r3, [r4, #4]
 801808e:	1ac0      	subs	r0, r0, r3
 8018090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018092:	b10b      	cbz	r3, 8018098 <__sflush_r+0x48>
 8018094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018096:	1ac0      	subs	r0, r0, r3
 8018098:	2300      	movs	r3, #0
 801809a:	4602      	mov	r2, r0
 801809c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801809e:	6a21      	ldr	r1, [r4, #32]
 80180a0:	4628      	mov	r0, r5
 80180a2:	47b0      	blx	r6
 80180a4:	1c43      	adds	r3, r0, #1
 80180a6:	89a3      	ldrh	r3, [r4, #12]
 80180a8:	d106      	bne.n	80180b8 <__sflush_r+0x68>
 80180aa:	6829      	ldr	r1, [r5, #0]
 80180ac:	291d      	cmp	r1, #29
 80180ae:	d848      	bhi.n	8018142 <__sflush_r+0xf2>
 80180b0:	4a29      	ldr	r2, [pc, #164]	; (8018158 <__sflush_r+0x108>)
 80180b2:	40ca      	lsrs	r2, r1
 80180b4:	07d6      	lsls	r6, r2, #31
 80180b6:	d544      	bpl.n	8018142 <__sflush_r+0xf2>
 80180b8:	2200      	movs	r2, #0
 80180ba:	6062      	str	r2, [r4, #4]
 80180bc:	04d9      	lsls	r1, r3, #19
 80180be:	6922      	ldr	r2, [r4, #16]
 80180c0:	6022      	str	r2, [r4, #0]
 80180c2:	d504      	bpl.n	80180ce <__sflush_r+0x7e>
 80180c4:	1c42      	adds	r2, r0, #1
 80180c6:	d101      	bne.n	80180cc <__sflush_r+0x7c>
 80180c8:	682b      	ldr	r3, [r5, #0]
 80180ca:	b903      	cbnz	r3, 80180ce <__sflush_r+0x7e>
 80180cc:	6560      	str	r0, [r4, #84]	; 0x54
 80180ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180d0:	602f      	str	r7, [r5, #0]
 80180d2:	2900      	cmp	r1, #0
 80180d4:	d0c9      	beq.n	801806a <__sflush_r+0x1a>
 80180d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180da:	4299      	cmp	r1, r3
 80180dc:	d002      	beq.n	80180e4 <__sflush_r+0x94>
 80180de:	4628      	mov	r0, r5
 80180e0:	f7ff fb10 	bl	8017704 <_free_r>
 80180e4:	2000      	movs	r0, #0
 80180e6:	6360      	str	r0, [r4, #52]	; 0x34
 80180e8:	e7c0      	b.n	801806c <__sflush_r+0x1c>
 80180ea:	2301      	movs	r3, #1
 80180ec:	4628      	mov	r0, r5
 80180ee:	47b0      	blx	r6
 80180f0:	1c41      	adds	r1, r0, #1
 80180f2:	d1c8      	bne.n	8018086 <__sflush_r+0x36>
 80180f4:	682b      	ldr	r3, [r5, #0]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d0c5      	beq.n	8018086 <__sflush_r+0x36>
 80180fa:	2b1d      	cmp	r3, #29
 80180fc:	d001      	beq.n	8018102 <__sflush_r+0xb2>
 80180fe:	2b16      	cmp	r3, #22
 8018100:	d101      	bne.n	8018106 <__sflush_r+0xb6>
 8018102:	602f      	str	r7, [r5, #0]
 8018104:	e7b1      	b.n	801806a <__sflush_r+0x1a>
 8018106:	89a3      	ldrh	r3, [r4, #12]
 8018108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801810c:	81a3      	strh	r3, [r4, #12]
 801810e:	e7ad      	b.n	801806c <__sflush_r+0x1c>
 8018110:	690f      	ldr	r7, [r1, #16]
 8018112:	2f00      	cmp	r7, #0
 8018114:	d0a9      	beq.n	801806a <__sflush_r+0x1a>
 8018116:	0793      	lsls	r3, r2, #30
 8018118:	680e      	ldr	r6, [r1, #0]
 801811a:	bf08      	it	eq
 801811c:	694b      	ldreq	r3, [r1, #20]
 801811e:	600f      	str	r7, [r1, #0]
 8018120:	bf18      	it	ne
 8018122:	2300      	movne	r3, #0
 8018124:	eba6 0807 	sub.w	r8, r6, r7
 8018128:	608b      	str	r3, [r1, #8]
 801812a:	f1b8 0f00 	cmp.w	r8, #0
 801812e:	dd9c      	ble.n	801806a <__sflush_r+0x1a>
 8018130:	4643      	mov	r3, r8
 8018132:	463a      	mov	r2, r7
 8018134:	6a21      	ldr	r1, [r4, #32]
 8018136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018138:	4628      	mov	r0, r5
 801813a:	47b0      	blx	r6
 801813c:	2800      	cmp	r0, #0
 801813e:	dc06      	bgt.n	801814e <__sflush_r+0xfe>
 8018140:	89a3      	ldrh	r3, [r4, #12]
 8018142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018146:	81a3      	strh	r3, [r4, #12]
 8018148:	f04f 30ff 	mov.w	r0, #4294967295
 801814c:	e78e      	b.n	801806c <__sflush_r+0x1c>
 801814e:	4407      	add	r7, r0
 8018150:	eba8 0800 	sub.w	r8, r8, r0
 8018154:	e7e9      	b.n	801812a <__sflush_r+0xda>
 8018156:	bf00      	nop
 8018158:	20400001 	.word	0x20400001

0801815c <_fflush_r>:
 801815c:	b538      	push	{r3, r4, r5, lr}
 801815e:	690b      	ldr	r3, [r1, #16]
 8018160:	4605      	mov	r5, r0
 8018162:	460c      	mov	r4, r1
 8018164:	b1db      	cbz	r3, 801819e <_fflush_r+0x42>
 8018166:	b118      	cbz	r0, 8018170 <_fflush_r+0x14>
 8018168:	6983      	ldr	r3, [r0, #24]
 801816a:	b90b      	cbnz	r3, 8018170 <_fflush_r+0x14>
 801816c:	f7ff fa38 	bl	80175e0 <__sinit>
 8018170:	4b0c      	ldr	r3, [pc, #48]	; (80181a4 <_fflush_r+0x48>)
 8018172:	429c      	cmp	r4, r3
 8018174:	d109      	bne.n	801818a <_fflush_r+0x2e>
 8018176:	686c      	ldr	r4, [r5, #4]
 8018178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801817c:	b17b      	cbz	r3, 801819e <_fflush_r+0x42>
 801817e:	4621      	mov	r1, r4
 8018180:	4628      	mov	r0, r5
 8018182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018186:	f7ff bf63 	b.w	8018050 <__sflush_r>
 801818a:	4b07      	ldr	r3, [pc, #28]	; (80181a8 <_fflush_r+0x4c>)
 801818c:	429c      	cmp	r4, r3
 801818e:	d101      	bne.n	8018194 <_fflush_r+0x38>
 8018190:	68ac      	ldr	r4, [r5, #8]
 8018192:	e7f1      	b.n	8018178 <_fflush_r+0x1c>
 8018194:	4b05      	ldr	r3, [pc, #20]	; (80181ac <_fflush_r+0x50>)
 8018196:	429c      	cmp	r4, r3
 8018198:	bf08      	it	eq
 801819a:	68ec      	ldreq	r4, [r5, #12]
 801819c:	e7ec      	b.n	8018178 <_fflush_r+0x1c>
 801819e:	2000      	movs	r0, #0
 80181a0:	bd38      	pop	{r3, r4, r5, pc}
 80181a2:	bf00      	nop
 80181a4:	0801bdec 	.word	0x0801bdec
 80181a8:	0801be0c 	.word	0x0801be0c
 80181ac:	0801bdcc 	.word	0x0801bdcc

080181b0 <_lseek_r>:
 80181b0:	b538      	push	{r3, r4, r5, lr}
 80181b2:	4c07      	ldr	r4, [pc, #28]	; (80181d0 <_lseek_r+0x20>)
 80181b4:	4605      	mov	r5, r0
 80181b6:	4608      	mov	r0, r1
 80181b8:	4611      	mov	r1, r2
 80181ba:	2200      	movs	r2, #0
 80181bc:	6022      	str	r2, [r4, #0]
 80181be:	461a      	mov	r2, r3
 80181c0:	f7e8 fd6e 	bl	8000ca0 <_lseek>
 80181c4:	1c43      	adds	r3, r0, #1
 80181c6:	d102      	bne.n	80181ce <_lseek_r+0x1e>
 80181c8:	6823      	ldr	r3, [r4, #0]
 80181ca:	b103      	cbz	r3, 80181ce <_lseek_r+0x1e>
 80181cc:	602b      	str	r3, [r5, #0]
 80181ce:	bd38      	pop	{r3, r4, r5, pc}
 80181d0:	2000f370 	.word	0x2000f370

080181d4 <__swhatbuf_r>:
 80181d4:	b570      	push	{r4, r5, r6, lr}
 80181d6:	460e      	mov	r6, r1
 80181d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181dc:	2900      	cmp	r1, #0
 80181de:	b096      	sub	sp, #88	; 0x58
 80181e0:	4614      	mov	r4, r2
 80181e2:	461d      	mov	r5, r3
 80181e4:	da07      	bge.n	80181f6 <__swhatbuf_r+0x22>
 80181e6:	2300      	movs	r3, #0
 80181e8:	602b      	str	r3, [r5, #0]
 80181ea:	89b3      	ldrh	r3, [r6, #12]
 80181ec:	061a      	lsls	r2, r3, #24
 80181ee:	d410      	bmi.n	8018212 <__swhatbuf_r+0x3e>
 80181f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80181f4:	e00e      	b.n	8018214 <__swhatbuf_r+0x40>
 80181f6:	466a      	mov	r2, sp
 80181f8:	f000 f864 	bl	80182c4 <_fstat_r>
 80181fc:	2800      	cmp	r0, #0
 80181fe:	dbf2      	blt.n	80181e6 <__swhatbuf_r+0x12>
 8018200:	9a01      	ldr	r2, [sp, #4]
 8018202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801820a:	425a      	negs	r2, r3
 801820c:	415a      	adcs	r2, r3
 801820e:	602a      	str	r2, [r5, #0]
 8018210:	e7ee      	b.n	80181f0 <__swhatbuf_r+0x1c>
 8018212:	2340      	movs	r3, #64	; 0x40
 8018214:	2000      	movs	r0, #0
 8018216:	6023      	str	r3, [r4, #0]
 8018218:	b016      	add	sp, #88	; 0x58
 801821a:	bd70      	pop	{r4, r5, r6, pc}

0801821c <__smakebuf_r>:
 801821c:	898b      	ldrh	r3, [r1, #12]
 801821e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018220:	079d      	lsls	r5, r3, #30
 8018222:	4606      	mov	r6, r0
 8018224:	460c      	mov	r4, r1
 8018226:	d507      	bpl.n	8018238 <__smakebuf_r+0x1c>
 8018228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801822c:	6023      	str	r3, [r4, #0]
 801822e:	6123      	str	r3, [r4, #16]
 8018230:	2301      	movs	r3, #1
 8018232:	6163      	str	r3, [r4, #20]
 8018234:	b002      	add	sp, #8
 8018236:	bd70      	pop	{r4, r5, r6, pc}
 8018238:	ab01      	add	r3, sp, #4
 801823a:	466a      	mov	r2, sp
 801823c:	f7ff ffca 	bl	80181d4 <__swhatbuf_r>
 8018240:	9900      	ldr	r1, [sp, #0]
 8018242:	4605      	mov	r5, r0
 8018244:	4630      	mov	r0, r6
 8018246:	f7ff faab 	bl	80177a0 <_malloc_r>
 801824a:	b948      	cbnz	r0, 8018260 <__smakebuf_r+0x44>
 801824c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018250:	059a      	lsls	r2, r3, #22
 8018252:	d4ef      	bmi.n	8018234 <__smakebuf_r+0x18>
 8018254:	f023 0303 	bic.w	r3, r3, #3
 8018258:	f043 0302 	orr.w	r3, r3, #2
 801825c:	81a3      	strh	r3, [r4, #12]
 801825e:	e7e3      	b.n	8018228 <__smakebuf_r+0xc>
 8018260:	4b0d      	ldr	r3, [pc, #52]	; (8018298 <__smakebuf_r+0x7c>)
 8018262:	62b3      	str	r3, [r6, #40]	; 0x28
 8018264:	89a3      	ldrh	r3, [r4, #12]
 8018266:	6020      	str	r0, [r4, #0]
 8018268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801826c:	81a3      	strh	r3, [r4, #12]
 801826e:	9b00      	ldr	r3, [sp, #0]
 8018270:	6163      	str	r3, [r4, #20]
 8018272:	9b01      	ldr	r3, [sp, #4]
 8018274:	6120      	str	r0, [r4, #16]
 8018276:	b15b      	cbz	r3, 8018290 <__smakebuf_r+0x74>
 8018278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801827c:	4630      	mov	r0, r6
 801827e:	f000 f833 	bl	80182e8 <_isatty_r>
 8018282:	b128      	cbz	r0, 8018290 <__smakebuf_r+0x74>
 8018284:	89a3      	ldrh	r3, [r4, #12]
 8018286:	f023 0303 	bic.w	r3, r3, #3
 801828a:	f043 0301 	orr.w	r3, r3, #1
 801828e:	81a3      	strh	r3, [r4, #12]
 8018290:	89a3      	ldrh	r3, [r4, #12]
 8018292:	431d      	orrs	r5, r3
 8018294:	81a5      	strh	r5, [r4, #12]
 8018296:	e7cd      	b.n	8018234 <__smakebuf_r+0x18>
 8018298:	080175a9 	.word	0x080175a9

0801829c <__malloc_lock>:
 801829c:	4770      	bx	lr

0801829e <__malloc_unlock>:
 801829e:	4770      	bx	lr

080182a0 <_read_r>:
 80182a0:	b538      	push	{r3, r4, r5, lr}
 80182a2:	4c07      	ldr	r4, [pc, #28]	; (80182c0 <_read_r+0x20>)
 80182a4:	4605      	mov	r5, r0
 80182a6:	4608      	mov	r0, r1
 80182a8:	4611      	mov	r1, r2
 80182aa:	2200      	movs	r2, #0
 80182ac:	6022      	str	r2, [r4, #0]
 80182ae:	461a      	mov	r2, r3
 80182b0:	f7e8 fc96 	bl	8000be0 <_read>
 80182b4:	1c43      	adds	r3, r0, #1
 80182b6:	d102      	bne.n	80182be <_read_r+0x1e>
 80182b8:	6823      	ldr	r3, [r4, #0]
 80182ba:	b103      	cbz	r3, 80182be <_read_r+0x1e>
 80182bc:	602b      	str	r3, [r5, #0]
 80182be:	bd38      	pop	{r3, r4, r5, pc}
 80182c0:	2000f370 	.word	0x2000f370

080182c4 <_fstat_r>:
 80182c4:	b538      	push	{r3, r4, r5, lr}
 80182c6:	4c07      	ldr	r4, [pc, #28]	; (80182e4 <_fstat_r+0x20>)
 80182c8:	2300      	movs	r3, #0
 80182ca:	4605      	mov	r5, r0
 80182cc:	4608      	mov	r0, r1
 80182ce:	4611      	mov	r1, r2
 80182d0:	6023      	str	r3, [r4, #0]
 80182d2:	f7e8 fcca 	bl	8000c6a <_fstat>
 80182d6:	1c43      	adds	r3, r0, #1
 80182d8:	d102      	bne.n	80182e0 <_fstat_r+0x1c>
 80182da:	6823      	ldr	r3, [r4, #0]
 80182dc:	b103      	cbz	r3, 80182e0 <_fstat_r+0x1c>
 80182de:	602b      	str	r3, [r5, #0]
 80182e0:	bd38      	pop	{r3, r4, r5, pc}
 80182e2:	bf00      	nop
 80182e4:	2000f370 	.word	0x2000f370

080182e8 <_isatty_r>:
 80182e8:	b538      	push	{r3, r4, r5, lr}
 80182ea:	4c06      	ldr	r4, [pc, #24]	; (8018304 <_isatty_r+0x1c>)
 80182ec:	2300      	movs	r3, #0
 80182ee:	4605      	mov	r5, r0
 80182f0:	4608      	mov	r0, r1
 80182f2:	6023      	str	r3, [r4, #0]
 80182f4:	f7e8 fcc9 	bl	8000c8a <_isatty>
 80182f8:	1c43      	adds	r3, r0, #1
 80182fa:	d102      	bne.n	8018302 <_isatty_r+0x1a>
 80182fc:	6823      	ldr	r3, [r4, #0]
 80182fe:	b103      	cbz	r3, 8018302 <_isatty_r+0x1a>
 8018300:	602b      	str	r3, [r5, #0]
 8018302:	bd38      	pop	{r3, r4, r5, pc}
 8018304:	2000f370 	.word	0x2000f370

08018308 <_init>:
 8018308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801830a:	bf00      	nop
 801830c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801830e:	bc08      	pop	{r3}
 8018310:	469e      	mov	lr, r3
 8018312:	4770      	bx	lr

08018314 <_fini>:
 8018314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018316:	bf00      	nop
 8018318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801831a:	bc08      	pop	{r3}
 801831c:	469e      	mov	lr, r3
 801831e:	4770      	bx	lr
