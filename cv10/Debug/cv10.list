
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018a60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cf4  08018c10  08018c10  00028c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c904  0801c904  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c904  0801c904  0002c904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c90c  0801c90c  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c90c  0801c90c  0002c90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c910  0801c910  0002c910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801c914  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f338  200001f0  0801cb04  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f528  0801cb04  0003f528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004623f  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008000  00000000  00000000  0007645f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024e0  00000000  00000000  0007e460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002318  00000000  00000000  00080940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000360da  00000000  00000000  00082c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ee00  00000000  00000000  000b8d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010104d  00000000  00000000  000e7b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e8b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a148  00000000  00000000  001e8bfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018bf8 	.word	0x08018bf8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08018bf8 	.word	0x08018bf8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	2000020c 	.word	0x2000020c
 80005d0:	20000260 	.word	0x20000260

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fe25 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f81f 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f8df 	bl	80007a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f885 	bl	80006f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ea:	f000 f8ad 	bl	8000748 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <main+0x44>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f004 fe1e 	bl	8005246 <osThreadCreate>
 800060a:	4602      	mov	r2, r0
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <main+0x48>)
 800060e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f004 fe02 	bl	8005218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x40>
 8000616:	bf00      	nop
 8000618:	08018c1c 	.word	0x08018c1c
 800061c:	200087a0 	.word	0x200087a0

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f017 f95b 	bl	80178ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000680:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000694:	23a8      	movs	r3, #168	; 0xa8
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069c:	2307      	movs	r3, #7
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fba3 	bl	8002df0 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 f946 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2105      	movs	r1, #5
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fdfc 	bl	80032d0 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 f92f 	bl	8000940 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART3_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART3_UART_Init+0x4c>)
 800072c:	f003 fa32 	bl	8003b94 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f903 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200087a4 	.word	0x200087a4
 8000744:	40004800 	.word	0x40004800

08000748 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000752:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2204      	movs	r2, #4
 8000758:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2202      	movs	r2, #2
 800075e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	2202      	movs	r2, #2
 800076a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2201      	movs	r2, #1
 8000770:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2201      	movs	r2, #1
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	f002 fa13 	bl	8002bb6 <HAL_PCD_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000796:	f000 f8d3 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200087e4 	.word	0x200087e4

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <MX_GPIO_Init+0x148>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a4a      	ldr	r2, [pc, #296]	; (80008ec <MX_GPIO_Init+0x148>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <MX_GPIO_Init+0x148>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b44      	ldr	r3, [pc, #272]	; (80008ec <MX_GPIO_Init+0x148>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a43      	ldr	r2, [pc, #268]	; (80008ec <MX_GPIO_Init+0x148>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <MX_GPIO_Init+0x148>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b3d      	ldr	r3, [pc, #244]	; (80008ec <MX_GPIO_Init+0x148>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a3c      	ldr	r2, [pc, #240]	; (80008ec <MX_GPIO_Init+0x148>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <MX_GPIO_Init+0x148>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b36      	ldr	r3, [pc, #216]	; (80008ec <MX_GPIO_Init+0x148>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a35      	ldr	r2, [pc, #212]	; (80008ec <MX_GPIO_Init+0x148>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_GPIO_Init+0x148>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <MX_GPIO_Init+0x148>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <MX_GPIO_Init+0x148>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <MX_GPIO_Init+0x148>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <MX_GPIO_Init+0x148>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a27      	ldr	r2, [pc, #156]	; (80008ec <MX_GPIO_Init+0x148>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <MX_GPIO_Init+0x148>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f244 0181 	movw	r1, #16513	; 0x4081
 8000868:	4821      	ldr	r0, [pc, #132]	; (80008f0 <MX_GPIO_Init+0x14c>)
 800086a:	f002 f98b 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	4820      	ldr	r0, [pc, #128]	; (80008f4 <MX_GPIO_Init+0x150>)
 8000874:	f002 f986 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_GPIO_Init+0x154>)
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	481b      	ldr	r0, [pc, #108]	; (80008fc <MX_GPIO_Init+0x158>)
 800088e:	f001 ffb7 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000892:	f244 0381 	movw	r3, #16513	; 0x4081
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80008ac:	f001 ffa8 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b0:	2340      	movs	r3, #64	; 0x40
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0x150>)
 80008c8:	f001 ff9a 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_GPIO_Init+0x150>)
 80008e0:	f001 ff8e 	bl	8002800 <HAL_GPIO_Init>

}
 80008e4:	bf00      	nop
 80008e6:	3730      	adds	r7, #48	; 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020400 	.word	0x40020400
 80008f4:	40021800 	.word	0x40021800
 80008f8:	10110000 	.word	0x10110000
 80008fc:	40020800 	.word	0x40020800

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f003 ffc4 	bl	8004894 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 800090c:	f000 fa8e 	bl	8000e2c <tcpecho_init>

  telnet_init();
 8000910:	f000 fc4c 	bl	80011ac <telnet_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f004 fce2 	bl	80052de <osDelay>
 800091a:	e7fb      	b.n	8000914 <StartDefaultTask+0x14>

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 fc9d 	bl	800126c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40002000 	.word	0x40002000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_MspInit+0x4c>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12c      	bne.n	8000a1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x8c>)
 8000a18:	f001 fef2 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a50:	d13f      	bne.n	8000ad2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_PCD_MspInit+0xac>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <HAL_PCD_MspInit+0xac>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_PCD_MspInit+0xac>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a80:	230a      	movs	r3, #10
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <HAL_PCD_MspInit+0xb0>)
 8000a8c:	f001 feb8 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <HAL_PCD_MspInit+0xb0>)
 8000aa6:	f001 feab 	bl	8002800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_PCD_MspInit+0xac>)
 8000aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_PCD_MspInit+0xac>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_PCD_MspInit+0xac>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_PCD_MspInit+0xac>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_PCD_MspInit+0xac>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	202d      	movs	r0, #45	; 0x2d
 8000afa:	f000 fcb1 	bl	8001460 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000afe:	202d      	movs	r0, #45	; 0x2d
 8000b00:	f000 fcca 	bl	8001498 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_InitTick+0xa4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b20:	f107 0210 	add.w	r2, r7, #16
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 fdc2 	bl	80036b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b30:	f002 fd98 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8000b34:	4603      	mov	r3, r0
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <HAL_InitTick+0xa8>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	0c9b      	lsrs	r3, r3, #18
 8000b44:	3b01      	subs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_InitTick+0xac>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_InitTick+0xb0>)
 8000b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_InitTick+0xac>)
 8000b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b54:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_InitTick+0xac>)
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_InitTick+0xac>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_InitTick+0xac>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <HAL_InitTick+0xac>)
 8000b6a:	f002 fdd5 	bl	8003718 <HAL_TIM_Base_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d104      	bne.n	8000b7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <HAL_InitTick+0xac>)
 8000b76:	f002 fe04 	bl	8003782 <HAL_TIM_Base_Start_IT>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3730      	adds	r7, #48	; 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	431bde83 	.word	0x431bde83
 8000b90:	20008bec 	.word	0x20008bec
 8000b94:	40002000 	.word	0x40002000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000bd2:	f002 fdfa 	bl	80037ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20008bec 	.word	0x20008bec

08000be0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <ETH_IRQHandler+0x10>)
 8000be6:	f001 f84b 	bl	8001c80 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000a54c 	.word	0x2000a54c

08000bf4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
	}

return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e009      	b.n	8000c54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf1      	blt.n	8000c40 <_write+0x12>
	}
	return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d205      	bcs.n	8000d0c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <_sbrk+0x6c>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	371c      	adds	r7, #28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20030000 	.word	0x20030000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000460 	.word	0x20000460
 8000d38:	2000f528 	.word	0x2000f528
 8000d3c:	2000f520 	.word	0x2000f520

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x28>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <SystemInit+0x28>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SystemInit+0x28>)
 8000d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2010      	movs	r0, #16
 8000d7a:	f007 f9d5 	bl	8008128 <netconn_new_with_proto_and_callback>
 8000d7e:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d04e      	beq.n	8000e24 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d86:	2207      	movs	r2, #7
 8000d88:	2100      	movs	r1, #0
 8000d8a:	69f8      	ldr	r0, [r7, #28]
 8000d8c:	f007 fa86 	bl	800829c <netconn_bind>
 8000d90:	4603      	mov	r3, r0
 8000d92:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d94:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d13f      	bne.n	8000e1c <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d9c:	21ff      	movs	r1, #255	; 0xff
 8000d9e:	69f8      	ldr	r0, [r7, #28]
 8000da0:	f007 fab4 	bl	800830c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	69f8      	ldr	r0, [r7, #28]
 8000dac:	f007 fada 	bl	8008364 <netconn_accept>
 8000db0:	4603      	mov	r3, r0
 8000db2:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000db4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f3      	bne.n	8000da4 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dbc:	e01b      	b.n	8000df6 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	f107 020a 	add.w	r2, r7, #10
 8000dc4:	f107 010c 	add.w	r1, r7, #12
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f009 fa67 	bl	800a29c <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	68f9      	ldr	r1, [r7, #12]
 8000dd2:	897b      	ldrh	r3, [r7, #10]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f007 fd44 	bl	8008868 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f009 faa4 	bl	800a330 <netbuf_next>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dae7      	bge.n	8000dbe <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f009 fa33 	bl	800a25c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f107 0210 	add.w	r2, r7, #16
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f007 fcb8 	bl	8008774 <netconn_recv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0d9      	beq.n	8000dbe <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fe2d 	bl	8008a6c <netconn_close>
          netconn_delete(newconn);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f007 fa25 	bl	8008264 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e1a:	e7c3      	b.n	8000da4 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f007 fa20 	bl	8008264 <netconn_delete>
    }
  }
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e32:	2304      	movs	r3, #4
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4903      	ldr	r1, [pc, #12]	; (8000e4c <tcpecho_init+0x20>)
 8000e3e:	4804      	ldr	r0, [pc, #16]	; (8000e50 <tcpecho_init+0x24>)
 8000e40:	f016 fc98 	bl	8017774 <sys_thread_new>
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	08000d6d 	.word	0x08000d6d
 8000e50:	08018c38 	.word	0x08018c38

08000e54 <telnet_process_command>:

#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN	64

static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b096      	sub	sp, #88	; 0x58
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	char s[64];  // alokovany buffer
	char *saveptr;

	sprintf(s, "PRIJATO: %s\n", cmd);  //retezec povelu co je prijato
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4970      	ldr	r1, [pc, #448]	; (8001028 <telnet_process_command+0x1d4>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f016 fdf8 	bl	8017a5c <siprintf>

	netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff f9bd 	bl	80001f0 <strlen>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f107 010c 	add.w	r1, r7, #12
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	6838      	ldr	r0, [r7, #0]
 8000e84:	f007 fcf0 	bl	8008868 <netconn_write_partly>

	char *token;
	token = strtok_r(cmd, " ", &saveptr);
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4967      	ldr	r1, [pc, #412]	; (800102c <telnet_process_command+0x1d8>)
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f016 fe4b 	bl	8017b2c <strtok_r>
 8000e96:	64f8      	str	r0, [r7, #76]	; 0x4c

	if (strcasecmp(token, "HELLO") == 0)
 8000e98:	4965      	ldr	r1, [pc, #404]	; (8001030 <telnet_process_command+0x1dc>)
 8000e9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e9c:	f016 fdfe 	bl	8017a9c <strcasecmp>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d103      	bne.n	8000eae <telnet_process_command+0x5a>
	{
		printf("Komunikace OK\n");
 8000ea6:	4863      	ldr	r0, [pc, #396]	; (8001034 <telnet_process_command+0x1e0>)
 8000ea8:	f016 fd9c 	bl	80179e4 <puts>
		else printf("LED2 OFF\n");

		if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin)) printf("LED3 ON\n");
		else printf("LED3 OFF\n");
	}
}
 8000eac:	e0b7      	b.n	800101e <telnet_process_command+0x1ca>
	else if (strcasecmp(token, "LED1") == 0)
 8000eae:	4962      	ldr	r1, [pc, #392]	; (8001038 <telnet_process_command+0x1e4>)
 8000eb0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000eb2:	f016 fdf3 	bl	8017a9c <strcasecmp>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d124      	bne.n	8000f06 <telnet_process_command+0xb2>
		token = strtok_r(NULL, " ", &saveptr);
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	495a      	ldr	r1, [pc, #360]	; (800102c <telnet_process_command+0x1d8>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f016 fe31 	bl	8017b2c <strtok_r>
 8000eca:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ecc:	495b      	ldr	r1, [pc, #364]	; (800103c <telnet_process_command+0x1e8>)
 8000ece:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ed0:	f016 fde4 	bl	8017a9c <strcasecmp>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d105      	bne.n	8000ee6 <telnet_process_command+0x92>
 8000eda:	2201      	movs	r2, #1
 8000edc:	2101      	movs	r1, #1
 8000ede:	4858      	ldr	r0, [pc, #352]	; (8001040 <telnet_process_command+0x1ec>)
 8000ee0:	f001 fe50 	bl	8002b84 <HAL_GPIO_WritePin>
 8000ee4:	e00b      	b.n	8000efe <telnet_process_command+0xaa>
		else if (strcasecmp(token, "OFF") == 0) HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000ee6:	4957      	ldr	r1, [pc, #348]	; (8001044 <telnet_process_command+0x1f0>)
 8000ee8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000eea:	f016 fdd7 	bl	8017a9c <strcasecmp>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d104      	bne.n	8000efe <telnet_process_command+0xaa>
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4851      	ldr	r0, [pc, #324]	; (8001040 <telnet_process_command+0x1ec>)
 8000efa:	f001 fe43 	bl	8002b84 <HAL_GPIO_WritePin>
		printf("OK\n");
 8000efe:	4852      	ldr	r0, [pc, #328]	; (8001048 <telnet_process_command+0x1f4>)
 8000f00:	f016 fd70 	bl	80179e4 <puts>
}
 8000f04:	e08b      	b.n	800101e <telnet_process_command+0x1ca>
	else if (strcasecmp(token, "LED2") == 0)
 8000f06:	4951      	ldr	r1, [pc, #324]	; (800104c <telnet_process_command+0x1f8>)
 8000f08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f0a:	f016 fdc7 	bl	8017a9c <strcasecmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d124      	bne.n	8000f5e <telnet_process_command+0x10a>
			token = strtok_r(NULL, " ", &saveptr);
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4944      	ldr	r1, [pc, #272]	; (800102c <telnet_process_command+0x1d8>)
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f016 fe05 	bl	8017b2c <strtok_r>
 8000f22:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f24:	4945      	ldr	r1, [pc, #276]	; (800103c <telnet_process_command+0x1e8>)
 8000f26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f28:	f016 fdb8 	bl	8017a9c <strcasecmp>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <telnet_process_command+0xea>
 8000f32:	2201      	movs	r2, #1
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	4842      	ldr	r0, [pc, #264]	; (8001040 <telnet_process_command+0x1ec>)
 8000f38:	f001 fe24 	bl	8002b84 <HAL_GPIO_WritePin>
 8000f3c:	e00b      	b.n	8000f56 <telnet_process_command+0x102>
			else if (strcasecmp(token, "OFF") == 0) HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f3e:	4941      	ldr	r1, [pc, #260]	; (8001044 <telnet_process_command+0x1f0>)
 8000f40:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f42:	f016 fdab 	bl	8017a9c <strcasecmp>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d104      	bne.n	8000f56 <telnet_process_command+0x102>
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	483b      	ldr	r0, [pc, #236]	; (8001040 <telnet_process_command+0x1ec>)
 8000f52:	f001 fe17 	bl	8002b84 <HAL_GPIO_WritePin>
			printf("OK\n");
 8000f56:	483c      	ldr	r0, [pc, #240]	; (8001048 <telnet_process_command+0x1f4>)
 8000f58:	f016 fd44 	bl	80179e4 <puts>
}
 8000f5c:	e05f      	b.n	800101e <telnet_process_command+0x1ca>
	else if (strcasecmp(token, "LED3") == 0)
 8000f5e:	493c      	ldr	r1, [pc, #240]	; (8001050 <telnet_process_command+0x1fc>)
 8000f60:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f62:	f016 fd9b 	bl	8017a9c <strcasecmp>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d126      	bne.n	8000fba <telnet_process_command+0x166>
			token = strtok_r(NULL, " ", &saveptr);
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	461a      	mov	r2, r3
 8000f72:	492e      	ldr	r1, [pc, #184]	; (800102c <telnet_process_command+0x1d8>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f016 fdd9 	bl	8017b2c <strtok_r>
 8000f7a:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f7c:	492f      	ldr	r1, [pc, #188]	; (800103c <telnet_process_command+0x1e8>)
 8000f7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f80:	f016 fd8c 	bl	8017a9c <strcasecmp>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <telnet_process_command+0x144>
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f90:	482b      	ldr	r0, [pc, #172]	; (8001040 <telnet_process_command+0x1ec>)
 8000f92:	f001 fdf7 	bl	8002b84 <HAL_GPIO_WritePin>
 8000f96:	e00c      	b.n	8000fb2 <telnet_process_command+0x15e>
			else if (strcasecmp(token, "OFF") == 0) HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f98:	492a      	ldr	r1, [pc, #168]	; (8001044 <telnet_process_command+0x1f0>)
 8000f9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f9c:	f016 fd7e 	bl	8017a9c <strcasecmp>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d105      	bne.n	8000fb2 <telnet_process_command+0x15e>
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	4824      	ldr	r0, [pc, #144]	; (8001040 <telnet_process_command+0x1ec>)
 8000fae:	f001 fde9 	bl	8002b84 <HAL_GPIO_WritePin>
			printf("OK\n");
 8000fb2:	4825      	ldr	r0, [pc, #148]	; (8001048 <telnet_process_command+0x1f4>)
 8000fb4:	f016 fd16 	bl	80179e4 <puts>
}
 8000fb8:	e031      	b.n	800101e <telnet_process_command+0x1ca>
	else if (strcasecmp(token, "STATUS") == 0)
 8000fba:	4926      	ldr	r1, [pc, #152]	; (8001054 <telnet_process_command+0x200>)
 8000fbc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fbe:	f016 fd6d 	bl	8017a9c <strcasecmp>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d12a      	bne.n	800101e <telnet_process_command+0x1ca>
		if (HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin)) printf("LED1 ON; ");
 8000fc8:	2101      	movs	r1, #1
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <telnet_process_command+0x1ec>)
 8000fcc:	f001 fdc2 	bl	8002b54 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <telnet_process_command+0x18a>
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <telnet_process_command+0x204>)
 8000fd8:	f016 fc90 	bl	80178fc <iprintf>
 8000fdc:	e002      	b.n	8000fe4 <telnet_process_command+0x190>
		else printf("LED1 OFF; ");
 8000fde:	481f      	ldr	r0, [pc, #124]	; (800105c <telnet_process_command+0x208>)
 8000fe0:	f016 fc8c 	bl	80178fc <iprintf>
		if (HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)) printf("LED2 ON\n");
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	4816      	ldr	r0, [pc, #88]	; (8001040 <telnet_process_command+0x1ec>)
 8000fe8:	f001 fdb4 	bl	8002b54 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <telnet_process_command+0x1a6>
 8000ff2:	481b      	ldr	r0, [pc, #108]	; (8001060 <telnet_process_command+0x20c>)
 8000ff4:	f016 fcf6 	bl	80179e4 <puts>
 8000ff8:	e002      	b.n	8001000 <telnet_process_command+0x1ac>
		else printf("LED2 OFF\n");
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <telnet_process_command+0x210>)
 8000ffc:	f016 fcf2 	bl	80179e4 <puts>
		if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin)) printf("LED3 ON\n");
 8001000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001004:	480e      	ldr	r0, [pc, #56]	; (8001040 <telnet_process_command+0x1ec>)
 8001006:	f001 fda5 	bl	8002b54 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <telnet_process_command+0x1c4>
 8001010:	4815      	ldr	r0, [pc, #84]	; (8001068 <telnet_process_command+0x214>)
 8001012:	f016 fce7 	bl	80179e4 <puts>
}
 8001016:	e002      	b.n	800101e <telnet_process_command+0x1ca>
		else printf("LED3 OFF\n");
 8001018:	4814      	ldr	r0, [pc, #80]	; (800106c <telnet_process_command+0x218>)
 800101a:	f016 fce3 	bl	80179e4 <puts>
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	; 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	08018c48 	.word	0x08018c48
 800102c:	08018c58 	.word	0x08018c58
 8001030:	08018c5c 	.word	0x08018c5c
 8001034:	08018c64 	.word	0x08018c64
 8001038:	08018c74 	.word	0x08018c74
 800103c:	08018c7c 	.word	0x08018c7c
 8001040:	40020400 	.word	0x40020400
 8001044:	08018c80 	.word	0x08018c80
 8001048:	08018c84 	.word	0x08018c84
 800104c:	08018c88 	.word	0x08018c88
 8001050:	08018c90 	.word	0x08018c90
 8001054:	08018c98 	.word	0x08018c98
 8001058:	08018ca0 	.word	0x08018ca0
 800105c:	08018cac 	.word	0x08018cac
 8001060:	08018cb8 	.word	0x08018cb8
 8001064:	08018cc0 	.word	0x08018cc0
 8001068:	08018ccc 	.word	0x08018ccc
 800106c:	08018cd4 	.word	0x08018cd4

08001070 <telnet_byte_available>:



static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
 static uint16_t cnt;
 static char data[CMD_BUFFER_LEN];

 if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <telnet_byte_available+0x64>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	2b3f      	cmp	r3, #63	; 0x3f
 8001082:	d810      	bhi.n	80010a6 <telnet_byte_available+0x36>
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b1f      	cmp	r3, #31
 8001088:	d90d      	bls.n	80010a6 <telnet_byte_available+0x36>
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db09      	blt.n	80010a6 <telnet_byte_available+0x36>
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <telnet_byte_available+0x64>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	b291      	uxth	r1, r2
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <telnet_byte_available+0x64>)
 800109c:	8011      	strh	r1, [r2, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <telnet_byte_available+0x68>)
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	5453      	strb	r3, [r2, r1]
 if (c == '\n' || c == '\r') {
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b0a      	cmp	r3, #10
 80010aa:	d002      	beq.n	80010b2 <telnet_byte_available+0x42>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b0d      	cmp	r3, #13
 80010b0:	d10c      	bne.n	80010cc <telnet_byte_available+0x5c>
 data[cnt] = '\0';
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <telnet_byte_available+0x64>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <telnet_byte_available+0x68>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	5499      	strb	r1, [r3, r2]
 telnet_process_command(data, conn);  //zmacknuty enter vola se funkce
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <telnet_byte_available+0x68>)
 80010c2:	f7ff fec7 	bl	8000e54 <telnet_process_command>
 cnt = 0;
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <telnet_byte_available+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	801a      	strh	r2, [r3, #0]
 }
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000464 	.word	0x20000464
 80010d8:	20000468 	.word	0x20000468

080010dc <telnet_thread>:


/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2010      	movs	r0, #16
 80010ea:	f007 f81d 	bl	8008128 <netconn_new_with_proto_and_callback>
 80010ee:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d055      	beq.n	80011a2 <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 23. */
    err = netconn_bind(conn, NULL, 23);
 80010f6:	2217      	movs	r2, #23
 80010f8:	2100      	movs	r1, #0
 80010fa:	69f8      	ldr	r0, [r7, #28]
 80010fc:	f007 f8ce 	bl	800829c <netconn_bind>
 8001100:	4603      	mov	r3, r0
 8001102:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8001104:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d146      	bne.n	800119a <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 800110c:	21ff      	movs	r1, #255	; 0xff
 800110e:	69f8      	ldr	r0, [r7, #28]
 8001110:	f007 f8fc 	bl	800830c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	69f8      	ldr	r0, [r7, #28]
 800111c:	f007 f922 	bl	8008364 <netconn_accept>
 8001120:	4603      	mov	r3, r0
 8001122:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8001124:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f3      	bne.n	8001114 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 800112c:	e022      	b.n	8001174 <telnet_thread+0x98>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f107 020a 	add.w	r2, r7, #10
 8001134:	f107 010c 	add.w	r1, r7, #12
 8001138:	4618      	mov	r0, r3
 800113a:	f009 f8af 	bl	800a29c <netbuf_data>
              while (len--) telnet_byte_available(*data++, newconn);
 800113e:	e008      	b.n	8001152 <telnet_thread+0x76>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60fa      	str	r2, [r7, #12]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff8f 	bl	8001070 <telnet_byte_available>
 8001152:	897b      	ldrh	r3, [r7, #10]
 8001154:	1e5a      	subs	r2, r3, #1
 8001156:	b292      	uxth	r2, r2
 8001158:	817a      	strh	r2, [r7, #10]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f0      	bne.n	8001140 <telnet_thread+0x64>
          
            } 
            while (netbuf_next(buf) >= 0);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4618      	mov	r0, r3
 8001162:	f009 f8e5 	bl	800a330 <netbuf_next>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	dae0      	bge.n	800112e <telnet_thread+0x52>
          
            netbuf_delete(buf);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4618      	mov	r0, r3
 8001170:	f009 f874 	bl	800a25c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f107 0210 	add.w	r2, r7, #16
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f007 faf9 	bl	8008774 <netconn_recv>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0d2      	beq.n	800112e <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	4618      	mov	r0, r3
 800118c:	f007 fc6e 	bl	8008a6c <netconn_close>
          netconn_delete(newconn);
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	4618      	mov	r0, r3
 8001194:	f007 f866 	bl	8008264 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8001198:	e7bc      	b.n	8001114 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	4618      	mov	r0, r3
 800119e:	f007 f861 	bl	8008264 <netconn_delete>
    }
  }
}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 80011b2:	2304      	movs	r3, #4
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ba:	2200      	movs	r2, #0
 80011bc:	4903      	ldr	r1, [pc, #12]	; (80011cc <telnet_init+0x20>)
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <telnet_init+0x24>)
 80011c0:	f016 fad8 	bl	8017774 <sys_thread_new>
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	080010dd 	.word	0x080010dd
 80011d0:	08018ce0 	.word	0x08018ce0

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011da:	e003      	b.n	80011e4 <LoopCopyDataInit>

080011dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011e2:	3104      	adds	r1, #4

080011e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011ec:	d3f6      	bcc.n	80011dc <CopyDataInit>
  ldr  r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011f0:	e002      	b.n	80011f8 <LoopFillZerobss>

080011f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011f4:	f842 3b04 	str.w	r3, [r2], #4

080011f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011fc:	d3f9      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011fe:	f7ff fd9f 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f016 fafb 	bl	80177fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f9e5 	bl	80005d4 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800120c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001210:	0801c914 	.word	0x0801c914
  ldr  r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001218:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 800121c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001220:	2000f528 	.word	0x2000f528

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f8fa 	bl	800144a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff fc44 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fb78 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20008c2c 	.word	0x20008c2c

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20008c2c 	.word	0x20008c2c

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff ffee 	bl	8001294 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_Delay+0x40>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffde 	bl	8001294 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000008 	.word	0x20000008

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff4c 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001472:	f7ff ff61 	bl	8001338 <__NVIC_GetPriorityGrouping>
 8001476:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	6978      	ldr	r0, [r7, #20]
 800147e:	f7ff ffb1 	bl	80013e4 <NVIC_EncodePriority>
 8001482:	4602      	mov	r2, r0
 8001484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff80 	bl	8001390 <__NVIC_SetPriority>
}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff54 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80014c4:	4baa      	ldr	r3, [pc, #680]	; (8001770 <HAL_ETH_Init+0x2bc>)
 80014c6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e185      	b.n	80017e6 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f003 fa40 	bl	8004974 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b9e      	ldr	r3, [pc, #632]	; (8001774 <HAL_ETH_Init+0x2c0>)
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	4a9d      	ldr	r2, [pc, #628]	; (8001774 <HAL_ETH_Init+0x2c0>)
 80014fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001502:	6453      	str	r3, [r2, #68]	; 0x44
 8001504:	4b9b      	ldr	r3, [pc, #620]	; (8001774 <HAL_ETH_Init+0x2c0>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001510:	4b99      	ldr	r3, [pc, #612]	; (8001778 <HAL_ETH_Init+0x2c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a98      	ldr	r2, [pc, #608]	; (8001778 <HAL_ETH_Init+0x2c4>)
 8001516:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800151a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800151c:	4b96      	ldr	r3, [pc, #600]	; (8001778 <HAL_ETH_Init+0x2c4>)
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4994      	ldr	r1, [pc, #592]	; (8001778 <HAL_ETH_Init+0x2c4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001540:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001542:	f7ff fea7 	bl	8001294 <HAL_GetTick>
 8001546:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001548:	e011      	b.n	800156e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800154a:	f7ff fea3 	bl	8001294 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001558:	d909      	bls.n	800156e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e13b      	b.n	80017e6 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e4      	bne.n	800154a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f023 031c 	bic.w	r3, r3, #28
 800158e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001590:	f002 f85c 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8001594:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4a78      	ldr	r2, [pc, #480]	; (800177c <HAL_ETH_Init+0x2c8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d908      	bls.n	80015b0 <HAL_ETH_Init+0xfc>
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4a77      	ldr	r2, [pc, #476]	; (8001780 <HAL_ETH_Init+0x2cc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d804      	bhi.n	80015b0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e027      	b.n	8001600 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	4a73      	ldr	r2, [pc, #460]	; (8001780 <HAL_ETH_Init+0x2cc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d908      	bls.n	80015ca <HAL_ETH_Init+0x116>
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	4a72      	ldr	r2, [pc, #456]	; (8001784 <HAL_ETH_Init+0x2d0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d804      	bhi.n	80015ca <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f043 030c 	orr.w	r3, r3, #12
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	e01a      	b.n	8001600 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4a6d      	ldr	r2, [pc, #436]	; (8001784 <HAL_ETH_Init+0x2d0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d903      	bls.n	80015da <HAL_ETH_Init+0x126>
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4a6c      	ldr	r2, [pc, #432]	; (8001788 <HAL_ETH_Init+0x2d4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d911      	bls.n	80015fe <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4a6a      	ldr	r2, [pc, #424]	; (8001788 <HAL_ETH_Init+0x2d4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d908      	bls.n	80015f4 <HAL_ETH_Init+0x140>
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4a69      	ldr	r2, [pc, #420]	; (800178c <HAL_ETH_Init+0x2d8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d804      	bhi.n	80015f4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e005      	b.n	8001600 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	e000      	b.n	8001600 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80015fe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001608:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800160c:	2100      	movs	r1, #0
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fc19 	bl	8001e46 <HAL_ETH_WritePHYRegister>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800161e:	6939      	ldr	r1, [r7, #16]
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fdcf 	bl	80021c4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0d9      	b.n	80017e6 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001632:	20ff      	movs	r0, #255	; 0xff
 8001634:	f7ff fe3a 	bl	80012ac <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a7 	beq.w	8001790 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001642:	f7ff fe27 	bl	8001294 <HAL_GetTick>
 8001646:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	461a      	mov	r2, r3
 800164e:	2101      	movs	r1, #1
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fb90 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001656:	f7ff fe1d 	bl	8001294 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d90f      	bls.n	8001688 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800166c:	6939      	ldr	r1, [r7, #16]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fda8 	bl	80021c4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0ae      	b.n	80017e6 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0da      	beq.n	8001648 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001696:	2100      	movs	r1, #0
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fbd4 	bl	8001e46 <HAL_ETH_WritePHYRegister>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fd8a 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016b8:	2301      	movs	r3, #1
 80016ba:	e094      	b.n	80017e6 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80016bc:	f7ff fdea 	bl	8001294 <HAL_GetTick>
 80016c0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	461a      	mov	r2, r3
 80016c8:	2101      	movs	r1, #1
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fb53 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80016d0:	f7ff fde0 	bl	8001294 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d90f      	bls.n	8001702 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016e6:	6939      	ldr	r1, [r7, #16]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fd6b 	bl	80021c4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e071      	b.n	80017e6 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0da      	beq.n	80016c2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	461a      	mov	r2, r3
 8001712:	211f      	movs	r1, #31
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fb2e 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001724:	6939      	ldr	r1, [r7, #16]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fd4c 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001734:	2301      	movs	r3, #1
 8001736:	e056      	b.n	80017e6 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	e002      	b.n	8001752 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	e037      	b.n	80017d4 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	e032      	b.n	80017d4 <HAL_ETH_Init+0x320>
 800176e:	bf00      	nop
 8001770:	03938700 	.word	0x03938700
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800
 800177c:	01312cff 	.word	0x01312cff
 8001780:	02160ebf 	.word	0x02160ebf
 8001784:	039386ff 	.word	0x039386ff
 8001788:	05f5e0ff 	.word	0x05f5e0ff
 800178c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	2100      	movs	r1, #0
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fb4c 	bl	8001e46 <HAL_ETH_WritePHYRegister>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00b      	beq.n	80017cc <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017b8:	6939      	ldr	r1, [r7, #16]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fd02 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e00c      	b.n	80017e6 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80017cc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80017d0:	f7ff fd6c 	bl	80012ac <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80017d4:	6939      	ldr	r1, [r7, #16]
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fcf4 	bl	80021c4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop

080017f0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ETH_DMATxDescListInit+0x20>
 800180c:	2302      	movs	r3, #2
 800180e:	e052      	b.n	80018b6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e030      	b.n	800188e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	015b      	lsls	r3, r3, #5
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800183c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	461a      	mov	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3b01      	subs	r3, #1
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	d208      	bcs.n	8001882 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4413      	add	r3, r2
 800187a:	461a      	mov	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	e002      	b.n	8001888 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d3ca      	bcc.n	800182c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a0:	3310      	adds	r3, #16
 80018a2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b087      	sub	sp, #28
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_ETH_DMARxDescListInit+0x20>
 80018de:	2302      	movs	r3, #2
 80018e0:	e056      	b.n	8001990 <HAL_ETH_DMARxDescListInit+0xce>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e034      	b.n	8001968 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	015b      	lsls	r3, r3, #5
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	4413      	add	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800190e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001916:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	461a      	mov	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	429a      	cmp	r2, r3
 8001948:	d208      	bcs.n	800195c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	015b      	lsls	r3, r3, #5
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	4413      	add	r3, r2
 8001954:	461a      	mov	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	e002      	b.n	8001962 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3c6      	bcc.n	80018fe <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197a:	330c      	adds	r3, #12
 800197c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_ETH_TransmitFrame+0x24>
 80019bc:	2302      	movs	r3, #2
 80019be:	e0cd      	b.n	8001b5c <HAL_ETH_TransmitFrame+0x1c0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0b8      	b.n	8001b5c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	da09      	bge.n	8001a08 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2212      	movs	r2, #18
 80019f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0a9      	b.n	8001b5c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d915      	bls.n	8001a3e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4a54      	ldr	r2, [pc, #336]	; (8001b68 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a22:	fba3 1302 	umull	r1, r3, r3, r2
 8001a26:	0a9b      	lsrs	r3, r3, #10
 8001a28:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e001      	b.n	8001a42 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d11c      	bne.n	8001a82 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001a56:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a62:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a72:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a80:	e04b      	b.n	8001b1a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	e044      	b.n	8001b12 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a96:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d107      	bne.n	8001aae <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aac:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ab6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d116      	bne.n	8001af0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ad0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_ETH_TransmitFrame+0x1d0>)
 8001ad6:	fb02 f203 	mul.w	r2, r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001ae2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001aee:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001afe:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d3b6      	bcc.n	8001a88 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b22:	3314      	adds	r3, #20
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b36:	3314      	adds	r3, #20
 8001b38:	2204      	movs	r2, #4
 8001b3a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b44:	3304      	adds	r3, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	ac02b00b 	.word	0xac02b00b
 8001b6c:	fffffa0c 	.word	0xfffffa0c

08001b70 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e074      	b.n	8001c74 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b9a:	e05a      	b.n	8001c52 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb0:	d10d      	bne.n	8001bce <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
 8001bcc:	e041      	b.n	8001c52 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10b      	bne.n	8001bf4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf2:	e02e      	b.n	8001c52 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d103      	bne.n	8001c16 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c22:	1f1a      	subs	r2, r3, #4
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e010      	b.n	8001c74 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db02      	blt.n	8001c62 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d99c      	bls.n	8001b9c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c90:	3314      	adds	r3, #20
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d112      	bne.n	8001cc2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f002 ff37 	bl	8004b10 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001caa:	3314      	adds	r3, #20
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cc0:	e01b      	b.n	8001cfa <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cca:	3314      	adds	r3, #20
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d111      	bne.n	8001cfa <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f839 	bl	8001d4e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce4:	3314      	adds	r3, #20
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d02:	3314      	adds	r3, #20
 8001d04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d08:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d12:	3314      	adds	r3, #20
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1e:	d112      	bne.n	8001d46 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f81e 	bl	8001d62 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2e:	3314      	adds	r3, #20
 8001d30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d34:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b82      	cmp	r3, #130	; 0x82
 8001d96:	d101      	bne.n	8001d9c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e050      	b.n	8001e3e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2282      	movs	r2, #130	; 0x82
 8001da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 031c 	and.w	r3, r3, #28
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8a1b      	ldrh	r3, [r3, #16]
 8001db8:	02db      	lsls	r3, r3, #11
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f023 0302 	bic.w	r3, r3, #2
 8001dd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001de8:	f7ff fa54 	bl	8001294 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dee:	e015      	b.n	8001e1c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001df0:	f7ff fa50 	bl	8001294 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfe:	d309      	bcc.n	8001e14 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e014      	b.n	8001e3e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e4      	bne.n	8001df0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b42      	cmp	r3, #66	; 0x42
 8001e66:	d101      	bne.n	8001e6c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e04e      	b.n	8001f0a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2242      	movs	r2, #66	; 0x42
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 031c 	and.w	r3, r3, #28
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8a1b      	ldrh	r3, [r3, #16]
 8001e88:	02db      	lsls	r3, r3, #11
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec2:	f7ff f9e7 	bl	8001294 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ec8:	e015      	b.n	8001ef6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001eca:	f7ff f9e3 	bl	8001294 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d309      	bcc.n	8001eee <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e00d      	b.n	8001f0a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e4      	bne.n	8001eca <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_ETH_Start+0x16>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e01f      	b.n	8001f68 <HAL_ETH_Start+0x56>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb45 	bl	80025c8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fb7c 	bl	800263c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fc13 	bl	8002770 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fbb0 	bl	80026b0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fbdd 	bl	8002710 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ETH_Stop+0x16>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e01f      	b.n	8001fc6 <HAL_ETH_Stop+0x56>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fba2 	bl	80026e0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fbcf 	bl	8002740 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fb67 	bl	8002676 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fbe1 	bl	8002770 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fb27 	bl	8002602 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ETH_ConfigMAC+0x1c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0e4      	b.n	80021b6 <HAL_ETH_ConfigMAC+0x1e6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80b1 	beq.w	8002166 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <HAL_ETH_ConfigMAC+0x1f0>)
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800201c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002022:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002028:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800202e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002034:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800203a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002040:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002046:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800204c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002052:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002058:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800205e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff f918 	bl	80012ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800208c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002092:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002098:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800209e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80020a4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80020aa:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80020b6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80020b8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7ff f8f2 	bl	80012ac <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020d8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020f2:	4013      	ands	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002100:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002106:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800210c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002112:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002118:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff f8bb 	bl	80012ac <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff f8a8 	bl	80012ac <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	61da      	str	r2, [r3, #28]
 8002164:	e01e      	b.n	80021a4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002174:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002196:	2001      	movs	r0, #1
 8002198:	f7ff f888 	bl	80012ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	ff20810f 	.word	0xff20810f

080021c4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0b0      	sub	sp, #192	; 0xc0
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021f2:	2300      	movs	r3, #0
 80021f4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	663b      	str	r3, [r7, #96]	; 0x60
 8002210:	e001      	b.n	8002216 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002220:	2300      	movs	r3, #0
 8002222:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002230:	2340      	movs	r3, #64	; 0x40
 8002232:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002298:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229c:	4bac      	ldr	r3, [pc, #688]	; (8002550 <ETH_MACDMAConfig+0x38c>)
 800229e:	4013      	ands	r3, r2
 80022a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022a8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80022aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80022ac:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80022b0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80022b6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80022b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80022ba:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80022be:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80022c4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80022c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80022c8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80022ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80022cc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80022ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80022d0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80022d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022d4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80022d8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7fe ffd7 	bl	80012ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002306:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002308:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800230a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800230c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800230e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002310:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002316:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800231c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800231e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002322:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002328:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800232c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002334:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002336:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002342:	2001      	movs	r0, #1
 8002344:	f7fe ffb2 	bl	80012ac <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002350:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800235a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002364:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002370:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002374:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002378:	4013      	ands	r3, r2
 800237a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800237e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002382:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002388:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800238a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800238e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002394:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800239a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800239c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80023a0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80023a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7fe ff73 	bl	80012ac <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ce:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023d0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80023d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7fe ff5e 	bl	80012ac <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002402:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800240c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800241e:	2304      	movs	r3, #4
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800242e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800243e:	2300      	movs	r3, #0
 8002440:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002442:	2300      	movs	r3, #0
 8002444:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244e:	3318      	adds	r3, #24
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002456:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245a:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <ETH_MACDMAConfig+0x390>)
 800245c:	4013      	ands	r3, r2
 800245e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002462:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002464:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002466:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002468:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800246a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800246c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800246e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002470:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002472:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002474:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002476:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002478:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800247a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800247e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002482:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002484:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002496:	3318      	adds	r3, #24
 8002498:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800249c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	3318      	adds	r3, #24
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7fe fefc 	bl	80012ac <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	3318      	adds	r3, #24
 80024be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024c2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80024cc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024d0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80024d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80024d4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024da:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024de:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ec:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7fe fed5 	bl	80012ac <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800250e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10f      	bne.n	8002538 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002520:	331c      	adds	r3, #28
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800252c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002534:	331c      	adds	r3, #28
 8002536:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	461a      	mov	r2, r3
 800253e:	2100      	movs	r1, #0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f809 	bl	8002558 <ETH_MACAddressConfig>
}
 8002546:	bf00      	nop
 8002548:	37c0      	adds	r7, #192	; 0xc0
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	ff20810f 	.word	0xff20810f
 8002554:	f8de3f23 	.word	0xf8de3f23

08002558 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3305      	adds	r3, #5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	3204      	adds	r2, #4
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <ETH_MACAddressConfig+0x68>)
 800257a:	4413      	add	r3, r2
 800257c:	461a      	mov	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3303      	adds	r3, #3
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	061a      	lsls	r2, r3, #24
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3302      	adds	r3, #2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	4313      	orrs	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <ETH_MACAddressConfig+0x6c>)
 80025aa:	4413      	add	r3, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	6013      	str	r3, [r2, #0]
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40028040 	.word	0x40028040
 80025c4:	40028044 	.word	0x40028044

080025c8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025ec:	2001      	movs	r0, #1
 80025ee:	f000 f8e9 	bl	80027c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 f8cc 	bl	80027c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0204 	orr.w	r2, r2, #4
 8002656:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002660:	2001      	movs	r0, #1
 8002662:	f000 f8af 	bl	80027c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0204 	bic.w	r2, r2, #4
 8002690:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800269a:	2001      	movs	r0, #1
 800269c:	f000 f892 	bl	80027c4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c0:	3318      	adds	r3, #24
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d0:	3318      	adds	r3, #24
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	3318      	adds	r3, #24
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002700:	3318      	adds	r3, #24
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002720:	3318      	adds	r3, #24
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0202 	orr.w	r2, r2, #2
 800272c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002730:	3318      	adds	r3, #24
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002750:	3318      	adds	r3, #24
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0202 	bic.w	r2, r2, #2
 800275c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002760:	3318      	adds	r3, #24
 8002762:	601a      	str	r2, [r3, #0]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002784:	3318      	adds	r3, #24
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002794:	3318      	adds	r3, #24
 8002796:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a0:	3318      	adds	r3, #24
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f000 f80c 	bl	80027c4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b6:	3318      	adds	r3, #24
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <ETH_Delay+0x34>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <ETH_Delay+0x38>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0a5b      	lsrs	r3, r3, #9
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80027e0:	bf00      	nop
  } 
  while (Delay --);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1e5a      	subs	r2, r3, #1
 80027e6:	60fa      	str	r2, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f9      	bne.n	80027e0 <ETH_Delay+0x1c>
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	20000000 	.word	0x20000000
 80027fc:	10624dd3 	.word	0x10624dd3

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e177      	b.n	8002b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	f040 8166 	bne.w	8002b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d00b      	beq.n	800285a <HAL_GPIO_Init+0x5a>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800284e:	2b11      	cmp	r3, #17
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b12      	cmp	r3, #18
 8002858:	d130      	bne.n	80028bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 0201 	and.w	r2, r3, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0xfc>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b12      	cmp	r3, #18
 80028fa:	d123      	bne.n	8002944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80c0 	beq.w	8002b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_GPIO_Init+0x320>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a64      	ldr	r2, [pc, #400]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a2:	4a60      	ldr	r2, [pc, #384]	; (8002b24 <HAL_GPIO_Init+0x324>)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <HAL_GPIO_Init+0x328>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d037      	beq.n	8002a3e <HAL_GPIO_Init+0x23e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a56      	ldr	r2, [pc, #344]	; (8002b2c <HAL_GPIO_Init+0x32c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_GPIO_Init+0x23a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a55      	ldr	r2, [pc, #340]	; (8002b30 <HAL_GPIO_Init+0x330>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02b      	beq.n	8002a36 <HAL_GPIO_Init+0x236>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_GPIO_Init+0x334>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x232>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a53      	ldr	r2, [pc, #332]	; (8002b38 <HAL_GPIO_Init+0x338>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x22e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_GPIO_Init+0x33c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x22a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a51      	ldr	r2, [pc, #324]	; (8002b40 <HAL_GPIO_Init+0x340>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x226>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_GPIO_Init+0x344>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x222>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <HAL_GPIO_Init+0x348>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x21e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_GPIO_Init+0x34c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x21a>
 8002a16:	2309      	movs	r3, #9
 8002a18:	e012      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	e010      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	e00e      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00c      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e00a      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	e008      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e004      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e002      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f002 0203 	and.w	r2, r2, #3
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	4093      	lsls	r3, r2
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a50:	4934      	ldr	r1, [pc, #208]	; (8002b24 <HAL_GPIO_Init+0x324>)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a82:	4a33      	ldr	r2, [pc, #204]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a88:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aac:	4a28      	ldr	r2, [pc, #160]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	f67f ae84 	bls.w	800281c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b14:	bf00      	nop
 8002b16:	3724      	adds	r7, #36	; 0x24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40013800 	.word	0x40013800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40021400 	.word	0x40021400
 8002b40:	40021800 	.word	0x40021800
 8002b44:	40021c00 	.word	0x40021c00
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40022400 	.word	0x40022400
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e001      	b.n	8002b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb8:	b08f      	sub	sp, #60	; 0x3c
 8002bba:	af0a      	add	r7, sp, #40	; 0x28
 8002bbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e10f      	b.n	8002de8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd ff24 	bl	8000a30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2203      	movs	r2, #3
 8002bec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fbef 	bl	80043ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	687e      	ldr	r6, [r7, #4]
 8002c14:	466d      	mov	r5, sp
 8002c16:	f106 0410 	add.w	r4, r6, #16
 8002c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c2a:	1d33      	adds	r3, r6, #4
 8002c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	f001 fb7a 	bl	8004328 <USB_CoreInit>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0d0      	b.n	8002de8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 fbdd 	bl	800440c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e04a      	b.n	8002cee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	333d      	adds	r3, #61	; 0x3d
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	333c      	adds	r3, #60	; 0x3c
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	b298      	uxth	r0, r3
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3342      	adds	r3, #66	; 0x42
 8002c94:	4602      	mov	r2, r0
 8002c96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	333f      	adds	r3, #63	; 0x3f
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3344      	adds	r3, #68	; 0x44
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3348      	adds	r3, #72	; 0x48
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3350      	adds	r3, #80	; 0x50
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	3301      	adds	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d3af      	bcc.n	8002c58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	e044      	b.n	8002d88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	3301      	adds	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d3b5      	bcc.n	8002cfe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	687e      	ldr	r6, [r7, #4]
 8002d9a:	466d      	mov	r5, sp
 8002d9c:	f106 0410 	add.w	r4, r6, #16
 8002da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dac:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db0:	1d33      	adds	r3, r6, #4
 8002db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db4:	6838      	ldr	r0, [r7, #0]
 8002db6:	f001 fb53 	bl	8004460 <USB_DevInit>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e00d      	b.n	8002de8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fd02 	bl	80047ea <USB_DevDisconnect>

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e25b      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d075      	beq.n	8002efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e0e:	4ba3      	ldr	r3, [pc, #652]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d00c      	beq.n	8002e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1a:	4ba0      	ldr	r3, [pc, #640]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d112      	bne.n	8002e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e26:	4b9d      	ldr	r3, [pc, #628]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e32:	d10b      	bne.n	8002e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	4b99      	ldr	r3, [pc, #612]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d05b      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x108>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d157      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e236      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d106      	bne.n	8002e64 <HAL_RCC_OscConfig+0x74>
 8002e56:	4b91      	ldr	r3, [pc, #580]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a90      	ldr	r2, [pc, #576]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e01d      	b.n	8002ea0 <HAL_RCC_OscConfig+0xb0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x98>
 8002e6e:	4b8b      	ldr	r3, [pc, #556]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a8a      	ldr	r2, [pc, #552]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a87      	ldr	r2, [pc, #540]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0xb0>
 8002e88:	4b84      	ldr	r3, [pc, #528]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a83      	ldr	r2, [pc, #524]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b81      	ldr	r3, [pc, #516]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a80      	ldr	r2, [pc, #512]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe f9f4 	bl	8001294 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fe f9f0 	bl	8001294 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1fb      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b76      	ldr	r3, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xc0>
 8002ece:	e014      	b.n	8002efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f9e0 	bl	8001294 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe f9dc 	bl	8001294 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1e7      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	4b6c      	ldr	r3, [pc, #432]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xe8>
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d063      	beq.n	8002fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f06:	4b65      	ldr	r3, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f12:	4b62      	ldr	r3, [pc, #392]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d11c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d116      	bne.n	8002f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2a:	4b5c      	ldr	r3, [pc, #368]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_RCC_OscConfig+0x152>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e1bb      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	4b56      	ldr	r3, [pc, #344]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4952      	ldr	r1, [pc, #328]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	e03a      	b.n	8002fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f60:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <HAL_RCC_OscConfig+0x2b0>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe f995 	bl	8001294 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6e:	f7fe f991 	bl	8001294 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e19c      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	4b46      	ldr	r3, [pc, #280]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4940      	ldr	r1, [pc, #256]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
 8002fa0:	e015      	b.n	8002fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa2:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_RCC_OscConfig+0x2b0>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe f974 	bl	8001294 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb0:	f7fe f970 	bl	8001294 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e17b      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d030      	beq.n	800303c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe2:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <HAL_RCC_OscConfig+0x2b4>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe f954 	bl	8001294 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7fe f950 	bl	8001294 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e15b      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003002:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x200>
 800300e:	e015      	b.n	800303c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003010:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_RCC_OscConfig+0x2b4>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003016:	f7fe f93d 	bl	8001294 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301e:	f7fe f939 	bl	8001294 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e144      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8003032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a0 	beq.w	800318a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10f      	bne.n	800307a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003068:	6413      	str	r3, [r2, #64]	; 0x40
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_RCC_OscConfig+0x2ac>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003076:	2301      	movs	r3, #1
 8003078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_OscConfig+0x2b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d121      	bne.n	80030ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_RCC_OscConfig+0x2b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <HAL_RCC_OscConfig+0x2b8>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003092:	f7fe f8ff 	bl	8001294 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	e011      	b.n	80030be <HAL_RCC_OscConfig+0x2ce>
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	42470000 	.word	0x42470000
 80030a4:	42470e80 	.word	0x42470e80
 80030a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ac:	f7fe f8f2 	bl	8001294 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0fd      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_OscConfig+0x4d4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
 80030d2:	4b7d      	ldr	r3, [pc, #500]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a7c      	ldr	r2, [pc, #496]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	e01c      	b.n	800311a <HAL_RCC_OscConfig+0x32a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b05      	cmp	r3, #5
 80030e6:	d10c      	bne.n	8003102 <HAL_RCC_OscConfig+0x312>
 80030e8:	4b77      	ldr	r3, [pc, #476]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4a76      	ldr	r2, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 80030ee:	f043 0304 	orr.w	r3, r3, #4
 80030f2:	6713      	str	r3, [r2, #112]	; 0x70
 80030f4:	4b74      	ldr	r3, [pc, #464]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a73      	ldr	r2, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003100:	e00b      	b.n	800311a <HAL_RCC_OscConfig+0x32a>
 8003102:	4b71      	ldr	r3, [pc, #452]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a70      	ldr	r2, [pc, #448]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
 800310e:	4b6e      	ldr	r3, [pc, #440]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a6d      	ldr	r2, [pc, #436]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d015      	beq.n	800314e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe f8b7 	bl	8001294 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe f8b3 	bl	8001294 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0bc      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ee      	beq.n	800312a <HAL_RCC_OscConfig+0x33a>
 800314c:	e014      	b.n	8003178 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7fe f8a1 	bl	8001294 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fe f89d 	bl	8001294 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0a6      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ee      	bne.n	8003156 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	4b52      	ldr	r3, [pc, #328]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a51      	ldr	r2, [pc, #324]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8092 	beq.w	80032b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003194:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d05c      	beq.n	800325a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d141      	bne.n	800322c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	4b48      	ldr	r3, [pc, #288]	; (80032cc <HAL_RCC_OscConfig+0x4dc>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe f871 	bl	8001294 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe f86d 	bl	8001294 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e078      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	019b      	lsls	r3, r3, #6
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	3b01      	subs	r3, #1
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	4933      	ldr	r1, [pc, #204]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fe:	4b33      	ldr	r3, [pc, #204]	; (80032cc <HAL_RCC_OscConfig+0x4dc>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fe f846 	bl	8001294 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe f842 	bl	8001294 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e04d      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321e:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x41c>
 800322a:	e045      	b.n	80032b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x4dc>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe f82f 	bl	8001294 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe f82b 	bl	8001294 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e036      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324c:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x44a>
 8003258:	e02e      	b.n	80032b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e029      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_RCC_OscConfig+0x4d8>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	429a      	cmp	r2, r3
 8003278:	d11c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d115      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800328e:	4013      	ands	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003294:	4293      	cmp	r3, r2
 8003296:	d10d      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d106      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40007000 	.word	0x40007000
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470060 	.word	0x42470060

080032d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0cc      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b68      	ldr	r3, [pc, #416]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d90c      	bls.n	800330c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b65      	ldr	r3, [pc, #404]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800332e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a52      	ldr	r2, [pc, #328]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d044      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d119      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338a:	2b03      	cmp	r3, #3
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b3f      	ldr	r3, [pc, #252]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e067      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4934      	ldr	r1, [pc, #208]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fd ff68 	bl	8001294 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fd ff64 	bl	8001294 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e04f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d20c      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4601      	mov	r1, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	5cd3      	ldrb	r3, [r2, r3]
 800346a:	fa21 f303 	lsr.w	r3, r1, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fb34 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00
 800348c:	40023800 	.word	0x40023800
 8003490:	0801c604 	.word	0x0801c604
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	2300      	movs	r3, #0
 80034ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d007      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x32>
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d008      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x38>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 80b4 	bne.w	8003630 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b5e      	ldr	r3, [pc, #376]	; (8003644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034ca:	60bb      	str	r3, [r7, #8]
       break;
 80034cc:	e0b3      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ce:	4b5e      	ldr	r3, [pc, #376]	; (8003648 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80034d0:	60bb      	str	r3, [r7, #8]
      break;
 80034d2:	e0b0      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d4:	4b5a      	ldr	r3, [pc, #360]	; (8003640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034de:	4b58      	ldr	r3, [pc, #352]	; (8003640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d04a      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b55      	ldr	r3, [pc, #340]	; (8003640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	f04f 0400 	mov.w	r4, #0
 80034f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	ea03 0501 	and.w	r5, r3, r1
 8003500:	ea04 0602 	and.w	r6, r4, r2
 8003504:	4629      	mov	r1, r5
 8003506:	4632      	mov	r2, r6
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	f04f 0400 	mov.w	r4, #0
 8003510:	0154      	lsls	r4, r2, #5
 8003512:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003516:	014b      	lsls	r3, r1, #5
 8003518:	4619      	mov	r1, r3
 800351a:	4622      	mov	r2, r4
 800351c:	1b49      	subs	r1, r1, r5
 800351e:	eb62 0206 	sbc.w	r2, r2, r6
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f04f 0400 	mov.w	r4, #0
 800352a:	0194      	lsls	r4, r2, #6
 800352c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003530:	018b      	lsls	r3, r1, #6
 8003532:	1a5b      	subs	r3, r3, r1
 8003534:	eb64 0402 	sbc.w	r4, r4, r2
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	00e2      	lsls	r2, r4, #3
 8003542:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003546:	00d9      	lsls	r1, r3, #3
 8003548:	460b      	mov	r3, r1
 800354a:	4614      	mov	r4, r2
 800354c:	195b      	adds	r3, r3, r5
 800354e:	eb44 0406 	adc.w	r4, r4, r6
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	0262      	lsls	r2, r4, #9
 800355c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003560:	0259      	lsls	r1, r3, #9
 8003562:	460b      	mov	r3, r1
 8003564:	4614      	mov	r4, r2
 8003566:	4618      	mov	r0, r3
 8003568:	4621      	mov	r1, r4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f04f 0400 	mov.w	r4, #0
 8003570:	461a      	mov	r2, r3
 8003572:	4623      	mov	r3, r4
 8003574:	f7fc fe94 	bl	80002a0 <__aeabi_uldivmod>
 8003578:	4603      	mov	r3, r0
 800357a:	460c      	mov	r4, r1
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e049      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003580:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	f04f 0400 	mov.w	r4, #0
 800358a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	ea03 0501 	and.w	r5, r3, r1
 8003596:	ea04 0602 	and.w	r6, r4, r2
 800359a:	4629      	mov	r1, r5
 800359c:	4632      	mov	r2, r6
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	f04f 0400 	mov.w	r4, #0
 80035a6:	0154      	lsls	r4, r2, #5
 80035a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035ac:	014b      	lsls	r3, r1, #5
 80035ae:	4619      	mov	r1, r3
 80035b0:	4622      	mov	r2, r4
 80035b2:	1b49      	subs	r1, r1, r5
 80035b4:	eb62 0206 	sbc.w	r2, r2, r6
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	f04f 0400 	mov.w	r4, #0
 80035c0:	0194      	lsls	r4, r2, #6
 80035c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035c6:	018b      	lsls	r3, r1, #6
 80035c8:	1a5b      	subs	r3, r3, r1
 80035ca:	eb64 0402 	sbc.w	r4, r4, r2
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	00e2      	lsls	r2, r4, #3
 80035d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035dc:	00d9      	lsls	r1, r3, #3
 80035de:	460b      	mov	r3, r1
 80035e0:	4614      	mov	r4, r2
 80035e2:	195b      	adds	r3, r3, r5
 80035e4:	eb44 0406 	adc.w	r4, r4, r6
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	02a2      	lsls	r2, r4, #10
 80035f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035f6:	0299      	lsls	r1, r3, #10
 80035f8:	460b      	mov	r3, r1
 80035fa:	4614      	mov	r4, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	4621      	mov	r1, r4
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f04f 0400 	mov.w	r4, #0
 8003606:	461a      	mov	r2, r3
 8003608:	4623      	mov	r3, r4
 800360a:	f7fc fe49 	bl	80002a0 <__aeabi_uldivmod>
 800360e:	4603      	mov	r3, r0
 8003610:	460c      	mov	r4, r1
 8003612:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	3301      	adds	r3, #1
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	60bb      	str	r3, [r7, #8]
      break;
 800362e:	e002      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003632:	60bb      	str	r3, [r7, #8]
      break;
 8003634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003636:	68bb      	ldr	r3, [r7, #8]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003640:	40023800 	.word	0x40023800
 8003644:	00f42400 	.word	0x00f42400
 8003648:	007a1200 	.word	0x007a1200

0800364c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_GetHCLKFreq+0x14>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000000 	.word	0x20000000

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003668:	f7ff fff0 	bl	800364c <HAL_RCC_GetHCLKFreq>
 800366c:	4601      	mov	r1, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0a9b      	lsrs	r3, r3, #10
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4a03      	ldr	r2, [pc, #12]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	0801c614 	.word	0x0801c614

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003690:	f7ff ffdc 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003694:	4601      	mov	r1, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0b5b      	lsrs	r3, r3, #13
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4a03      	ldr	r2, [pc, #12]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a2:	5cd3      	ldrb	r3, [r2, r3]
 80036a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40023800 	.word	0x40023800
 80036b0:	0801c614 	.word	0x0801c614

080036b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	220f      	movs	r2, #15
 80036c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_RCC_GetClockConfig+0x5c>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0203 	and.w	r2, r3, #3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_RCC_GetClockConfig+0x5c>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <HAL_RCC_GetClockConfig+0x5c>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_GetClockConfig+0x5c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	08db      	lsrs	r3, r3, #3
 80036ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_RCC_GetClockConfig+0x60>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 020f 	and.w	r2, r3, #15
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	601a      	str	r2, [r3, #0]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	40023c00 	.word	0x40023c00

08003718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e01d      	b.n	8003766 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f815 	bl	800376e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 f968 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d007      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d122      	bne.n	8003826 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d11b      	bne.n	8003826 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f06f 0202 	mvn.w	r2, #2
 80037f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8ee 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003812:	e005      	b.n	8003820 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8e0 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8f1 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d122      	bne.n	800387a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d11b      	bne.n	800387a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f06f 0204 	mvn.w	r2, #4
 800384a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8c4 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003866:	e005      	b.n	8003874 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f8b6 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8c7 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b08      	cmp	r3, #8
 8003886:	d122      	bne.n	80038ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d11b      	bne.n	80038ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f06f 0208 	mvn.w	r2, #8
 800389e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2204      	movs	r2, #4
 80038a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f89a 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80038ba:	e005      	b.n	80038c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f88c 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f89d 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d122      	bne.n	8003922 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d11b      	bne.n	8003922 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f06f 0210 	mvn.w	r2, #16
 80038f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2208      	movs	r2, #8
 80038f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f870 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 800390e:	e005      	b.n	800391c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f862 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f873 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d10e      	bne.n	800394e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d107      	bne.n	800394e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f06f 0201 	mvn.w	r2, #1
 8003946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fc ffe7 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d10e      	bne.n	800397a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d107      	bne.n	800397a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f903 	bl	8003b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d10e      	bne.n	80039a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d107      	bne.n	80039a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800399e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f838 	bl	8003a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d10e      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d107      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f06f 0220 	mvn.w	r2, #32
 80039ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8cd 	bl	8003b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d00f      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3d      	ldr	r2, [pc, #244]	; (8003b44 <TIM_Base_SetConfig+0x118>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <TIM_Base_SetConfig+0x11c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <TIM_Base_SetConfig+0x120>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3a      	ldr	r2, [pc, #232]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d027      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	; (8003b44 <TIM_Base_SetConfig+0x118>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d023      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <TIM_Base_SetConfig+0x11c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01f      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <TIM_Base_SetConfig+0x120>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d017      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <TIM_Base_SetConfig+0x128>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00f      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <TIM_Base_SetConfig+0x130>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <TIM_Base_SetConfig+0x134>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <TIM_Base_SetConfig+0x138>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <TIM_Base_SetConfig+0x13c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d108      	bne.n	8003af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <TIM_Base_SetConfig+0x114>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <TIM_Base_SetConfig+0x124>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	615a      	str	r2, [r3, #20]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40010400 	.word	0x40010400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800
 8003b60:	40001800 	.word	0x40001800
 8003b64:	40001c00 	.word	0x40001c00
 8003b68:	40002000 	.word	0x40002000

08003b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e03f      	b.n	8003c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fc fef0 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f829 	bl	8003c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c72:	f023 030c 	bic.w	r3, r3, #12
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9e:	f040 818b 	bne.w	8003fb8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4ac1      	ldr	r2, [pc, #772]	; (8003fac <UART_SetConfig+0x37c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d005      	beq.n	8003cb8 <UART_SetConfig+0x88>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4abf      	ldr	r2, [pc, #764]	; (8003fb0 <UART_SetConfig+0x380>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	f040 80bd 	bne.w	8003e32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7ff fce8 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8003cbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	461d      	mov	r5, r3
 8003cc2:	f04f 0600 	mov.w	r6, #0
 8003cc6:	46a8      	mov	r8, r5
 8003cc8:	46b1      	mov	r9, r6
 8003cca:	eb18 0308 	adds.w	r3, r8, r8
 8003cce:	eb49 0409 	adc.w	r4, r9, r9
 8003cd2:	4698      	mov	r8, r3
 8003cd4:	46a1      	mov	r9, r4
 8003cd6:	eb18 0805 	adds.w	r8, r8, r5
 8003cda:	eb49 0906 	adc.w	r9, r9, r6
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cf2:	4688      	mov	r8, r1
 8003cf4:	4691      	mov	r9, r2
 8003cf6:	eb18 0005 	adds.w	r0, r8, r5
 8003cfa:	eb49 0106 	adc.w	r1, r9, r6
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	461d      	mov	r5, r3
 8003d04:	f04f 0600 	mov.w	r6, #0
 8003d08:	196b      	adds	r3, r5, r5
 8003d0a:	eb46 0406 	adc.w	r4, r6, r6
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4623      	mov	r3, r4
 8003d12:	f7fc fac5 	bl	80002a0 <__aeabi_uldivmod>
 8003d16:	4603      	mov	r3, r0
 8003d18:	460c      	mov	r4, r1
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4ba5      	ldr	r3, [pc, #660]	; (8003fb4 <UART_SetConfig+0x384>)
 8003d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	f04f 0600 	mov.w	r6, #0
 8003d30:	46a9      	mov	r9, r5
 8003d32:	46b2      	mov	sl, r6
 8003d34:	eb19 0309 	adds.w	r3, r9, r9
 8003d38:	eb4a 040a 	adc.w	r4, sl, sl
 8003d3c:	4699      	mov	r9, r3
 8003d3e:	46a2      	mov	sl, r4
 8003d40:	eb19 0905 	adds.w	r9, r9, r5
 8003d44:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d5c:	4689      	mov	r9, r1
 8003d5e:	4692      	mov	sl, r2
 8003d60:	eb19 0005 	adds.w	r0, r9, r5
 8003d64:	eb4a 0106 	adc.w	r1, sl, r6
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	461d      	mov	r5, r3
 8003d6e:	f04f 0600 	mov.w	r6, #0
 8003d72:	196b      	adds	r3, r5, r5
 8003d74:	eb46 0406 	adc.w	r4, r6, r6
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	f7fc fa90 	bl	80002a0 <__aeabi_uldivmod>
 8003d80:	4603      	mov	r3, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b8b      	ldr	r3, [pc, #556]	; (8003fb4 <UART_SetConfig+0x384>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	; 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	3332      	adds	r3, #50	; 0x32
 8003d9a:	4a86      	ldr	r2, [pc, #536]	; (8003fb4 <UART_SetConfig+0x384>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003da8:	4498      	add	r8, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	461d      	mov	r5, r3
 8003dae:	f04f 0600 	mov.w	r6, #0
 8003db2:	46a9      	mov	r9, r5
 8003db4:	46b2      	mov	sl, r6
 8003db6:	eb19 0309 	adds.w	r3, r9, r9
 8003dba:	eb4a 040a 	adc.w	r4, sl, sl
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	46a2      	mov	sl, r4
 8003dc2:	eb19 0905 	adds.w	r9, r9, r5
 8003dc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dde:	4689      	mov	r9, r1
 8003de0:	4692      	mov	sl, r2
 8003de2:	eb19 0005 	adds.w	r0, r9, r5
 8003de6:	eb4a 0106 	adc.w	r1, sl, r6
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	461d      	mov	r5, r3
 8003df0:	f04f 0600 	mov.w	r6, #0
 8003df4:	196b      	adds	r3, r5, r5
 8003df6:	eb46 0406 	adc.w	r4, r6, r6
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	f7fc fa4f 	bl	80002a0 <__aeabi_uldivmod>
 8003e02:	4603      	mov	r3, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <UART_SetConfig+0x384>)
 8003e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2164      	movs	r1, #100	; 0x64
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	3332      	adds	r3, #50	; 0x32
 8003e1c:	4a65      	ldr	r2, [pc, #404]	; (8003fb4 <UART_SetConfig+0x384>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	f003 0207 	and.w	r2, r3, #7
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4442      	add	r2, r8
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	e26f      	b.n	8004312 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e32:	f7ff fc17 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8003e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	461d      	mov	r5, r3
 8003e3c:	f04f 0600 	mov.w	r6, #0
 8003e40:	46a8      	mov	r8, r5
 8003e42:	46b1      	mov	r9, r6
 8003e44:	eb18 0308 	adds.w	r3, r8, r8
 8003e48:	eb49 0409 	adc.w	r4, r9, r9
 8003e4c:	4698      	mov	r8, r3
 8003e4e:	46a1      	mov	r9, r4
 8003e50:	eb18 0805 	adds.w	r8, r8, r5
 8003e54:	eb49 0906 	adc.w	r9, r9, r6
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e6c:	4688      	mov	r8, r1
 8003e6e:	4691      	mov	r9, r2
 8003e70:	eb18 0005 	adds.w	r0, r8, r5
 8003e74:	eb49 0106 	adc.w	r1, r9, r6
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	461d      	mov	r5, r3
 8003e7e:	f04f 0600 	mov.w	r6, #0
 8003e82:	196b      	adds	r3, r5, r5
 8003e84:	eb46 0406 	adc.w	r4, r6, r6
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	f7fc fa08 	bl	80002a0 <__aeabi_uldivmod>
 8003e90:	4603      	mov	r3, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <UART_SetConfig+0x384>)
 8003e98:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	461d      	mov	r5, r3
 8003ea6:	f04f 0600 	mov.w	r6, #0
 8003eaa:	46a9      	mov	r9, r5
 8003eac:	46b2      	mov	sl, r6
 8003eae:	eb19 0309 	adds.w	r3, r9, r9
 8003eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8003eb6:	4699      	mov	r9, r3
 8003eb8:	46a2      	mov	sl, r4
 8003eba:	eb19 0905 	adds.w	r9, r9, r5
 8003ebe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ed6:	4689      	mov	r9, r1
 8003ed8:	4692      	mov	sl, r2
 8003eda:	eb19 0005 	adds.w	r0, r9, r5
 8003ede:	eb4a 0106 	adc.w	r1, sl, r6
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	f04f 0600 	mov.w	r6, #0
 8003eec:	196b      	adds	r3, r5, r5
 8003eee:	eb46 0406 	adc.w	r4, r6, r6
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	f7fc f9d3 	bl	80002a0 <__aeabi_uldivmod>
 8003efa:	4603      	mov	r3, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <UART_SetConfig+0x384>)
 8003f02:	fba3 1302 	umull	r1, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2164      	movs	r1, #100	; 0x64
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	3332      	adds	r3, #50	; 0x32
 8003f14:	4a27      	ldr	r2, [pc, #156]	; (8003fb4 <UART_SetConfig+0x384>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f22:	4498      	add	r8, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	461d      	mov	r5, r3
 8003f28:	f04f 0600 	mov.w	r6, #0
 8003f2c:	46a9      	mov	r9, r5
 8003f2e:	46b2      	mov	sl, r6
 8003f30:	eb19 0309 	adds.w	r3, r9, r9
 8003f34:	eb4a 040a 	adc.w	r4, sl, sl
 8003f38:	4699      	mov	r9, r3
 8003f3a:	46a2      	mov	sl, r4
 8003f3c:	eb19 0905 	adds.w	r9, r9, r5
 8003f40:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f44:	f04f 0100 	mov.w	r1, #0
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f58:	4689      	mov	r9, r1
 8003f5a:	4692      	mov	sl, r2
 8003f5c:	eb19 0005 	adds.w	r0, r9, r5
 8003f60:	eb4a 0106 	adc.w	r1, sl, r6
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	461d      	mov	r5, r3
 8003f6a:	f04f 0600 	mov.w	r6, #0
 8003f6e:	196b      	adds	r3, r5, r5
 8003f70:	eb46 0406 	adc.w	r4, r6, r6
 8003f74:	461a      	mov	r2, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	f7fc f992 	bl	80002a0 <__aeabi_uldivmod>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <UART_SetConfig+0x384>)
 8003f84:	fba3 1302 	umull	r1, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	2164      	movs	r1, #100	; 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	3332      	adds	r3, #50	; 0x32
 8003f96:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <UART_SetConfig+0x384>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	f003 0207 	and.w	r2, r3, #7
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4442      	add	r2, r8
 8003fa8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003faa:	e1b2      	b.n	8004312 <UART_SetConfig+0x6e2>
 8003fac:	40011000 	.word	0x40011000
 8003fb0:	40011400 	.word	0x40011400
 8003fb4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4ad7      	ldr	r2, [pc, #860]	; (800431c <UART_SetConfig+0x6ec>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d005      	beq.n	8003fce <UART_SetConfig+0x39e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4ad6      	ldr	r2, [pc, #856]	; (8004320 <UART_SetConfig+0x6f0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	f040 80d1 	bne.w	8004170 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fce:	f7ff fb5d 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8003fd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	469a      	mov	sl, r3
 8003fd8:	f04f 0b00 	mov.w	fp, #0
 8003fdc:	46d0      	mov	r8, sl
 8003fde:	46d9      	mov	r9, fp
 8003fe0:	eb18 0308 	adds.w	r3, r8, r8
 8003fe4:	eb49 0409 	adc.w	r4, r9, r9
 8003fe8:	4698      	mov	r8, r3
 8003fea:	46a1      	mov	r9, r4
 8003fec:	eb18 080a 	adds.w	r8, r8, sl
 8003ff0:	eb49 090b 	adc.w	r9, r9, fp
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004000:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004004:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004008:	4688      	mov	r8, r1
 800400a:	4691      	mov	r9, r2
 800400c:	eb1a 0508 	adds.w	r5, sl, r8
 8004010:	eb4b 0609 	adc.w	r6, fp, r9
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4619      	mov	r1, r3
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	f04f 0400 	mov.w	r4, #0
 8004026:	0094      	lsls	r4, r2, #2
 8004028:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800402c:	008b      	lsls	r3, r1, #2
 800402e:	461a      	mov	r2, r3
 8004030:	4623      	mov	r3, r4
 8004032:	4628      	mov	r0, r5
 8004034:	4631      	mov	r1, r6
 8004036:	f7fc f933 	bl	80002a0 <__aeabi_uldivmod>
 800403a:	4603      	mov	r3, r0
 800403c:	460c      	mov	r4, r1
 800403e:	461a      	mov	r2, r3
 8004040:	4bb8      	ldr	r3, [pc, #736]	; (8004324 <UART_SetConfig+0x6f4>)
 8004042:	fba3 2302 	umull	r2, r3, r3, r2
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	469b      	mov	fp, r3
 8004050:	f04f 0c00 	mov.w	ip, #0
 8004054:	46d9      	mov	r9, fp
 8004056:	46e2      	mov	sl, ip
 8004058:	eb19 0309 	adds.w	r3, r9, r9
 800405c:	eb4a 040a 	adc.w	r4, sl, sl
 8004060:	4699      	mov	r9, r3
 8004062:	46a2      	mov	sl, r4
 8004064:	eb19 090b 	adds.w	r9, r9, fp
 8004068:	eb4a 0a0c 	adc.w	sl, sl, ip
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004078:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800407c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004080:	4689      	mov	r9, r1
 8004082:	4692      	mov	sl, r2
 8004084:	eb1b 0509 	adds.w	r5, fp, r9
 8004088:	eb4c 060a 	adc.w	r6, ip, sl
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4619      	mov	r1, r3
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	f04f 0400 	mov.w	r4, #0
 800409e:	0094      	lsls	r4, r2, #2
 80040a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040a4:	008b      	lsls	r3, r1, #2
 80040a6:	461a      	mov	r2, r3
 80040a8:	4623      	mov	r3, r4
 80040aa:	4628      	mov	r0, r5
 80040ac:	4631      	mov	r1, r6
 80040ae:	f7fc f8f7 	bl	80002a0 <__aeabi_uldivmod>
 80040b2:	4603      	mov	r3, r0
 80040b4:	460c      	mov	r4, r1
 80040b6:	461a      	mov	r2, r3
 80040b8:	4b9a      	ldr	r3, [pc, #616]	; (8004324 <UART_SetConfig+0x6f4>)
 80040ba:	fba3 1302 	umull	r1, r3, r3, r2
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2164      	movs	r1, #100	; 0x64
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3332      	adds	r3, #50	; 0x32
 80040cc:	4a95      	ldr	r2, [pc, #596]	; (8004324 <UART_SetConfig+0x6f4>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d8:	4498      	add	r8, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	469b      	mov	fp, r3
 80040de:	f04f 0c00 	mov.w	ip, #0
 80040e2:	46d9      	mov	r9, fp
 80040e4:	46e2      	mov	sl, ip
 80040e6:	eb19 0309 	adds.w	r3, r9, r9
 80040ea:	eb4a 040a 	adc.w	r4, sl, sl
 80040ee:	4699      	mov	r9, r3
 80040f0:	46a2      	mov	sl, r4
 80040f2:	eb19 090b 	adds.w	r9, r9, fp
 80040f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800410a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800410e:	4689      	mov	r9, r1
 8004110:	4692      	mov	sl, r2
 8004112:	eb1b 0509 	adds.w	r5, fp, r9
 8004116:	eb4c 060a 	adc.w	r6, ip, sl
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4619      	mov	r1, r3
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	f04f 0400 	mov.w	r4, #0
 800412c:	0094      	lsls	r4, r2, #2
 800412e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004132:	008b      	lsls	r3, r1, #2
 8004134:	461a      	mov	r2, r3
 8004136:	4623      	mov	r3, r4
 8004138:	4628      	mov	r0, r5
 800413a:	4631      	mov	r1, r6
 800413c:	f7fc f8b0 	bl	80002a0 <__aeabi_uldivmod>
 8004140:	4603      	mov	r3, r0
 8004142:	460c      	mov	r4, r1
 8004144:	461a      	mov	r2, r3
 8004146:	4b77      	ldr	r3, [pc, #476]	; (8004324 <UART_SetConfig+0x6f4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	; 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a72      	ldr	r2, [pc, #456]	; (8004324 <UART_SetConfig+0x6f4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4442      	add	r2, r8
 800416c:	609a      	str	r2, [r3, #8]
 800416e:	e0d0      	b.n	8004312 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004170:	f7ff fa78 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004174:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	469a      	mov	sl, r3
 800417a:	f04f 0b00 	mov.w	fp, #0
 800417e:	46d0      	mov	r8, sl
 8004180:	46d9      	mov	r9, fp
 8004182:	eb18 0308 	adds.w	r3, r8, r8
 8004186:	eb49 0409 	adc.w	r4, r9, r9
 800418a:	4698      	mov	r8, r3
 800418c:	46a1      	mov	r9, r4
 800418e:	eb18 080a 	adds.w	r8, r8, sl
 8004192:	eb49 090b 	adc.w	r9, r9, fp
 8004196:	f04f 0100 	mov.w	r1, #0
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041aa:	4688      	mov	r8, r1
 80041ac:	4691      	mov	r9, r2
 80041ae:	eb1a 0508 	adds.w	r5, sl, r8
 80041b2:	eb4b 0609 	adc.w	r6, fp, r9
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4619      	mov	r1, r3
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f04f 0400 	mov.w	r4, #0
 80041c8:	0094      	lsls	r4, r2, #2
 80041ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041ce:	008b      	lsls	r3, r1, #2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4623      	mov	r3, r4
 80041d4:	4628      	mov	r0, r5
 80041d6:	4631      	mov	r1, r6
 80041d8:	f7fc f862 	bl	80002a0 <__aeabi_uldivmod>
 80041dc:	4603      	mov	r3, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b50      	ldr	r3, [pc, #320]	; (8004324 <UART_SetConfig+0x6f4>)
 80041e4:	fba3 2302 	umull	r2, r3, r3, r2
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	469b      	mov	fp, r3
 80041f2:	f04f 0c00 	mov.w	ip, #0
 80041f6:	46d9      	mov	r9, fp
 80041f8:	46e2      	mov	sl, ip
 80041fa:	eb19 0309 	adds.w	r3, r9, r9
 80041fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004202:	4699      	mov	r9, r3
 8004204:	46a2      	mov	sl, r4
 8004206:	eb19 090b 	adds.w	r9, r9, fp
 800420a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800421a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800421e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004222:	4689      	mov	r9, r1
 8004224:	4692      	mov	sl, r2
 8004226:	eb1b 0509 	adds.w	r5, fp, r9
 800422a:	eb4c 060a 	adc.w	r6, ip, sl
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4619      	mov	r1, r3
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	f04f 0400 	mov.w	r4, #0
 8004240:	0094      	lsls	r4, r2, #2
 8004242:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004246:	008b      	lsls	r3, r1, #2
 8004248:	461a      	mov	r2, r3
 800424a:	4623      	mov	r3, r4
 800424c:	4628      	mov	r0, r5
 800424e:	4631      	mov	r1, r6
 8004250:	f7fc f826 	bl	80002a0 <__aeabi_uldivmod>
 8004254:	4603      	mov	r3, r0
 8004256:	460c      	mov	r4, r1
 8004258:	461a      	mov	r2, r3
 800425a:	4b32      	ldr	r3, [pc, #200]	; (8004324 <UART_SetConfig+0x6f4>)
 800425c:	fba3 1302 	umull	r1, r3, r3, r2
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	2164      	movs	r1, #100	; 0x64
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	3332      	adds	r3, #50	; 0x32
 800426e:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <UART_SetConfig+0x6f4>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427a:	4498      	add	r8, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	469b      	mov	fp, r3
 8004280:	f04f 0c00 	mov.w	ip, #0
 8004284:	46d9      	mov	r9, fp
 8004286:	46e2      	mov	sl, ip
 8004288:	eb19 0309 	adds.w	r3, r9, r9
 800428c:	eb4a 040a 	adc.w	r4, sl, sl
 8004290:	4699      	mov	r9, r3
 8004292:	46a2      	mov	sl, r4
 8004294:	eb19 090b 	adds.w	r9, r9, fp
 8004298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042b0:	4689      	mov	r9, r1
 80042b2:	4692      	mov	sl, r2
 80042b4:	eb1b 0509 	adds.w	r5, fp, r9
 80042b8:	eb4c 060a 	adc.w	r6, ip, sl
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	0094      	lsls	r4, r2, #2
 80042d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042d4:	008b      	lsls	r3, r1, #2
 80042d6:	461a      	mov	r2, r3
 80042d8:	4623      	mov	r3, r4
 80042da:	4628      	mov	r0, r5
 80042dc:	4631      	mov	r1, r6
 80042de:	f7fb ffdf 	bl	80002a0 <__aeabi_uldivmod>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <UART_SetConfig+0x6f4>)
 80042ea:	fba3 1302 	umull	r1, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2164      	movs	r1, #100	; 0x64
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	4a09      	ldr	r2, [pc, #36]	; (8004324 <UART_SetConfig+0x6f4>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 020f 	and.w	r2, r3, #15
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4442      	add	r2, r8
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	e7ff      	b.n	8004312 <UART_SetConfig+0x6e2>
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800431c:	40011000 	.word	0x40011000
 8004320:	40011400 	.word	0x40011400
 8004324:	51eb851f 	.word	0x51eb851f

08004328 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004328:	b084      	sub	sp, #16
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	f107 001c 	add.w	r0, r7, #28
 8004336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	2b01      	cmp	r3, #1
 800433e:	d122      	bne.n	8004386 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fa56 	bl	800482c <USB_CoreReset>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	e01a      	b.n	80043bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa4a 	bl	800482c <USB_CoreReset>
 8004398:	4603      	mov	r3, r0
 800439a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800439c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
 80043ae:	e005      	b.n	80043bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d10b      	bne.n	80043da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f043 0206 	orr.w	r2, r3, #6
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043e6:	b004      	add	sp, #16
 80043e8:	4770      	bx	lr

080043ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f023 0201 	bic.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d106      	bne.n	8004438 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e00b      	b.n	8004450 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	e001      	b.n	8004450 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e003      	b.n	8004458 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004450:	2032      	movs	r0, #50	; 0x32
 8004452:	f7fc ff2b 	bl	80012ac <HAL_Delay>

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004460:	b084      	sub	sp, #16
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800446e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	e009      	b.n	8004494 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	3340      	adds	r3, #64	; 0x40
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	2200      	movs	r2, #0
 800448c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	3301      	adds	r3, #1
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b0e      	cmp	r3, #14
 8004498:	d9f2      	bls.n	8004480 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800449a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11c      	bne.n	80044da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ae:	f043 0302 	orr.w	r3, r3, #2
 80044b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
 80044d8:	e00b      	b.n	80044f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044f8:	461a      	mov	r2, r3
 80044fa:	2300      	movs	r3, #0
 80044fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004504:	4619      	mov	r1, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450c:	461a      	mov	r2, r3
 800450e:	680b      	ldr	r3, [r1, #0]
 8004510:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10c      	bne.n	8004532 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800451e:	2100      	movs	r1, #0
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f949 	bl	80047b8 <USB_SetDevSpeed>
 8004526:	e008      	b.n	800453a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004528:	2101      	movs	r1, #1
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f944 	bl	80047b8 <USB_SetDevSpeed>
 8004530:	e003      	b.n	800453a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004532:	2103      	movs	r1, #3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f93f 	bl	80047b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800453a:	2110      	movs	r1, #16
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f8f3 	bl	8004728 <USB_FlushTxFifo>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f911 	bl	8004774 <USB_FlushRxFifo>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	461a      	mov	r2, r3
 8004564:	2300      	movs	r3, #0
 8004566:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	461a      	mov	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	461a      	mov	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	e043      	b.n	800460e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800459c:	d118      	bne.n	80045d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	461a      	mov	r2, r3
 80045b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	e013      	b.n	80045e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	461a      	mov	r2, r3
 80045c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e008      	b.n	80045e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045dc:	461a      	mov	r2, r3
 80045de:	2300      	movs	r3, #0
 80045e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ee:	461a      	mov	r2, r3
 80045f0:	2300      	movs	r3, #0
 80045f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	461a      	mov	r2, r3
 8004602:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004606:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	3301      	adds	r3, #1
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d3b7      	bcc.n	8004586 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e043      	b.n	80046a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800462e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004632:	d118      	bne.n	8004666 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	461a      	mov	r2, r3
 8004648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e013      	b.n	8004678 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	461a      	mov	r2, r3
 800465e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e008      	b.n	8004678 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	461a      	mov	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	2300      	movs	r3, #0
 8004688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	461a      	mov	r2, r3
 8004698:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800469c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3301      	adds	r3, #1
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d3b7      	bcc.n	800461c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d105      	bne.n	80046e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f043 0210 	orr.w	r2, r3, #16
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699a      	ldr	r2, [r3, #24]
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <USB_DevInit+0x2c4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f043 0208 	orr.w	r2, r3, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d107      	bne.n	8004714 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004714:	7dfb      	ldrb	r3, [r7, #23]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004720:	b004      	add	sp, #16
 8004722:	4770      	bx	lr
 8004724:	803c3800 	.word	0x803c3800

08004728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <USB_FlushTxFifo+0x48>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e006      	b.n	8004762 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b20      	cmp	r3, #32
 800475e:	d0f0      	beq.n	8004742 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	00030d40 	.word	0x00030d40

08004774 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2210      	movs	r2, #16
 8004784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <USB_FlushRxFifo+0x40>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e006      	b.n	80047a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d0f0      	beq.n	8004786 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	00030d40 	.word	0x00030d40

080047b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004804:	f023 0303 	bic.w	r3, r3, #3
 8004808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3301      	adds	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4a13      	ldr	r2, [pc, #76]	; (8004890 <USB_CoreReset+0x64>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e01b      	b.n	8004882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	daf2      	bge.n	8004838 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f043 0201 	orr.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a09      	ldr	r2, [pc, #36]	; (8004890 <USB_CoreReset+0x64>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d901      	bls.n	8004874 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e006      	b.n	8004882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d0f0      	beq.n	8004862 <USB_CoreReset+0x36>

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	00030d40 	.word	0x00030d40

08004894 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004894:	b5b0      	push	{r4, r5, r7, lr}
 8004896:	b08e      	sub	sp, #56	; 0x38
 8004898:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800489a:	2100      	movs	r1, #0
 800489c:	2000      	movs	r0, #0
 800489e:	f005 fee1 	bl	800a664 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80048a2:	4b2a      	ldr	r3, [pc, #168]	; (800494c <MX_LWIP_Init+0xb8>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80048a8:	4b29      	ldr	r3, [pc, #164]	; (8004950 <MX_LWIP_Init+0xbc>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80048ae:	4b29      	ldr	r3, [pc, #164]	; (8004954 <MX_LWIP_Init+0xc0>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <MX_LWIP_Init+0xc4>)
 80048b6:	9302      	str	r3, [sp, #8]
 80048b8:	4b28      	ldr	r3, [pc, #160]	; (800495c <MX_LWIP_Init+0xc8>)
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	2300      	movs	r3, #0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4b24      	ldr	r3, [pc, #144]	; (8004954 <MX_LWIP_Init+0xc0>)
 80048c2:	4a23      	ldr	r2, [pc, #140]	; (8004950 <MX_LWIP_Init+0xbc>)
 80048c4:	4921      	ldr	r1, [pc, #132]	; (800494c <MX_LWIP_Init+0xb8>)
 80048c6:	4826      	ldr	r0, [pc, #152]	; (8004960 <MX_LWIP_Init+0xcc>)
 80048c8:	f006 fc50 	bl	800b16c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80048cc:	4824      	ldr	r0, [pc, #144]	; (8004960 <MX_LWIP_Init+0xcc>)
 80048ce:	f006 fe07 	bl	800b4e0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <MX_LWIP_Init+0xcc>)
 80048d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80048e4:	481e      	ldr	r0, [pc, #120]	; (8004960 <MX_LWIP_Init+0xcc>)
 80048e6:	f006 fe0b 	bl	800b500 <netif_set_up>
 80048ea:	e002      	b.n	80048f2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80048ec:	481c      	ldr	r0, [pc, #112]	; (8004960 <MX_LWIP_Init+0xcc>)
 80048ee:	f006 fe73 	bl	800b5d8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80048f2:	491c      	ldr	r1, [pc, #112]	; (8004964 <MX_LWIP_Init+0xd0>)
 80048f4:	481a      	ldr	r0, [pc, #104]	; (8004960 <MX_LWIP_Init+0xcc>)
 80048f6:	f006 ff09 	bl	800b70c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80048fa:	2300      	movs	r3, #0
 80048fc:	623b      	str	r3, [r7, #32]
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004902:	f107 0320 	add.w	r3, r7, #32
 8004906:	2101      	movs	r1, #1
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fd99 	bl	8005440 <osSemaphoreCreate>
 800490e:	4602      	mov	r2, r0
 8004910:	4b15      	ldr	r3, [pc, #84]	; (8004968 <MX_LWIP_Init+0xd4>)
 8004912:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8004914:	4b15      	ldr	r3, [pc, #84]	; (800496c <MX_LWIP_Init+0xd8>)
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <MX_LWIP_Init+0xcc>)
 8004918:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <MX_LWIP_Init+0xd4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a13      	ldr	r2, [pc, #76]	; (800496c <MX_LWIP_Init+0xd8>)
 8004920:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <MX_LWIP_Init+0xdc>)
 8004924:	1d3c      	adds	r4, r7, #4
 8004926:	461d      	mov	r5, r3
 8004928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800492c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	490d      	ldr	r1, [pc, #52]	; (800496c <MX_LWIP_Init+0xd8>)
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fc84 	bl	8005246 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800493e:	4808      	ldr	r0, [pc, #32]	; (8004960 <MX_LWIP_Init+0xcc>)
 8004940:	f00e ff78 	bl	8013834 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004944:	bf00      	nop
 8004946:	3728      	adds	r7, #40	; 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bdb0      	pop	{r4, r5, r7, pc}
 800494c:	20008c70 	.word	0x20008c70
 8004950:	20008c74 	.word	0x20008c74
 8004954:	20008c78 	.word	0x20008c78
 8004958:	0800a575 	.word	0x0800a575
 800495c:	08004fd5 	.word	0x08004fd5
 8004960:	20008c38 	.word	0x20008c38
 8004964:	080050b9 	.word	0x080050b9
 8004968:	200004a8 	.word	0x200004a8
 800496c:	20008c30 	.word	0x20008c30
 8004970:	08018cf8 	.word	0x08018cf8

08004974 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08e      	sub	sp, #56	; 0x38
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a59      	ldr	r2, [pc, #356]	; (8004af8 <HAL_ETH_MspInit+0x184>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f040 80ac 	bne.w	8004af0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004998:	2300      	movs	r3, #0
 800499a:	623b      	str	r3, [r7, #32]
 800499c:	4b57      	ldr	r3, [pc, #348]	; (8004afc <HAL_ETH_MspInit+0x188>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	4a56      	ldr	r2, [pc, #344]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049a6:	6313      	str	r3, [r2, #48]	; 0x30
 80049a8:	4b54      	ldr	r3, [pc, #336]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	4a4f      	ldr	r2, [pc, #316]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049c2:	6313      	str	r3, [r2, #48]	; 0x30
 80049c4:	4b4d      	ldr	r3, [pc, #308]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	4b49      	ldr	r3, [pc, #292]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	4a48      	ldr	r2, [pc, #288]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049de:	6313      	str	r3, [r2, #48]	; 0x30
 80049e0:	4b46      	ldr	r3, [pc, #280]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	4b42      	ldr	r3, [pc, #264]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	4a41      	ldr	r2, [pc, #260]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049f6:	f043 0304 	orr.w	r3, r3, #4
 80049fa:	6313      	str	r3, [r2, #48]	; 0x30
 80049fc:	4b3f      	ldr	r3, [pc, #252]	; (8004afc <HAL_ETH_MspInit+0x188>)
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	4a3a      	ldr	r2, [pc, #232]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6313      	str	r3, [r2, #48]	; 0x30
 8004a18:	4b38      	ldr	r3, [pc, #224]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	4b34      	ldr	r3, [pc, #208]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	4a33      	ldr	r2, [pc, #204]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a2e:	f043 0302 	orr.w	r3, r3, #2
 8004a32:	6313      	str	r3, [r2, #48]	; 0x30
 8004a34:	4b31      	ldr	r3, [pc, #196]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a50:	4b2a      	ldr	r3, [pc, #168]	; (8004afc <HAL_ETH_MspInit+0x188>)
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004a5c:	2332      	movs	r3, #50	; 0x32
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a60:	2302      	movs	r3, #2
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a6c:	230b      	movs	r3, #11
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a74:	4619      	mov	r1, r3
 8004a76:	4822      	ldr	r0, [pc, #136]	; (8004b00 <HAL_ETH_MspInit+0x18c>)
 8004a78:	f7fd fec2 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004a7c:	2386      	movs	r3, #134	; 0x86
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a8c:	230b      	movs	r3, #11
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a94:	4619      	mov	r1, r3
 8004a96:	481b      	ldr	r0, [pc, #108]	; (8004b04 <HAL_ETH_MspInit+0x190>)
 8004a98:	f7fd feb2 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004aae:	230b      	movs	r3, #11
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4813      	ldr	r0, [pc, #76]	; (8004b08 <HAL_ETH_MspInit+0x194>)
 8004aba:	f7fd fea1 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004abe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004acc:	2303      	movs	r3, #3
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ad0:	230b      	movs	r3, #11
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ad8:	4619      	mov	r1, r3
 8004ada:	480c      	ldr	r0, [pc, #48]	; (8004b0c <HAL_ETH_MspInit+0x198>)
 8004adc:	f7fd fe90 	bl	8002800 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	203d      	movs	r0, #61	; 0x3d
 8004ae6:	f7fc fcbb 	bl	8001460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004aea:	203d      	movs	r0, #61	; 0x3d
 8004aec:	f7fc fcd4 	bl	8001498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004af0:	bf00      	nop
 8004af2:	3738      	adds	r7, #56	; 0x38
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40028000 	.word	0x40028000
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40020800 	.word	0x40020800
 8004b04:	40020000 	.word	0x40020000
 8004b08:	40020400 	.word	0x40020400
 8004b0c:	40021800 	.word	0x40021800

08004b10 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_ETH_RxCpltCallback+0x1c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fd11 	bl	8005544 <osSemaphoreRelease>
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	200004ac 	.word	0x200004ac

08004b30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004b30:	b5b0      	push	{r4, r5, r7, lr}
 8004b32:	b090      	sub	sp, #64	; 0x40
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004b3c:	4b5c      	ldr	r3, [pc, #368]	; (8004cb0 <low_level_init+0x180>)
 8004b3e:	4a5d      	ldr	r2, [pc, #372]	; (8004cb4 <low_level_init+0x184>)
 8004b40:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004b42:	4b5b      	ldr	r3, [pc, #364]	; (8004cb0 <low_level_init+0x180>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004b48:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <low_level_init+0x180>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004b5a:	23e1      	movs	r3, #225	; 0xe1
 8004b5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004b60:	23fe      	movs	r3, #254	; 0xfe
 8004b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 8004b66:	23ec      	movs	r3, #236	; 0xec
 8004b68:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 8004b6c:	2371      	movs	r3, #113	; 0x71
 8004b6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004b72:	4a4f      	ldr	r2, [pc, #316]	; (8004cb0 <low_level_init+0x180>)
 8004b74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b78:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004b7a:	4b4d      	ldr	r3, [pc, #308]	; (8004cb0 <low_level_init+0x180>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004b80:	4b4b      	ldr	r3, [pc, #300]	; (8004cb0 <low_level_init+0x180>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004b86:	4b4a      	ldr	r3, [pc, #296]	; (8004cb0 <low_level_init+0x180>)
 8004b88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b8c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004b8e:	4848      	ldr	r0, [pc, #288]	; (8004cb0 <low_level_init+0x180>)
 8004b90:	f7fc fc90 	bl	80014b4 <HAL_ETH_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004b9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	4a40      	ldr	r2, [pc, #256]	; (8004cb8 <low_level_init+0x188>)
 8004bb8:	4940      	ldr	r1, [pc, #256]	; (8004cbc <low_level_init+0x18c>)
 8004bba:	483d      	ldr	r0, [pc, #244]	; (8004cb0 <low_level_init+0x180>)
 8004bbc:	f7fc fe18 	bl	80017f0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	4a3f      	ldr	r2, [pc, #252]	; (8004cc0 <low_level_init+0x190>)
 8004bc4:	493f      	ldr	r1, [pc, #252]	; (8004cc4 <low_level_init+0x194>)
 8004bc6:	483a      	ldr	r0, [pc, #232]	; (8004cb0 <low_level_init+0x180>)
 8004bc8:	f7fc fe7b 	bl	80018c2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2206      	movs	r2, #6
 8004bd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004bd4:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <low_level_init+0x180>)
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004be0:	4b33      	ldr	r3, [pc, #204]	; (8004cb0 <low_level_init+0x180>)
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	785a      	ldrb	r2, [r3, #1]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004bec:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <low_level_init+0x180>)
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	789a      	ldrb	r2, [r3, #2]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004bf8:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <low_level_init+0x180>)
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	78da      	ldrb	r2, [r3, #3]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <low_level_init+0x180>)
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	791a      	ldrb	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <low_level_init+0x180>)
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	795a      	ldrb	r2, [r3, #5]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c2a:	f043 030a 	orr.w	r3, r3, #10
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004c36:	2300      	movs	r3, #0
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fbfb 	bl	8005440 <osSemaphoreCreate>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <low_level_init+0x198>)
 8004c4e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004c50:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <low_level_init+0x19c>)
 8004c52:	f107 040c 	add.w	r4, r7, #12
 8004c56:	461d      	mov	r5, r3
 8004c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004c64:	f107 030c 	add.w	r3, r7, #12
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 faeb 	bl	8005246 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004c70:	480f      	ldr	r0, [pc, #60]	; (8004cb0 <low_level_init+0x180>)
 8004c72:	f7fd f94e 	bl	8001f12 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004c76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	211d      	movs	r1, #29
 8004c7e:	480c      	ldr	r0, [pc, #48]	; (8004cb0 <low_level_init+0x180>)
 8004c80:	f7fd f879 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	f043 030b 	orr.w	r3, r3, #11
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	461a      	mov	r2, r3
 8004c90:	211d      	movs	r1, #29
 8004c92:	4807      	ldr	r0, [pc, #28]	; (8004cb0 <low_level_init+0x180>)
 8004c94:	f7fd f8d7 	bl	8001e46 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004c98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	211d      	movs	r1, #29
 8004ca0:	4803      	ldr	r0, [pc, #12]	; (8004cb0 <low_level_init+0x180>)
 8004ca2:	f7fd f868 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004ca6:	bf00      	nop
 8004ca8:	3740      	adds	r7, #64	; 0x40
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bdb0      	pop	{r4, r5, r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	2000a54c 	.word	0x2000a54c
 8004cb4:	40028000 	.word	0x40028000
 8004cb8:	2000a594 	.word	0x2000a594
 8004cbc:	20008c7c 	.word	0x20008c7c
 8004cc0:	20008cfc 	.word	0x20008cfc
 8004cc4:	2000a4cc 	.word	0x2000a4cc
 8004cc8:	200004ac 	.word	0x200004ac
 8004ccc:	08018d1c 	.word	0x08018d1c

08004cd0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004cda:	4b4b      	ldr	r3, [pc, #300]	; (8004e08 <low_level_output+0x138>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004cf2:	4b45      	ldr	r3, [pc, #276]	; (8004e08 <low_level_output+0x138>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	e05a      	b.n	8004db8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	da03      	bge.n	8004d12 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004d0a:	23f8      	movs	r3, #248	; 0xf8
 8004d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004d10:	e05c      	b.n	8004dcc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	895b      	ldrh	r3, [r3, #10]
 8004d16:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004d1c:	e02f      	b.n	8004d7e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	18d0      	adds	r0, r2, r3
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	18d1      	adds	r1, r2, r3
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004d32:	3304      	adds	r3, #4
 8004d34:	461a      	mov	r2, r3
 8004d36:	f012 fdb4 	bl	80178a2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da03      	bge.n	8004d50 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004d48:	23f8      	movs	r3, #248	; 0xf8
 8004d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004d4e:	e03d      	b.n	8004dcc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004d60:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004d6c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004d78:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d8c8      	bhi.n	8004d1e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	18d0      	adds	r0, r2, r3
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4413      	add	r3, r2
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f012 fd80 	bl	80178a2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	623b      	str	r3, [r7, #32]
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1a1      	bne.n	8004d02 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004dbe:	6979      	ldr	r1, [r7, #20]
 8004dc0:	4811      	ldr	r0, [pc, #68]	; (8004e08 <low_level_output+0x138>)
 8004dc2:	f7fc fdeb 	bl	800199c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <low_level_output+0x138>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd4:	3314      	adds	r3, #20
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00d      	beq.n	8004dfc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <low_level_output+0x138>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de8:	3314      	adds	r3, #20
 8004dea:	2220      	movs	r2, #32
 8004dec:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <low_level_output+0x138>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df6:	3304      	adds	r3, #4
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004dfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3728      	adds	r7, #40	; 0x28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	2000a54c 	.word	0x2000a54c

08004e0c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004e30:	484f      	ldr	r0, [pc, #316]	; (8004f70 <low_level_input+0x164>)
 8004e32:	f7fc fe9d 	bl	8001b70 <HAL_ETH_GetReceivedFrame_IT>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <low_level_input+0x34>

    return NULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e092      	b.n	8004f66 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004e40:	4b4b      	ldr	r3, [pc, #300]	; (8004f70 <low_level_input+0x164>)
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004e46:	4b4a      	ldr	r3, [pc, #296]	; (8004f70 <low_level_input+0x164>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004e4c:	89fb      	ldrh	r3, [r7, #14]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004e52:	89fb      	ldrh	r3, [r7, #14]
 8004e54:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004e58:	4619      	mov	r1, r3
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f006 fd20 	bl	800b8a0 <pbuf_alloc>
 8004e60:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d04b      	beq.n	8004f00 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004e68:	4b41      	ldr	r3, [pc, #260]	; (8004f70 <low_level_input+0x164>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e76:	e040      	b.n	8004efa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	895b      	ldrh	r3, [r3, #10]
 8004e7c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004e82:	e021      	b.n	8004ec8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	18d0      	adds	r0, r2, r3
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	18d1      	adds	r1, r2, r3
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004e98:	3304      	adds	r3, #4
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f012 fd01 	bl	80178a2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004eb6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004ec2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d8d6      	bhi.n	8004e84 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	18d0      	adds	r0, r2, r3
 8004ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	f012 fcdb 	bl	80178a2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1bb      	bne.n	8004e78 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <low_level_input+0x164>)
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e00b      	b.n	8004f24 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3301      	adds	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <low_level_input+0x164>)
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3ee      	bcc.n	8004f0c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <low_level_input+0x164>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <low_level_input+0x164>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00d      	beq.n	8004f64 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <low_level_input+0x164>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f50:	3314      	adds	r3, #20
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <low_level_input+0x164>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f5e:	3308      	adds	r3, #8
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3730      	adds	r7, #48	; 0x30
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	2000a54c 	.word	0x2000a54c

08004f74 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004f80:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <ethernetif_input+0x58>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f04f 31ff 	mov.w	r1, #4294967295
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fa8d 	bl	80054a8 <osSemaphoreWait>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f5      	bne.n	8004f80 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004f94:	480e      	ldr	r0, [pc, #56]	; (8004fd0 <ethernetif_input+0x5c>)
 8004f96:	f012 fbd1 	bl	801773c <sys_mutex_lock>
        p = low_level_input( netif );
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff ff36 	bl	8004e0c <low_level_input>
 8004fa0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	4798      	blx	r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004fb8:	68b8      	ldr	r0, [r7, #8]
 8004fba:	f006 ff51 	bl	800be60 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004fbe:	4804      	ldr	r0, [pc, #16]	; (8004fd0 <ethernetif_input+0x5c>)
 8004fc0:	f012 fbcb 	bl	801775a <sys_mutex_unlock>
      } while(p!=NULL);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e4      	bne.n	8004f94 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004fca:	e7d9      	b.n	8004f80 <ethernetif_input+0xc>
 8004fcc:	200004ac 	.word	0x200004ac
 8004fd0:	2000bda4 	.word	0x2000bda4

08004fd4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <ethernetif_init+0x1c>
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	; (800501c <ethernetif_init+0x48>)
 8004fe4:	f240 2233 	movw	r2, #563	; 0x233
 8004fe8:	490d      	ldr	r1, [pc, #52]	; (8005020 <ethernetif_init+0x4c>)
 8004fea:	480e      	ldr	r0, [pc, #56]	; (8005024 <ethernetif_init+0x50>)
 8004fec:	f012 fc86 	bl	80178fc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2273      	movs	r2, #115	; 0x73
 8004ff4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2274      	movs	r2, #116	; 0x74
 8004ffc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a09      	ldr	r2, [pc, #36]	; (8005028 <ethernetif_init+0x54>)
 8005004:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <ethernetif_init+0x58>)
 800500a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff fd8f 	bl	8004b30 <low_level_init>

  return ERR_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	08018d38 	.word	0x08018d38
 8005020:	08018d54 	.word	0x08018d54
 8005024:	08018d64 	.word	0x08018d64
 8005028:	08015721 	.word	0x08015721
 800502c:	08004cd1 	.word	0x08004cd1

08005030 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005034:	f7fc f92e 	bl	8001294 <HAL_GetTick>
 8005038:	4603      	mov	r3, r0
}
 800503a:	4618      	mov	r0, r3
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005050:	f107 0308 	add.w	r3, r7, #8
 8005054:	461a      	mov	r2, r3
 8005056:	2101      	movs	r1, #1
 8005058:	4816      	ldr	r0, [pc, #88]	; (80050b4 <ethernetif_set_link+0x74>)
 800505a:	f7fc fe8c 	bl	8001d76 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <ethernetif_set_link+0x48>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f006 fadb 	bl	800b63c <netif_set_link_up>
 8005086:	e011      	b.n	80050ac <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <ethernetif_set_link+0x6c>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f006 fb00 	bl	800b6ac <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80050ac:	20c8      	movs	r0, #200	; 0xc8
 80050ae:	f000 f916 	bl	80052de <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80050b2:	e7cd      	b.n	8005050 <ethernetif_set_link+0x10>
 80050b4:	2000a54c 	.word	0x2000a54c

080050b8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d05d      	beq.n	8005196 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80050da:	4b34      	ldr	r3, [pc, #208]	; (80051ac <ethernetif_update_config+0xf4>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d03f      	beq.n	8005162 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80050e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050e6:	2100      	movs	r1, #0
 80050e8:	4830      	ldr	r0, [pc, #192]	; (80051ac <ethernetif_update_config+0xf4>)
 80050ea:	f7fc feac 	bl	8001e46 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80050ee:	f7fc f8d1 	bl	8001294 <HAL_GetTick>
 80050f2:	4603      	mov	r3, r0
 80050f4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80050f6:	f107 0308 	add.w	r3, r7, #8
 80050fa:	461a      	mov	r2, r3
 80050fc:	2101      	movs	r1, #1
 80050fe:	482b      	ldr	r0, [pc, #172]	; (80051ac <ethernetif_update_config+0xf4>)
 8005100:	f7fc fe39 	bl	8001d76 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005104:	f7fc f8c6 	bl	8001294 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005112:	d828      	bhi.n	8005166 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0eb      	beq.n	80050f6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800511e:	f107 0308 	add.w	r3, r7, #8
 8005122:	461a      	mov	r2, r3
 8005124:	211f      	movs	r1, #31
 8005126:	4821      	ldr	r0, [pc, #132]	; (80051ac <ethernetif_update_config+0xf4>)
 8005128:	f7fc fe25 	bl	8001d76 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005136:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <ethernetif_update_config+0xf4>)
 8005138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	e002      	b.n	8005146 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005140:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <ethernetif_update_config+0xf4>)
 8005142:	2200      	movs	r2, #0
 8005144:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005150:	4b16      	ldr	r3, [pc, #88]	; (80051ac <ethernetif_update_config+0xf4>)
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
 8005156:	e016      	b.n	8005186 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005158:	4b14      	ldr	r3, [pc, #80]	; (80051ac <ethernetif_update_config+0xf4>)
 800515a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	e011      	b.n	8005186 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005162:	bf00      	nop
 8005164:	e000      	b.n	8005168 <ethernetif_update_config+0xb0>
          goto error;
 8005166:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <ethernetif_update_config+0xf4>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	08db      	lsrs	r3, r3, #3
 800516e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <ethernetif_update_config+0xf4>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005178:	4313      	orrs	r3, r2
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	2100      	movs	r1, #0
 8005180:	480a      	ldr	r0, [pc, #40]	; (80051ac <ethernetif_update_config+0xf4>)
 8005182:	f7fc fe60 	bl	8001e46 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005186:	2100      	movs	r1, #0
 8005188:	4808      	ldr	r0, [pc, #32]	; (80051ac <ethernetif_update_config+0xf4>)
 800518a:	f7fc ff21 	bl	8001fd0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800518e:	4807      	ldr	r0, [pc, #28]	; (80051ac <ethernetif_update_config+0xf4>)
 8005190:	f7fc febf 	bl	8001f12 <HAL_ETH_Start>
 8005194:	e002      	b.n	800519c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005196:	4805      	ldr	r0, [pc, #20]	; (80051ac <ethernetif_update_config+0xf4>)
 8005198:	f7fc feea 	bl	8001f70 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f807 	bl	80051b0 <ethernetif_notify_conn_changed>
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	2000a54c 	.word	0x2000a54c

080051b0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d6:	2b84      	cmp	r3, #132	; 0x84
 80051d8:	d005      	beq.n	80051e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	3303      	adds	r3, #3
 80051e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051e6:	68fb      	ldr	r3, [r7, #12]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051fa:	f3ef 8305 	mrs	r3, IPSR
 80051fe:	607b      	str	r3, [r7, #4]
  return(result);
 8005200:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800521c:	f001 fd08 	bl	8006c30 <vTaskStartScheduler>
  
  return osOK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	bd80      	pop	{r7, pc}

08005226 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800522a:	f7ff ffe3 	bl	80051f4 <inHandlerMode>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005234:	f001 fe14 	bl	8006e60 <xTaskGetTickCountFromISR>
 8005238:	4603      	mov	r3, r0
 800523a:	e002      	b.n	8005242 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800523c:	f001 fe00 	bl	8006e40 <xTaskGetTickCount>
 8005240:	4603      	mov	r3, r0
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	bd80      	pop	{r7, pc}

08005246 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005248:	b089      	sub	sp, #36	; 0x24
 800524a:	af04      	add	r7, sp, #16
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d020      	beq.n	800529a <osThreadCreate+0x54>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01c      	beq.n	800529a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685c      	ldr	r4, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681d      	ldr	r5, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691e      	ldr	r6, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff ffa6 	bl	80051c4 <makeFreeRtosPriority>
 8005278:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005282:	9202      	str	r2, [sp, #8]
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	9100      	str	r1, [sp, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	4632      	mov	r2, r6
 800528c:	4629      	mov	r1, r5
 800528e:	4620      	mov	r0, r4
 8005290:	f001 fb0a 	bl	80068a8 <xTaskCreateStatic>
 8005294:	4603      	mov	r3, r0
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e01c      	b.n	80052d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685c      	ldr	r4, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052a6:	b29e      	uxth	r6, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff ff88 	bl	80051c4 <makeFreeRtosPriority>
 80052b4:	4602      	mov	r2, r0
 80052b6:	f107 030c 	add.w	r3, r7, #12
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	9200      	str	r2, [sp, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	4632      	mov	r2, r6
 80052c2:	4629      	mov	r1, r5
 80052c4:	4620      	mov	r0, r4
 80052c6:	f001 fb49 	bl	800695c <xTaskCreate>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052d4:	68fb      	ldr	r3, [r7, #12]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <osDelay+0x16>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	e000      	b.n	80052f6 <osDelay+0x18>
 80052f4:	2301      	movs	r3, #1
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 fc66 	bl	8006bc8 <vTaskDelay>
  
  return osOK;
 80052fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4619      	mov	r1, r3
 800531c:	2001      	movs	r0, #1
 800531e:	f000 fc80 	bl	8005c22 <xQueueCreateMutexStatic>
 8005322:	4603      	mov	r3, r0
 8005324:	e003      	b.n	800532e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005326:	2001      	movs	r0, #1
 8005328:	f000 fc63 	bl	8005bf2 <xQueueCreateMutex>
 800532c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <osMutexWait+0x18>
    return osErrorParameter;
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	e03a      	b.n	80053c6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d103      	bne.n	8005364 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800535c:	f04f 33ff 	mov.w	r3, #4294967295
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e009      	b.n	8005378 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d006      	beq.n	8005378 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <osMutexWait+0x40>
      ticks = 1;
 8005374:	2301      	movs	r3, #1
 8005376:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005378:	f7ff ff3c 	bl	80051f4 <inHandlerMode>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d017      	beq.n	80053b2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005382:	f107 0308 	add.w	r3, r7, #8
 8005386:	461a      	mov	r2, r3
 8005388:	2100      	movs	r1, #0
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 f860 	bl	8006450 <xQueueReceiveFromISR>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d001      	beq.n	800539a <osMutexWait+0x62>
      return osErrorOS;
 8005396:	23ff      	movs	r3, #255	; 0xff
 8005398:	e015      	b.n	80053c6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d011      	beq.n	80053c4 <osMutexWait+0x8c>
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <osMutexWait+0x98>)
 80053a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	e008      	b.n	80053c4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 ff43 	bl	8006240 <xQueueSemaphoreTake>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d001      	beq.n	80053c4 <osMutexWait+0x8c>
    return osErrorOS;
 80053c0:	23ff      	movs	r3, #255	; 0xff
 80053c2:	e000      	b.n	80053c6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80053e4:	f7ff ff06 	bl	80051f4 <inHandlerMode>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fdbd 	bl	8005f74 <xQueueGiveFromISR>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d001      	beq.n	8005404 <osMutexRelease+0x30>
      return osErrorOS;
 8005400:	23ff      	movs	r3, #255	; 0xff
 8005402:	e017      	b.n	8005434 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d013      	beq.n	8005432 <osMutexRelease+0x5e>
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <osMutexRelease+0x68>)
 800540c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	e00a      	b.n	8005432 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800541c:	2300      	movs	r3, #0
 800541e:	2200      	movs	r2, #0
 8005420:	2100      	movs	r1, #0
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fc18 	bl	8005c58 <xQueueGenericSend>
 8005428:	4603      	mov	r3, r0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d001      	beq.n	8005432 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800542e:	23ff      	movs	r3, #255	; 0xff
 8005430:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af02      	add	r7, sp, #8
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d010      	beq.n	8005474 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d10b      	bne.n	8005470 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	2303      	movs	r3, #3
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	2001      	movs	r0, #1
 8005468:	f000 fad8 	bl	8005a1c <xQueueGenericCreateStatic>
 800546c:	4603      	mov	r3, r0
 800546e:	e016      	b.n	800549e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	e014      	b.n	800549e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d110      	bne.n	800549c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800547a:	2203      	movs	r2, #3
 800547c:	2100      	movs	r1, #0
 800547e:	2001      	movs	r0, #1
 8005480:	f000 fb3f 	bl	8005b02 <xQueueGenericCreate>
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <osSemaphoreCreate+0x58>
 800548c:	2300      	movs	r3, #0
 800548e:	2200      	movs	r2, #0
 8005490:	2100      	movs	r1, #0
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fbe0 	bl	8005c58 <xQueueGenericSend>
      return sema;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	e000      	b.n	800549e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800549c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	e03a      	b.n	8005536 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d103      	bne.n	80054d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80054cc:	f04f 33ff 	mov.w	r3, #4294967295
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e009      	b.n	80054e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80054e4:	2301      	movs	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80054e8:	f7ff fe84 	bl	80051f4 <inHandlerMode>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d017      	beq.n	8005522 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	461a      	mov	r2, r3
 80054f8:	2100      	movs	r1, #0
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 ffa8 	bl	8006450 <xQueueReceiveFromISR>
 8005500:	4603      	mov	r3, r0
 8005502:	2b01      	cmp	r3, #1
 8005504:	d001      	beq.n	800550a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005506:	23ff      	movs	r3, #255	; 0xff
 8005508:	e015      	b.n	8005536 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d011      	beq.n	8005534 <osSemaphoreWait+0x8c>
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <osSemaphoreWait+0x98>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	e008      	b.n	8005534 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fe8b 	bl	8006240 <xQueueSemaphoreTake>
 800552a:	4603      	mov	r3, r0
 800552c:	2b01      	cmp	r3, #1
 800552e:	d001      	beq.n	8005534 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005530:	23ff      	movs	r3, #255	; 0xff
 8005532:	e000      	b.n	8005536 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005554:	f7ff fe4e 	bl	80051f4 <inHandlerMode>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d016      	beq.n	800558c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fd05 	bl	8005f74 <xQueueGiveFromISR>
 800556a:	4603      	mov	r3, r0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d001      	beq.n	8005574 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005570:	23ff      	movs	r3, #255	; 0xff
 8005572:	e017      	b.n	80055a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d013      	beq.n	80055a2 <osSemaphoreRelease+0x5e>
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <osSemaphoreRelease+0x68>)
 800557c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	e00a      	b.n	80055a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800558c:	2300      	movs	r3, #0
 800558e:	2200      	movs	r2, #0
 8005590:	2100      	movs	r1, #0
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fb60 	bl	8005c58 <xQueueGenericSend>
 8005598:	4603      	mov	r3, r0
 800559a:	2b01      	cmp	r3, #1
 800559c:	d001      	beq.n	80055a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800559e:	23ff      	movs	r3, #255	; 0xff
 80055a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80055b8:	f7ff fe1c 	bl	80051f4 <inHandlerMode>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80055c2:	2382      	movs	r3, #130	; 0x82
 80055c4:	e003      	b.n	80055ce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fff9 	bl	80065be <vQueueDelete>

  return osOK; 
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80055d6:	b590      	push	{r4, r7, lr}
 80055d8:	b085      	sub	sp, #20
 80055da:	af02      	add	r7, sp, #8
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <osMessageCreate+0x38>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00e      	beq.n	800560e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68dc      	ldr	r4, [r3, #12]
 8005600:	2300      	movs	r3, #0
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	4623      	mov	r3, r4
 8005606:	f000 fa09 	bl	8005a1c <xQueueGenericCreateStatic>
 800560a:	4603      	mov	r3, r0
 800560c:	e008      	b.n	8005620 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	4619      	mov	r1, r3
 800561a:	f000 fa72 	bl	8005b02 <xQueueGenericCreate>
 800561e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bd90      	pop	{r4, r7, pc}

08005628 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <osMessagePut+0x1e>
    ticks = 1;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005646:	f7ff fdd5 	bl	80051f4 <inHandlerMode>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d018      	beq.n	8005682 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005650:	f107 0210 	add.w	r2, r7, #16
 8005654:	f107 0108 	add.w	r1, r7, #8
 8005658:	2300      	movs	r3, #0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fbf6 	bl	8005e4c <xQueueGenericSendFromISR>
 8005660:	4603      	mov	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	d001      	beq.n	800566a <osMessagePut+0x42>
      return osErrorOS;
 8005666:	23ff      	movs	r3, #255	; 0xff
 8005668:	e018      	b.n	800569c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d014      	beq.n	800569a <osMessagePut+0x72>
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <osMessagePut+0x7c>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	e00b      	b.n	800569a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005682:	f107 0108 	add.w	r1, r7, #8
 8005686:	2300      	movs	r3, #0
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fae4 	bl	8005c58 <xQueueGenericSend>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d001      	beq.n	800569a <osMessagePut+0x72>
      return osErrorOS;
 8005696:	23ff      	movs	r3, #255	; 0xff
 8005698:	e000      	b.n	800569c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b08b      	sub	sp, #44	; 0x2c
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	617b      	str	r3, [r7, #20]
    return event;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	461c      	mov	r4, r3
 80056ca:	f107 0314 	add.w	r3, r7, #20
 80056ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056d6:	e054      	b.n	8005782 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80056d8:	2300      	movs	r3, #0
 80056da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d103      	bne.n	80056f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80056e8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	e009      	b.n	8005704 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d006      	beq.n	8005704 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <osMessageGet+0x5c>
      ticks = 1;
 8005700:	2301      	movs	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005704:	f7ff fd76 	bl	80051f4 <inHandlerMode>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01c      	beq.n	8005748 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800570e:	f107 0220 	add.w	r2, r7, #32
 8005712:	f107 0314 	add.w	r3, r7, #20
 8005716:	3304      	adds	r3, #4
 8005718:	4619      	mov	r1, r3
 800571a:	68b8      	ldr	r0, [r7, #8]
 800571c:	f000 fe98 	bl	8006450 <xQueueReceiveFromISR>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d102      	bne.n	800572c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005726:	2310      	movs	r3, #16
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e001      	b.n	8005730 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01d      	beq.n	8005772 <osMessageGet+0xca>
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <osMessageGet+0xe4>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	e014      	b.n	8005772 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	3304      	adds	r3, #4
 800574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005750:	4619      	mov	r1, r3
 8005752:	68b8      	ldr	r0, [r7, #8]
 8005754:	f000 fc98 	bl	8006088 <xQueueReceive>
 8005758:	4603      	mov	r3, r0
 800575a:	2b01      	cmp	r3, #1
 800575c:	d102      	bne.n	8005764 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800575e:	2310      	movs	r3, #16
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e006      	b.n	8005772 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <osMessageGet+0xc6>
 800576a:	2300      	movs	r3, #0
 800576c:	e000      	b.n	8005770 <osMessageGet+0xc8>
 800576e:	2340      	movs	r3, #64	; 0x40
 8005770:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	461c      	mov	r4, r3
 8005776:	f107 0314 	add.w	r3, r7, #20
 800577a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800577e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	372c      	adds	r7, #44	; 0x2c
 8005786:	46bd      	mov	sp, r7
 8005788:	bd90      	pop	{r4, r7, pc}
 800578a:	bf00      	nop
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005798:	f7ff fd2c 	bl	80051f4 <inHandlerMode>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d004      	beq.n	80057ac <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 feee 	bl	8006584 <uxQueueMessagesWaitingFromISR>
 80057a8:	4603      	mov	r3, r0
 80057aa:	e003      	b.n	80057b4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fecc 	bl	800654a <uxQueueMessagesWaiting>
 80057b2:	4603      	mov	r3, r0
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80057c4:	f7ff fd16 	bl	80051f4 <inHandlerMode>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <osMessageDelete+0x16>
    return osErrorISR;
 80057ce:	2382      	movs	r3, #130	; 0x82
 80057d0:	e003      	b.n	80057da <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fef3 	bl	80065be <vQueueDelete>

  return osOK; 
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f103 0208 	add.w	r2, r3, #8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295
 80057fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f103 0208 	add.w	r2, r3, #8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f103 0208 	add.w	r2, r3, #8
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d103      	bne.n	80058a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e00c      	b.n	80058be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3308      	adds	r3, #8
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e002      	b.n	80058b2 <vListInsert+0x2e>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d2f6      	bcs.n	80058ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058f6:	b480      	push	{r7}
 80058f8:	b085      	sub	sp, #20
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6892      	ldr	r2, [r2, #8]
 800590c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6852      	ldr	r2, [r2, #4]
 8005916:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	429a      	cmp	r2, r3
 8005920:	d103      	bne.n	800592a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	e7fe      	b.n	8005972 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005974:	f002 f8ca 	bl	8007b0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	441a      	add	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a4:	3b01      	subs	r3, #1
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	441a      	add	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	22ff      	movs	r2, #255	; 0xff
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	22ff      	movs	r2, #255	; 0xff
 80059c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d114      	bne.n	80059f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01a      	beq.n	8005a08 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3310      	adds	r3, #16
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 fb8a 	bl	80070f0 <xTaskRemoveFromEventList>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d012      	beq.n	8005a08 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <xQueueGenericReset+0xcc>)
 80059e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	e009      	b.n	8005a08 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3310      	adds	r3, #16
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fef2 	bl	80057e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3324      	adds	r3, #36	; 0x24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff feed 	bl	80057e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a08:	f002 f8ae 	bl	8007b68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a0c:	2301      	movs	r3, #1
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08e      	sub	sp, #56	; 0x38
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <xQueueGenericCreateStatic+0x28>
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a42:	e7fe      	b.n	8005a42 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <xQueueGenericCreateStatic+0x42>
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5c:	e7fe      	b.n	8005a5c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <xQueueGenericCreateStatic+0x4e>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <xQueueGenericCreateStatic+0x52>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <xQueueGenericCreateStatic+0x54>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <xQueueGenericCreateStatic+0x6c>
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	e7fe      	b.n	8005a86 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d102      	bne.n	8005a94 <xQueueGenericCreateStatic+0x78>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <xQueueGenericCreateStatic+0x7c>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <xQueueGenericCreateStatic+0x7e>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <xQueueGenericCreateStatic+0x96>
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ab2:	2348      	movs	r3, #72	; 0x48
 8005ab4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b48      	cmp	r3, #72	; 0x48
 8005aba:	d009      	beq.n	8005ad0 <xQueueGenericCreateStatic+0xb4>
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	e7fe      	b.n	8005ace <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ad0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00d      	beq.n	8005af8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ae4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f844 	bl	8005b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3730      	adds	r7, #48	; 0x30
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08a      	sub	sp, #40	; 0x28
 8005b06:	af02      	add	r7, sp, #8
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <xQueueGenericCreate+0x28>
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	e7fe      	b.n	8005b28 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	e004      	b.n	8005b40 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3348      	adds	r3, #72	; 0x48
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 f8fb 	bl	8007d40 <pvPortMalloc>
 8005b4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	3348      	adds	r3, #72	; 0x48
 8005b5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b64:	79fa      	ldrb	r2, [r7, #7]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f805 	bl	8005b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b76:	69bb      	ldr	r3, [r7, #24]
	}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bae:	2101      	movs	r1, #1
 8005bb0:	69b8      	ldr	r0, [r7, #24]
 8005bb2:	f7ff fecb 	bl	800594c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bde:	2300      	movs	r3, #0
 8005be0:	2200      	movs	r2, #0
 8005be2:	2100      	movs	r1, #0
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f837 	bl	8005c58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6939      	ldr	r1, [r7, #16]
 8005c0a:	6978      	ldr	r0, [r7, #20]
 8005c0c:	f7ff ff79 	bl	8005b02 <xQueueGenericCreate>
 8005c10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff ffd3 	bl	8005bbe <prvInitialiseMutex>

		return xNewQueue;
 8005c18:	68fb      	ldr	r3, [r7, #12]
	}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b088      	sub	sp, #32
 8005c26:	af02      	add	r7, sp, #8
 8005c28:	4603      	mov	r3, r0
 8005c2a:	6039      	str	r1, [r7, #0]
 8005c2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	6939      	ldr	r1, [r7, #16]
 8005c40:	6978      	ldr	r0, [r7, #20]
 8005c42:	f7ff feeb 	bl	8005a1c <xQueueGenericCreateStatic>
 8005c46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff ffb8 	bl	8005bbe <prvInitialiseMutex>

		return xNewQueue;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08e      	sub	sp, #56	; 0x38
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c66:	2300      	movs	r3, #0
 8005c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <xQueueGenericSend+0x30>
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c86:	e7fe      	b.n	8005c86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d103      	bne.n	8005c96 <xQueueGenericSend+0x3e>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <xQueueGenericSend+0x42>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <xQueueGenericSend+0x44>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <xQueueGenericSend+0x5c>
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb2:	e7fe      	b.n	8005cb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d103      	bne.n	8005cc2 <xQueueGenericSend+0x6a>
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <xQueueGenericSend+0x6e>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <xQueueGenericSend+0x70>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <xQueueGenericSend+0x88>
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	623b      	str	r3, [r7, #32]
 8005cde:	e7fe      	b.n	8005cde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ce0:	f001 fbbc 	bl	800745c <xTaskGetSchedulerState>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <xQueueGenericSend+0x98>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <xQueueGenericSend+0x9c>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <xQueueGenericSend+0x9e>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <xQueueGenericSend+0xb6>
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e7fe      	b.n	8005d0c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d0e:	f001 fefd 	bl	8007b0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d302      	bcc.n	8005d24 <xQueueGenericSend+0xcc>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d129      	bne.n	8005d78 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d2a:	f000 fc82 	bl	8006632 <prvCopyDataToQueue>
 8005d2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	3324      	adds	r3, #36	; 0x24
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 f9d7 	bl	80070f0 <xTaskRemoveFromEventList>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d013      	beq.n	8005d70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d48:	4b3f      	ldr	r3, [pc, #252]	; (8005e48 <xQueueGenericSend+0x1f0>)
 8005d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	e00a      	b.n	8005d70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <xQueueGenericSend+0x1f0>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d70:	f001 fefa 	bl	8007b68 <vPortExitCritical>
				return pdPASS;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e063      	b.n	8005e40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d7e:	f001 fef3 	bl	8007b68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e05c      	b.n	8005e40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d8c:	f107 0314 	add.w	r3, r7, #20
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 fa0f 	bl	80071b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d9a:	f001 fee5 	bl	8007b68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d9e:	f000 ffa5 	bl	8006cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da2:	f001 feb3 	bl	8007b0c <vPortEnterCritical>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d103      	bne.n	8005dbc <xQueueGenericSend+0x164>
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d103      	bne.n	8005dd2 <xQueueGenericSend+0x17a>
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd2:	f001 fec9 	bl	8007b68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd6:	1d3a      	adds	r2, r7, #4
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 f9fe 	bl	80071e0 <xTaskCheckForTimeOut>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d124      	bne.n	8005e34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dec:	f000 fd19 	bl	8006822 <prvIsQueueFull>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d018      	beq.n	8005e28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	3310      	adds	r3, #16
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 f952 	bl	80070a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e06:	f000 fca4 	bl	8006752 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e0a:	f000 ff7d 	bl	8006d08 <xTaskResumeAll>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f47f af7c 	bne.w	8005d0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <xQueueGenericSend+0x1f0>)
 8005e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	e772      	b.n	8005d0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e2a:	f000 fc92 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2e:	f000 ff6b 	bl	8006d08 <xTaskResumeAll>
 8005e32:	e76c      	b.n	8005d0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e36:	f000 fc8c 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e3a:	f000 ff65 	bl	8006d08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3738      	adds	r7, #56	; 0x38
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	; 0x38
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <xQueueGenericSendFromISR+0x2c>
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
 8005e76:	e7fe      	b.n	8005e76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <xQueueGenericSendFromISR+0x3a>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <xQueueGenericSendFromISR+0x3e>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <xQueueGenericSendFromISR+0x40>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d109      	bne.n	8005ea4 <xQueueGenericSendFromISR+0x58>
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	623b      	str	r3, [r7, #32]
 8005ea2:	e7fe      	b.n	8005ea2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d103      	bne.n	8005eb2 <xQueueGenericSendFromISR+0x66>
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <xQueueGenericSendFromISR+0x6a>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <xQueueGenericSendFromISR+0x6c>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <xQueueGenericSendFromISR+0x84>
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e7fe      	b.n	8005ece <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ed0:	f001 fef8 	bl	8007cc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ed4:	f3ef 8211 	mrs	r2, BASEPRI
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	61ba      	str	r2, [r7, #24]
 8005eea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d302      	bcc.n	8005f02 <xQueueGenericSendFromISR+0xb6>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d12c      	bne.n	8005f5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f12:	f000 fb8e 	bl	8006632 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d112      	bne.n	8005f46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d016      	beq.n	8005f56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	3324      	adds	r3, #36	; 0x24
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 f8df 	bl	80070f0 <xTaskRemoveFromEventList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e007      	b.n	8005f56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	b25a      	sxtb	r2, r3
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f56:	2301      	movs	r3, #1
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f5a:	e001      	b.n	8005f60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3738      	adds	r7, #56	; 0x38
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d109      	bne.n	8005f9c <xQueueGiveFromISR+0x28>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	e7fe      	b.n	8005f9a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d009      	beq.n	8005fb8 <xQueueGiveFromISR+0x44>
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61fb      	str	r3, [r7, #28]
 8005fb6:	e7fe      	b.n	8005fb6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d103      	bne.n	8005fc8 <xQueueGiveFromISR+0x54>
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <xQueueGiveFromISR+0x58>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <xQueueGiveFromISR+0x5a>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <xQueueGiveFromISR+0x72>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fe6:	f001 fe6d 	bl	8007cc4 <vPortValidateInterruptPriority>
	__asm volatile
 8005fea:	f3ef 8211 	mrs	r2, BASEPRI
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	617a      	str	r2, [r7, #20]
 8006000:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006002:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006012:	429a      	cmp	r2, r3
 8006014:	d22b      	bcs.n	800606e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800601c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d112      	bne.n	8006058 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d016      	beq.n	8006068 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	3324      	adds	r3, #36	; 0x24
 800603e:	4618      	mov	r0, r3
 8006040:	f001 f856 	bl	80070f0 <xTaskRemoveFromEventList>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00e      	beq.n	8006068 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e007      	b.n	8006068 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800605c:	3301      	adds	r3, #1
 800605e:	b2db      	uxtb	r3, r3
 8006060:	b25a      	sxtb	r2, r3
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006068:	2301      	movs	r3, #1
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
 800606c:	e001      	b.n	8006072 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800606e:	2300      	movs	r3, #0
 8006070:	637b      	str	r3, [r7, #52]	; 0x34
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800607e:	4618      	mov	r0, r3
 8006080:	3738      	adds	r7, #56	; 0x38
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08c      	sub	sp, #48	; 0x30
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006094:	2300      	movs	r3, #0
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <xQueueReceive+0x2e>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	e7fe      	b.n	80060b4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d103      	bne.n	80060c4 <xQueueReceive+0x3c>
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <xQueueReceive+0x40>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <xQueueReceive+0x42>
 80060c8:	2300      	movs	r3, #0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <xQueueReceive+0x5a>
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	e7fe      	b.n	80060e0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e2:	f001 f9bb 	bl	800745c <xTaskGetSchedulerState>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <xQueueReceive+0x6a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <xQueueReceive+0x6e>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <xQueueReceive+0x70>
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d109      	bne.n	8006110 <xQueueReceive+0x88>
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	e7fe      	b.n	800610e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006110:	f001 fcfc 	bl	8007b0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01f      	beq.n	8006160 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006124:	f000 faef 	bl	8006706 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00f      	beq.n	8006158 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	3310      	adds	r3, #16
 800613c:	4618      	mov	r0, r3
 800613e:	f000 ffd7 	bl	80070f0 <xTaskRemoveFromEventList>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006148:	4b3c      	ldr	r3, [pc, #240]	; (800623c <xQueueReceive+0x1b4>)
 800614a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006158:	f001 fd06 	bl	8007b68 <vPortExitCritical>
				return pdPASS;
 800615c:	2301      	movs	r3, #1
 800615e:	e069      	b.n	8006234 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006166:	f001 fcff 	bl	8007b68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800616a:	2300      	movs	r3, #0
 800616c:	e062      	b.n	8006234 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006174:	f107 0310 	add.w	r3, r7, #16
 8006178:	4618      	mov	r0, r3
 800617a:	f001 f81b 	bl	80071b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800617e:	2301      	movs	r3, #1
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006182:	f001 fcf1 	bl	8007b68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006186:	f000 fdb1 	bl	8006cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618a:	f001 fcbf 	bl	8007b0c <vPortEnterCritical>
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006194:	b25b      	sxtb	r3, r3
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619a:	d103      	bne.n	80061a4 <xQueueReceive+0x11c>
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061aa:	b25b      	sxtb	r3, r3
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d103      	bne.n	80061ba <xQueueReceive+0x132>
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ba:	f001 fcd5 	bl	8007b68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061be:	1d3a      	adds	r2, r7, #4
 80061c0:	f107 0310 	add.w	r3, r7, #16
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 f80a 	bl	80071e0 <xTaskCheckForTimeOut>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d123      	bne.n	800621a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d4:	f000 fb0f 	bl	80067f6 <prvIsQueueEmpty>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d017      	beq.n	800620e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	3324      	adds	r3, #36	; 0x24
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 ff5e 	bl	80070a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ee:	f000 fab0 	bl	8006752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f2:	f000 fd89 	bl	8006d08 <xTaskResumeAll>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d189      	bne.n	8006110 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80061fc:	4b0f      	ldr	r3, [pc, #60]	; (800623c <xQueueReceive+0x1b4>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	e780      	b.n	8006110 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800620e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006210:	f000 fa9f 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006214:	f000 fd78 	bl	8006d08 <xTaskResumeAll>
 8006218:	e77a      	b.n	8006110 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800621a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621c:	f000 fa99 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006220:	f000 fd72 	bl	8006d08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006226:	f000 fae6 	bl	80067f6 <prvIsQueueEmpty>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	f43f af6f 	beq.w	8006110 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006232:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006234:	4618      	mov	r0, r3
 8006236:	3730      	adds	r7, #48	; 0x30
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08e      	sub	sp, #56	; 0x38
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800624a:	2300      	movs	r3, #0
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006252:	2300      	movs	r3, #0
 8006254:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <xQueueSemaphoreTake+0x30>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	623b      	str	r3, [r7, #32]
 800626e:	e7fe      	b.n	800626e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d009      	beq.n	800628c <xQueueSemaphoreTake+0x4c>
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	e7fe      	b.n	800628a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800628c:	f001 f8e6 	bl	800745c <xTaskGetSchedulerState>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <xQueueSemaphoreTake+0x5c>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <xQueueSemaphoreTake+0x60>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <xQueueSemaphoreTake+0x62>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <xQueueSemaphoreTake+0x7a>
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e7fe      	b.n	80062b8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062ba:	f001 fc27 	bl	8007b0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d024      	beq.n	8006314 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	1e5a      	subs	r2, r3, #1
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062da:	f001 fa79 	bl	80077d0 <pvTaskIncrementMutexHeldCount>
 80062de:	4602      	mov	r2, r0
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	3310      	adds	r3, #16
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fefd 	bl	80070f0 <xTaskRemoveFromEventList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062fc:	4b53      	ldr	r3, [pc, #332]	; (800644c <xQueueSemaphoreTake+0x20c>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800630c:	f001 fc2c 	bl	8007b68 <vPortExitCritical>
				return pdPASS;
 8006310:	2301      	movs	r3, #1
 8006312:	e096      	b.n	8006442 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d110      	bne.n	800633c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b00      	cmp	r3, #0
 800631e:	d009      	beq.n	8006334 <xQueueSemaphoreTake+0xf4>
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	e7fe      	b.n	8006332 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006334:	f001 fc18 	bl	8007b68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006338:	2300      	movs	r3, #0
 800633a:	e082      	b.n	8006442 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006342:	f107 030c 	add.w	r3, r7, #12
 8006346:	4618      	mov	r0, r3
 8006348:	f000 ff34 	bl	80071b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006350:	f001 fc0a 	bl	8007b68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006354:	f000 fcca 	bl	8006cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006358:	f001 fbd8 	bl	8007b0c <vPortEnterCritical>
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006362:	b25b      	sxtb	r3, r3
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d103      	bne.n	8006372 <xQueueSemaphoreTake+0x132>
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006378:	b25b      	sxtb	r3, r3
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637e:	d103      	bne.n	8006388 <xQueueSemaphoreTake+0x148>
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006388:	f001 fbee 	bl	8007b68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800638c:	463a      	mov	r2, r7
 800638e:	f107 030c 	add.w	r3, r7, #12
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f000 ff23 	bl	80071e0 <xTaskCheckForTimeOut>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d132      	bne.n	8006406 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063a2:	f000 fa28 	bl	80067f6 <prvIsQueueEmpty>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d026      	beq.n	80063fa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80063b4:	f001 fbaa 	bl	8007b0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f86b 	bl	8007498 <xTaskPriorityInherit>
 80063c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063c4:	f001 fbd0 	bl	8007b68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	4611      	mov	r1, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fe69 	bl	80070a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063d8:	f000 f9bb 	bl	8006752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063dc:	f000 fc94 	bl	8006d08 <xTaskResumeAll>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f47f af69 	bne.w	80062ba <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80063e8:	4b18      	ldr	r3, [pc, #96]	; (800644c <xQueueSemaphoreTake+0x20c>)
 80063ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	e75f      	b.n	80062ba <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063fc:	f000 f9a9 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006400:	f000 fc82 	bl	8006d08 <xTaskResumeAll>
 8006404:	e759      	b.n	80062ba <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006408:	f000 f9a3 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800640c:	f000 fc7c 	bl	8006d08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006412:	f000 f9f0 	bl	80067f6 <prvIsQueueEmpty>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	f43f af4e 	beq.w	80062ba <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00d      	beq.n	8006440 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006424:	f001 fb72 	bl	8007b0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800642a:	f000 f8ea 	bl	8006602 <prvGetDisinheritPriorityAfterTimeout>
 800642e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006436:	4618      	mov	r0, r3
 8006438:	f001 f932 	bl	80076a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800643c:	f001 fb94 	bl	8007b68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006440:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006442:	4618      	mov	r0, r3
 8006444:	3738      	adds	r7, #56	; 0x38
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08e      	sub	sp, #56	; 0x38
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <xQueueReceiveFromISR+0x2a>
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	e7fe      	b.n	8006478 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <xQueueReceiveFromISR+0x38>
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <xQueueReceiveFromISR+0x3c>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <xQueueReceiveFromISR+0x3e>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <xQueueReceiveFromISR+0x56>
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e7fe      	b.n	80064a4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064a6:	f001 fc0d 	bl	8007cc4 <vPortValidateInterruptPriority>
	__asm volatile
 80064aa:	f3ef 8211 	mrs	r2, BASEPRI
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	61ba      	str	r2, [r7, #24]
 80064c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d02f      	beq.n	8006532 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064e0:	f000 f911 	bl	8006706 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	1e5a      	subs	r2, r3, #1
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d112      	bne.n	800651c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d016      	beq.n	800652c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	3310      	adds	r3, #16
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fdf4 	bl	80070f0 <xTaskRemoveFromEventList>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e007      	b.n	800652c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800651c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006520:	3301      	adds	r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	b25a      	sxtb	r2, r3
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800652c:	2301      	movs	r3, #1
 800652e:	637b      	str	r3, [r7, #52]	; 0x34
 8006530:	e001      	b.n	8006536 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006532:	2300      	movs	r3, #0
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	613b      	str	r3, [r7, #16]
	__asm volatile
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006542:	4618      	mov	r0, r3
 8006544:	3738      	adds	r7, #56	; 0x38
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d109      	bne.n	800656c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	e7fe      	b.n	800656a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800656c:	f001 face 	bl	8007b0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006576:	f001 faf7 	bl	8007b68 <vPortExitCritical>

	return uxReturn;
 800657a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <uxQueueMessagesWaitingFromISR+0x26>
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e7fe      	b.n	80065a8 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80065b0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80065b2:	4618      	mov	r0, r3
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b084      	sub	sp, #16
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d109      	bne.n	80065e4 <vQueueDelete+0x26>
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	e7fe      	b.n	80065e2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f935 	bl	8006854 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 fc65 	bl	8007ec4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d006      	beq.n	8006620 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f1c3 0307 	rsb	r3, r3, #7
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e001      	b.n	8006624 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006624:	68fb      	ldr	r3, [r7, #12]
	}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10d      	bne.n	800666c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d14d      	bne.n	80066f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4618      	mov	r0, r3
 800665e:	f000 ff9b 	bl	8007598 <xTaskPriorityDisinherit>
 8006662:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	e043      	b.n	80066f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d119      	bne.n	80066a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6858      	ldr	r0, [r3, #4]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	461a      	mov	r2, r3
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	f011 f910 	bl	80178a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	441a      	add	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	d32b      	bcc.n	80066f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	605a      	str	r2, [r3, #4]
 80066a4:	e026      	b.n	80066f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68d8      	ldr	r0, [r3, #12]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	461a      	mov	r2, r3
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	f011 f8f6 	bl	80178a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	425b      	negs	r3, r3
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d207      	bcs.n	80066e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	425b      	negs	r3, r3
 80066dc:	441a      	add	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d105      	bne.n	80066f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066fc:	697b      	ldr	r3, [r7, #20]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d018      	beq.n	800674a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d303      	bcc.n	800673a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68d9      	ldr	r1, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	461a      	mov	r2, r3
 8006744:	6838      	ldr	r0, [r7, #0]
 8006746:	f011 f8ac 	bl	80178a2 <memcpy>
	}
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800675a:	f001 f9d7 	bl	8007b0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006764:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006766:	e011      	b.n	800678c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d012      	beq.n	8006796 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fcbb 	bl	80070f0 <xTaskRemoveFromEventList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006780:	f000 fd8e 	bl	80072a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	3b01      	subs	r3, #1
 8006788:	b2db      	uxtb	r3, r3
 800678a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800678c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	dce9      	bgt.n	8006768 <prvUnlockQueue+0x16>
 8006794:	e000      	b.n	8006798 <prvUnlockQueue+0x46>
					break;
 8006796:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	22ff      	movs	r2, #255	; 0xff
 800679c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067a0:	f001 f9e2 	bl	8007b68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067a4:	f001 f9b2 	bl	8007b0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067b0:	e011      	b.n	80067d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d012      	beq.n	80067e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3310      	adds	r3, #16
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fc96 	bl	80070f0 <xTaskRemoveFromEventList>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067ca:	f000 fd69 	bl	80072a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dce9      	bgt.n	80067b2 <prvUnlockQueue+0x60>
 80067de:	e000      	b.n	80067e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067ea:	f001 f9bd 	bl	8007b68 <vPortExitCritical>
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067fe:	f001 f985 	bl	8007b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e001      	b.n	8006814 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006814:	f001 f9a8 	bl	8007b68 <vPortExitCritical>

	return xReturn;
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800682a:	f001 f96f 	bl	8007b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	429a      	cmp	r2, r3
 8006838:	d102      	bne.n	8006840 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800683a:	2301      	movs	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e001      	b.n	8006844 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006844:	f001 f990 	bl	8007b68 <vPortExitCritical>

	return xReturn;
 8006848:	68fb      	ldr	r3, [r7, #12]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e016      	b.n	8006890 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006862:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <vQueueUnregisterQueue+0x50>)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4413      	add	r3, r2
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d10b      	bne.n	800688a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006872:	4a0c      	ldr	r2, [pc, #48]	; (80068a4 <vQueueUnregisterQueue+0x50>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2100      	movs	r1, #0
 8006878:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800687c:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <vQueueUnregisterQueue+0x50>)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4413      	add	r3, r2
 8006884:	2200      	movs	r2, #0
 8006886:	605a      	str	r2, [r3, #4]
				break;
 8006888:	e005      	b.n	8006896 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b07      	cmp	r3, #7
 8006894:	d9e5      	bls.n	8006862 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	2000bd64 	.word	0x2000bd64

080068a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08e      	sub	sp, #56	; 0x38
 80068ac:	af04      	add	r7, sp, #16
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <xTaskCreateStatic+0x28>
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	e7fe      	b.n	80068ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <xTaskCreateStatic+0x42>
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	e7fe      	b.n	80068e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068ea:	2354      	movs	r3, #84	; 0x54
 80068ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b54      	cmp	r3, #84	; 0x54
 80068f2:	d009      	beq.n	8006908 <xTaskCreateStatic+0x60>
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e7fe      	b.n	8006906 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006908:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01e      	beq.n	800694e <xTaskCreateStatic+0xa6>
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01b      	beq.n	800694e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800691e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	2202      	movs	r2, #2
 8006924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006928:	2300      	movs	r3, #0
 800692a:	9303      	str	r3, [sp, #12]
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	9302      	str	r3, [sp, #8]
 8006930:	f107 0314 	add.w	r3, r7, #20
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f850 	bl	80069e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006948:	f000 f8d4 	bl	8006af4 <prvAddNewTaskToReadyList>
 800694c:	e001      	b.n	8006952 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006952:	697b      	ldr	r3, [r7, #20]
	}
 8006954:	4618      	mov	r0, r3
 8006956:	3728      	adds	r7, #40	; 0x28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08c      	sub	sp, #48	; 0x30
 8006960:	af04      	add	r7, sp, #16
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	4613      	mov	r3, r2
 800696a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4618      	mov	r0, r3
 8006972:	f001 f9e5 	bl	8007d40 <pvPortMalloc>
 8006976:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800697e:	2054      	movs	r0, #84	; 0x54
 8006980:	f001 f9de 	bl	8007d40 <pvPortMalloc>
 8006984:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	631a      	str	r2, [r3, #48]	; 0x30
 8006992:	e005      	b.n	80069a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006994:	6978      	ldr	r0, [r7, #20]
 8006996:	f001 fa95 	bl	8007ec4 <vPortFree>
 800699a:	e001      	b.n	80069a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d017      	beq.n	80069d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	2300      	movs	r3, #0
 80069b2:	9303      	str	r3, [sp, #12]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	9302      	str	r3, [sp, #8]
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f80e 	bl	80069e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069ca:	69f8      	ldr	r0, [r7, #28]
 80069cc:	f000 f892 	bl	8006af4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069d0:	2301      	movs	r3, #1
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	e002      	b.n	80069dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295
 80069da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069dc:	69bb      	ldr	r3, [r7, #24]
	}
 80069de:	4618      	mov	r0, r3
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b088      	sub	sp, #32
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069fe:	3b01      	subs	r3, #1
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	f023 0307 	bic.w	r3, r3, #7
 8006a0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d009      	beq.n	8006a2c <prvInitialiseNewTask+0x46>
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	e7fe      	b.n	8006a2a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01f      	beq.n	8006a72 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	e012      	b.n	8006a5e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	7819      	ldrb	r1, [r3, #0]
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	3334      	adds	r3, #52	; 0x34
 8006a48:	460a      	mov	r2, r1
 8006a4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	2b0f      	cmp	r3, #15
 8006a62:	d9e9      	bls.n	8006a38 <prvInitialiseNewTask+0x52>
 8006a64:	e000      	b.n	8006a68 <prvInitialiseNewTask+0x82>
			{
				break;
 8006a66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a70:	e003      	b.n	8006a7a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d901      	bls.n	8006a84 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a80:	2306      	movs	r3, #6
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	2200      	movs	r2, #0
 8006a94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fec1 	bl	8005822 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	3318      	adds	r3, #24
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fe febc 	bl	8005822 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	f1c3 0207 	rsb	r2, r3, #7
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	68f9      	ldr	r1, [r7, #12]
 8006ad2:	69b8      	ldr	r0, [r7, #24]
 8006ad4:	f000 fef6 	bl	80078c4 <pxPortInitialiseStack>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aea:	bf00      	nop
 8006aec:	3720      	adds	r7, #32
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006afc:	f001 f806 	bl	8007b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b00:	4b2a      	ldr	r3, [pc, #168]	; (8006bac <prvAddNewTaskToReadyList+0xb8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3301      	adds	r3, #1
 8006b06:	4a29      	ldr	r2, [pc, #164]	; (8006bac <prvAddNewTaskToReadyList+0xb8>)
 8006b08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b0a:	4b29      	ldr	r3, [pc, #164]	; (8006bb0 <prvAddNewTaskToReadyList+0xbc>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b12:	4a27      	ldr	r2, [pc, #156]	; (8006bb0 <prvAddNewTaskToReadyList+0xbc>)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b18:	4b24      	ldr	r3, [pc, #144]	; (8006bac <prvAddNewTaskToReadyList+0xb8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d110      	bne.n	8006b42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b20:	f000 fbe2 	bl	80072e8 <prvInitialiseTaskLists>
 8006b24:	e00d      	b.n	8006b42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b26:	4b23      	ldr	r3, [pc, #140]	; (8006bb4 <prvAddNewTaskToReadyList+0xc0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b2e:	4b20      	ldr	r3, [pc, #128]	; (8006bb0 <prvAddNewTaskToReadyList+0xbc>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d802      	bhi.n	8006b42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b3c:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <prvAddNewTaskToReadyList+0xbc>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b42:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <prvAddNewTaskToReadyList+0xc4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3301      	adds	r3, #1
 8006b48:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <prvAddNewTaskToReadyList+0xc4>)
 8006b4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	2201      	movs	r2, #1
 8006b52:	409a      	lsls	r2, r3
 8006b54:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <prvAddNewTaskToReadyList+0xc8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <prvAddNewTaskToReadyList+0xc8>)
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4a15      	ldr	r2, [pc, #84]	; (8006bc0 <prvAddNewTaskToReadyList+0xcc>)
 8006b6c:	441a      	add	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f7fe fe61 	bl	800583c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b7a:	f000 fff5 	bl	8007b68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <prvAddNewTaskToReadyList+0xc0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00e      	beq.n	8006ba4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b86:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <prvAddNewTaskToReadyList+0xbc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d207      	bcs.n	8006ba4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b94:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <prvAddNewTaskToReadyList+0xd0>)
 8006b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	200005b0 	.word	0x200005b0
 8006bb0:	200004b0 	.word	0x200004b0
 8006bb4:	200005bc 	.word	0x200005bc
 8006bb8:	200005cc 	.word	0x200005cc
 8006bbc:	200005b8 	.word	0x200005b8
 8006bc0:	200004b4 	.word	0x200004b4
 8006bc4:	e000ed04 	.word	0xe000ed04

08006bc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d016      	beq.n	8006c08 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bda:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <vTaskDelay+0x60>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <vTaskDelay+0x2e>
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	e7fe      	b.n	8006bf4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006bf6:	f000 f879 	bl	8006cec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fdfb 	bl	80077f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c02:	f000 f881 	bl	8006d08 <xTaskResumeAll>
 8006c06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d107      	bne.n	8006c1e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006c0e:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <vTaskDelay+0x64>)
 8006c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c1e:	bf00      	nop
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200005d8 	.word	0x200005d8
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08a      	sub	sp, #40	; 0x28
 8006c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c3e:	463a      	mov	r2, r7
 8006c40:	1d39      	adds	r1, r7, #4
 8006c42:	f107 0308 	add.w	r3, r7, #8
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7f9 fcaa 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	9202      	str	r2, [sp, #8]
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	2300      	movs	r3, #0
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	460a      	mov	r2, r1
 8006c5e:	491d      	ldr	r1, [pc, #116]	; (8006cd4 <vTaskStartScheduler+0xa4>)
 8006c60:	481d      	ldr	r0, [pc, #116]	; (8006cd8 <vTaskStartScheduler+0xa8>)
 8006c62:	f7ff fe21 	bl	80068a8 <xTaskCreateStatic>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <vTaskStartScheduler+0xac>)
 8006c6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <vTaskStartScheduler+0xac>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e001      	b.n	8006c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d115      	bne.n	8006cb0 <vTaskStartScheduler+0x80>
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c96:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <vTaskStartScheduler+0xb0>)
 8006c98:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <vTaskStartScheduler+0xb4>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ca4:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <vTaskStartScheduler+0xb8>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006caa:	f000 fe91 	bl	80079d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cae:	e00d      	b.n	8006ccc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d109      	bne.n	8006ccc <vTaskStartScheduler+0x9c>
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e7fe      	b.n	8006cca <vTaskStartScheduler+0x9a>
}
 8006ccc:	bf00      	nop
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	08018d8c 	.word	0x08018d8c
 8006cd8:	080072b9 	.word	0x080072b9
 8006cdc:	200005d4 	.word	0x200005d4
 8006ce0:	200005d0 	.word	0x200005d0
 8006ce4:	200005bc 	.word	0x200005bc
 8006ce8:	200005b4 	.word	0x200005b4

08006cec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cf0:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <vTaskSuspendAll+0x18>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	4a03      	ldr	r2, [pc, #12]	; (8006d04 <vTaskSuspendAll+0x18>)
 8006cf8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006cfa:	bf00      	nop
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	200005d8 	.word	0x200005d8

08006d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d16:	4b41      	ldr	r3, [pc, #260]	; (8006e1c <xTaskResumeAll+0x114>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <xTaskResumeAll+0x2a>
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	e7fe      	b.n	8006d30 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d32:	f000 feeb 	bl	8007b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d36:	4b39      	ldr	r3, [pc, #228]	; (8006e1c <xTaskResumeAll+0x114>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	4a37      	ldr	r2, [pc, #220]	; (8006e1c <xTaskResumeAll+0x114>)
 8006d3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d40:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <xTaskResumeAll+0x114>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d161      	bne.n	8006e0c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d48:	4b35      	ldr	r3, [pc, #212]	; (8006e20 <xTaskResumeAll+0x118>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d05d      	beq.n	8006e0c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d50:	e02e      	b.n	8006db0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d52:	4b34      	ldr	r3, [pc, #208]	; (8006e24 <xTaskResumeAll+0x11c>)
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fdc9 	bl	80058f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3304      	adds	r3, #4
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe fdc4 	bl	80058f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	2201      	movs	r2, #1
 8006d74:	409a      	lsls	r2, r3
 8006d76:	4b2c      	ldr	r3, [pc, #176]	; (8006e28 <xTaskResumeAll+0x120>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	4a2a      	ldr	r2, [pc, #168]	; (8006e28 <xTaskResumeAll+0x120>)
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4a27      	ldr	r2, [pc, #156]	; (8006e2c <xTaskResumeAll+0x124>)
 8006d8e:	441a      	add	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f7fe fd50 	bl	800583c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <xTaskResumeAll+0x128>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d302      	bcc.n	8006db0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006daa:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <xTaskResumeAll+0x12c>)
 8006dac:	2201      	movs	r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006db0:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <xTaskResumeAll+0x11c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1cc      	bne.n	8006d52 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dbe:	f000 fb2d 	bl	800741c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <xTaskResumeAll+0x130>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d010      	beq.n	8006df0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dce:	f000 f859 	bl	8006e84 <xTaskIncrementTick>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006dd8:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <xTaskResumeAll+0x12c>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f1      	bne.n	8006dce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <xTaskResumeAll+0x130>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006df0:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <xTaskResumeAll+0x12c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d009      	beq.n	8006e0c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dfc:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <xTaskResumeAll+0x134>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e0c:	f000 feac 	bl	8007b68 <vPortExitCritical>

	return xAlreadyYielded;
 8006e10:	68bb      	ldr	r3, [r7, #8]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200005d8 	.word	0x200005d8
 8006e20:	200005b0 	.word	0x200005b0
 8006e24:	20000570 	.word	0x20000570
 8006e28:	200005b8 	.word	0x200005b8
 8006e2c:	200004b4 	.word	0x200004b4
 8006e30:	200004b0 	.word	0x200004b0
 8006e34:	200005c4 	.word	0x200005c4
 8006e38:	200005c0 	.word	0x200005c0
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <xTaskGetTickCount+0x1c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e4c:	687b      	ldr	r3, [r7, #4]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	200005b4 	.word	0x200005b4

08006e60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e66:	f000 ff2d 	bl	8007cc4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006e6e:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <xTaskGetTickCountFromISR+0x20>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e74:	683b      	ldr	r3, [r7, #0]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200005b4 	.word	0x200005b4

08006e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e8e:	4b4e      	ldr	r3, [pc, #312]	; (8006fc8 <xTaskIncrementTick+0x144>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f040 8087 	bne.w	8006fa6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e98:	4b4c      	ldr	r3, [pc, #304]	; (8006fcc <xTaskIncrementTick+0x148>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ea0:	4a4a      	ldr	r2, [pc, #296]	; (8006fcc <xTaskIncrementTick+0x148>)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d11f      	bne.n	8006eec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006eac:	4b48      	ldr	r3, [pc, #288]	; (8006fd0 <xTaskIncrementTick+0x14c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <xTaskIncrementTick+0x46>
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	e7fe      	b.n	8006ec8 <xTaskIncrementTick+0x44>
 8006eca:	4b41      	ldr	r3, [pc, #260]	; (8006fd0 <xTaskIncrementTick+0x14c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	4b40      	ldr	r3, [pc, #256]	; (8006fd4 <xTaskIncrementTick+0x150>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a3e      	ldr	r2, [pc, #248]	; (8006fd0 <xTaskIncrementTick+0x14c>)
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	4a3e      	ldr	r2, [pc, #248]	; (8006fd4 <xTaskIncrementTick+0x150>)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	4b3e      	ldr	r3, [pc, #248]	; (8006fd8 <xTaskIncrementTick+0x154>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	4a3c      	ldr	r2, [pc, #240]	; (8006fd8 <xTaskIncrementTick+0x154>)
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	f000 fa98 	bl	800741c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eec:	4b3b      	ldr	r3, [pc, #236]	; (8006fdc <xTaskIncrementTick+0x158>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d348      	bcc.n	8006f88 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ef6:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <xTaskIncrementTick+0x14c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f00:	4b36      	ldr	r3, [pc, #216]	; (8006fdc <xTaskIncrementTick+0x158>)
 8006f02:	f04f 32ff 	mov.w	r2, #4294967295
 8006f06:	601a      	str	r2, [r3, #0]
					break;
 8006f08:	e03e      	b.n	8006f88 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f0a:	4b31      	ldr	r3, [pc, #196]	; (8006fd0 <xTaskIncrementTick+0x14c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d203      	bcs.n	8006f2a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f22:	4a2e      	ldr	r2, [pc, #184]	; (8006fdc <xTaskIncrementTick+0x158>)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f28:	e02e      	b.n	8006f88 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fce1 	bl	80058f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	3318      	adds	r3, #24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fcd8 	bl	80058f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <xTaskIncrementTick+0x15c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	4a22      	ldr	r2, [pc, #136]	; (8006fe0 <xTaskIncrementTick+0x15c>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4a1f      	ldr	r2, [pc, #124]	; (8006fe4 <xTaskIncrementTick+0x160>)
 8006f66:	441a      	add	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fe fc64 	bl	800583c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <xTaskIncrementTick+0x164>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d3b9      	bcc.n	8006ef6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f86:	e7b6      	b.n	8006ef6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f88:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <xTaskIncrementTick+0x164>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4915      	ldr	r1, [pc, #84]	; (8006fe4 <xTaskIncrementTick+0x160>)
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d907      	bls.n	8006fb0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e004      	b.n	8006fb0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006fa6:	4b11      	ldr	r3, [pc, #68]	; (8006fec <xTaskIncrementTick+0x168>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	4a0f      	ldr	r2, [pc, #60]	; (8006fec <xTaskIncrementTick+0x168>)
 8006fae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <xTaskIncrementTick+0x16c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006fbc:	697b      	ldr	r3, [r7, #20]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200005d8 	.word	0x200005d8
 8006fcc:	200005b4 	.word	0x200005b4
 8006fd0:	20000568 	.word	0x20000568
 8006fd4:	2000056c 	.word	0x2000056c
 8006fd8:	200005c8 	.word	0x200005c8
 8006fdc:	200005d0 	.word	0x200005d0
 8006fe0:	200005b8 	.word	0x200005b8
 8006fe4:	200004b4 	.word	0x200004b4
 8006fe8:	200004b0 	.word	0x200004b0
 8006fec:	200005c0 	.word	0x200005c0
 8006ff0:	200005c4 	.word	0x200005c4

08006ff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ffa:	4b26      	ldr	r3, [pc, #152]	; (8007094 <vTaskSwitchContext+0xa0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007002:	4b25      	ldr	r3, [pc, #148]	; (8007098 <vTaskSwitchContext+0xa4>)
 8007004:	2201      	movs	r2, #1
 8007006:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007008:	e03e      	b.n	8007088 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800700a:	4b23      	ldr	r3, [pc, #140]	; (8007098 <vTaskSwitchContext+0xa4>)
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007010:	4b22      	ldr	r3, [pc, #136]	; (800709c <vTaskSwitchContext+0xa8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	fab3 f383 	clz	r3, r3
 800701c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	f1c3 031f 	rsb	r3, r3, #31
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	491e      	ldr	r1, [pc, #120]	; (80070a0 <vTaskSwitchContext+0xac>)
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <vTaskSwitchContext+0x5a>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	e7fe      	b.n	800704c <vTaskSwitchContext+0x58>
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4a11      	ldr	r2, [pc, #68]	; (80070a0 <vTaskSwitchContext+0xac>)
 800705a:	4413      	add	r3, r2
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	605a      	str	r2, [r3, #4]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	3308      	adds	r3, #8
 8007070:	429a      	cmp	r2, r3
 8007072:	d104      	bne.n	800707e <vTaskSwitchContext+0x8a>
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	605a      	str	r2, [r3, #4]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4a07      	ldr	r2, [pc, #28]	; (80070a4 <vTaskSwitchContext+0xb0>)
 8007086:	6013      	str	r3, [r2, #0]
}
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	200005d8 	.word	0x200005d8
 8007098:	200005c4 	.word	0x200005c4
 800709c:	200005b8 	.word	0x200005b8
 80070a0:	200004b4 	.word	0x200004b4
 80070a4:	200004b0 	.word	0x200004b0

080070a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d109      	bne.n	80070cc <vTaskPlaceOnEventList+0x24>
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	e7fe      	b.n	80070ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <vTaskPlaceOnEventList+0x44>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3318      	adds	r3, #24
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fe fbd5 	bl	8005884 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070da:	2101      	movs	r1, #1
 80070dc:	6838      	ldr	r0, [r7, #0]
 80070de:	f000 fb8b 	bl	80077f8 <prvAddCurrentTaskToDelayedList>
}
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200004b0 	.word	0x200004b0

080070f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <xTaskRemoveFromEventList+0x2a>
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e7fe      	b.n	8007118 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	3318      	adds	r3, #24
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fbe9 	bl	80058f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007124:	4b1d      	ldr	r3, [pc, #116]	; (800719c <xTaskRemoveFromEventList+0xac>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11c      	bne.n	8007166 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	3304      	adds	r3, #4
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fbe0 	bl	80058f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	2201      	movs	r2, #1
 800713c:	409a      	lsls	r2, r3
 800713e:	4b18      	ldr	r3, [pc, #96]	; (80071a0 <xTaskRemoveFromEventList+0xb0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <xTaskRemoveFromEventList+0xb0>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4a13      	ldr	r2, [pc, #76]	; (80071a4 <xTaskRemoveFromEventList+0xb4>)
 8007156:	441a      	add	r2, r3
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f7fe fb6c 	bl	800583c <vListInsertEnd>
 8007164:	e005      	b.n	8007172 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3318      	adds	r3, #24
 800716a:	4619      	mov	r1, r3
 800716c:	480e      	ldr	r0, [pc, #56]	; (80071a8 <xTaskRemoveFromEventList+0xb8>)
 800716e:	f7fe fb65 	bl	800583c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007176:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <xTaskRemoveFromEventList+0xbc>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	429a      	cmp	r2, r3
 800717e:	d905      	bls.n	800718c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <xTaskRemoveFromEventList+0xc0>)
 8007186:	2201      	movs	r2, #1
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e001      	b.n	8007190 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007190:	697b      	ldr	r3, [r7, #20]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	200005d8 	.word	0x200005d8
 80071a0:	200005b8 	.word	0x200005b8
 80071a4:	200004b4 	.word	0x200004b4
 80071a8:	20000570 	.word	0x20000570
 80071ac:	200004b0 	.word	0x200004b0
 80071b0:	200005c4 	.word	0x200005c4

080071b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071bc:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <vTaskInternalSetTimeOutState+0x24>)
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <vTaskInternalSetTimeOutState+0x28>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	605a      	str	r2, [r3, #4]
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	200005c8 	.word	0x200005c8
 80071dc:	200005b4 	.word	0x200005b4

080071e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d109      	bne.n	8007204 <xTaskCheckForTimeOut+0x24>
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e7fe      	b.n	8007202 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <xTaskCheckForTimeOut+0x3e>
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	e7fe      	b.n	800721c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800721e:	f000 fc75 	bl	8007b0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007222:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <xTaskCheckForTimeOut+0xb8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d102      	bne.n	8007242 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	e023      	b.n	800728a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b15      	ldr	r3, [pc, #84]	; (800729c <xTaskCheckForTimeOut+0xbc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d007      	beq.n	800725e <xTaskCheckForTimeOut+0x7e>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	429a      	cmp	r2, r3
 8007256:	d302      	bcc.n	800725e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	e015      	b.n	800728a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	429a      	cmp	r2, r3
 8007266:	d20b      	bcs.n	8007280 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ff9d 	bl	80071b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	e004      	b.n	800728a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800728a:	f000 fc6d 	bl	8007b68 <vPortExitCritical>

	return xReturn;
 800728e:	69fb      	ldr	r3, [r7, #28]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	200005b4 	.word	0x200005b4
 800729c:	200005c8 	.word	0x200005c8

080072a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072a4:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <vTaskMissedYield+0x14>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
}
 80072aa:	bf00      	nop
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	200005c4 	.word	0x200005c4

080072b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072c0:	f000 f852 	bl	8007368 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <prvIdleTask+0x28>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d9f9      	bls.n	80072c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <prvIdleTask+0x2c>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072dc:	e7f0      	b.n	80072c0 <prvIdleTask+0x8>
 80072de:	bf00      	nop
 80072e0:	200004b4 	.word	0x200004b4
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072ee:	2300      	movs	r3, #0
 80072f0:	607b      	str	r3, [r7, #4]
 80072f2:	e00c      	b.n	800730e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4a12      	ldr	r2, [pc, #72]	; (8007348 <prvInitialiseTaskLists+0x60>)
 8007300:	4413      	add	r3, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fa6d 	bl	80057e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3301      	adds	r3, #1
 800730c:	607b      	str	r3, [r7, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b06      	cmp	r3, #6
 8007312:	d9ef      	bls.n	80072f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007314:	480d      	ldr	r0, [pc, #52]	; (800734c <prvInitialiseTaskLists+0x64>)
 8007316:	f7fe fa64 	bl	80057e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800731a:	480d      	ldr	r0, [pc, #52]	; (8007350 <prvInitialiseTaskLists+0x68>)
 800731c:	f7fe fa61 	bl	80057e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007320:	480c      	ldr	r0, [pc, #48]	; (8007354 <prvInitialiseTaskLists+0x6c>)
 8007322:	f7fe fa5e 	bl	80057e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007326:	480c      	ldr	r0, [pc, #48]	; (8007358 <prvInitialiseTaskLists+0x70>)
 8007328:	f7fe fa5b 	bl	80057e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800732c:	480b      	ldr	r0, [pc, #44]	; (800735c <prvInitialiseTaskLists+0x74>)
 800732e:	f7fe fa58 	bl	80057e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <prvInitialiseTaskLists+0x78>)
 8007334:	4a05      	ldr	r2, [pc, #20]	; (800734c <prvInitialiseTaskLists+0x64>)
 8007336:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <prvInitialiseTaskLists+0x7c>)
 800733a:	4a05      	ldr	r2, [pc, #20]	; (8007350 <prvInitialiseTaskLists+0x68>)
 800733c:	601a      	str	r2, [r3, #0]
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	200004b4 	.word	0x200004b4
 800734c:	20000540 	.word	0x20000540
 8007350:	20000554 	.word	0x20000554
 8007354:	20000570 	.word	0x20000570
 8007358:	20000584 	.word	0x20000584
 800735c:	2000059c 	.word	0x2000059c
 8007360:	20000568 	.word	0x20000568
 8007364:	2000056c 	.word	0x2000056c

08007368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800736e:	e019      	b.n	80073a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007370:	f000 fbcc 	bl	8007b0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007374:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <prvCheckTasksWaitingTermination+0x4c>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3304      	adds	r3, #4
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fab8 	bl	80058f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007386:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <prvCheckTasksWaitingTermination+0x50>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3b01      	subs	r3, #1
 800738c:	4a0a      	ldr	r2, [pc, #40]	; (80073b8 <prvCheckTasksWaitingTermination+0x50>)
 800738e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <prvCheckTasksWaitingTermination+0x54>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3b01      	subs	r3, #1
 8007396:	4a09      	ldr	r2, [pc, #36]	; (80073bc <prvCheckTasksWaitingTermination+0x54>)
 8007398:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800739a:	f000 fbe5 	bl	8007b68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f80e 	bl	80073c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <prvCheckTasksWaitingTermination+0x54>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e1      	bne.n	8007370 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000584 	.word	0x20000584
 80073b8:	200005b0 	.word	0x200005b0
 80073bc:	20000598 	.word	0x20000598

080073c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d108      	bne.n	80073e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fd74 	bl	8007ec4 <vPortFree>
				vPortFree( pxTCB );
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fd71 	bl	8007ec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073e2:	e017      	b.n	8007414 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d103      	bne.n	80073f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fd68 	bl	8007ec4 <vPortFree>
	}
 80073f4:	e00e      	b.n	8007414 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d009      	beq.n	8007414 <prvDeleteTCB+0x54>
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e7fe      	b.n	8007412 <prvDeleteTCB+0x52>
	}
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007422:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <prvResetNextTaskUnblockTime+0x38>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <prvResetNextTaskUnblockTime+0x3c>)
 800742e:	f04f 32ff 	mov.w	r2, #4294967295
 8007432:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007434:	e008      	b.n	8007448 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007436:	4b07      	ldr	r3, [pc, #28]	; (8007454 <prvResetNextTaskUnblockTime+0x38>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4a04      	ldr	r2, [pc, #16]	; (8007458 <prvResetNextTaskUnblockTime+0x3c>)
 8007446:	6013      	str	r3, [r2, #0]
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20000568 	.word	0x20000568
 8007458:	200005d0 	.word	0x200005d0

0800745c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <xTaskGetSchedulerState+0x34>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d102      	bne.n	8007470 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800746a:	2301      	movs	r3, #1
 800746c:	607b      	str	r3, [r7, #4]
 800746e:	e008      	b.n	8007482 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007470:	4b08      	ldr	r3, [pc, #32]	; (8007494 <xTaskGetSchedulerState+0x38>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007478:	2302      	movs	r3, #2
 800747a:	607b      	str	r3, [r7, #4]
 800747c:	e001      	b.n	8007482 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800747e:	2300      	movs	r3, #0
 8007480:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007482:	687b      	ldr	r3, [r7, #4]
	}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	200005bc 	.word	0x200005bc
 8007494:	200005d8 	.word	0x200005d8

08007498 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d069      	beq.n	8007582 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b2:	4b36      	ldr	r3, [pc, #216]	; (800758c <xTaskPriorityInherit+0xf4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d259      	bcs.n	8007570 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db06      	blt.n	80074d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c4:	4b31      	ldr	r3, [pc, #196]	; (800758c <xTaskPriorityInherit+0xf4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	f1c3 0207 	rsb	r2, r3, #7
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6959      	ldr	r1, [r3, #20]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4a2b      	ldr	r2, [pc, #172]	; (8007590 <xTaskPriorityInherit+0xf8>)
 80074e4:	4413      	add	r3, r2
 80074e6:	4299      	cmp	r1, r3
 80074e8:	d13a      	bne.n	8007560 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	3304      	adds	r3, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fa01 	bl	80058f6 <uxListRemove>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d115      	bne.n	8007526 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	4924      	ldr	r1, [pc, #144]	; (8007590 <xTaskPriorityInherit+0xf8>)
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <xTaskPriorityInherit+0x8e>
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	2201      	movs	r2, #1
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	43da      	mvns	r2, r3
 800751c:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <xTaskPriorityInherit+0xfc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4013      	ands	r3, r2
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <xTaskPriorityInherit+0xfc>)
 8007524:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007526:	4b19      	ldr	r3, [pc, #100]	; (800758c <xTaskPriorityInherit+0xf4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	2201      	movs	r2, #1
 8007536:	409a      	lsls	r2, r3
 8007538:	4b16      	ldr	r3, [pc, #88]	; (8007594 <xTaskPriorityInherit+0xfc>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4313      	orrs	r3, r2
 800753e:	4a15      	ldr	r2, [pc, #84]	; (8007594 <xTaskPriorityInherit+0xfc>)
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4a10      	ldr	r2, [pc, #64]	; (8007590 <xTaskPriorityInherit+0xf8>)
 8007550:	441a      	add	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	3304      	adds	r3, #4
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f7fe f96f 	bl	800583c <vListInsertEnd>
 800755e:	e004      	b.n	800756a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <xTaskPriorityInherit+0xf4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800756a:	2301      	movs	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	e008      	b.n	8007582 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <xTaskPriorityInherit+0xf4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	429a      	cmp	r2, r3
 800757c:	d201      	bcs.n	8007582 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007582:	68fb      	ldr	r3, [r7, #12]
	}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	200004b0 	.word	0x200004b0
 8007590:	200004b4 	.word	0x200004b4
 8007594:	200005b8 	.word	0x200005b8

08007598 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d06c      	beq.n	8007688 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075ae:	4b39      	ldr	r3, [pc, #228]	; (8007694 <xTaskPriorityDisinherit+0xfc>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d009      	beq.n	80075cc <xTaskPriorityDisinherit+0x34>
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	e7fe      	b.n	80075ca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d109      	bne.n	80075e8 <xTaskPriorityDisinherit+0x50>
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	e7fe      	b.n	80075e6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ec:	1e5a      	subs	r2, r3, #1
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d044      	beq.n	8007688 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007602:	2b00      	cmp	r3, #0
 8007604:	d140      	bne.n	8007688 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	3304      	adds	r3, #4
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe f973 	bl	80058f6 <uxListRemove>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d115      	bne.n	8007642 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761a:	491f      	ldr	r1, [pc, #124]	; (8007698 <xTaskPriorityDisinherit+0x100>)
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xTaskPriorityDisinherit+0xaa>
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	2201      	movs	r2, #1
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	43da      	mvns	r2, r3
 8007638:	4b18      	ldr	r3, [pc, #96]	; (800769c <xTaskPriorityDisinherit+0x104>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4013      	ands	r3, r2
 800763e:	4a17      	ldr	r2, [pc, #92]	; (800769c <xTaskPriorityDisinherit+0x104>)
 8007640:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	f1c3 0207 	rsb	r2, r3, #7
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	2201      	movs	r2, #1
 800765c:	409a      	lsls	r2, r3
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <xTaskPriorityDisinherit+0x104>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4313      	orrs	r3, r2
 8007664:	4a0d      	ldr	r2, [pc, #52]	; (800769c <xTaskPriorityDisinherit+0x104>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4a08      	ldr	r2, [pc, #32]	; (8007698 <xTaskPriorityDisinherit+0x100>)
 8007676:	441a      	add	r2, r3
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe f8dc 	bl	800583c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007684:	2301      	movs	r3, #1
 8007686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007688:	697b      	ldr	r3, [r7, #20]
	}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200004b0 	.word	0x200004b0
 8007698:	200004b4 	.word	0x200004b4
 800769c:	200005b8 	.word	0x200005b8

080076a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80076ae:	2301      	movs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 8081 	beq.w	80077bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e7fe      	b.n	80076d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d902      	bls.n	80076e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	e002      	b.n	80076ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d062      	beq.n	80077bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d15d      	bne.n	80077bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007700:	4b30      	ldr	r3, [pc, #192]	; (80077c4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	429a      	cmp	r2, r3
 8007708:	d109      	bne.n	800771e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	60bb      	str	r3, [r7, #8]
 800771c:	e7fe      	b.n	800771c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	db04      	blt.n	800773c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f1c3 0207 	rsb	r2, r3, #7
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	6959      	ldr	r1, [r3, #20]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4a1f      	ldr	r2, [pc, #124]	; (80077c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800774c:	4413      	add	r3, r2
 800774e:	4299      	cmp	r1, r3
 8007750:	d134      	bne.n	80077bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	3304      	adds	r3, #4
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe f8cd 	bl	80058f6 <uxListRemove>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d115      	bne.n	800778e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	4918      	ldr	r1, [pc, #96]	; (80077c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	2201      	movs	r2, #1
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	43da      	mvns	r2, r3
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4013      	ands	r3, r2
 800778a:	4a10      	ldr	r2, [pc, #64]	; (80077cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800778c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	2201      	movs	r2, #1
 8007794:	409a      	lsls	r2, r3
 8007796:	4b0d      	ldr	r3, [pc, #52]	; (80077cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4313      	orrs	r3, r2
 800779c:	4a0b      	ldr	r2, [pc, #44]	; (80077cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4a06      	ldr	r2, [pc, #24]	; (80077c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80077ae:	441a      	add	r2, r3
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7fe f840 	bl	800583c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077bc:	bf00      	nop
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200004b0 	.word	0x200004b0
 80077c8:	200004b4 	.word	0x200004b4
 80077cc:	200005b8 	.word	0x200005b8

080077d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077d4:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077dc:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077e2:	3201      	adds	r2, #1
 80077e4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80077e6:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80077e8:	681b      	ldr	r3, [r3, #0]
	}
 80077ea:	4618      	mov	r0, r3
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	200004b0 	.word	0x200004b0

080077f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007802:	4b29      	ldr	r3, [pc, #164]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007808:	4b28      	ldr	r3, [pc, #160]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3304      	adds	r3, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe f871 	bl	80058f6 <uxListRemove>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800781a:	4b24      	ldr	r3, [pc, #144]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	2201      	movs	r2, #1
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	43da      	mvns	r2, r3
 8007828:	4b21      	ldr	r3, [pc, #132]	; (80078b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4013      	ands	r3, r2
 800782e:	4a20      	ldr	r2, [pc, #128]	; (80078b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007830:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d10a      	bne.n	8007850 <prvAddCurrentTaskToDelayedList+0x58>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007840:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3304      	adds	r3, #4
 8007846:	4619      	mov	r1, r3
 8007848:	481a      	ldr	r0, [pc, #104]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800784a:	f7fd fff7 	bl	800583c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800784e:	e026      	b.n	800789e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007858:	4b14      	ldr	r3, [pc, #80]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	429a      	cmp	r2, r3
 8007866:	d209      	bcs.n	800787c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007868:	4b13      	ldr	r3, [pc, #76]	; (80078b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3304      	adds	r3, #4
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f7fe f805 	bl	8005884 <vListInsert>
}
 800787a:	e010      	b.n	800789e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800787c:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f7fd fffb 	bl	8005884 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	429a      	cmp	r2, r3
 8007896:	d202      	bcs.n	800789e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007898:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6013      	str	r3, [r2, #0]
}
 800789e:	bf00      	nop
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200005b4 	.word	0x200005b4
 80078ac:	200004b0 	.word	0x200004b0
 80078b0:	200005b8 	.word	0x200005b8
 80078b4:	2000059c 	.word	0x2000059c
 80078b8:	2000056c 	.word	0x2000056c
 80078bc:	20000568 	.word	0x20000568
 80078c0:	200005d0 	.word	0x200005d0

080078c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3b04      	subs	r3, #4
 80078d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3b04      	subs	r3, #4
 80078e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f023 0201 	bic.w	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b04      	subs	r3, #4
 80078f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078f4:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <pxPortInitialiseStack+0x64>)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3b14      	subs	r3, #20
 80078fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3b04      	subs	r3, #4
 800790a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f06f 0202 	mvn.w	r2, #2
 8007912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3b20      	subs	r3, #32
 8007918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800791a:	68fb      	ldr	r3, [r7, #12]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	0800792d 	.word	0x0800792d

0800792c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007936:	4b11      	ldr	r3, [pc, #68]	; (800797c <prvTaskExitError+0x50>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d009      	beq.n	8007954 <prvTaskExitError+0x28>
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	e7fe      	b.n	8007952 <prvTaskExitError+0x26>
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007966:	bf00      	nop
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0fc      	beq.n	8007968 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800796e:	bf00      	nop
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	2000000c 	.word	0x2000000c

08007980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <pxCurrentTCBConst2>)
 8007982:	6819      	ldr	r1, [r3, #0]
 8007984:	6808      	ldr	r0, [r1, #0]
 8007986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	f380 8809 	msr	PSP, r0
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f380 8811 	msr	BASEPRI, r0
 800799a:	4770      	bx	lr
 800799c:	f3af 8000 	nop.w

080079a0 <pxCurrentTCBConst2>:
 80079a0:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop

080079a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079a8:	4808      	ldr	r0, [pc, #32]	; (80079cc <prvPortStartFirstTask+0x24>)
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	6800      	ldr	r0, [r0, #0]
 80079ae:	f380 8808 	msr	MSP, r0
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8814 	msr	CONTROL, r0
 80079ba:	b662      	cpsie	i
 80079bc:	b661      	cpsie	f
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	df00      	svc	0
 80079c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ca:	bf00      	nop
 80079cc:	e000ed08 	.word	0xe000ed08

080079d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079d6:	4b44      	ldr	r3, [pc, #272]	; (8007ae8 <xPortStartScheduler+0x118>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a44      	ldr	r2, [pc, #272]	; (8007aec <xPortStartScheduler+0x11c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d109      	bne.n	80079f4 <xPortStartScheduler+0x24>
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	e7fe      	b.n	80079f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079f4:	4b3c      	ldr	r3, [pc, #240]	; (8007ae8 <xPortStartScheduler+0x118>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a3d      	ldr	r2, [pc, #244]	; (8007af0 <xPortStartScheduler+0x120>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d109      	bne.n	8007a12 <xPortStartScheduler+0x42>
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e7fe      	b.n	8007a10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a12:	4b38      	ldr	r3, [pc, #224]	; (8007af4 <xPortStartScheduler+0x124>)
 8007a14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	22ff      	movs	r2, #255	; 0xff
 8007a22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	4b30      	ldr	r3, [pc, #192]	; (8007af8 <xPortStartScheduler+0x128>)
 8007a38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a3a:	4b30      	ldr	r3, [pc, #192]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a3c:	2207      	movs	r2, #7
 8007a3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a40:	e009      	b.n	8007a56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007a42:	4b2e      	ldr	r3, [pc, #184]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4a2c      	ldr	r2, [pc, #176]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5e:	2b80      	cmp	r3, #128	; 0x80
 8007a60:	d0ef      	beq.n	8007a42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a62:	4b26      	ldr	r3, [pc, #152]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f1c3 0307 	rsb	r3, r3, #7
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d009      	beq.n	8007a82 <xPortStartScheduler+0xb2>
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	60bb      	str	r3, [r7, #8]
 8007a80:	e7fe      	b.n	8007a80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a82:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	4a1c      	ldr	r2, [pc, #112]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a8c:	4b1b      	ldr	r3, [pc, #108]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a94:	4a19      	ldr	r2, [pc, #100]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007aa0:	4b17      	ldr	r3, [pc, #92]	; (8007b00 <xPortStartScheduler+0x130>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a16      	ldr	r2, [pc, #88]	; (8007b00 <xPortStartScheduler+0x130>)
 8007aa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007aaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007aac:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <xPortStartScheduler+0x130>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <xPortStartScheduler+0x130>)
 8007ab2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ab6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ab8:	f000 f8d6 	bl	8007c68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007abc:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <xPortStartScheduler+0x134>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ac2:	f000 f8f5 	bl	8007cb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ac6:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <xPortStartScheduler+0x138>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a0f      	ldr	r2, [pc, #60]	; (8007b08 <xPortStartScheduler+0x138>)
 8007acc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ad0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ad2:	f7ff ff69 	bl	80079a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ad6:	f7ff fa8d 	bl	8006ff4 <vTaskSwitchContext>
	prvTaskExitError();
 8007ada:	f7ff ff27 	bl	800792c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	e000ed00 	.word	0xe000ed00
 8007aec:	410fc271 	.word	0x410fc271
 8007af0:	410fc270 	.word	0x410fc270
 8007af4:	e000e400 	.word	0xe000e400
 8007af8:	200005dc 	.word	0x200005dc
 8007afc:	200005e0 	.word	0x200005e0
 8007b00:	e000ed20 	.word	0xe000ed20
 8007b04:	2000000c 	.word	0x2000000c
 8007b08:	e000ef34 	.word	0xe000ef34

08007b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b24:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <vPortEnterCritical+0x54>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	4a0d      	ldr	r2, [pc, #52]	; (8007b60 <vPortEnterCritical+0x54>)
 8007b2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <vPortEnterCritical+0x54>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d10e      	bne.n	8007b54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b36:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <vPortEnterCritical+0x58>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <vPortEnterCritical+0x48>
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	603b      	str	r3, [r7, #0]
 8007b52:	e7fe      	b.n	8007b52 <vPortEnterCritical+0x46>
	}
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	2000000c 	.word	0x2000000c
 8007b64:	e000ed04 	.word	0xe000ed04

08007b68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b6e:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <vPortExitCritical+0x4c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <vPortExitCritical+0x22>
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	e7fe      	b.n	8007b88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <vPortExitCritical+0x4c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <vPortExitCritical+0x4c>)
 8007b92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <vPortExitCritical+0x4c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d104      	bne.n	8007ba6 <vPortExitCritical+0x3e>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	2000000c 	.word	0x2000000c
	...

08007bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bc0:	f3ef 8009 	mrs	r0, PSP
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <pxCurrentTCBConst>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	f01e 0f10 	tst.w	lr, #16
 8007bd0:	bf08      	it	eq
 8007bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	6010      	str	r0, [r2, #0]
 8007bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007be4:	f380 8811 	msr	BASEPRI, r0
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f7ff fa00 	bl	8006ff4 <vTaskSwitchContext>
 8007bf4:	f04f 0000 	mov.w	r0, #0
 8007bf8:	f380 8811 	msr	BASEPRI, r0
 8007bfc:	bc09      	pop	{r0, r3}
 8007bfe:	6819      	ldr	r1, [r3, #0]
 8007c00:	6808      	ldr	r0, [r1, #0]
 8007c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c06:	f01e 0f10 	tst.w	lr, #16
 8007c0a:	bf08      	it	eq
 8007c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c10:	f380 8809 	msr	PSP, r0
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst>:
 8007c20:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c40:	f7ff f920 	bl	8006e84 <xTaskIncrementTick>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c4a:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <SysTick_Handler+0x3c>)
 8007c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	2300      	movs	r3, #0
 8007c54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <vPortSetupTimerInterrupt+0x34>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c72:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <vPortSetupTimerInterrupt+0x38>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <vPortSetupTimerInterrupt+0x3c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <vPortSetupTimerInterrupt+0x40>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	099b      	lsrs	r3, r3, #6
 8007c84:	4a09      	ldr	r2, [pc, #36]	; (8007cac <vPortSetupTimerInterrupt+0x44>)
 8007c86:	3b01      	subs	r3, #1
 8007c88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c8a:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <vPortSetupTimerInterrupt+0x34>)
 8007c8c:	2207      	movs	r2, #7
 8007c8e:	601a      	str	r2, [r3, #0]
}
 8007c90:	bf00      	nop
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	e000e010 	.word	0xe000e010
 8007ca0:	e000e018 	.word	0xe000e018
 8007ca4:	20000000 	.word	0x20000000
 8007ca8:	10624dd3 	.word	0x10624dd3
 8007cac:	e000e014 	.word	0xe000e014

08007cb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cc0 <vPortEnableVFP+0x10>
 8007cb4:	6801      	ldr	r1, [r0, #0]
 8007cb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cba:	6001      	str	r1, [r0, #0]
 8007cbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cbe:	bf00      	nop
 8007cc0:	e000ed88 	.word	0xe000ed88

08007cc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cca:	f3ef 8305 	mrs	r3, IPSR
 8007cce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b0f      	cmp	r3, #15
 8007cd4:	d913      	bls.n	8007cfe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cd6:	4a16      	ldr	r2, [pc, #88]	; (8007d30 <vPortValidateInterruptPriority+0x6c>)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ce0:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <vPortValidateInterruptPriority+0x70>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	7afa      	ldrb	r2, [r7, #11]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d209      	bcs.n	8007cfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	607b      	str	r3, [r7, #4]
 8007cfc:	e7fe      	b.n	8007cfc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cfe:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <vPortValidateInterruptPriority+0x74>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d06:	4b0d      	ldr	r3, [pc, #52]	; (8007d3c <vPortValidateInterruptPriority+0x78>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d909      	bls.n	8007d22 <vPortValidateInterruptPriority+0x5e>
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	e7fe      	b.n	8007d20 <vPortValidateInterruptPriority+0x5c>
	}
 8007d22:	bf00      	nop
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	e000e3f0 	.word	0xe000e3f0
 8007d34:	200005dc 	.word	0x200005dc
 8007d38:	e000ed0c 	.word	0xe000ed0c
 8007d3c:	200005e0 	.word	0x200005e0

08007d40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08a      	sub	sp, #40	; 0x28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d4c:	f7fe ffce 	bl	8006cec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d50:	4b57      	ldr	r3, [pc, #348]	; (8007eb0 <pvPortMalloc+0x170>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d58:	f000 f90c 	bl	8007f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d5c:	4b55      	ldr	r3, [pc, #340]	; (8007eb4 <pvPortMalloc+0x174>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4013      	ands	r3, r2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 808c 	bne.w	8007e82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01c      	beq.n	8007daa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007d70:	2208      	movs	r2, #8
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4413      	add	r3, r2
 8007d76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d013      	beq.n	8007daa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f023 0307 	bic.w	r3, r3, #7
 8007d88:	3308      	adds	r3, #8
 8007d8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <pvPortMalloc+0x6a>
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e7fe      	b.n	8007da8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d068      	beq.n	8007e82 <pvPortMalloc+0x142>
 8007db0:	4b41      	ldr	r3, [pc, #260]	; (8007eb8 <pvPortMalloc+0x178>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d863      	bhi.n	8007e82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dba:	4b40      	ldr	r3, [pc, #256]	; (8007ebc <pvPortMalloc+0x17c>)
 8007dbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dbe:	4b3f      	ldr	r3, [pc, #252]	; (8007ebc <pvPortMalloc+0x17c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dc4:	e004      	b.n	8007dd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d903      	bls.n	8007de2 <pvPortMalloc+0xa2>
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1f1      	bne.n	8007dc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007de2:	4b33      	ldr	r3, [pc, #204]	; (8007eb0 <pvPortMalloc+0x170>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d04a      	beq.n	8007e82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2208      	movs	r2, #8
 8007df2:	4413      	add	r3, r2
 8007df4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	1ad2      	subs	r2, r2, r3
 8007e06:	2308      	movs	r3, #8
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d91e      	bls.n	8007e4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4413      	add	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <pvPortMalloc+0xf4>
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	e7fe      	b.n	8007e32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	1ad2      	subs	r2, r2, r3
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e46:	69b8      	ldr	r0, [r7, #24]
 8007e48:	f000 f8f6 	bl	8008038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e4c:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <pvPortMalloc+0x178>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <pvPortMalloc+0x178>)
 8007e58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e5a:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <pvPortMalloc+0x178>)
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b18      	ldr	r3, [pc, #96]	; (8007ec0 <pvPortMalloc+0x180>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d203      	bcs.n	8007e6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <pvPortMalloc+0x178>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <pvPortMalloc+0x180>)
 8007e6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <pvPortMalloc+0x174>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e82:	f7fe ff41 	bl	8006d08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <pvPortMalloc+0x164>
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e7fe      	b.n	8007ea2 <pvPortMalloc+0x162>
	return pvReturn;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3728      	adds	r7, #40	; 0x28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	200085ec 	.word	0x200085ec
 8007eb4:	200085f8 	.word	0x200085f8
 8007eb8:	200085f0 	.word	0x200085f0
 8007ebc:	200085e4 	.word	0x200085e4
 8007ec0:	200085f4 	.word	0x200085f4

08007ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d046      	beq.n	8007f64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ed6:	2308      	movs	r3, #8
 8007ed8:	425b      	negs	r3, r3
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4413      	add	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <vPortFree+0xa8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4013      	ands	r3, r2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <vPortFree+0x42>
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e7fe      	b.n	8007f04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <vPortFree+0x5e>
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60bb      	str	r3, [r7, #8]
 8007f20:	e7fe      	b.n	8007f20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <vPortFree+0xa8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d019      	beq.n	8007f64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d115      	bne.n	8007f64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <vPortFree+0xa8>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	401a      	ands	r2, r3
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f48:	f7fe fed0 	bl	8006cec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <vPortFree+0xac>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4413      	add	r3, r2
 8007f56:	4a06      	ldr	r2, [pc, #24]	; (8007f70 <vPortFree+0xac>)
 8007f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	f000 f86c 	bl	8008038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f60:	f7fe fed2 	bl	8006d08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f64:	bf00      	nop
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200085f8 	.word	0x200085f8
 8007f70:	200085f0 	.word	0x200085f0

08007f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f80:	4b27      	ldr	r3, [pc, #156]	; (8008020 <prvHeapInit+0xac>)
 8007f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00c      	beq.n	8007fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3307      	adds	r3, #7
 8007f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 0307 	bic.w	r3, r3, #7
 8007f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <prvHeapInit+0xac>)
 8007fa4:	4413      	add	r3, r2
 8007fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fac:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <prvHeapInit+0xb0>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <prvHeapInit+0xb0>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0307 	bic.w	r3, r3, #7
 8007fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a15      	ldr	r2, [pc, #84]	; (8008028 <prvHeapInit+0xb4>)
 8007fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <prvHeapInit+0xb4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fde:	4b12      	ldr	r3, [pc, #72]	; (8008028 <prvHeapInit+0xb4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	1ad2      	subs	r2, r2, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ff4:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <prvHeapInit+0xb4>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	4a0a      	ldr	r2, [pc, #40]	; (800802c <prvHeapInit+0xb8>)
 8008002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	4a09      	ldr	r2, [pc, #36]	; (8008030 <prvHeapInit+0xbc>)
 800800a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <prvHeapInit+0xc0>)
 800800e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008012:	601a      	str	r2, [r3, #0]
}
 8008014:	bf00      	nop
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	200005e4 	.word	0x200005e4
 8008024:	200085e4 	.word	0x200085e4
 8008028:	200085ec 	.word	0x200085ec
 800802c:	200085f4 	.word	0x200085f4
 8008030:	200085f0 	.word	0x200085f0
 8008034:	200085f8 	.word	0x200085f8

08008038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008040:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <prvInsertBlockIntoFreeList+0xac>)
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	e002      	b.n	800804c <prvInsertBlockIntoFreeList+0x14>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d8f7      	bhi.n	8008046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	4413      	add	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	429a      	cmp	r2, r3
 8008066:	d108      	bne.n	800807a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	441a      	add	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	441a      	add	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d118      	bne.n	80080c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d00d      	beq.n	80080b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	441a      	add	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e008      	b.n	80080c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080b6:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <prvInsertBlockIntoFreeList+0xb0>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	e003      	b.n	80080c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d002      	beq.n	80080d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080d6:	bf00      	nop
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	200085e4 	.word	0x200085e4
 80080e8:	200085ec 	.word	0x200085ec

080080ec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	330c      	adds	r3, #12
 80080fc:	461a      	mov	r2, r3
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f002 fa99 	bl	800a638 <tcpip_send_msg_wait_sem>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800810a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008118:	e001      	b.n	800811e <netconn_apimsg+0x32>
  }
  return err;
 800811a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08c      	sub	sp, #48	; 0x30
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	603a      	str	r2, [r7, #0]
 8008132:	71fb      	strb	r3, [r7, #7]
 8008134:	460b      	mov	r3, r1
 8008136:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f001 f91f 	bl	8009380 <netconn_alloc>
 8008142:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d054      	beq.n	80081f4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800814a:	79bb      	ldrb	r3, [r7, #6]
 800814c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008152:	f107 0308 	add.w	r3, r7, #8
 8008156:	4619      	mov	r1, r3
 8008158:	4829      	ldr	r0, [pc, #164]	; (8008200 <netconn_new_with_proto_and_callback+0xd8>)
 800815a:	f7ff ffc7 	bl	80080ec <netconn_apimsg>
 800815e:	4603      	mov	r3, r0
 8008160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008164:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008168:	2b00      	cmp	r3, #0
 800816a:	d043      	beq.n	80081f4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <netconn_new_with_proto_and_callback+0x58>
 8008174:	4b23      	ldr	r3, [pc, #140]	; (8008204 <netconn_new_with_proto_and_callback+0xdc>)
 8008176:	22a3      	movs	r2, #163	; 0xa3
 8008178:	4923      	ldr	r1, [pc, #140]	; (8008208 <netconn_new_with_proto_and_callback+0xe0>)
 800817a:	4824      	ldr	r0, [pc, #144]	; (800820c <netconn_new_with_proto_and_callback+0xe4>)
 800817c:	f00f fbbe 	bl	80178fc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	3310      	adds	r3, #16
 8008184:	4618      	mov	r0, r3
 8008186:	f00f fa00 	bl	801758a <sys_mbox_valid>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d105      	bne.n	800819c <netconn_new_with_proto_and_callback+0x74>
 8008190:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <netconn_new_with_proto_and_callback+0xdc>)
 8008192:	22a4      	movs	r2, #164	; 0xa4
 8008194:	491e      	ldr	r1, [pc, #120]	; (8008210 <netconn_new_with_proto_and_callback+0xe8>)
 8008196:	481d      	ldr	r0, [pc, #116]	; (800820c <netconn_new_with_proto_and_callback+0xe4>)
 8008198:	f00f fbb0 	bl	80178fc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	3314      	adds	r3, #20
 80081a0:	4618      	mov	r0, r3
 80081a2:	f00f f9f2 	bl	801758a <sys_mbox_valid>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <netconn_new_with_proto_and_callback+0x90>
 80081ac:	4b15      	ldr	r3, [pc, #84]	; (8008204 <netconn_new_with_proto_and_callback+0xdc>)
 80081ae:	22a6      	movs	r2, #166	; 0xa6
 80081b0:	4918      	ldr	r1, [pc, #96]	; (8008214 <netconn_new_with_proto_and_callback+0xec>)
 80081b2:	4816      	ldr	r0, [pc, #88]	; (800820c <netconn_new_with_proto_and_callback+0xe4>)
 80081b4:	f00f fba2 	bl	80178fc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	330c      	adds	r3, #12
 80081bc:	4618      	mov	r0, r3
 80081be:	f00f fa75 	bl	80176ac <sys_sem_valid>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d105      	bne.n	80081d4 <netconn_new_with_proto_and_callback+0xac>
 80081c8:	4b0e      	ldr	r3, [pc, #56]	; (8008204 <netconn_new_with_proto_and_callback+0xdc>)
 80081ca:	22a9      	movs	r2, #169	; 0xa9
 80081cc:	4912      	ldr	r1, [pc, #72]	; (8008218 <netconn_new_with_proto_and_callback+0xf0>)
 80081ce:	480f      	ldr	r0, [pc, #60]	; (800820c <netconn_new_with_proto_and_callback+0xe4>)
 80081d0:	f00f fb94 	bl	80178fc <iprintf>
      sys_sem_free(&conn->op_completed);
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	330c      	adds	r3, #12
 80081d8:	4618      	mov	r0, r3
 80081da:	f00f fa5a 	bl	8017692 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	3310      	adds	r3, #16
 80081e2:	4618      	mov	r0, r3
 80081e4:	f00f f94a 	bl	801747c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80081e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081ea:	2007      	movs	r0, #7
 80081ec:	f002 ff8c 	bl	800b108 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	e000      	b.n	80081f6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80081f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3730      	adds	r7, #48	; 0x30
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	08009355 	.word	0x08009355
 8008204:	08018d94 	.word	0x08018d94
 8008208:	08018dc8 	.word	0x08018dc8
 800820c:	08018dec 	.word	0x08018dec
 8008210:	08018e14 	.word	0x08018e14
 8008214:	08018e2c 	.word	0x08018e2c
 8008218:	08018e50 	.word	0x08018e50

0800821c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08c      	sub	sp, #48	; 0x30
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	e014      	b.n	8008258 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008232:	2329      	movs	r3, #41	; 0x29
 8008234:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008236:	f107 030c 	add.w	r3, r7, #12
 800823a:	4619      	mov	r1, r3
 800823c:	4808      	ldr	r0, [pc, #32]	; (8008260 <netconn_prepare_delete+0x44>)
 800823e:	f7ff ff55 	bl	80080ec <netconn_apimsg>
 8008242:	4603      	mov	r3, r0
 8008244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008248:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <netconn_prepare_delete+0x3a>
    return err;
 8008250:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008254:	e000      	b.n	8008258 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3730      	adds	r7, #48	; 0x30
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	080098b9 	.word	0x080098b9

08008264 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <netconn_delete+0x12>
    return ERR_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	e00d      	b.n	8008292 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff ffd0 	bl	800821c <netconn_prepare_delete>
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d102      	bne.n	800828e <netconn_delete+0x2a>
    netconn_free(conn);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 f8e7 	bl	800945c <netconn_free>
  }
  return err;
 800828e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08e      	sub	sp, #56	; 0x38
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <netconn_bind+0x28>
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <netconn_bind+0x5c>)
 80082b2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80082b6:	4911      	ldr	r1, [pc, #68]	; (80082fc <netconn_bind+0x60>)
 80082b8:	4811      	ldr	r0, [pc, #68]	; (8008300 <netconn_bind+0x64>)
 80082ba:	f00f fb1f 	bl	80178fc <iprintf>
 80082be:	f06f 030f 	mvn.w	r3, #15
 80082c2:	e015      	b.n	80082f0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80082ca:	4b0e      	ldr	r3, [pc, #56]	; (8008304 <netconn_bind+0x68>)
 80082cc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80082d6:	88fb      	ldrh	r3, [r7, #6]
 80082d8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	4619      	mov	r1, r3
 80082e0:	4809      	ldr	r0, [pc, #36]	; (8008308 <netconn_bind+0x6c>)
 80082e2:	f7ff ff03 	bl	80080ec <netconn_apimsg>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80082ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3738      	adds	r7, #56	; 0x38
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	08018d94 	.word	0x08018d94
 80082fc:	08018ecc 	.word	0x08018ecc
 8008300:	08018dec 	.word	0x08018dec
 8008304:	0801c740 	.word	0x0801c740
 8008308:	08009a81 	.word	0x08009a81

0800830c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08c      	sub	sp, #48	; 0x30
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <netconn_listen_with_backlog+0x26>
 800831e:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <netconn_listen_with_backlog+0x48>)
 8008320:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008324:	490c      	ldr	r1, [pc, #48]	; (8008358 <netconn_listen_with_backlog+0x4c>)
 8008326:	480d      	ldr	r0, [pc, #52]	; (800835c <netconn_listen_with_backlog+0x50>)
 8008328:	f00f fae8 	bl	80178fc <iprintf>
 800832c:	f06f 030f 	mvn.w	r3, #15
 8008330:	e00c      	b.n	800834c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008336:	f107 030c 	add.w	r3, r7, #12
 800833a:	4619      	mov	r1, r3
 800833c:	4808      	ldr	r0, [pc, #32]	; (8008360 <netconn_listen_with_backlog+0x54>)
 800833e:	f7ff fed5 	bl	80080ec <netconn_apimsg>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008348:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800834c:	4618      	mov	r0, r3
 800834e:	3730      	adds	r7, #48	; 0x30
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	08018d94 	.word	0x08018d94
 8008358:	08018f4c 	.word	0x08018f4c
 800835c:	08018dec 	.word	0x08018dec
 8008360:	08009af9 	.word	0x08009af9

08008364 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <netconn_accept+0x24>
 8008374:	4b3d      	ldr	r3, [pc, #244]	; (800846c <netconn_accept+0x108>)
 8008376:	f240 12e1 	movw	r2, #481	; 0x1e1
 800837a:	493d      	ldr	r1, [pc, #244]	; (8008470 <netconn_accept+0x10c>)
 800837c:	483d      	ldr	r0, [pc, #244]	; (8008474 <netconn_accept+0x110>)
 800837e:	f00f fabd 	bl	80178fc <iprintf>
 8008382:	f06f 030f 	mvn.w	r3, #15
 8008386:	e06c      	b.n	8008462 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <netconn_accept+0x44>
 8008394:	4b35      	ldr	r3, [pc, #212]	; (800846c <netconn_accept+0x108>)
 8008396:	f240 12e3 	movw	r2, #483	; 0x1e3
 800839a:	4937      	ldr	r1, [pc, #220]	; (8008478 <netconn_accept+0x114>)
 800839c:	4835      	ldr	r0, [pc, #212]	; (8008474 <netconn_accept+0x110>)
 800839e:	f00f faad 	bl	80178fc <iprintf>
 80083a2:	f06f 030f 	mvn.w	r3, #15
 80083a6:	e05c      	b.n	8008462 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fb6c 	bl	8008a86 <netconn_err>
 80083ae:	4603      	mov	r3, r0
 80083b0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80083b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80083ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083be:	e050      	b.n	8008462 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3314      	adds	r3, #20
 80083c4:	4618      	mov	r0, r3
 80083c6:	f00f f8e0 	bl	801758a <sys_mbox_valid>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <netconn_accept+0x78>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	7f1b      	ldrb	r3, [r3, #28]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80083dc:	f06f 030e 	mvn.w	r3, #14
 80083e0:	e03f      	b.n	8008462 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7f1b      	ldrb	r3, [r3, #28]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00e      	beq.n	800840c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3314      	adds	r3, #20
 80083f2:	f107 020c 	add.w	r2, r7, #12
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f00f f8aa 	bl	8017552 <sys_arch_mbox_tryfetch>
 80083fe:	4603      	mov	r3, r0
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008404:	d10a      	bne.n	800841c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008406:	f06f 0306 	mvn.w	r3, #6
 800840a:	e02a      	b.n	8008462 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3314      	adds	r3, #20
 8008410:	f107 010c 	add.w	r1, r7, #12
 8008414:	2200      	movs	r2, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f00f f85c 	bl	80174d4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <netconn_accept+0xcc>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	2200      	movs	r2, #0
 800842a:	2101      	movs	r1, #1
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f107 0213 	add.w	r2, r7, #19
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fb71 	bl	8008b20 <lwip_netconn_is_err_msg>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008444:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008448:	e00b      	b.n	8008462 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008450:	f06f 030e 	mvn.w	r3, #14
 8008454:	e005      	b.n	8008462 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008460:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	08018d94 	.word	0x08018d94
 8008470:	08018f6c 	.word	0x08018f6c
 8008474:	08018dec 	.word	0x08018dec
 8008478:	08018f8c 	.word	0x08018f8c

0800847c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d109      	bne.n	80084a8 <netconn_recv_data+0x2c>
 8008494:	4b58      	ldr	r3, [pc, #352]	; (80085f8 <netconn_recv_data+0x17c>)
 8008496:	f44f 7212 	mov.w	r2, #584	; 0x248
 800849a:	4958      	ldr	r1, [pc, #352]	; (80085fc <netconn_recv_data+0x180>)
 800849c:	4858      	ldr	r0, [pc, #352]	; (8008600 <netconn_recv_data+0x184>)
 800849e:	f00f fa2d 	bl	80178fc <iprintf>
 80084a2:	f06f 030f 	mvn.w	r3, #15
 80084a6:	e0a2      	b.n	80085ee <netconn_recv_data+0x172>
  *new_buf = NULL;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <netconn_recv_data+0x4c>
 80084b4:	4b50      	ldr	r3, [pc, #320]	; (80085f8 <netconn_recv_data+0x17c>)
 80084b6:	f240 224a 	movw	r2, #586	; 0x24a
 80084ba:	4952      	ldr	r1, [pc, #328]	; (8008604 <netconn_recv_data+0x188>)
 80084bc:	4850      	ldr	r0, [pc, #320]	; (8008600 <netconn_recv_data+0x184>)
 80084be:	f00f fa1d 	bl	80178fc <iprintf>
 80084c2:	f06f 030f 	mvn.w	r3, #15
 80084c6:	e092      	b.n	80085ee <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3310      	adds	r3, #16
 80084cc:	4618      	mov	r0, r3
 80084ce:	f00f f85c 	bl	801758a <sys_mbox_valid>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10e      	bne.n	80084f6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fad4 	bl	8008a86 <netconn_err>
 80084de:	4603      	mov	r3, r0
 80084e0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80084e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80084ea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80084ee:	e07e      	b.n	80085ee <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80084f0:	f06f 030a 	mvn.w	r3, #10
 80084f4:	e07b      	b.n	80085ee <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	7f1b      	ldrb	r3, [r3, #28]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10f      	bne.n	8008522 <netconn_recv_data+0xa6>
 8008502:	79fb      	ldrb	r3, [r7, #7]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	7f1b      	ldrb	r3, [r3, #28]
 8008510:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008514:	2b00      	cmp	r3, #0
 8008516:	d104      	bne.n	8008522 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d023      	beq.n	800856a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3310      	adds	r3, #16
 8008526:	f107 0218 	add.w	r2, r7, #24
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f00f f810 	bl	8017552 <sys_arch_mbox_tryfetch>
 8008532:	4603      	mov	r3, r0
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d11f      	bne.n	800857a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 faa3 	bl	8008a86 <netconn_err>
 8008540:	4603      	mov	r3, r0
 8008542:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008544:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800854c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008550:	e04d      	b.n	80085ee <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	7f1b      	ldrb	r3, [r3, #28]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800855e:	f06f 030a 	mvn.w	r3, #10
 8008562:	e044      	b.n	80085ee <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008564:	f06f 0306 	mvn.w	r3, #6
 8008568:	e041      	b.n	80085ee <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3310      	adds	r3, #16
 800856e:	f107 0118 	add.w	r1, r7, #24
 8008572:	2200      	movs	r2, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f00e ffad 	bl	80174d4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008582:	2b10      	cmp	r3, #16
 8008584:	d117      	bne.n	80085b6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f107 0217 	add.w	r2, r7, #23
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fac6 	bl	8008b20 <lwip_netconn_is_err_msg>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800859a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800859e:	f113 0f0f 	cmn.w	r3, #15
 80085a2:	d101      	bne.n	80085a8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e022      	b.n	80085ee <netconn_recv_data+0x172>
      }
      return err;
 80085a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085ac:	e01f      	b.n	80085ee <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	891b      	ldrh	r3, [r3, #8]
 80085b2:	83fb      	strh	r3, [r7, #30]
 80085b4:	e00d      	b.n	80085d2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d106      	bne.n	80085ca <netconn_recv_data+0x14e>
 80085bc:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <netconn_recv_data+0x17c>)
 80085be:	f240 2291 	movw	r2, #657	; 0x291
 80085c2:	4911      	ldr	r1, [pc, #68]	; (8008608 <netconn_recv_data+0x18c>)
 80085c4:	480e      	ldr	r0, [pc, #56]	; (8008600 <netconn_recv_data+0x184>)
 80085c6:	f00f f999 	bl	80178fc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	891b      	ldrh	r3, [r3, #8]
 80085d0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <netconn_recv_data+0x16a>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	8bfa      	ldrh	r2, [r7, #30]
 80085e0:	2101      	movs	r1, #1
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	08018d94 	.word	0x08018d94
 80085fc:	08018fac 	.word	0x08018fac
 8008600:	08018dec 	.word	0x08018dec
 8008604:	08018fcc 	.word	0x08018fcc
 8008608:	08018fe8 	.word	0x08018fe8

0800860c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d005      	beq.n	800862a <netconn_tcp_recvd_msg+0x1e>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008626:	2b10      	cmp	r3, #16
 8008628:	d009      	beq.n	800863e <netconn_tcp_recvd_msg+0x32>
 800862a:	4b0c      	ldr	r3, [pc, #48]	; (800865c <netconn_tcp_recvd_msg+0x50>)
 800862c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008630:	490b      	ldr	r1, [pc, #44]	; (8008660 <netconn_tcp_recvd_msg+0x54>)
 8008632:	480c      	ldr	r0, [pc, #48]	; (8008664 <netconn_tcp_recvd_msg+0x58>)
 8008634:	f00f f962 	bl	80178fc <iprintf>
 8008638:	f06f 030f 	mvn.w	r3, #15
 800863c:	e00a      	b.n	8008654 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4806      	ldr	r0, [pc, #24]	; (8008668 <netconn_tcp_recvd_msg+0x5c>)
 800864e:	f7ff fd4d 	bl	80080ec <netconn_apimsg>
 8008652:	4603      	mov	r3, r0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	08018d94 	.word	0x08018d94
 8008660:	08018ff4 	.word	0x08018ff4
 8008664:	08018dec 	.word	0x08018dec
 8008668:	08009c29 	.word	0x08009c29

0800866c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b090      	sub	sp, #64	; 0x40
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3310      	adds	r3, #16
 800867e:	4618      	mov	r0, r3
 8008680:	f00e ff83 	bl	801758a <sys_mbox_valid>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800868a:	f06f 030a 	mvn.w	r3, #10
 800868e:	e06d      	b.n	800876c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	7f1b      	ldrb	r3, [r3, #28]
 8008694:	b25b      	sxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	da07      	bge.n	80086aa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	7f1b      	ldrb	r3, [r3, #28]
 800869e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80086a8:	e039      	b.n	800871e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	461a      	mov	r2, r3
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f7ff fee3 	bl	800847c <netconn_recv_data>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80086bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80086c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086c8:	e050      	b.n	800876c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10e      	bne.n	80086f8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <netconn_recv_data_tcp+0x7a>
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	891b      	ldrh	r3, [r3, #8]
 80086e4:	e000      	b.n	80086e8 <netconn_recv_data_tcp+0x7c>
 80086e6:	2301      	movs	r3, #1
 80086e8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80086ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80086ec:	f107 0214 	add.w	r2, r7, #20
 80086f0:	4619      	mov	r1, r3
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff ff8a 	bl	800860c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d134      	bne.n	8008768 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	7f1b      	ldrb	r3, [r3, #28]
 800870c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008710:	b2da      	uxtb	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008716:	f06f 0306 	mvn.w	r3, #6
 800871a:	e027      	b.n	800876c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800871c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <netconn_recv_data_tcp+0xc6>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	2200      	movs	r2, #0
 800872c:	2101      	movs	r1, #1
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10f      	bne.n	800875a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f9a3 	bl	8008a86 <netconn_err>
 8008740:	4603      	mov	r3, r0
 8008742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008746:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <netconn_recv_data_tcp+0xe8>
          return err;
 800874e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008752:	e00b      	b.n	800876c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008754:	f06f 030d 	mvn.w	r3, #13
 8008758:	e008      	b.n	800876c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800875a:	2101      	movs	r1, #1
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 f955 	bl	8008a0c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008762:	f06f 030e 	mvn.w	r3, #14
 8008766:	e001      	b.n	800876c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008768:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800876c:	4618      	mov	r0, r3
 800876e:	3740      	adds	r7, #64	; 0x40
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800877e:	2300      	movs	r3, #0
 8008780:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <netconn_recv+0x28>
 8008788:	4b32      	ldr	r3, [pc, #200]	; (8008854 <netconn_recv+0xe0>)
 800878a:	f240 3263 	movw	r2, #867	; 0x363
 800878e:	4932      	ldr	r1, [pc, #200]	; (8008858 <netconn_recv+0xe4>)
 8008790:	4832      	ldr	r0, [pc, #200]	; (800885c <netconn_recv+0xe8>)
 8008792:	f00f f8b3 	bl	80178fc <iprintf>
 8008796:	f06f 030f 	mvn.w	r3, #15
 800879a:	e056      	b.n	800884a <netconn_recv+0xd6>
  *new_buf = NULL;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <netconn_recv+0x48>
 80087a8:	4b2a      	ldr	r3, [pc, #168]	; (8008854 <netconn_recv+0xe0>)
 80087aa:	f240 3265 	movw	r2, #869	; 0x365
 80087ae:	492c      	ldr	r1, [pc, #176]	; (8008860 <netconn_recv+0xec>)
 80087b0:	482a      	ldr	r0, [pc, #168]	; (800885c <netconn_recv+0xe8>)
 80087b2:	f00f f8a3 	bl	80178fc <iprintf>
 80087b6:	f06f 030f 	mvn.w	r3, #15
 80087ba:	e046      	b.n	800884a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d13a      	bne.n	800883e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80087cc:	2006      	movs	r0, #6
 80087ce:	f002 fc49 	bl	800b064 <memp_malloc>
 80087d2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <netconn_recv+0x6c>
      return ERR_MEM;
 80087da:	f04f 33ff 	mov.w	r3, #4294967295
 80087de:	e034      	b.n	800884a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80087e0:	f107 030c 	add.w	r3, r7, #12
 80087e4:	2200      	movs	r2, #0
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff ff3f 	bl	800866c <netconn_recv_data_tcp>
 80087ee:	4603      	mov	r3, r0
 80087f0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80087f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d006      	beq.n	8008808 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80087fa:	6979      	ldr	r1, [r7, #20]
 80087fc:	2006      	movs	r0, #6
 80087fe:	f002 fc83 	bl	800b108 <memp_free>
      return err;
 8008802:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008806:	e020      	b.n	800884a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <netconn_recv+0xa8>
 800880e:	4b11      	ldr	r3, [pc, #68]	; (8008854 <netconn_recv+0xe0>)
 8008810:	f240 3279 	movw	r2, #889	; 0x379
 8008814:	4913      	ldr	r1, [pc, #76]	; (8008864 <netconn_recv+0xf0>)
 8008816:	4811      	ldr	r0, [pc, #68]	; (800885c <netconn_recv+0xe8>)
 8008818:	f00f f870 	bl	80178fc <iprintf>

    buf->p = p;
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2200      	movs	r2, #0
 800882c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2200      	movs	r2, #0
 8008832:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	e005      	b.n	800884a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800883e:	2200      	movs	r2, #0
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fe1a 	bl	800847c <netconn_recv_data>
 8008848:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	08018d94 	.word	0x08018d94
 8008858:	08018fac 	.word	0x08018fac
 800885c:	08018dec 	.word	0x08018dec
 8008860:	08018fcc 	.word	0x08018fcc
 8008864:	08019044 	.word	0x08019044

08008868 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af02      	add	r7, sp, #8
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	f107 0110 	add.w	r1, r7, #16
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	4613      	mov	r3, r2
 800888a:	2201      	movs	r2, #1
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f805 	bl	800889c <netconn_write_vectors_partly>
 8008892:	4603      	mov	r3, r0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b092      	sub	sp, #72	; 0x48
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4611      	mov	r1, r2
 80088a8:	461a      	mov	r2, r3
 80088aa:	460b      	mov	r3, r1
 80088ac:	80fb      	strh	r3, [r7, #6]
 80088ae:	4613      	mov	r3, r2
 80088b0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <netconn_write_vectors_partly+0x30>
 80088b8:	4b4e      	ldr	r3, [pc, #312]	; (80089f4 <netconn_write_vectors_partly+0x158>)
 80088ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80088be:	494e      	ldr	r1, [pc, #312]	; (80089f8 <netconn_write_vectors_partly+0x15c>)
 80088c0:	484e      	ldr	r0, [pc, #312]	; (80089fc <netconn_write_vectors_partly+0x160>)
 80088c2:	f00f f81b 	bl	80178fc <iprintf>
 80088c6:	f06f 030f 	mvn.w	r3, #15
 80088ca:	e08e      	b.n	80089ea <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d009      	beq.n	80088ec <netconn_write_vectors_partly+0x50>
 80088d8:	4b46      	ldr	r3, [pc, #280]	; (80089f4 <netconn_write_vectors_partly+0x158>)
 80088da:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80088de:	4948      	ldr	r1, [pc, #288]	; (8008a00 <netconn_write_vectors_partly+0x164>)
 80088e0:	4846      	ldr	r0, [pc, #280]	; (80089fc <netconn_write_vectors_partly+0x160>)
 80088e2:	f00f f80b 	bl	80178fc <iprintf>
 80088e6:	f06f 0305 	mvn.w	r3, #5
 80088ea:	e07e      	b.n	80089ea <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	7f1b      	ldrb	r3, [r3, #28]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d104      	bne.n	8008902 <netconn_write_vectors_partly+0x66>
 80088f8:	797b      	ldrb	r3, [r7, #5]
 80088fa:	f003 0304 	and.w	r3, r3, #4
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <netconn_write_vectors_partly+0x6a>
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <netconn_write_vectors_partly+0x6c>
 8008906:	2300      	movs	r3, #0
 8008908:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800890c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <netconn_write_vectors_partly+0x84>
 8008914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008916:	2b00      	cmp	r3, #0
 8008918:	d102      	bne.n	8008920 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800891a:	f06f 0305 	mvn.w	r3, #5
 800891e:	e064      	b.n	80089ea <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008924:	2300      	movs	r3, #0
 8008926:	643b      	str	r3, [r7, #64]	; 0x40
 8008928:	e015      	b.n	8008956 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800892a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008936:	4413      	add	r3, r2
 8008938:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800893a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800893c:	00db      	lsls	r3, r3, #3
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	4413      	add	r3, r2
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008946:	429a      	cmp	r2, r3
 8008948:	d202      	bcs.n	8008950 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800894a:	f06f 0305 	mvn.w	r3, #5
 800894e:	e04c      	b.n	80089ea <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008952:	3301      	adds	r3, #1
 8008954:	643b      	str	r3, [r7, #64]	; 0x40
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800895a:	429a      	cmp	r2, r3
 800895c:	dbe5      	blt.n	800892a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800895e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	e040      	b.n	80089ea <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896a:	2b00      	cmp	r3, #0
 800896c:	da0a      	bge.n	8008984 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800896e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008970:	2b00      	cmp	r3, #0
 8008972:	d102      	bne.n	800897a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008974:	f06f 0305 	mvn.w	r3, #5
 8008978:	e037      	b.n	80089ea <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800897a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800897e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008994:	797b      	ldrb	r3, [r7, #5]
 8008996:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800899a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80089a2:	f107 0314 	add.w	r3, r7, #20
 80089a6:	4619      	mov	r1, r3
 80089a8:	4816      	ldr	r0, [pc, #88]	; (8008a04 <netconn_write_vectors_partly+0x168>)
 80089aa:	f7ff fb9f 	bl	80080ec <netconn_apimsg>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80089b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d114      	bne.n	80089e6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80089bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80089c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80089c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80089d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d006      	beq.n	80089e6 <netconn_write_vectors_partly+0x14a>
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <netconn_write_vectors_partly+0x158>)
 80089da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80089de:	490a      	ldr	r1, [pc, #40]	; (8008a08 <netconn_write_vectors_partly+0x16c>)
 80089e0:	4806      	ldr	r0, [pc, #24]	; (80089fc <netconn_write_vectors_partly+0x160>)
 80089e2:	f00e ff8b 	bl	80178fc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80089e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3748      	adds	r7, #72	; 0x48
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	08018d94 	.word	0x08018d94
 80089f8:	0801906c 	.word	0x0801906c
 80089fc:	08018dec 	.word	0x08018dec
 8008a00:	08019088 	.word	0x08019088
 8008a04:	0800a02d 	.word	0x0800a02d
 8008a08:	080190ac 	.word	0x080190ac

08008a0c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08c      	sub	sp, #48	; 0x30
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d109      	bne.n	8008a32 <netconn_close_shutdown+0x26>
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <netconn_close_shutdown+0x50>)
 8008a20:	f240 4247 	movw	r2, #1095	; 0x447
 8008a24:	490e      	ldr	r1, [pc, #56]	; (8008a60 <netconn_close_shutdown+0x54>)
 8008a26:	480f      	ldr	r0, [pc, #60]	; (8008a64 <netconn_close_shutdown+0x58>)
 8008a28:	f00e ff68 	bl	80178fc <iprintf>
 8008a2c:	f06f 030f 	mvn.w	r3, #15
 8008a30:	e010      	b.n	8008a54 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a3a:	2329      	movs	r3, #41	; 0x29
 8008a3c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008a3e:	f107 030c 	add.w	r3, r7, #12
 8008a42:	4619      	mov	r1, r3
 8008a44:	4808      	ldr	r0, [pc, #32]	; (8008a68 <netconn_close_shutdown+0x5c>)
 8008a46:	f7ff fb51 	bl	80080ec <netconn_apimsg>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008a50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3730      	adds	r7, #48	; 0x30
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	08018d94 	.word	0x08018d94
 8008a60:	080190d0 	.word	0x080190d0
 8008a64:	08018dec 	.word	0x08018dec
 8008a68:	0800a145 	.word	0x0800a145

08008a6c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008a74:	2103      	movs	r1, #3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff ffc8 	bl	8008a0c <netconn_close_shutdown>
 8008a7c:	4603      	mov	r3, r0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <netconn_err+0x12>
    return ERR_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e00d      	b.n	8008ab4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008a98:	f00e fe92 	bl	80177c0 <sys_arch_protect>
 8008a9c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7a1b      	ldrb	r3, [r3, #8]
 8008aa2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f00e fe96 	bl	80177dc <sys_arch_unprotect>
  return err;
 8008ab0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aca:	f113 0f0e 	cmn.w	r3, #14
 8008ace:	d008      	beq.n	8008ae2 <lwip_netconn_err_to_msg+0x26>
 8008ad0:	f113 0f0d 	cmn.w	r3, #13
 8008ad4:	d003      	beq.n	8008ade <lwip_netconn_err_to_msg+0x22>
 8008ad6:	f113 0f0f 	cmn.w	r3, #15
 8008ada:	d004      	beq.n	8008ae6 <lwip_netconn_err_to_msg+0x2a>
 8008adc:	e005      	b.n	8008aea <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008ade:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <lwip_netconn_err_to_msg+0x4c>)
 8008ae0:	e00e      	b.n	8008b00 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <lwip_netconn_err_to_msg+0x50>)
 8008ae4:	e00c      	b.n	8008b00 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008ae6:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <lwip_netconn_err_to_msg+0x54>)
 8008ae8:	e00a      	b.n	8008b00 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <lwip_netconn_err_to_msg+0x42>
 8008af2:	4b08      	ldr	r3, [pc, #32]	; (8008b14 <lwip_netconn_err_to_msg+0x58>)
 8008af4:	227d      	movs	r2, #125	; 0x7d
 8008af6:	4908      	ldr	r1, [pc, #32]	; (8008b18 <lwip_netconn_err_to_msg+0x5c>)
 8008af8:	4808      	ldr	r0, [pc, #32]	; (8008b1c <lwip_netconn_err_to_msg+0x60>)
 8008afa:	f00e feff 	bl	80178fc <iprintf>
      return NULL;
 8008afe:	2300      	movs	r3, #0
  }
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	0801c61c 	.word	0x0801c61c
 8008b0c:	0801c61d 	.word	0x0801c61d
 8008b10:	0801c61e 	.word	0x0801c61e
 8008b14:	080190ec 	.word	0x080190ec
 8008b18:	08019120 	.word	0x08019120
 8008b1c:	08019130 	.word	0x08019130

08008b20 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d105      	bne.n	8008b3c <lwip_netconn_is_err_msg+0x1c>
 8008b30:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <lwip_netconn_is_err_msg+0x5c>)
 8008b32:	2285      	movs	r2, #133	; 0x85
 8008b34:	4912      	ldr	r1, [pc, #72]	; (8008b80 <lwip_netconn_is_err_msg+0x60>)
 8008b36:	4813      	ldr	r0, [pc, #76]	; (8008b84 <lwip_netconn_is_err_msg+0x64>)
 8008b38:	f00e fee0 	bl	80178fc <iprintf>

  if (msg == &netconn_aborted) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a12      	ldr	r2, [pc, #72]	; (8008b88 <lwip_netconn_is_err_msg+0x68>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d104      	bne.n	8008b4e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	22f3      	movs	r2, #243	; 0xf3
 8008b48:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e012      	b.n	8008b74 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a0e      	ldr	r2, [pc, #56]	; (8008b8c <lwip_netconn_is_err_msg+0x6c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d104      	bne.n	8008b60 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	22f2      	movs	r2, #242	; 0xf2
 8008b5a:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e009      	b.n	8008b74 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a0b      	ldr	r2, [pc, #44]	; (8008b90 <lwip_netconn_is_err_msg+0x70>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d104      	bne.n	8008b72 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	22f1      	movs	r2, #241	; 0xf1
 8008b6c:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	080190ec 	.word	0x080190ec
 8008b80:	08019158 	.word	0x08019158
 8008b84:	08019130 	.word	0x08019130
 8008b88:	0801c61c 	.word	0x0801c61c
 8008b8c:	0801c61d 	.word	0x0801c61d
 8008b90:	0801c61e 	.word	0x0801c61e

08008b94 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <recv_udp+0x20>
 8008ba8:	4b34      	ldr	r3, [pc, #208]	; (8008c7c <recv_udp+0xe8>)
 8008baa:	22e5      	movs	r2, #229	; 0xe5
 8008bac:	4934      	ldr	r1, [pc, #208]	; (8008c80 <recv_udp+0xec>)
 8008bae:	4835      	ldr	r0, [pc, #212]	; (8008c84 <recv_udp+0xf0>)
 8008bb0:	f00e fea4 	bl	80178fc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <recv_udp+0x32>
 8008bba:	4b30      	ldr	r3, [pc, #192]	; (8008c7c <recv_udp+0xe8>)
 8008bbc:	22e6      	movs	r2, #230	; 0xe6
 8008bbe:	4932      	ldr	r1, [pc, #200]	; (8008c88 <recv_udp+0xf4>)
 8008bc0:	4830      	ldr	r0, [pc, #192]	; (8008c84 <recv_udp+0xf0>)
 8008bc2:	f00e fe9b 	bl	80178fc <iprintf>
  conn = (struct netconn *)arg;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d103      	bne.n	8008bd8 <recv_udp+0x44>
    pbuf_free(p);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f003 f945 	bl	800be60 <pbuf_free>
    return;
 8008bd6:	e04d      	b.n	8008c74 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d005      	beq.n	8008bee <recv_udp+0x5a>
 8008be2:	4b26      	ldr	r3, [pc, #152]	; (8008c7c <recv_udp+0xe8>)
 8008be4:	22ee      	movs	r2, #238	; 0xee
 8008be6:	4929      	ldr	r1, [pc, #164]	; (8008c8c <recv_udp+0xf8>)
 8008be8:	4826      	ldr	r0, [pc, #152]	; (8008c84 <recv_udp+0xf0>)
 8008bea:	f00e fe87 	bl	80178fc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	3310      	adds	r3, #16
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f00e fcc9 	bl	801758a <sys_mbox_valid>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f003 f92e 	bl	800be60 <pbuf_free>
    return;
 8008c04:	e036      	b.n	8008c74 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008c06:	2006      	movs	r0, #6
 8008c08:	f002 fa2c 	bl	800b064 <memp_malloc>
 8008c0c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d103      	bne.n	8008c1c <recv_udp+0x88>
    pbuf_free(p);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f003 f923 	bl	800be60 <pbuf_free>
    return;
 8008c1a:	e02b      	b.n	8008c74 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <recv_udp+0xa0>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	e000      	b.n	8008c36 <recv_udp+0xa2>
 8008c34:	2300      	movs	r3, #0
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008c3e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	891b      	ldrh	r3, [r3, #8]
 8008c44:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	3310      	adds	r3, #16
 8008c4a:	69b9      	ldr	r1, [r7, #24]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f00e fc27 	bl	80174a0 <sys_mbox_trypost>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008c58:	69b8      	ldr	r0, [r7, #24]
 8008c5a:	f001 faff 	bl	800a25c <netbuf_delete>
    return;
 8008c5e:	e009      	b.n	8008c74 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <recv_udp+0xe0>
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	8afa      	ldrh	r2, [r7, #22]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	69f8      	ldr	r0, [r7, #28]
 8008c72:	4798      	blx	r3
  }
}
 8008c74:	3720      	adds	r7, #32
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	080190ec 	.word	0x080190ec
 8008c80:	08019164 	.word	0x08019164
 8008c84:	08019130 	.word	0x08019130
 8008c88:	08019188 	.word	0x08019188
 8008c8c:	080191a8 	.word	0x080191a8

08008c90 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d106      	bne.n	8008cb2 <recv_tcp+0x22>
 8008ca4:	4b36      	ldr	r3, [pc, #216]	; (8008d80 <recv_tcp+0xf0>)
 8008ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008caa:	4936      	ldr	r1, [pc, #216]	; (8008d84 <recv_tcp+0xf4>)
 8008cac:	4836      	ldr	r0, [pc, #216]	; (8008d88 <recv_tcp+0xf8>)
 8008cae:	f00e fe25 	bl	80178fc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d106      	bne.n	8008cc6 <recv_tcp+0x36>
 8008cb8:	4b31      	ldr	r3, [pc, #196]	; (8008d80 <recv_tcp+0xf0>)
 8008cba:	f240 122d 	movw	r2, #301	; 0x12d
 8008cbe:	4933      	ldr	r1, [pc, #204]	; (8008d8c <recv_tcp+0xfc>)
 8008cc0:	4831      	ldr	r0, [pc, #196]	; (8008d88 <recv_tcp+0xf8>)
 8008cc2:	f00e fe1b 	bl	80178fc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d006      	beq.n	8008cdc <recv_tcp+0x4c>
 8008cce:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <recv_tcp+0xf0>)
 8008cd0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008cd4:	492e      	ldr	r1, [pc, #184]	; (8008d90 <recv_tcp+0x100>)
 8008cd6:	482c      	ldr	r0, [pc, #176]	; (8008d88 <recv_tcp+0xf8>)
 8008cd8:	f00e fe10 	bl	80178fc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d102      	bne.n	8008cec <recv_tcp+0x5c>
    return ERR_VAL;
 8008ce6:	f06f 0305 	mvn.w	r3, #5
 8008cea:	e045      	b.n	8008d78 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d006      	beq.n	8008d04 <recv_tcp+0x74>
 8008cf6:	4b22      	ldr	r3, [pc, #136]	; (8008d80 <recv_tcp+0xf0>)
 8008cf8:	f240 1235 	movw	r2, #309	; 0x135
 8008cfc:	4925      	ldr	r1, [pc, #148]	; (8008d94 <recv_tcp+0x104>)
 8008cfe:	4822      	ldr	r0, [pc, #136]	; (8008d88 <recv_tcp+0xf8>)
 8008d00:	f00e fdfc 	bl	80178fc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	3310      	adds	r3, #16
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f00e fc3e 	bl	801758a <sys_mbox_valid>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10d      	bne.n	8008d30 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d008      	beq.n	8008d2c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	891b      	ldrh	r3, [r3, #8]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	68b8      	ldr	r0, [r7, #8]
 8008d22:	f004 f85b 	bl	800cddc <tcp_recved>
      pbuf_free(p);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f003 f89a 	bl	800be60 <pbuf_free>
    }
    return ERR_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e023      	b.n	8008d78 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <recv_tcp+0xb2>
    msg = p;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	891b      	ldrh	r3, [r3, #8]
 8008d3e:	83fb      	strh	r3, [r7, #30]
 8008d40:	e003      	b.n	8008d4a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008d42:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <recv_tcp+0x108>)
 8008d44:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	3310      	adds	r3, #16
 8008d4e:	69b9      	ldr	r1, [r7, #24]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f00e fba5 	bl	80174a0 <sys_mbox_trypost>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d60:	e00a      	b.n	8008d78 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <recv_tcp+0xe6>
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	8bfa      	ldrh	r2, [r7, #30]
 8008d70:	2100      	movs	r1, #0
 8008d72:	6978      	ldr	r0, [r7, #20]
 8008d74:	4798      	blx	r3
  }

  return ERR_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3720      	adds	r7, #32
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	080190ec 	.word	0x080190ec
 8008d84:	080191c8 	.word	0x080191c8
 8008d88:	08019130 	.word	0x08019130
 8008d8c:	080191ec 	.word	0x080191ec
 8008d90:	0801920c 	.word	0x0801920c
 8008d94:	08019224 	.word	0x08019224
 8008d98:	0801c61e 	.word	0x0801c61e

08008d9c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d106      	bne.n	8008dbe <poll_tcp+0x22>
 8008db0:	4b29      	ldr	r3, [pc, #164]	; (8008e58 <poll_tcp+0xbc>)
 8008db2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008db6:	4929      	ldr	r1, [pc, #164]	; (8008e5c <poll_tcp+0xc0>)
 8008db8:	4829      	ldr	r0, [pc, #164]	; (8008e60 <poll_tcp+0xc4>)
 8008dba:	f00e fd9f 	bl	80178fc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d104      	bne.n	8008dd0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 ff63 	bl	8009c94 <lwip_netconn_do_writemore>
 8008dce:	e016      	b.n	8008dfe <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d112      	bne.n	8008dfe <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00a      	beq.n	8008df6 <poll_tcp+0x5a>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	7a5b      	ldrb	r3, [r3, #9]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	7a5a      	ldrb	r2, [r3, #9]
 8008df0:	3a01      	subs	r2, #1
 8008df2:	b2d2      	uxtb	r2, r2
 8008df4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008df6:	2101      	movs	r1, #1
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 fbf7 	bl	80095ec <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	7f1b      	ldrb	r3, [r3, #28]
 8008e02:	f003 0310 	and.w	r3, r3, #16
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d021      	beq.n	8008e4e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01d      	beq.n	8008e4e <poll_tcp+0xb2>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008e1a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008e1e:	d316      	bcc.n	8008e4e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d810      	bhi.n	8008e4e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	7f1b      	ldrb	r3, [r3, #28]
 8008e30:	f023 0310 	bic.w	r3, r3, #16
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d005      	beq.n	8008e4e <poll_tcp+0xb2>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2200      	movs	r2, #0
 8008e48:	2102      	movs	r1, #2
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	080190ec 	.word	0x080190ec
 8008e5c:	08019244 	.word	0x08019244
 8008e60:	08019130 	.word	0x08019130

08008e64 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d106      	bne.n	8008e8a <sent_tcp+0x26>
 8008e7c:	4b20      	ldr	r3, [pc, #128]	; (8008f00 <sent_tcp+0x9c>)
 8008e7e:	f240 1293 	movw	r2, #403	; 0x193
 8008e82:	4920      	ldr	r1, [pc, #128]	; (8008f04 <sent_tcp+0xa0>)
 8008e84:	4820      	ldr	r0, [pc, #128]	; (8008f08 <sent_tcp+0xa4>)
 8008e86:	f00e fd39 	bl	80178fc <iprintf>

  if (conn) {
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d032      	beq.n	8008ef6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d104      	bne.n	8008ea2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008e98:	2101      	movs	r1, #1
 8008e9a:	6978      	ldr	r0, [r7, #20]
 8008e9c:	f000 fefa 	bl	8009c94 <lwip_netconn_do_writemore>
 8008ea0:	e007      	b.n	8008eb2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	d103      	bne.n	8008eb2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008eaa:	2101      	movs	r1, #1
 8008eac:	6978      	ldr	r0, [r7, #20]
 8008eae:	f000 fb9d 	bl	80095ec <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d01d      	beq.n	8008ef6 <sent_tcp+0x92>
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008ec2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008ec6:	d316      	bcc.n	8008ef6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d810      	bhi.n	8008ef6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	7f1b      	ldrb	r3, [r3, #28]
 8008ed8:	f023 0310 	bic.w	r3, r3, #16
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <sent_tcp+0x92>
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	88fa      	ldrh	r2, [r7, #6]
 8008ef0:	2102      	movs	r1, #2
 8008ef2:	6978      	ldr	r0, [r7, #20]
 8008ef4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	080190ec 	.word	0x080190ec
 8008f04:	08019244 	.word	0x08019244
 8008f08:	08019130 	.word	0x08019130

08008f0c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d106      	bne.n	8008f30 <err_tcp+0x24>
 8008f22:	4b5f      	ldr	r3, [pc, #380]	; (80090a0 <err_tcp+0x194>)
 8008f24:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008f28:	495e      	ldr	r1, [pc, #376]	; (80090a4 <err_tcp+0x198>)
 8008f2a:	485f      	ldr	r0, [pc, #380]	; (80090a8 <err_tcp+0x19c>)
 8008f2c:	f00e fce6 	bl	80178fc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008f30:	f00e fc46 	bl	80177c0 <sys_arch_protect>
 8008f34:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	7f1b      	ldrb	r3, [r3, #28]
 8008f46:	f043 0301 	orr.w	r3, r3, #1
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	785b      	ldrb	r3, [r3, #1]
 8008f54:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008f5c:	69b8      	ldr	r0, [r7, #24]
 8008f5e:	f00e fc3d 	bl	80177dc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <err_tcp+0x6a>
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2104      	movs	r1, #4
 8008f72:	69f8      	ldr	r0, [r7, #28]
 8008f74:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <err_tcp+0x7e>
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	2200      	movs	r2, #0
 8008f84:	2100      	movs	r1, #0
 8008f86:	69f8      	ldr	r0, [r7, #28]
 8008f88:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d005      	beq.n	8008f9e <err_tcp+0x92>
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	2200      	movs	r2, #0
 8008f98:	2102      	movs	r1, #2
 8008f9a:	69f8      	ldr	r0, [r7, #28]
 8008f9c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff fd8a 	bl	8008abc <lwip_netconn_err_to_msg>
 8008fa8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	3310      	adds	r3, #16
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f00e faeb 	bl	801758a <sys_mbox_valid>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	3310      	adds	r3, #16
 8008fbe:	6939      	ldr	r1, [r7, #16]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f00e fa6d 	bl	80174a0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	3314      	adds	r3, #20
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f00e fadd 	bl	801758a <sys_mbox_valid>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	3314      	adds	r3, #20
 8008fda:	6939      	ldr	r1, [r7, #16]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f00e fa5f 	bl	80174a0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d005      	beq.n	8008ff4 <err_tcp+0xe8>
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d002      	beq.n	8008ff4 <err_tcp+0xe8>
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d143      	bne.n	800907c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	7f1b      	ldrb	r3, [r3, #28]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	7f1b      	ldrb	r3, [r3, #28]
 800900c:	f023 0304 	bic.w	r3, r3, #4
 8009010:	b2da      	uxtb	r2, r3
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d13b      	bne.n	8009094 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d106      	bne.n	8009032 <err_tcp+0x126>
 8009024:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <err_tcp+0x194>)
 8009026:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800902a:	4920      	ldr	r1, [pc, #128]	; (80090ac <err_tcp+0x1a0>)
 800902c:	481e      	ldr	r0, [pc, #120]	; (80090a8 <err_tcp+0x19c>)
 800902e:	f00e fc65 	bl	80178fc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	2b04      	cmp	r3, #4
 8009036:	d104      	bne.n	8009042 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	2200      	movs	r2, #0
 800903e:	711a      	strb	r2, [r3, #4]
 8009040:	e003      	b.n	800904a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009054:	68b8      	ldr	r0, [r7, #8]
 8009056:	f00e fb29 	bl	80176ac <sys_sem_valid>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d106      	bne.n	800906e <err_tcp+0x162>
 8009060:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <err_tcp+0x194>)
 8009062:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009066:	4912      	ldr	r1, [pc, #72]	; (80090b0 <err_tcp+0x1a4>)
 8009068:	480f      	ldr	r0, [pc, #60]	; (80090a8 <err_tcp+0x19c>)
 800906a:	f00e fc47 	bl	80178fc <iprintf>
      conn->current_msg = NULL;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	2200      	movs	r2, #0
 8009072:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009074:	68b8      	ldr	r0, [r7, #8]
 8009076:	f00e faff 	bl	8017678 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800907a:	e00b      	b.n	8009094 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d008      	beq.n	8009096 <err_tcp+0x18a>
 8009084:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <err_tcp+0x194>)
 8009086:	f240 12f7 	movw	r2, #503	; 0x1f7
 800908a:	490a      	ldr	r1, [pc, #40]	; (80090b4 <err_tcp+0x1a8>)
 800908c:	4806      	ldr	r0, [pc, #24]	; (80090a8 <err_tcp+0x19c>)
 800908e:	f00e fc35 	bl	80178fc <iprintf>
  }
}
 8009092:	e000      	b.n	8009096 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009094:	bf00      	nop
}
 8009096:	bf00      	nop
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	080190ec 	.word	0x080190ec
 80090a4:	08019244 	.word	0x08019244
 80090a8:	08019130 	.word	0x08019130
 80090ac:	08019254 	.word	0x08019254
 80090b0:	08019270 	.word	0x08019270
 80090b4:	0801928c 	.word	0x0801928c

080090b8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f004 fd49 	bl	800db60 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80090ce:	490a      	ldr	r1, [pc, #40]	; (80090f8 <setup_tcp+0x40>)
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f004 fd57 	bl	800db84 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80090d6:	4909      	ldr	r1, [pc, #36]	; (80090fc <setup_tcp+0x44>)
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f004 fd75 	bl	800dbc8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80090de:	2202      	movs	r2, #2
 80090e0:	4907      	ldr	r1, [pc, #28]	; (8009100 <setup_tcp+0x48>)
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f004 fdcc 	bl	800dc80 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80090e8:	4906      	ldr	r1, [pc, #24]	; (8009104 <setup_tcp+0x4c>)
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f004 fd8e 	bl	800dc0c <tcp_err>
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	08008c91 	.word	0x08008c91
 80090fc:	08008e65 	.word	0x08008e65
 8009100:	08008d9d 	.word	0x08008d9d
 8009104:	08008f0d 	.word	0x08008f0d

08009108 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b089      	sub	sp, #36	; 0x24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	4613      	mov	r3, r2
 8009114:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <accept_function+0x1e>
    return ERR_VAL;
 8009120:	f06f 0305 	mvn.w	r3, #5
 8009124:	e0a1      	b.n	800926a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	3314      	adds	r3, #20
 800912a:	4618      	mov	r0, r3
 800912c:	f00e fa2d 	bl	801758a <sys_mbox_valid>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d102      	bne.n	800913c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009136:	f06f 0305 	mvn.w	r3, #5
 800913a:	e096      	b.n	800926a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d11b      	bne.n	800917a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	f103 0414 	add.w	r4, r3, #20
 8009148:	f06f 000c 	mvn.w	r0, #12
 800914c:	f7ff fcb6 	bl	8008abc <lwip_netconn_err_to_msg>
 8009150:	4603      	mov	r3, r0
 8009152:	4619      	mov	r1, r3
 8009154:	4620      	mov	r0, r4
 8009156:	f00e f9a3 	bl	80174a0 <sys_mbox_trypost>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d109      	bne.n	8009174 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <accept_function+0x6c>
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2200      	movs	r2, #0
 800916e:	2100      	movs	r1, #0
 8009170:	69f8      	ldr	r0, [r7, #28]
 8009172:	4798      	blx	r3
    }
    return ERR_VAL;
 8009174:	f06f 0305 	mvn.w	r3, #5
 8009178:	e077      	b.n	800926a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800917a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d006      	beq.n	8009190 <accept_function+0x88>
 8009182:	4b3c      	ldr	r3, [pc, #240]	; (8009274 <accept_function+0x16c>)
 8009184:	f240 222a 	movw	r2, #554	; 0x22a
 8009188:	493b      	ldr	r1, [pc, #236]	; (8009278 <accept_function+0x170>)
 800918a:	483c      	ldr	r0, [pc, #240]	; (800927c <accept_function+0x174>)
 800918c:	f00e fbb6 	bl	80178fc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f000 f8f0 	bl	8009380 <netconn_alloc>
 80091a0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d11b      	bne.n	80091e0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f103 0414 	add.w	r4, r3, #20
 80091ae:	f06f 000c 	mvn.w	r0, #12
 80091b2:	f7ff fc83 	bl	8008abc <lwip_netconn_err_to_msg>
 80091b6:	4603      	mov	r3, r0
 80091b8:	4619      	mov	r1, r3
 80091ba:	4620      	mov	r0, r4
 80091bc:	f00e f970 	bl	80174a0 <sys_mbox_trypost>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d109      	bne.n	80091da <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <accept_function+0xd2>
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	2200      	movs	r2, #0
 80091d4:	2100      	movs	r1, #0
 80091d6:	69f8      	ldr	r0, [r7, #28]
 80091d8:	4798      	blx	r3
    }
    return ERR_MEM;
 80091da:	f04f 33ff 	mov.w	r3, #4294967295
 80091de:	e044      	b.n	800926a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80091e6:	69b8      	ldr	r0, [r7, #24]
 80091e8:	f7ff ff66 	bl	80090b8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	3314      	adds	r3, #20
 80091f0:	69b9      	ldr	r1, [r7, #24]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f00e f954 	bl	80174a0 <sys_mbox_trypost>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d02a      	beq.n	8009254 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009204:	2100      	movs	r1, #0
 8009206:	6978      	ldr	r0, [r7, #20]
 8009208:	f004 fcaa 	bl	800db60 <tcp_arg>
    tcp_recv(pcb, NULL);
 800920c:	2100      	movs	r1, #0
 800920e:	6978      	ldr	r0, [r7, #20]
 8009210:	f004 fcb8 	bl	800db84 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009214:	2100      	movs	r1, #0
 8009216:	6978      	ldr	r0, [r7, #20]
 8009218:	f004 fcd6 	bl	800dbc8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800921c:	2200      	movs	r2, #0
 800921e:	2100      	movs	r1, #0
 8009220:	6978      	ldr	r0, [r7, #20]
 8009222:	f004 fd2d 	bl	800dc80 <tcp_poll>
    tcp_err(pcb, NULL);
 8009226:	2100      	movs	r1, #0
 8009228:	6978      	ldr	r0, [r7, #20]
 800922a:	f004 fcef 	bl	800dc0c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	2200      	movs	r2, #0
 8009232:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	3310      	adds	r3, #16
 8009238:	4618      	mov	r0, r3
 800923a:	f00e f91f 	bl	801747c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	3310      	adds	r3, #16
 8009242:	4618      	mov	r0, r3
 8009244:	f00e f9b2 	bl	80175ac <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009248:	69b8      	ldr	r0, [r7, #24]
 800924a:	f000 f907 	bl	800945c <netconn_free>
    return ERR_MEM;
 800924e:	f04f 33ff 	mov.w	r3, #4294967295
 8009252:	e00a      	b.n	800926a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <accept_function+0x160>
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	2200      	movs	r2, #0
 8009262:	2100      	movs	r1, #0
 8009264:	69f8      	ldr	r0, [r7, #28]
 8009266:	4798      	blx	r3
  }

  return ERR_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3724      	adds	r7, #36	; 0x24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd90      	pop	{r4, r7, pc}
 8009272:	bf00      	nop
 8009274:	080190ec 	.word	0x080190ec
 8009278:	080192a8 	.word	0x080192a8
 800927c:	08019130 	.word	0x08019130

08009280 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d006      	beq.n	80092a4 <pcb_new+0x24>
 8009296:	4b2b      	ldr	r3, [pc, #172]	; (8009344 <pcb_new+0xc4>)
 8009298:	f240 2265 	movw	r2, #613	; 0x265
 800929c:	492a      	ldr	r1, [pc, #168]	; (8009348 <pcb_new+0xc8>)
 800929e:	482b      	ldr	r0, [pc, #172]	; (800934c <pcb_new+0xcc>)
 80092a0:	f00e fb2c 	bl	80178fc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092ae:	2b10      	cmp	r3, #16
 80092b0:	d022      	beq.n	80092f8 <pcb_new+0x78>
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d133      	bne.n	800931e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681c      	ldr	r4, [r3, #0]
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	4618      	mov	r0, r3
 80092be:	f009 ff00 	bl	80130c2 <udp_new_ip_type>
 80092c2:	4603      	mov	r3, r0
 80092c4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d02a      	beq.n	8009326 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b22      	cmp	r3, #34	; 0x22
 80092d8:	d104      	bne.n	80092e4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6858      	ldr	r0, [r3, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	4917      	ldr	r1, [pc, #92]	; (8009350 <pcb_new+0xd0>)
 80092f2:	f009 fe6d 	bl	8012fd0 <udp_recv>
      }
      break;
 80092f6:	e016      	b.n	8009326 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681c      	ldr	r4, [r3, #0]
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	4618      	mov	r0, r3
 8009300:	f004 fc20 	bl	800db44 <tcp_new_ip_type>
 8009304:	4603      	mov	r3, r0
 8009306:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fece 	bl	80090b8 <setup_tcp>
      }
      break;
 800931c:	e005      	b.n	800932a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	22fa      	movs	r2, #250	; 0xfa
 8009322:	711a      	strb	r2, [r3, #4]
      return;
 8009324:	e00a      	b.n	800933c <pcb_new+0xbc>
      break;
 8009326:	bf00      	nop
 8009328:	e000      	b.n	800932c <pcb_new+0xac>
      break;
 800932a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d102      	bne.n	800933c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	22ff      	movs	r2, #255	; 0xff
 800933a:	711a      	strb	r2, [r3, #4]
  }
}
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	bd90      	pop	{r4, r7, pc}
 8009342:	bf00      	nop
 8009344:	080190ec 	.word	0x080190ec
 8009348:	080192d0 	.word	0x080192d0
 800934c:	08019130 	.word	0x08019130
 8009350:	08008b95 	.word	0x08008b95

08009354 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff ff85 	bl	8009280 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009390:	2007      	movs	r0, #7
 8009392:	f001 fe67 	bl	800b064 <memp_malloc>
 8009396:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <netconn_alloc+0x22>
    return NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	e052      	b.n	8009448 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	79fa      	ldrb	r2, [r7, #7]
 80093ac:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093ba:	2b10      	cmp	r3, #16
 80093bc:	d004      	beq.n	80093c8 <netconn_alloc+0x48>
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d105      	bne.n	80093ce <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80093c2:	2306      	movs	r3, #6
 80093c4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80093c6:	e00a      	b.n	80093de <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80093c8:	2306      	movs	r3, #6
 80093ca:	617b      	str	r3, [r7, #20]
      break;
 80093cc:	e007      	b.n	80093de <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80093ce:	4b20      	ldr	r3, [pc, #128]	; (8009450 <netconn_alloc+0xd0>)
 80093d0:	f240 22e5 	movw	r2, #741	; 0x2e5
 80093d4:	491f      	ldr	r1, [pc, #124]	; (8009454 <netconn_alloc+0xd4>)
 80093d6:	4820      	ldr	r0, [pc, #128]	; (8009458 <netconn_alloc+0xd8>)
 80093d8:	f00e fa90 	bl	80178fc <iprintf>
      goto free_and_return;
 80093dc:	e02f      	b.n	800943e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3310      	adds	r3, #16
 80093e2:	6979      	ldr	r1, [r7, #20]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f00e f827 	bl	8017438 <sys_mbox_new>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d125      	bne.n	800943c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	330c      	adds	r3, #12
 80093f4:	2100      	movs	r1, #0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f00e f8e5 	bl	80175c6 <sys_sem_new>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d005      	beq.n	800940e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3310      	adds	r3, #16
 8009406:	4618      	mov	r0, r3
 8009408:	f00e f838 	bl	801747c <sys_mbox_free>
    goto free_and_return;
 800940c:	e017      	b.n	800943e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3314      	adds	r3, #20
 8009412:	4618      	mov	r0, r3
 8009414:	f00e f8ca 	bl	80175ac <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f04f 32ff 	mov.w	r2, #4294967295
 8009424:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	7cfa      	ldrb	r2, [r7, #19]
 8009436:	771a      	strb	r2, [r3, #28]
  return conn;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	e005      	b.n	8009448 <netconn_alloc+0xc8>
    goto free_and_return;
 800943c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800943e:	68f9      	ldr	r1, [r7, #12]
 8009440:	2007      	movs	r0, #7
 8009442:	f001 fe61 	bl	800b108 <memp_free>
  return NULL;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	080190ec 	.word	0x080190ec
 8009454:	080192f0 	.word	0x080192f0
 8009458:	08019130 	.word	0x08019130

0800945c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d006      	beq.n	800947a <netconn_free+0x1e>
 800946c:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <netconn_free+0x80>)
 800946e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009472:	491b      	ldr	r1, [pc, #108]	; (80094e0 <netconn_free+0x84>)
 8009474:	481b      	ldr	r0, [pc, #108]	; (80094e4 <netconn_free+0x88>)
 8009476:	f00e fa41 	bl	80178fc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3310      	adds	r3, #16
 800947e:	4618      	mov	r0, r3
 8009480:	f00e f883 	bl	801758a <sys_mbox_valid>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d006      	beq.n	8009498 <netconn_free+0x3c>
 800948a:	4b14      	ldr	r3, [pc, #80]	; (80094dc <netconn_free+0x80>)
 800948c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8009490:	4915      	ldr	r1, [pc, #84]	; (80094e8 <netconn_free+0x8c>)
 8009492:	4814      	ldr	r0, [pc, #80]	; (80094e4 <netconn_free+0x88>)
 8009494:	f00e fa32 	bl	80178fc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3314      	adds	r3, #20
 800949c:	4618      	mov	r0, r3
 800949e:	f00e f874 	bl	801758a <sys_mbox_valid>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d006      	beq.n	80094b6 <netconn_free+0x5a>
 80094a8:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <netconn_free+0x80>)
 80094aa:	f240 3227 	movw	r2, #807	; 0x327
 80094ae:	490f      	ldr	r1, [pc, #60]	; (80094ec <netconn_free+0x90>)
 80094b0:	480c      	ldr	r0, [pc, #48]	; (80094e4 <netconn_free+0x88>)
 80094b2:	f00e fa23 	bl	80178fc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	330c      	adds	r3, #12
 80094ba:	4618      	mov	r0, r3
 80094bc:	f00e f8e9 	bl	8017692 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	330c      	adds	r3, #12
 80094c4:	4618      	mov	r0, r3
 80094c6:	f00e f902 	bl	80176ce <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	2007      	movs	r0, #7
 80094ce:	f001 fe1b 	bl	800b108 <memp_free>
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	080190ec 	.word	0x080190ec
 80094e0:	08019318 	.word	0x08019318
 80094e4:	08019130 	.word	0x08019130
 80094e8:	08019348 	.word	0x08019348
 80094ec:	08019384 	.word	0x08019384

080094f0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3310      	adds	r3, #16
 80094fc:	4618      	mov	r0, r3
 80094fe:	f00e f844 	bl	801758a <sys_mbox_valid>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d02f      	beq.n	8009568 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009508:	e018      	b.n	800953c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009512:	2b10      	cmp	r3, #16
 8009514:	d10e      	bne.n	8009534 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f107 020f 	add.w	r2, r7, #15
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f7ff fafe 	bl	8008b20 <lwip_netconn_is_err_msg>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d108      	bne.n	800953c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	4618      	mov	r0, r3
 800952e:	f002 fc97 	bl	800be60 <pbuf_free>
 8009532:	e003      	b.n	800953c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 fe90 	bl	800a25c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3310      	adds	r3, #16
 8009540:	f107 0210 	add.w	r2, r7, #16
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f00e f803 	bl	8017552 <sys_arch_mbox_tryfetch>
 800954c:	4603      	mov	r3, r0
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d1da      	bne.n	800950a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3310      	adds	r3, #16
 8009558:	4618      	mov	r0, r3
 800955a:	f00d ff8f 	bl	801747c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3310      	adds	r3, #16
 8009562:	4618      	mov	r0, r3
 8009564:	f00e f822 	bl	80175ac <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3314      	adds	r3, #20
 800956c:	4618      	mov	r0, r3
 800956e:	f00e f80c 	bl	801758a <sys_mbox_valid>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d034      	beq.n	80095e2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009578:	e01d      	b.n	80095b6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f107 020e 	add.w	r2, r7, #14
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff facc 	bl	8008b20 <lwip_netconn_is_err_msg>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d113      	bne.n	80095b6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f7ff ffac 	bl	80094f0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d007      	beq.n	80095b0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f003 fa51 	bl	800ca4c <tcp_abort>
            newconn->pcb.tcp = NULL;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2200      	movs	r2, #0
 80095ae:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80095b0:	6978      	ldr	r0, [r7, #20]
 80095b2:	f7ff ff53 	bl	800945c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3314      	adds	r3, #20
 80095ba:	f107 0210 	add.w	r2, r7, #16
 80095be:	4611      	mov	r1, r2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f00d ffc6 	bl	8017552 <sys_arch_mbox_tryfetch>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095cc:	d1d5      	bne.n	800957a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3314      	adds	r3, #20
 80095d2:	4618      	mov	r0, r3
 80095d4:	f00d ff52 	bl	801747c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3314      	adds	r3, #20
 80095dc:	4618      	mov	r0, r3
 80095de:	f00d ffe5 	bl	80175ac <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80095e2:	bf00      	nop
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <lwip_netconn_do_close_internal+0x24>
 8009602:	4ba1      	ldr	r3, [pc, #644]	; (8009888 <lwip_netconn_do_close_internal+0x29c>)
 8009604:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009608:	49a0      	ldr	r1, [pc, #640]	; (800988c <lwip_netconn_do_close_internal+0x2a0>)
 800960a:	48a1      	ldr	r0, [pc, #644]	; (8009890 <lwip_netconn_do_close_internal+0x2a4>)
 800960c:	f00e f976 	bl	80178fc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009618:	2b10      	cmp	r3, #16
 800961a:	d006      	beq.n	800962a <lwip_netconn_do_close_internal+0x3e>
 800961c:	4b9a      	ldr	r3, [pc, #616]	; (8009888 <lwip_netconn_do_close_internal+0x29c>)
 800961e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009622:	499c      	ldr	r1, [pc, #624]	; (8009894 <lwip_netconn_do_close_internal+0x2a8>)
 8009624:	489a      	ldr	r0, [pc, #616]	; (8009890 <lwip_netconn_do_close_internal+0x2a4>)
 8009626:	f00e f969 	bl	80178fc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	2b04      	cmp	r3, #4
 8009630:	d006      	beq.n	8009640 <lwip_netconn_do_close_internal+0x54>
 8009632:	4b95      	ldr	r3, [pc, #596]	; (8009888 <lwip_netconn_do_close_internal+0x29c>)
 8009634:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009638:	4997      	ldr	r1, [pc, #604]	; (8009898 <lwip_netconn_do_close_internal+0x2ac>)
 800963a:	4895      	ldr	r0, [pc, #596]	; (8009890 <lwip_netconn_do_close_internal+0x2a4>)
 800963c:	f00e f95e 	bl	80178fc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d106      	bne.n	8009656 <lwip_netconn_do_close_internal+0x6a>
 8009648:	4b8f      	ldr	r3, [pc, #572]	; (8009888 <lwip_netconn_do_close_internal+0x29c>)
 800964a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800964e:	4993      	ldr	r1, [pc, #588]	; (800989c <lwip_netconn_do_close_internal+0x2b0>)
 8009650:	488f      	ldr	r0, [pc, #572]	; (8009890 <lwip_netconn_do_close_internal+0x2a4>)
 8009652:	f00e f953 	bl	80178fc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <lwip_netconn_do_close_internal+0x80>
 800965e:	4b8a      	ldr	r3, [pc, #552]	; (8009888 <lwip_netconn_do_close_internal+0x29c>)
 8009660:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009664:	498e      	ldr	r1, [pc, #568]	; (80098a0 <lwip_netconn_do_close_internal+0x2b4>)
 8009666:	488a      	ldr	r0, [pc, #552]	; (8009890 <lwip_netconn_do_close_internal+0x2a4>)
 8009668:	f00e f948 	bl	80178fc <iprintf>

  tpcb = conn->pcb.tcp;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	7a1b      	ldrb	r3, [r3, #8]
 8009678:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	2b03      	cmp	r3, #3
 800968e:	d102      	bne.n	8009696 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009690:	2301      	movs	r3, #1
 8009692:	75bb      	strb	r3, [r7, #22]
 8009694:	e01f      	b.n	80096d6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00e      	beq.n	80096ba <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80096a0:	2b05      	cmp	r3, #5
 80096a2:	d007      	beq.n	80096b4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80096a8:	2b06      	cmp	r3, #6
 80096aa:	d003      	beq.n	80096b4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80096b0:	2b08      	cmp	r3, #8
 80096b2:	d102      	bne.n	80096ba <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75bb      	strb	r3, [r7, #22]
 80096b8:	e00d      	b.n	80096d6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80096ba:	7b7b      	ldrb	r3, [r7, #13]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <lwip_netconn_do_close_internal+0xe6>
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	8b5b      	ldrh	r3, [r3, #26]
 80096c4:	f003 0310 	and.w	r3, r3, #16
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80096cc:	2301      	movs	r3, #1
 80096ce:	75bb      	strb	r3, [r7, #22]
 80096d0:	e001      	b.n	80096d6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80096d6:	7dbb      	ldrb	r3, [r7, #22]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80096dc:	2100      	movs	r1, #0
 80096de:	6938      	ldr	r0, [r7, #16]
 80096e0:	f004 fa3e 	bl	800db60 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	7d1b      	ldrb	r3, [r3, #20]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d104      	bne.n	80096f6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80096ec:	2100      	movs	r1, #0
 80096ee:	6938      	ldr	r0, [r7, #16]
 80096f0:	f004 faae 	bl	800dc50 <tcp_accept>
 80096f4:	e01d      	b.n	8009732 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80096fc:	2100      	movs	r1, #0
 80096fe:	6938      	ldr	r0, [r7, #16]
 8009700:	f004 fa40 	bl	800db84 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009704:	2100      	movs	r1, #0
 8009706:	6938      	ldr	r0, [r7, #16]
 8009708:	f004 faa2 	bl	800dc50 <tcp_accept>
    }
    if (shut_tx) {
 800970c:	7b7b      	ldrb	r3, [r7, #13]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009712:	2100      	movs	r1, #0
 8009714:	6938      	ldr	r0, [r7, #16]
 8009716:	f004 fa57 	bl	800dbc8 <tcp_sent>
    }
    if (shut_close) {
 800971a:	7dbb      	ldrb	r3, [r7, #22]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d008      	beq.n	8009732 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009720:	2200      	movs	r2, #0
 8009722:	2100      	movs	r1, #0
 8009724:	6938      	ldr	r0, [r7, #16]
 8009726:	f004 faab 	bl	800dc80 <tcp_poll>
      tcp_err(tpcb, NULL);
 800972a:	2100      	movs	r1, #0
 800972c:	6938      	ldr	r0, [r7, #16]
 800972e:	f004 fa6d 	bl	800dc0c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009732:	7dbb      	ldrb	r3, [r7, #22]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d005      	beq.n	8009744 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009738:	6938      	ldr	r0, [r7, #16]
 800973a:	f003 f843 	bl	800c7c4 <tcp_close>
 800973e:	4603      	mov	r3, r0
 8009740:	75fb      	strb	r3, [r7, #23]
 8009742:	e007      	b.n	8009754 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	7b7a      	ldrb	r2, [r7, #13]
 8009748:	4619      	mov	r1, r3
 800974a:	6938      	ldr	r0, [r7, #16]
 800974c:	f003 f866 	bl	800c81c <tcp_shutdown>
 8009750:	4603      	mov	r3, r0
 8009752:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009754:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800975c:	2301      	movs	r3, #1
 800975e:	757b      	strb	r3, [r7, #21]
 8009760:	e016      	b.n	8009790 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976a:	d10f      	bne.n	800978c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a1b      	ldr	r3, [r3, #32]
 8009770:	7a5b      	ldrb	r3, [r3, #9]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10c      	bne.n	8009790 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009776:	2301      	movs	r3, #1
 8009778:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800977a:	7dbb      	ldrb	r3, [r7, #22]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d007      	beq.n	8009790 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009780:	6938      	ldr	r0, [r7, #16]
 8009782:	f003 f963 	bl	800ca4c <tcp_abort>
          err = ERR_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	75fb      	strb	r3, [r7, #23]
 800978a:	e001      	b.n	8009790 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800978c:	2301      	movs	r3, #1
 800978e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009790:	7d7b      	ldrb	r3, [r7, #21]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d044      	beq.n	8009820 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	330c      	adds	r3, #12
 800979e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	7dfa      	ldrb	r2, [r7, #23]
 80097a6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80097b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d129      	bne.n	8009810 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80097bc:	7dbb      	ldrb	r3, [r7, #22]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00c      	beq.n	80097dc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d005      	beq.n	80097dc <lwip_netconn_do_close_internal+0x1f0>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	2200      	movs	r2, #0
 80097d6:	2104      	movs	r1, #4
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	4798      	blx	r3
      }
      if (shut_rx) {
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d009      	beq.n	80097f6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d005      	beq.n	80097f6 <lwip_netconn_do_close_internal+0x20a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	2200      	movs	r2, #0
 80097f0:	2100      	movs	r1, #0
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
      }
      if (shut_tx) {
 80097f6:	7b7b      	ldrb	r3, [r7, #13]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <lwip_netconn_do_close_internal+0x224>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	2200      	movs	r2, #0
 800980a:	2102      	movs	r1, #2
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009816:	68b8      	ldr	r0, [r7, #8]
 8009818:	f00d ff2e 	bl	8017678 <sys_sem_signal>
    }
    return ERR_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e02e      	b.n	800987e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009820:	7d7b      	ldrb	r3, [r7, #21]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d11e      	bne.n	8009864 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	7d1b      	ldrb	r3, [r3, #20]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d106      	bne.n	800983c <lwip_netconn_do_close_internal+0x250>
 800982e:	4b16      	ldr	r3, [pc, #88]	; (8009888 <lwip_netconn_do_close_internal+0x29c>)
 8009830:	f240 4241 	movw	r2, #1089	; 0x441
 8009834:	491b      	ldr	r1, [pc, #108]	; (80098a4 <lwip_netconn_do_close_internal+0x2b8>)
 8009836:	4816      	ldr	r0, [pc, #88]	; (8009890 <lwip_netconn_do_close_internal+0x2a4>)
 8009838:	f00e f860 	bl	80178fc <iprintf>
    if (shut_tx) {
 800983c:	7b7b      	ldrb	r3, [r7, #13]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009842:	4919      	ldr	r1, [pc, #100]	; (80098a8 <lwip_netconn_do_close_internal+0x2bc>)
 8009844:	6938      	ldr	r0, [r7, #16]
 8009846:	f004 f9bf 	bl	800dbc8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800984a:	2201      	movs	r2, #1
 800984c:	4917      	ldr	r1, [pc, #92]	; (80098ac <lwip_netconn_do_close_internal+0x2c0>)
 800984e:	6938      	ldr	r0, [r7, #16]
 8009850:	f004 fa16 	bl	800dc80 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009854:	4916      	ldr	r1, [pc, #88]	; (80098b0 <lwip_netconn_do_close_internal+0x2c4>)
 8009856:	6938      	ldr	r0, [r7, #16]
 8009858:	f004 f9d8 	bl	800dc0c <tcp_err>
    tcp_arg(tpcb, conn);
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	6938      	ldr	r0, [r7, #16]
 8009860:	f004 f97e 	bl	800db60 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009864:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <lwip_netconn_do_close_internal+0x28e>
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <lwip_netconn_do_close_internal+0x29c>)
 800986e:	f240 424d 	movw	r2, #1101	; 0x44d
 8009872:	4910      	ldr	r1, [pc, #64]	; (80098b4 <lwip_netconn_do_close_internal+0x2c8>)
 8009874:	4806      	ldr	r0, [pc, #24]	; (8009890 <lwip_netconn_do_close_internal+0x2a4>)
 8009876:	f00e f841 	bl	80178fc <iprintf>
  return err;
 800987a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	080190ec 	.word	0x080190ec
 800988c:	080193c0 	.word	0x080193c0
 8009890:	08019130 	.word	0x08019130
 8009894:	080193d0 	.word	0x080193d0
 8009898:	080193f0 	.word	0x080193f0
 800989c:	08019414 	.word	0x08019414
 80098a0:	08019254 	.word	0x08019254
 80098a4:	08019428 	.word	0x08019428
 80098a8:	08008e65 	.word	0x08008e65
 80098ac:	08008d9d 	.word	0x08008d9d
 80098b0:	08008f0d 	.word	0x08008f0d
 80098b4:	0801944c 	.word	0x0801944c

080098b8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80098cc:	7afb      	ldrb	r3, [r7, #11]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00d      	beq.n	80098ee <lwip_netconn_do_delconn+0x36>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098dc:	2b10      	cmp	r3, #16
 80098de:	d006      	beq.n	80098ee <lwip_netconn_do_delconn+0x36>
 80098e0:	4b60      	ldr	r3, [pc, #384]	; (8009a64 <lwip_netconn_do_delconn+0x1ac>)
 80098e2:	f240 425f 	movw	r2, #1119	; 0x45f
 80098e6:	4960      	ldr	r1, [pc, #384]	; (8009a68 <lwip_netconn_do_delconn+0x1b0>)
 80098e8:	4860      	ldr	r0, [pc, #384]	; (8009a6c <lwip_netconn_do_delconn+0x1b4>)
 80098ea:	f00e f807 	bl	80178fc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <lwip_netconn_do_delconn+0x48>
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d002      	beq.n	8009900 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80098fa:	7afb      	ldrb	r3, [r7, #11]
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d109      	bne.n	8009914 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009900:	7afb      	ldrb	r3, [r7, #11]
 8009902:	2b03      	cmp	r3, #3
 8009904:	d10a      	bne.n	800991c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	7f1b      	ldrb	r3, [r3, #28]
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b00      	cmp	r3, #0
 8009912:	d103      	bne.n	800991c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	22fb      	movs	r2, #251	; 0xfb
 8009918:	711a      	strb	r2, [r3, #4]
 800991a:	e097      	b.n	8009a4c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	2b03      	cmp	r3, #3
 8009920:	d10d      	bne.n	800993e <lwip_netconn_do_delconn+0x86>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	7f1b      	ldrb	r3, [r3, #28]
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d106      	bne.n	800993e <lwip_netconn_do_delconn+0x86>
 8009930:	4b4c      	ldr	r3, [pc, #304]	; (8009a64 <lwip_netconn_do_delconn+0x1ac>)
 8009932:	f240 427b 	movw	r2, #1147	; 0x47b
 8009936:	494e      	ldr	r1, [pc, #312]	; (8009a70 <lwip_netconn_do_delconn+0x1b8>)
 8009938:	484c      	ldr	r0, [pc, #304]	; (8009a6c <lwip_netconn_do_delconn+0x1b4>)
 800993a:	f00d ffdf 	bl	80178fc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fdd1 	bl	80094f0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05f      	beq.n	8009a18 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009962:	2b10      	cmp	r3, #16
 8009964:	d00e      	beq.n	8009984 <lwip_netconn_do_delconn+0xcc>
 8009966:	2b20      	cmp	r3, #32
 8009968:	d000      	beq.n	800996c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800996a:	e051      	b.n	8009a10 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	4618      	mov	r0, r3
 800997e:	f009 fb47 	bl	8013010 <udp_remove>
          break;
 8009982:	e045      	b.n	8009a10 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d006      	beq.n	800999c <lwip_netconn_do_delconn+0xe4>
 800998e:	4b35      	ldr	r3, [pc, #212]	; (8009a64 <lwip_netconn_do_delconn+0x1ac>)
 8009990:	f240 4294 	movw	r2, #1172	; 0x494
 8009994:	4937      	ldr	r1, [pc, #220]	; (8009a74 <lwip_netconn_do_delconn+0x1bc>)
 8009996:	4835      	ldr	r0, [pc, #212]	; (8009a6c <lwip_netconn_do_delconn+0x1b4>)
 8009998:	f00d ffb0 	bl	80178fc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2204      	movs	r2, #4
 80099a2:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2203      	movs	r2, #3
 80099a8:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff fe17 	bl	80095ec <lwip_netconn_do_close_internal>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d04a      	beq.n	8009a5a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d006      	beq.n	80099dc <lwip_netconn_do_delconn+0x124>
 80099ce:	4b25      	ldr	r3, [pc, #148]	; (8009a64 <lwip_netconn_do_delconn+0x1ac>)
 80099d0:	f240 429a 	movw	r2, #1178	; 0x49a
 80099d4:	4928      	ldr	r1, [pc, #160]	; (8009a78 <lwip_netconn_do_delconn+0x1c0>)
 80099d6:	4825      	ldr	r0, [pc, #148]	; (8009a6c <lwip_netconn_do_delconn+0x1b4>)
 80099d8:	f00d ff90 	bl	80178fc <iprintf>
            UNLOCK_TCPIP_CORE();
 80099dc:	4827      	ldr	r0, [pc, #156]	; (8009a7c <lwip_netconn_do_delconn+0x1c4>)
 80099de:	f00d febc 	bl	801775a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	330c      	adds	r3, #12
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f00d fe13 	bl	8017616 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80099f0:	4822      	ldr	r0, [pc, #136]	; (8009a7c <lwip_netconn_do_delconn+0x1c4>)
 80099f2:	f00d fea3 	bl	801773c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d02c      	beq.n	8009a5a <lwip_netconn_do_delconn+0x1a2>
 8009a00:	4b18      	ldr	r3, [pc, #96]	; (8009a64 <lwip_netconn_do_delconn+0x1ac>)
 8009a02:	f240 429e 	movw	r2, #1182	; 0x49e
 8009a06:	491c      	ldr	r1, [pc, #112]	; (8009a78 <lwip_netconn_do_delconn+0x1c0>)
 8009a08:	4818      	ldr	r0, [pc, #96]	; (8009a6c <lwip_netconn_do_delconn+0x1b4>)
 8009a0a:	f00d ff77 	bl	80178fc <iprintf>
          return;
 8009a0e:	e024      	b.n	8009a5a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2200      	movs	r2, #0
 8009a16:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d007      	beq.n	8009a32 <lwip_netconn_do_delconn+0x17a>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	6810      	ldr	r0, [r2, #0]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d007      	beq.n	8009a4c <lwip_netconn_do_delconn+0x194>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	6810      	ldr	r0, [r2, #0]
 8009a46:	2200      	movs	r2, #0
 8009a48:	2102      	movs	r1, #2
 8009a4a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	330c      	adds	r3, #12
 8009a52:	4618      	mov	r0, r3
 8009a54:	f00d fe2a 	bl	80176ac <sys_sem_valid>
 8009a58:	e000      	b.n	8009a5c <lwip_netconn_do_delconn+0x1a4>
          return;
 8009a5a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	080190ec 	.word	0x080190ec
 8009a68:	0801945c 	.word	0x0801945c
 8009a6c:	08019130 	.word	0x08019130
 8009a70:	08019470 	.word	0x08019470
 8009a74:	08019490 	.word	0x08019490
 8009a78:	080194ac 	.word	0x080194ac
 8009a7c:	2000bda4 	.word	0x2000bda4

08009a80 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d026      	beq.n	8009ae4 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aa0:	2b10      	cmp	r3, #16
 8009aa2:	d00e      	beq.n	8009ac2 <lwip_netconn_do_bind+0x42>
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	d119      	bne.n	8009adc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6858      	ldr	r0, [r3, #4]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6899      	ldr	r1, [r3, #8]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	899b      	ldrh	r3, [r3, #12]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f009 f994 	bl	8012de4 <udp_bind>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]
        break;
 8009ac0:	e012      	b.n	8009ae8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6858      	ldr	r0, [r3, #4]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	6899      	ldr	r1, [r3, #8]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	899b      	ldrh	r3, [r3, #12]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	f002 ffc7 	bl	800ca64 <tcp_bind>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8009ada:	e005      	b.n	8009ae8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009adc:	23fa      	movs	r3, #250	; 0xfa
 8009ade:	73fb      	strb	r3, [r7, #15]
        break;
 8009ae0:	bf00      	nop
 8009ae2:	e001      	b.n	8009ae8 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8009ae4:	23fa      	movs	r3, #250	; 0xfa
 8009ae6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	7bfa      	ldrb	r2, [r7, #15]
 8009aec:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d07f      	beq.n	8009c0e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b18:	2b10      	cmp	r3, #16
 8009b1a:	d175      	bne.n	8009c08 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d165      	bne.n	8009bf2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	7d1b      	ldrb	r3, [r3, #20]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009b32:	23fa      	movs	r3, #250	; 0xfa
 8009b34:	72fb      	strb	r3, [r7, #11]
 8009b36:	e06c      	b.n	8009c12 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009b38:	23ff      	movs	r3, #255	; 0xff
 8009b3a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f107 020b 	add.w	r2, r7, #11
 8009b46:	7cf9      	ldrb	r1, [r7, #19]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f003 f843 	bl	800cbd4 <tcp_listen_with_backlog_and_err>
 8009b4e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d05d      	beq.n	8009c12 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3310      	adds	r3, #16
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f00d fd14 	bl	801758a <sys_mbox_valid>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3310      	adds	r3, #16
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f00d fc84 	bl	801747c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3310      	adds	r3, #16
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f00d fd16 	bl	80175ac <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3314      	adds	r3, #20
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f00d fcfd 	bl	801758a <sys_mbox_valid>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d108      	bne.n	8009ba8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3314      	adds	r3, #20
 8009b9c:	2106      	movs	r1, #6
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f00d fc4a 	bl	8017438 <sys_mbox_new>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009ba8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d118      	bne.n	8009be2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4610      	mov	r0, r2
 8009bce:	f003 ffc7 	bl	800db60 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	4912      	ldr	r1, [pc, #72]	; (8009c24 <lwip_netconn_do_listen+0x12c>)
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f004 f838 	bl	800dc50 <tcp_accept>
 8009be0:	e017      	b.n	8009c12 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f002 fdee 	bl	800c7c4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2200      	movs	r2, #0
 8009bee:	605a      	str	r2, [r3, #4]
 8009bf0:	e00f      	b.n	8009c12 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d102      	bne.n	8009c02 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	72fb      	strb	r3, [r7, #11]
 8009c00:	e007      	b.n	8009c12 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009c02:	23f5      	movs	r3, #245	; 0xf5
 8009c04:	72fb      	strb	r3, [r7, #11]
 8009c06:	e004      	b.n	8009c12 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009c08:	23f0      	movs	r3, #240	; 0xf0
 8009c0a:	72fb      	strb	r3, [r7, #11]
 8009c0c:	e001      	b.n	8009c12 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009c0e:	23f5      	movs	r3, #245	; 0xf5
 8009c10:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009c12:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009c1a:	bf00      	nop
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	08009109 	.word	0x08009109

08009c28 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	2200      	movs	r2, #0
 8009c38:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d022      	beq.n	8009c8a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c4e:	2b10      	cmp	r3, #16
 8009c50:	d11b      	bne.n	8009c8a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c5e:	d202      	bcs.n	8009c66 <lwip_netconn_do_recv+0x3e>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	e001      	b.n	8009c6a <lwip_netconn_do_recv+0x42>
 8009c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c6a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	89fa      	ldrh	r2, [r7, #14]
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f003 f8b0 	bl	800cddc <tcp_recved>
        remaining -= recved;
 8009c7c:	89fb      	ldrh	r3, [r7, #14]
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e6      	bne.n	8009c58 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009c8a:	bf00      	nop
 8009c8c:	3718      	adds	r7, #24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b088      	sub	sp, #32
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <lwip_netconn_do_writemore+0x24>
 8009caa:	4b96      	ldr	r3, [pc, #600]	; (8009f04 <lwip_netconn_do_writemore+0x270>)
 8009cac:	f240 6273 	movw	r2, #1651	; 0x673
 8009cb0:	4995      	ldr	r1, [pc, #596]	; (8009f08 <lwip_netconn_do_writemore+0x274>)
 8009cb2:	4896      	ldr	r0, [pc, #600]	; (8009f0c <lwip_netconn_do_writemore+0x278>)
 8009cb4:	f00d fe22 	bl	80178fc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	785b      	ldrb	r3, [r3, #1]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d006      	beq.n	8009cce <lwip_netconn_do_writemore+0x3a>
 8009cc0:	4b90      	ldr	r3, [pc, #576]	; (8009f04 <lwip_netconn_do_writemore+0x270>)
 8009cc2:	f240 6274 	movw	r2, #1652	; 0x674
 8009cc6:	4992      	ldr	r1, [pc, #584]	; (8009f10 <lwip_netconn_do_writemore+0x27c>)
 8009cc8:	4890      	ldr	r0, [pc, #576]	; (8009f0c <lwip_netconn_do_writemore+0x278>)
 8009cca:	f00d fe17 	bl	80178fc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d106      	bne.n	8009ce4 <lwip_netconn_do_writemore+0x50>
 8009cd6:	4b8b      	ldr	r3, [pc, #556]	; (8009f04 <lwip_netconn_do_writemore+0x270>)
 8009cd8:	f240 6275 	movw	r2, #1653	; 0x675
 8009cdc:	498d      	ldr	r1, [pc, #564]	; (8009f14 <lwip_netconn_do_writemore+0x280>)
 8009cde:	488b      	ldr	r0, [pc, #556]	; (8009f0c <lwip_netconn_do_writemore+0x278>)
 8009ce0:	f00d fe0c 	bl	80178fc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d106      	bne.n	8009cfa <lwip_netconn_do_writemore+0x66>
 8009cec:	4b85      	ldr	r3, [pc, #532]	; (8009f04 <lwip_netconn_do_writemore+0x270>)
 8009cee:	f240 6276 	movw	r2, #1654	; 0x676
 8009cf2:	4989      	ldr	r1, [pc, #548]	; (8009f18 <lwip_netconn_do_writemore+0x284>)
 8009cf4:	4885      	ldr	r0, [pc, #532]	; (8009f0c <lwip_netconn_do_writemore+0x278>)
 8009cf6:	f00d fe01 	bl	80178fc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	699a      	ldr	r2, [r3, #24]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d306      	bcc.n	8009d18 <lwip_netconn_do_writemore+0x84>
 8009d0a:	4b7e      	ldr	r3, [pc, #504]	; (8009f04 <lwip_netconn_do_writemore+0x270>)
 8009d0c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009d10:	4982      	ldr	r1, [pc, #520]	; (8009f1c <lwip_netconn_do_writemore+0x288>)
 8009d12:	487e      	ldr	r0, [pc, #504]	; (8009f0c <lwip_netconn_do_writemore+0x278>)
 8009d14:	f00d fdf2 	bl	80178fc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	899b      	ldrh	r3, [r3, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d106      	bne.n	8009d30 <lwip_netconn_do_writemore+0x9c>
 8009d22:	4b78      	ldr	r3, [pc, #480]	; (8009f04 <lwip_netconn_do_writemore+0x270>)
 8009d24:	f240 6279 	movw	r2, #1657	; 0x679
 8009d28:	497d      	ldr	r1, [pc, #500]	; (8009f20 <lwip_netconn_do_writemore+0x28c>)
 8009d2a:	4878      	ldr	r0, [pc, #480]	; (8009f0c <lwip_netconn_do_writemore+0x278>)
 8009d2c:	f00d fde6 	bl	80178fc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	7f1b      	ldrb	r3, [r3, #28]
 8009d36:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	7f1b      	ldrb	r3, [r3, #28]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d104      	bne.n	8009d4e <lwip_netconn_do_writemore+0xba>
 8009d44:	7ebb      	ldrb	r3, [r7, #26]
 8009d46:	f003 0304 	and.w	r3, r3, #4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <lwip_netconn_do_writemore+0xbe>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <lwip_netconn_do_writemore+0xc0>
 8009d52:	2300      	movs	r3, #0
 8009d54:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	4413      	add	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d80:	d307      	bcc.n	8009d92 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d86:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009d88:	7ebb      	ldrb	r3, [r7, #26]
 8009d8a:	f043 0302 	orr.w	r3, r3, #2
 8009d8e:	76bb      	strb	r3, [r7, #26]
 8009d90:	e001      	b.n	8009d96 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d9e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009da0:	89fa      	ldrh	r2, [r7, #14]
 8009da2:	8bbb      	ldrh	r3, [r7, #28]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d216      	bcs.n	8009dd6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009da8:	89fb      	ldrh	r3, [r7, #14]
 8009daa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009dac:	7e3b      	ldrb	r3, [r7, #24]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00d      	beq.n	8009dce <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009db2:	8bbb      	ldrh	r3, [r7, #28]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10e      	bne.n	8009dd6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d102      	bne.n	8009dc8 <lwip_netconn_do_writemore+0x134>
 8009dc2:	f06f 0306 	mvn.w	r3, #6
 8009dc6:	e000      	b.n	8009dca <lwip_netconn_do_writemore+0x136>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009dcc:	e07d      	b.n	8009eca <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009dce:	7ebb      	ldrb	r3, [r7, #26]
 8009dd0:	f043 0302 	orr.w	r3, r3, #2
 8009dd4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	8bbb      	ldrh	r3, [r7, #28]
 8009dde:	441a      	add	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d906      	bls.n	8009dfa <lwip_netconn_do_writemore+0x166>
 8009dec:	4b45      	ldr	r3, [pc, #276]	; (8009f04 <lwip_netconn_do_writemore+0x270>)
 8009dee:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009df2:	494c      	ldr	r1, [pc, #304]	; (8009f24 <lwip_netconn_do_writemore+0x290>)
 8009df4:	4845      	ldr	r0, [pc, #276]	; (8009f0c <lwip_netconn_do_writemore+0x278>)
 8009df6:	f00d fd81 	bl	80178fc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009dfa:	8bbb      	ldrh	r3, [r7, #28]
 8009dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d103      	bne.n	8009e0c <lwip_netconn_do_writemore+0x178>
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e0a:	d209      	bcs.n	8009e20 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009e10:	8bba      	ldrh	r2, [r7, #28]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d10b      	bne.n	8009e2e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	899b      	ldrh	r3, [r3, #12]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d906      	bls.n	8009e2e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009e20:	2301      	movs	r3, #1
 8009e22:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009e24:	7ebb      	ldrb	r3, [r7, #26]
 8009e26:	f043 0302 	orr.w	r3, r3, #2
 8009e2a:	76bb      	strb	r3, [r7, #26]
 8009e2c:	e001      	b.n	8009e32 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6858      	ldr	r0, [r3, #4]
 8009e36:	7ebb      	ldrb	r3, [r7, #26]
 8009e38:	8bba      	ldrh	r2, [r7, #28]
 8009e3a:	6979      	ldr	r1, [r7, #20]
 8009e3c:	f006 fdcc 	bl	80109d8 <tcp_write>
 8009e40:	4603      	mov	r3, r0
 8009e42:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009e44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d12c      	bne.n	8009ea6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	6999      	ldr	r1, [r3, #24]
 8009e52:	8bba      	ldrh	r2, [r7, #28]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	440a      	add	r2, r1
 8009e5a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	6919      	ldr	r1, [r3, #16]
 8009e62:	8bba      	ldrh	r2, [r7, #28]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	440a      	add	r2, r1
 8009e6a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d113      	bne.n	8009ea6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	899a      	ldrh	r2, [r3, #12]
 8009e84:	3a01      	subs	r2, #1
 8009e86:	b292      	uxth	r2, r2
 8009e88:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	899b      	ldrh	r3, [r3, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d008      	beq.n	8009ea6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a1b      	ldr	r3, [r3, #32]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	3208      	adds	r2, #8
 8009e9c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009ea6:	7e7b      	ldrb	r3, [r7, #25]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d004      	beq.n	8009eb6 <lwip_netconn_do_writemore+0x222>
 8009eac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f43f af50 	beq.w	8009d56 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009eb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <lwip_netconn_do_writemore+0x234>
 8009ebe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec6:	d146      	bne.n	8009f56 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009ec8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009eca:	7e3b      	ldrb	r3, [r7, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d02b      	beq.n	8009f28 <lwip_netconn_do_writemore+0x294>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a1b      	ldr	r3, [r3, #32]
 8009ed4:	699a      	ldr	r2, [r3, #24]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d223      	bcs.n	8009f28 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d005      	beq.n	8009ef4 <lwip_netconn_do_writemore+0x260>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	2200      	movs	r2, #0
 8009eee:	2103      	movs	r1, #3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7f1b      	ldrb	r3, [r3, #28]
 8009ef8:	f043 0310 	orr.w	r3, r3, #16
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	771a      	strb	r2, [r3, #28]
 8009f02:	e028      	b.n	8009f56 <lwip_netconn_do_writemore+0x2c2>
 8009f04:	080190ec 	.word	0x080190ec
 8009f08:	08019244 	.word	0x08019244
 8009f0c:	08019130 	.word	0x08019130
 8009f10:	0801954c 	.word	0x0801954c
 8009f14:	08019254 	.word	0x08019254
 8009f18:	0801956c 	.word	0x0801956c
 8009f1c:	08019584 	.word	0x08019584
 8009f20:	080195c4 	.word	0x080195c4
 8009f24:	080195ec 	.word	0x080195ec
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f30:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009f34:	d305      	bcc.n	8009f42 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d909      	bls.n	8009f56 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <lwip_netconn_do_writemore+0x2c2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2103      	movs	r1, #3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d11d      	bne.n	8009f9a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	699a      	ldr	r2, [r3, #24]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d002      	beq.n	8009f74 <lwip_netconn_do_writemore+0x2e0>
 8009f6e:	7e3b      	ldrb	r3, [r7, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009f74:	2301      	movs	r3, #1
 8009f76:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f007 fb17 	bl	80115b0 <tcp_output>
 8009f82:	4603      	mov	r3, r0
 8009f84:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009f86:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009f8a:	f113 0f04 	cmn.w	r3, #4
 8009f8e:	d12c      	bne.n	8009fea <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009f90:	7b3b      	ldrb	r3, [r7, #12]
 8009f92:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009f94:	2301      	movs	r3, #1
 8009f96:	76fb      	strb	r3, [r7, #27]
 8009f98:	e027      	b.n	8009fea <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009f9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa2:	d120      	bne.n	8009fe6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f007 fb01 	bl	80115b0 <tcp_output>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009fb2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009fb6:	f113 0f04 	cmn.w	r3, #4
 8009fba:	d104      	bne.n	8009fc6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009fbc:	7b7b      	ldrb	r3, [r7, #13]
 8009fbe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	76fb      	strb	r3, [r7, #27]
 8009fc4:	e011      	b.n	8009fea <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009fc6:	7e3b      	ldrb	r3, [r7, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00e      	beq.n	8009fea <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <lwip_netconn_do_writemore+0x348>
 8009fd6:	f06f 0306 	mvn.w	r3, #6
 8009fda:	e000      	b.n	8009fde <lwip_netconn_do_writemore+0x34a>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	76fb      	strb	r3, [r7, #27]
 8009fe4:	e001      	b.n	8009fea <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009fea:	7efb      	ldrb	r3, [r7, #27]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d015      	beq.n	800a01c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	330c      	adds	r3, #12
 8009ff8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	7ffa      	ldrb	r2, [r7, #31]
 800a000:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d006      	beq.n	800a022 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a014:	68b8      	ldr	r0, [r7, #8]
 800a016:	f00d fb2f 	bl	8017678 <sys_sem_signal>
 800a01a:	e002      	b.n	800a022 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a01c:	f04f 33ff 	mov.w	r3, #4294967295
 800a020:	e000      	b.n	800a024 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3720      	adds	r7, #32
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fe fd22 	bl	8008a86 <netconn_err>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d166      	bne.n	800a11c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a058:	2b10      	cmp	r3, #16
 800a05a:	d15d      	bne.n	800a118 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	785b      	ldrb	r3, [r3, #1]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a066:	23fb      	movs	r3, #251	; 0xfb
 800a068:	73fb      	strb	r3, [r7, #15]
 800a06a:	e057      	b.n	800a11c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d04d      	beq.n	800a112 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2201      	movs	r2, #1
 800a07c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d006      	beq.n	800a096 <lwip_netconn_do_write+0x6a>
 800a088:	4b28      	ldr	r3, [pc, #160]	; (800a12c <lwip_netconn_do_write+0x100>)
 800a08a:	f240 7223 	movw	r2, #1827	; 0x723
 800a08e:	4928      	ldr	r1, [pc, #160]	; (800a130 <lwip_netconn_do_write+0x104>)
 800a090:	4828      	ldr	r0, [pc, #160]	; (800a134 <lwip_netconn_do_write+0x108>)
 800a092:	f00d fc33 	bl	80178fc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d106      	bne.n	800a0ac <lwip_netconn_do_write+0x80>
 800a09e:	4b23      	ldr	r3, [pc, #140]	; (800a12c <lwip_netconn_do_write+0x100>)
 800a0a0:	f240 7224 	movw	r2, #1828	; 0x724
 800a0a4:	4924      	ldr	r1, [pc, #144]	; (800a138 <lwip_netconn_do_write+0x10c>)
 800a0a6:	4823      	ldr	r0, [pc, #140]	; (800a134 <lwip_netconn_do_write+0x108>)
 800a0a8:	f00d fc28 	bl	80178fc <iprintf>
        msg->conn->current_msg = msg;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff fdea 	bl	8009c94 <lwip_netconn_do_writemore>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d02e      	beq.n	800a124 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	785b      	ldrb	r3, [r3, #1]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d006      	beq.n	800a0de <lwip_netconn_do_write+0xb2>
 800a0d0:	4b16      	ldr	r3, [pc, #88]	; (800a12c <lwip_netconn_do_write+0x100>)
 800a0d2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a0d6:	4919      	ldr	r1, [pc, #100]	; (800a13c <lwip_netconn_do_write+0x110>)
 800a0d8:	4816      	ldr	r0, [pc, #88]	; (800a134 <lwip_netconn_do_write+0x108>)
 800a0da:	f00d fc0f 	bl	80178fc <iprintf>
          UNLOCK_TCPIP_CORE();
 800a0de:	4818      	ldr	r0, [pc, #96]	; (800a140 <lwip_netconn_do_write+0x114>)
 800a0e0:	f00d fb3b 	bl	801775a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	330c      	adds	r3, #12
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f00d fa92 	bl	8017616 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a0f2:	4813      	ldr	r0, [pc, #76]	; (800a140 <lwip_netconn_do_write+0x114>)
 800a0f4:	f00d fb22 	bl	801773c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d110      	bne.n	800a124 <lwip_netconn_do_write+0xf8>
 800a102:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <lwip_netconn_do_write+0x100>)
 800a104:	f240 722c 	movw	r2, #1836	; 0x72c
 800a108:	490c      	ldr	r1, [pc, #48]	; (800a13c <lwip_netconn_do_write+0x110>)
 800a10a:	480a      	ldr	r0, [pc, #40]	; (800a134 <lwip_netconn_do_write+0x108>)
 800a10c:	f00d fbf6 	bl	80178fc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a110:	e008      	b.n	800a124 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a112:	23f5      	movs	r3, #245	; 0xf5
 800a114:	73fb      	strb	r3, [r7, #15]
 800a116:	e001      	b.n	800a11c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a118:	23fa      	movs	r3, #250	; 0xfa
 800a11a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	7bfa      	ldrb	r2, [r7, #15]
 800a120:	711a      	strb	r2, [r3, #4]
 800a122:	e000      	b.n	800a126 <lwip_netconn_do_write+0xfa>
        return;
 800a124:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	080190ec 	.word	0x080190ec
 800a130:	08019490 	.word	0x08019490
 800a134:	08019130 	.word	0x08019130
 800a138:	08019618 	.word	0x08019618
 800a13c:	080194ac 	.word	0x080194ac
 800a140:	2000bda4 	.word	0x2000bda4

0800a144 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d069      	beq.n	800a236 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a16c:	2b10      	cmp	r3, #16
 800a16e:	d162      	bne.n	800a236 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a174:	2b03      	cmp	r3, #3
 800a176:	d002      	beq.n	800a17e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d05b      	beq.n	800a236 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	2b03      	cmp	r3, #3
 800a182:	d103      	bne.n	800a18c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	22f5      	movs	r2, #245	; 0xf5
 800a188:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a18a:	e059      	b.n	800a240 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d103      	bne.n	800a19a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	22fb      	movs	r2, #251	; 0xfb
 800a196:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a198:	e052      	b.n	800a240 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	7a1b      	ldrb	r3, [r3, #8]
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d004      	beq.n	800a1b0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff f9a0 	bl	80094f0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d006      	beq.n	800a1c8 <lwip_netconn_do_close+0x84>
 800a1ba:	4b23      	ldr	r3, [pc, #140]	; (800a248 <lwip_netconn_do_close+0x104>)
 800a1bc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a1c0:	4922      	ldr	r1, [pc, #136]	; (800a24c <lwip_netconn_do_close+0x108>)
 800a1c2:	4823      	ldr	r0, [pc, #140]	; (800a250 <lwip_netconn_do_close+0x10c>)
 800a1c4:	f00d fb9a 	bl	80178fc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7ff fa04 	bl	80095ec <lwip_netconn_do_close_internal>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d029      	beq.n	800a23e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	785b      	ldrb	r3, [r3, #1]
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d006      	beq.n	800a202 <lwip_netconn_do_close+0xbe>
 800a1f4:	4b14      	ldr	r3, [pc, #80]	; (800a248 <lwip_netconn_do_close+0x104>)
 800a1f6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a1fa:	4916      	ldr	r1, [pc, #88]	; (800a254 <lwip_netconn_do_close+0x110>)
 800a1fc:	4814      	ldr	r0, [pc, #80]	; (800a250 <lwip_netconn_do_close+0x10c>)
 800a1fe:	f00d fb7d 	bl	80178fc <iprintf>
        UNLOCK_TCPIP_CORE();
 800a202:	4815      	ldr	r0, [pc, #84]	; (800a258 <lwip_netconn_do_close+0x114>)
 800a204:	f00d faa9 	bl	801775a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	330c      	adds	r3, #12
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f00d fa00 	bl	8017616 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a216:	4810      	ldr	r0, [pc, #64]	; (800a258 <lwip_netconn_do_close+0x114>)
 800a218:	f00d fa90 	bl	801773c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	785b      	ldrb	r3, [r3, #1]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <lwip_netconn_do_close+0xfa>
 800a226:	4b08      	ldr	r3, [pc, #32]	; (800a248 <lwip_netconn_do_close+0x104>)
 800a228:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a22c:	4909      	ldr	r1, [pc, #36]	; (800a254 <lwip_netconn_do_close+0x110>)
 800a22e:	4808      	ldr	r0, [pc, #32]	; (800a250 <lwip_netconn_do_close+0x10c>)
 800a230:	f00d fb64 	bl	80178fc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a234:	e003      	b.n	800a23e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	22f5      	movs	r2, #245	; 0xf5
 800a23a:	711a      	strb	r2, [r3, #4]
 800a23c:	e000      	b.n	800a240 <lwip_netconn_do_close+0xfc>
      return;
 800a23e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	080190ec 	.word	0x080190ec
 800a24c:	08019490 	.word	0x08019490
 800a250:	08019130 	.word	0x08019130
 800a254:	080194ac 	.word	0x080194ac
 800a258:	2000bda4 	.word	0x2000bda4

0800a25c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d013      	beq.n	800a292 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00b      	beq.n	800a28a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4618      	mov	r0, r3
 800a278:	f001 fdf2 	bl	800be60 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	2006      	movs	r0, #6
 800a28e:	f000 ff3b 	bl	800b108 <memp_free>
  }
}
 800a292:	bf00      	nop
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d108      	bne.n	800a2c0 <netbuf_data+0x24>
 800a2ae:	4b1b      	ldr	r3, [pc, #108]	; (800a31c <netbuf_data+0x80>)
 800a2b0:	22c6      	movs	r2, #198	; 0xc6
 800a2b2:	491b      	ldr	r1, [pc, #108]	; (800a320 <netbuf_data+0x84>)
 800a2b4:	481b      	ldr	r0, [pc, #108]	; (800a324 <netbuf_data+0x88>)
 800a2b6:	f00d fb21 	bl	80178fc <iprintf>
 800a2ba:	f06f 030f 	mvn.w	r3, #15
 800a2be:	e029      	b.n	800a314 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d108      	bne.n	800a2d8 <netbuf_data+0x3c>
 800a2c6:	4b15      	ldr	r3, [pc, #84]	; (800a31c <netbuf_data+0x80>)
 800a2c8:	22c7      	movs	r2, #199	; 0xc7
 800a2ca:	4917      	ldr	r1, [pc, #92]	; (800a328 <netbuf_data+0x8c>)
 800a2cc:	4815      	ldr	r0, [pc, #84]	; (800a324 <netbuf_data+0x88>)
 800a2ce:	f00d fb15 	bl	80178fc <iprintf>
 800a2d2:	f06f 030f 	mvn.w	r3, #15
 800a2d6:	e01d      	b.n	800a314 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d108      	bne.n	800a2f0 <netbuf_data+0x54>
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <netbuf_data+0x80>)
 800a2e0:	22c8      	movs	r2, #200	; 0xc8
 800a2e2:	4912      	ldr	r1, [pc, #72]	; (800a32c <netbuf_data+0x90>)
 800a2e4:	480f      	ldr	r0, [pc, #60]	; (800a324 <netbuf_data+0x88>)
 800a2e6:	f00d fb09 	bl	80178fc <iprintf>
 800a2ea:	f06f 030f 	mvn.w	r3, #15
 800a2ee:	e011      	b.n	800a314 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <netbuf_data+0x62>
    return ERR_BUF;
 800a2f8:	f06f 0301 	mvn.w	r3, #1
 800a2fc:	e00a      	b.n	800a314 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	895a      	ldrh	r2, [r3, #10]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	08019644 	.word	0x08019644
 800a320:	0801974c 	.word	0x0801974c
 800a324:	08019694 	.word	0x08019694
 800a328:	08019768 	.word	0x08019768
 800a32c:	08019788 	.word	0x08019788

0800a330 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d108      	bne.n	800a350 <netbuf_next+0x20>
 800a33e:	4b11      	ldr	r3, [pc, #68]	; (800a384 <netbuf_next+0x54>)
 800a340:	22e0      	movs	r2, #224	; 0xe0
 800a342:	4911      	ldr	r1, [pc, #68]	; (800a388 <netbuf_next+0x58>)
 800a344:	4811      	ldr	r0, [pc, #68]	; (800a38c <netbuf_next+0x5c>)
 800a346:	f00d fad9 	bl	80178fc <iprintf>
 800a34a:	f04f 33ff 	mov.w	r3, #4294967295
 800a34e:	e014      	b.n	800a37a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <netbuf_next+0x30>
    return -1;
 800a35a:	f04f 33ff 	mov.w	r3, #4294967295
 800a35e:	e00c      	b.n	800a37a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <netbuf_next+0x48>
    return 1;
 800a374:	2301      	movs	r3, #1
 800a376:	e000      	b.n	800a37a <netbuf_next+0x4a>
  }
  return 0;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	08019644 	.word	0x08019644
 800a388:	080197a4 	.word	0x080197a4
 800a38c:	08019694 	.word	0x08019694

0800a390 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a39a:	f008 f9cf 	bl	801273c <sys_timeouts_sleeptime>
 800a39e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a6:	d10b      	bne.n	800a3c0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a3a8:	4813      	ldr	r0, [pc, #76]	; (800a3f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3aa:	f00d f9d6 	bl	801775a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f00d f88e 	bl	80174d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a3b8:	480f      	ldr	r0, [pc, #60]	; (800a3f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3ba:	f00d f9bf 	bl	801773c <sys_mutex_lock>
    return;
 800a3be:	e018      	b.n	800a3f2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d102      	bne.n	800a3cc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a3c6:	f008 f97f 	bl	80126c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a3ca:	e7e6      	b.n	800a39a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a3cc:	480a      	ldr	r0, [pc, #40]	; (800a3f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3ce:	f00d f9c4 	bl	801775a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f00d f87c 	bl	80174d4 <sys_arch_mbox_fetch>
 800a3dc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a3de:	4806      	ldr	r0, [pc, #24]	; (800a3f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3e0:	f00d f9ac 	bl	801773c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ea:	d102      	bne.n	800a3f2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a3ec:	f008 f96c 	bl	80126c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a3f0:	e7d3      	b.n	800a39a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	2000bda4 	.word	0x2000bda4

0800a3fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a404:	4810      	ldr	r0, [pc, #64]	; (800a448 <tcpip_thread+0x4c>)
 800a406:	f00d f999 	bl	801773c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a40a:	4b10      	ldr	r3, [pc, #64]	; (800a44c <tcpip_thread+0x50>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d005      	beq.n	800a41e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a412:	4b0e      	ldr	r3, [pc, #56]	; (800a44c <tcpip_thread+0x50>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a0e      	ldr	r2, [pc, #56]	; (800a450 <tcpip_thread+0x54>)
 800a418:	6812      	ldr	r2, [r2, #0]
 800a41a:	4610      	mov	r0, r2
 800a41c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a41e:	f107 030c 	add.w	r3, r7, #12
 800a422:	4619      	mov	r1, r3
 800a424:	480b      	ldr	r0, [pc, #44]	; (800a454 <tcpip_thread+0x58>)
 800a426:	f7ff ffb3 	bl	800a390 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d106      	bne.n	800a43e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a430:	4b09      	ldr	r3, [pc, #36]	; (800a458 <tcpip_thread+0x5c>)
 800a432:	2291      	movs	r2, #145	; 0x91
 800a434:	4909      	ldr	r1, [pc, #36]	; (800a45c <tcpip_thread+0x60>)
 800a436:	480a      	ldr	r0, [pc, #40]	; (800a460 <tcpip_thread+0x64>)
 800a438:	f00d fa60 	bl	80178fc <iprintf>
      continue;
 800a43c:	e003      	b.n	800a446 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f80f 	bl	800a464 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a446:	e7ea      	b.n	800a41e <tcpip_thread+0x22>
 800a448:	2000bda4 	.word	0x2000bda4
 800a44c:	200085fc 	.word	0x200085fc
 800a450:	20008600 	.word	0x20008600
 800a454:	20008604 	.word	0x20008604
 800a458:	080197dc 	.word	0x080197dc
 800a45c:	0801980c 	.word	0x0801980c
 800a460:	0801982c 	.word	0x0801982c

0800a464 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d018      	beq.n	800a4a6 <tcpip_thread_handle_msg+0x42>
 800a474:	2b02      	cmp	r3, #2
 800a476:	d021      	beq.n	800a4bc <tcpip_thread_handle_msg+0x58>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d126      	bne.n	800a4ca <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	6850      	ldr	r0, [r2, #4]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6892      	ldr	r2, [r2, #8]
 800a488:	4611      	mov	r1, r2
 800a48a:	4798      	blx	r3
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d004      	beq.n	800a49c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	4618      	mov	r0, r3
 800a498:	f001 fce2 	bl	800be60 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	2009      	movs	r0, #9
 800a4a0:	f000 fe32 	bl	800b108 <memp_free>
      break;
 800a4a4:	e018      	b.n	800a4d8 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6892      	ldr	r2, [r2, #8]
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a4b2:	6879      	ldr	r1, [r7, #4]
 800a4b4:	2008      	movs	r0, #8
 800a4b6:	f000 fe27 	bl	800b108 <memp_free>
      break;
 800a4ba:	e00d      	b.n	800a4d8 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6892      	ldr	r2, [r2, #8]
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	4798      	blx	r3
      break;
 800a4c8:	e006      	b.n	800a4d8 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a4ca:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <tcpip_thread_handle_msg+0x7c>)
 800a4cc:	22cf      	movs	r2, #207	; 0xcf
 800a4ce:	4905      	ldr	r1, [pc, #20]	; (800a4e4 <tcpip_thread_handle_msg+0x80>)
 800a4d0:	4805      	ldr	r0, [pc, #20]	; (800a4e8 <tcpip_thread_handle_msg+0x84>)
 800a4d2:	f00d fa13 	bl	80178fc <iprintf>
      break;
 800a4d6:	bf00      	nop
  }
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	080197dc 	.word	0x080197dc
 800a4e4:	0801980c 	.word	0x0801980c
 800a4e8:	0801982c 	.word	0x0801982c

0800a4ec <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a4f8:	481a      	ldr	r0, [pc, #104]	; (800a564 <tcpip_inpkt+0x78>)
 800a4fa:	f00d f846 	bl	801758a <sys_mbox_valid>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d105      	bne.n	800a510 <tcpip_inpkt+0x24>
 800a504:	4b18      	ldr	r3, [pc, #96]	; (800a568 <tcpip_inpkt+0x7c>)
 800a506:	22fc      	movs	r2, #252	; 0xfc
 800a508:	4918      	ldr	r1, [pc, #96]	; (800a56c <tcpip_inpkt+0x80>)
 800a50a:	4819      	ldr	r0, [pc, #100]	; (800a570 <tcpip_inpkt+0x84>)
 800a50c:	f00d f9f6 	bl	80178fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a510:	2009      	movs	r0, #9
 800a512:	f000 fda7 	bl	800b064 <memp_malloc>
 800a516:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d102      	bne.n	800a524 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a51e:	f04f 33ff 	mov.w	r3, #4294967295
 800a522:	e01a      	b.n	800a55a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	2200      	movs	r2, #0
 800a528:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a53c:	6979      	ldr	r1, [r7, #20]
 800a53e:	4809      	ldr	r0, [pc, #36]	; (800a564 <tcpip_inpkt+0x78>)
 800a540:	f00c ffae 	bl	80174a0 <sys_mbox_trypost>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d006      	beq.n	800a558 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a54a:	6979      	ldr	r1, [r7, #20]
 800a54c:	2009      	movs	r0, #9
 800a54e:	f000 fddb 	bl	800b108 <memp_free>
    return ERR_MEM;
 800a552:	f04f 33ff 	mov.w	r3, #4294967295
 800a556:	e000      	b.n	800a55a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a558:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20008604 	.word	0x20008604
 800a568:	080197dc 	.word	0x080197dc
 800a56c:	08019854 	.word	0x08019854
 800a570:	0801982c 	.word	0x0801982c

0800a574 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a584:	f003 0318 	and.w	r3, r3, #24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d006      	beq.n	800a59a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a58c:	4a08      	ldr	r2, [pc, #32]	; (800a5b0 <tcpip_input+0x3c>)
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff ffab 	bl	800a4ec <tcpip_inpkt>
 800a596:	4603      	mov	r3, r0
 800a598:	e005      	b.n	800a5a6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a59a:	4a06      	ldr	r2, [pc, #24]	; (800a5b4 <tcpip_input+0x40>)
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff ffa4 	bl	800a4ec <tcpip_inpkt>
 800a5a4:	4603      	mov	r3, r0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0801728d 	.word	0x0801728d
 800a5b4:	08016171 	.word	0x08016171

0800a5b8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a5c2:	4819      	ldr	r0, [pc, #100]	; (800a628 <tcpip_try_callback+0x70>)
 800a5c4:	f00c ffe1 	bl	801758a <sys_mbox_valid>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <tcpip_try_callback+0x24>
 800a5ce:	4b17      	ldr	r3, [pc, #92]	; (800a62c <tcpip_try_callback+0x74>)
 800a5d0:	f240 125d 	movw	r2, #349	; 0x15d
 800a5d4:	4916      	ldr	r1, [pc, #88]	; (800a630 <tcpip_try_callback+0x78>)
 800a5d6:	4817      	ldr	r0, [pc, #92]	; (800a634 <tcpip_try_callback+0x7c>)
 800a5d8:	f00d f990 	bl	80178fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a5dc:	2008      	movs	r0, #8
 800a5de:	f000 fd41 	bl	800b064 <memp_malloc>
 800a5e2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ee:	e017      	b.n	800a620 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a602:	68f9      	ldr	r1, [r7, #12]
 800a604:	4808      	ldr	r0, [pc, #32]	; (800a628 <tcpip_try_callback+0x70>)
 800a606:	f00c ff4b 	bl	80174a0 <sys_mbox_trypost>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d006      	beq.n	800a61e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a610:	68f9      	ldr	r1, [r7, #12]
 800a612:	2008      	movs	r0, #8
 800a614:	f000 fd78 	bl	800b108 <memp_free>
    return ERR_MEM;
 800a618:	f04f 33ff 	mov.w	r3, #4294967295
 800a61c:	e000      	b.n	800a620 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20008604 	.word	0x20008604
 800a62c:	080197dc 	.word	0x080197dc
 800a630:	08019854 	.word	0x08019854
 800a634:	0801982c 	.word	0x0801982c

0800a638 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a644:	4806      	ldr	r0, [pc, #24]	; (800a660 <tcpip_send_msg_wait_sem+0x28>)
 800a646:	f00d f879 	bl	801773c <sys_mutex_lock>
  fn(apimsg);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	68b8      	ldr	r0, [r7, #8]
 800a64e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a650:	4803      	ldr	r0, [pc, #12]	; (800a660 <tcpip_send_msg_wait_sem+0x28>)
 800a652:	f00d f882 	bl	801775a <sys_mutex_unlock>
  return ERR_OK;
 800a656:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	2000bda4 	.word	0x2000bda4

0800a664 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af02      	add	r7, sp, #8
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a66e:	f000 f871 	bl	800a754 <lwip_init>

  tcpip_init_done = initfunc;
 800a672:	4a17      	ldr	r2, [pc, #92]	; (800a6d0 <tcpip_init+0x6c>)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a678:	4a16      	ldr	r2, [pc, #88]	; (800a6d4 <tcpip_init+0x70>)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a67e:	2106      	movs	r1, #6
 800a680:	4815      	ldr	r0, [pc, #84]	; (800a6d8 <tcpip_init+0x74>)
 800a682:	f00c fed9 	bl	8017438 <sys_mbox_new>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a68c:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <tcpip_init+0x78>)
 800a68e:	f240 2261 	movw	r2, #609	; 0x261
 800a692:	4913      	ldr	r1, [pc, #76]	; (800a6e0 <tcpip_init+0x7c>)
 800a694:	4813      	ldr	r0, [pc, #76]	; (800a6e4 <tcpip_init+0x80>)
 800a696:	f00d f931 	bl	80178fc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a69a:	4813      	ldr	r0, [pc, #76]	; (800a6e8 <tcpip_init+0x84>)
 800a69c:	f00d f832 	bl	8017704 <sys_mutex_new>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d006      	beq.n	800a6b4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	; (800a6dc <tcpip_init+0x78>)
 800a6a8:	f240 2265 	movw	r2, #613	; 0x265
 800a6ac:	490f      	ldr	r1, [pc, #60]	; (800a6ec <tcpip_init+0x88>)
 800a6ae:	480d      	ldr	r0, [pc, #52]	; (800a6e4 <tcpip_init+0x80>)
 800a6b0:	f00d f924 	bl	80178fc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6bc:	2200      	movs	r2, #0
 800a6be:	490c      	ldr	r1, [pc, #48]	; (800a6f0 <tcpip_init+0x8c>)
 800a6c0:	480c      	ldr	r0, [pc, #48]	; (800a6f4 <tcpip_init+0x90>)
 800a6c2:	f00d f857 	bl	8017774 <sys_thread_new>
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	200085fc 	.word	0x200085fc
 800a6d4:	20008600 	.word	0x20008600
 800a6d8:	20008604 	.word	0x20008604
 800a6dc:	080197dc 	.word	0x080197dc
 800a6e0:	08019864 	.word	0x08019864
 800a6e4:	0801982c 	.word	0x0801982c
 800a6e8:	2000bda4 	.word	0x2000bda4
 800a6ec:	08019888 	.word	0x08019888
 800a6f0:	0800a3fd 	.word	0x0800a3fd
 800a6f4:	080198ac 	.word	0x080198ac

0800a6f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a702:	88fb      	ldrh	r3, [r7, #6]
 800a704:	021b      	lsls	r3, r3, #8
 800a706:	b21a      	sxth	r2, r3
 800a708:	88fb      	ldrh	r3, [r7, #6]
 800a70a:	0a1b      	lsrs	r3, r3, #8
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	b21b      	sxth	r3, r3
 800a710:	4313      	orrs	r3, r2
 800a712:	b21b      	sxth	r3, r3
 800a714:	b29b      	uxth	r3, r3
}
 800a716:	4618      	mov	r0, r3
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	061a      	lsls	r2, r3, #24
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	021b      	lsls	r3, r3, #8
 800a732:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	0a1b      	lsrs	r3, r3, #8
 800a73c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a740:	431a      	orrs	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	0e1b      	lsrs	r3, r3, #24
 800a746:	4313      	orrs	r3, r2
}
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a75e:	f00c ffc3 	bl	80176e8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a762:	f000 f8d5 	bl	800a910 <mem_init>
  memp_init();
 800a766:	f000 fc31 	bl	800afcc <memp_init>
  pbuf_init();
  netif_init();
 800a76a:	f000 fcf7 	bl	800b15c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a76e:	f008 f81d 	bl	80127ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a772:	f001 fe1f 	bl	800c3b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a776:	f007 ff61 	bl	801263c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a77a:	bf00      	nop
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	4603      	mov	r3, r0
 800a78c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <ptr_to_mem+0x20>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	4413      	add	r3, r2
}
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20008608 	.word	0x20008608

0800a7a8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a05      	ldr	r2, [pc, #20]	; (800a7c8 <mem_to_ptr+0x20>)
 800a7b4:	6812      	ldr	r2, [r2, #0]
 800a7b6:	1a9b      	subs	r3, r3, r2
 800a7b8:	b29b      	uxth	r3, r3
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	20008608 	.word	0x20008608

0800a7cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a7d4:	4b45      	ldr	r3, [pc, #276]	; (800a8ec <plug_holes+0x120>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d206      	bcs.n	800a7ec <plug_holes+0x20>
 800a7de:	4b44      	ldr	r3, [pc, #272]	; (800a8f0 <plug_holes+0x124>)
 800a7e0:	f240 12df 	movw	r2, #479	; 0x1df
 800a7e4:	4943      	ldr	r1, [pc, #268]	; (800a8f4 <plug_holes+0x128>)
 800a7e6:	4844      	ldr	r0, [pc, #272]	; (800a8f8 <plug_holes+0x12c>)
 800a7e8:	f00d f888 	bl	80178fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a7ec:	4b43      	ldr	r3, [pc, #268]	; (800a8fc <plug_holes+0x130>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d306      	bcc.n	800a804 <plug_holes+0x38>
 800a7f6:	4b3e      	ldr	r3, [pc, #248]	; (800a8f0 <plug_holes+0x124>)
 800a7f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a7fc:	4940      	ldr	r1, [pc, #256]	; (800a900 <plug_holes+0x134>)
 800a7fe:	483e      	ldr	r0, [pc, #248]	; (800a8f8 <plug_holes+0x12c>)
 800a800:	f00d f87c 	bl	80178fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	791b      	ldrb	r3, [r3, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d006      	beq.n	800a81a <plug_holes+0x4e>
 800a80c:	4b38      	ldr	r3, [pc, #224]	; (800a8f0 <plug_holes+0x124>)
 800a80e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a812:	493c      	ldr	r1, [pc, #240]	; (800a904 <plug_holes+0x138>)
 800a814:	4838      	ldr	r0, [pc, #224]	; (800a8f8 <plug_holes+0x12c>)
 800a816:	f00d f871 	bl	80178fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	881b      	ldrh	r3, [r3, #0]
 800a81e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a822:	d906      	bls.n	800a832 <plug_holes+0x66>
 800a824:	4b32      	ldr	r3, [pc, #200]	; (800a8f0 <plug_holes+0x124>)
 800a826:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a82a:	4937      	ldr	r1, [pc, #220]	; (800a908 <plug_holes+0x13c>)
 800a82c:	4832      	ldr	r0, [pc, #200]	; (800a8f8 <plug_holes+0x12c>)
 800a82e:	f00d f865 	bl	80178fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f7ff ffa4 	bl	800a784 <ptr_to_mem>
 800a83c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	429a      	cmp	r2, r3
 800a844:	d024      	beq.n	800a890 <plug_holes+0xc4>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	791b      	ldrb	r3, [r3, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d120      	bne.n	800a890 <plug_holes+0xc4>
 800a84e:	4b2b      	ldr	r3, [pc, #172]	; (800a8fc <plug_holes+0x130>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	429a      	cmp	r2, r3
 800a856:	d01b      	beq.n	800a890 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a858:	4b2c      	ldr	r3, [pc, #176]	; (800a90c <plug_holes+0x140>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d102      	bne.n	800a868 <plug_holes+0x9c>
      lfree = mem;
 800a862:	4a2a      	ldr	r2, [pc, #168]	; (800a90c <plug_holes+0x140>)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	881a      	ldrh	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a878:	d00a      	beq.n	800a890 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff ff80 	bl	800a784 <ptr_to_mem>
 800a884:	4604      	mov	r4, r0
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7ff ff8e 	bl	800a7a8 <mem_to_ptr>
 800a88c:	4603      	mov	r3, r0
 800a88e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	885b      	ldrh	r3, [r3, #2]
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff ff75 	bl	800a784 <ptr_to_mem>
 800a89a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d01f      	beq.n	800a8e4 <plug_holes+0x118>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	791b      	ldrb	r3, [r3, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d11b      	bne.n	800a8e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a8ac:	4b17      	ldr	r3, [pc, #92]	; (800a90c <plug_holes+0x140>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d102      	bne.n	800a8bc <plug_holes+0xf0>
      lfree = pmem;
 800a8b6:	4a15      	ldr	r2, [pc, #84]	; (800a90c <plug_holes+0x140>)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	881a      	ldrh	r2, [r3, #0]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8cc:	d00a      	beq.n	800a8e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff ff56 	bl	800a784 <ptr_to_mem>
 800a8d8:	4604      	mov	r4, r0
 800a8da:	68b8      	ldr	r0, [r7, #8]
 800a8dc:	f7ff ff64 	bl	800a7a8 <mem_to_ptr>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a8e4:	bf00      	nop
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd90      	pop	{r4, r7, pc}
 800a8ec:	20008608 	.word	0x20008608
 800a8f0:	080198bc 	.word	0x080198bc
 800a8f4:	080198ec 	.word	0x080198ec
 800a8f8:	08019904 	.word	0x08019904
 800a8fc:	2000860c 	.word	0x2000860c
 800a900:	0801992c 	.word	0x0801992c
 800a904:	08019948 	.word	0x08019948
 800a908:	08019964 	.word	0x08019964
 800a90c:	20008614 	.word	0x20008614

0800a910 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a916:	4b1f      	ldr	r3, [pc, #124]	; (800a994 <mem_init+0x84>)
 800a918:	3303      	adds	r3, #3
 800a91a:	f023 0303 	bic.w	r3, r3, #3
 800a91e:	461a      	mov	r2, r3
 800a920:	4b1d      	ldr	r3, [pc, #116]	; (800a998 <mem_init+0x88>)
 800a922:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a924:	4b1c      	ldr	r3, [pc, #112]	; (800a998 <mem_init+0x88>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a930:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a93e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a942:	f7ff ff1f 	bl	800a784 <ptr_to_mem>
 800a946:	4602      	mov	r2, r0
 800a948:	4b14      	ldr	r3, [pc, #80]	; (800a99c <mem_init+0x8c>)
 800a94a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <mem_init+0x8c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2201      	movs	r2, #1
 800a952:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a954:	4b11      	ldr	r3, [pc, #68]	; (800a99c <mem_init+0x8c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a95c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a95e:	4b0f      	ldr	r3, [pc, #60]	; (800a99c <mem_init+0x8c>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a966:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a968:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <mem_init+0x88>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a0c      	ldr	r2, [pc, #48]	; (800a9a0 <mem_init+0x90>)
 800a96e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a970:	480c      	ldr	r0, [pc, #48]	; (800a9a4 <mem_init+0x94>)
 800a972:	f00c fec7 	bl	8017704 <sys_mutex_new>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d006      	beq.n	800a98a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a97c:	4b0a      	ldr	r3, [pc, #40]	; (800a9a8 <mem_init+0x98>)
 800a97e:	f240 221f 	movw	r2, #543	; 0x21f
 800a982:	490a      	ldr	r1, [pc, #40]	; (800a9ac <mem_init+0x9c>)
 800a984:	480a      	ldr	r0, [pc, #40]	; (800a9b0 <mem_init+0xa0>)
 800a986:	f00c ffb9 	bl	80178fc <iprintf>
  }
}
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	2000bdc0 	.word	0x2000bdc0
 800a998:	20008608 	.word	0x20008608
 800a99c:	2000860c 	.word	0x2000860c
 800a9a0:	20008614 	.word	0x20008614
 800a9a4:	20008610 	.word	0x20008610
 800a9a8:	080198bc 	.word	0x080198bc
 800a9ac:	08019990 	.word	0x08019990
 800a9b0:	08019904 	.word	0x08019904

0800a9b4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f7ff fef3 	bl	800a7a8 <mem_to_ptr>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff feda 	bl	800a784 <ptr_to_mem>
 800a9d0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	885b      	ldrh	r3, [r3, #2]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff fed4 	bl	800a784 <ptr_to_mem>
 800a9dc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9e6:	d818      	bhi.n	800aa1a <mem_link_valid+0x66>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	885b      	ldrh	r3, [r3, #2]
 800a9ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9f0:	d813      	bhi.n	800aa1a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a9f6:	8afa      	ldrh	r2, [r7, #22]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d004      	beq.n	800aa06 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	8afa      	ldrh	r2, [r7, #22]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d109      	bne.n	800aa1a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aa06:	4b08      	ldr	r3, [pc, #32]	; (800aa28 <mem_link_valid+0x74>)
 800aa08:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d006      	beq.n	800aa1e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	885b      	ldrh	r3, [r3, #2]
 800aa14:	8afa      	ldrh	r2, [r7, #22]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d001      	beq.n	800aa1e <mem_link_valid+0x6a>
    return 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e000      	b.n	800aa20 <mem_link_valid+0x6c>
  }
  return 1;
 800aa1e:	2301      	movs	r3, #1
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3718      	adds	r7, #24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	2000860c 	.word	0x2000860c

0800aa2c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d070      	beq.n	800ab1c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00d      	beq.n	800aa60 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aa44:	4b37      	ldr	r3, [pc, #220]	; (800ab24 <mem_free+0xf8>)
 800aa46:	f240 2273 	movw	r2, #627	; 0x273
 800aa4a:	4937      	ldr	r1, [pc, #220]	; (800ab28 <mem_free+0xfc>)
 800aa4c:	4837      	ldr	r0, [pc, #220]	; (800ab2c <mem_free+0x100>)
 800aa4e:	f00c ff55 	bl	80178fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa52:	f00c feb5 	bl	80177c0 <sys_arch_protect>
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f00c febf 	bl	80177dc <sys_arch_unprotect>
    return;
 800aa5e:	e05e      	b.n	800ab1e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3b08      	subs	r3, #8
 800aa64:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800aa66:	4b32      	ldr	r3, [pc, #200]	; (800ab30 <mem_free+0x104>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	69fa      	ldr	r2, [r7, #28]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d306      	bcc.n	800aa7e <mem_free+0x52>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f103 020c 	add.w	r2, r3, #12
 800aa76:	4b2f      	ldr	r3, [pc, #188]	; (800ab34 <mem_free+0x108>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d90d      	bls.n	800aa9a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800aa7e:	4b29      	ldr	r3, [pc, #164]	; (800ab24 <mem_free+0xf8>)
 800aa80:	f240 227f 	movw	r2, #639	; 0x27f
 800aa84:	492c      	ldr	r1, [pc, #176]	; (800ab38 <mem_free+0x10c>)
 800aa86:	4829      	ldr	r0, [pc, #164]	; (800ab2c <mem_free+0x100>)
 800aa88:	f00c ff38 	bl	80178fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa8c:	f00c fe98 	bl	80177c0 <sys_arch_protect>
 800aa90:	6138      	str	r0, [r7, #16]
 800aa92:	6938      	ldr	r0, [r7, #16]
 800aa94:	f00c fea2 	bl	80177dc <sys_arch_unprotect>
    return;
 800aa98:	e041      	b.n	800ab1e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aa9a:	4828      	ldr	r0, [pc, #160]	; (800ab3c <mem_free+0x110>)
 800aa9c:	f00c fe4e 	bl	801773c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	791b      	ldrb	r3, [r3, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d110      	bne.n	800aaca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800aaa8:	4b1e      	ldr	r3, [pc, #120]	; (800ab24 <mem_free+0xf8>)
 800aaaa:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800aaae:	4924      	ldr	r1, [pc, #144]	; (800ab40 <mem_free+0x114>)
 800aab0:	481e      	ldr	r0, [pc, #120]	; (800ab2c <mem_free+0x100>)
 800aab2:	f00c ff23 	bl	80178fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aab6:	4821      	ldr	r0, [pc, #132]	; (800ab3c <mem_free+0x110>)
 800aab8:	f00c fe4f 	bl	801775a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aabc:	f00c fe80 	bl	80177c0 <sys_arch_protect>
 800aac0:	6178      	str	r0, [r7, #20]
 800aac2:	6978      	ldr	r0, [r7, #20]
 800aac4:	f00c fe8a 	bl	80177dc <sys_arch_unprotect>
    return;
 800aac8:	e029      	b.n	800ab1e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800aaca:	69f8      	ldr	r0, [r7, #28]
 800aacc:	f7ff ff72 	bl	800a9b4 <mem_link_valid>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d110      	bne.n	800aaf8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800aad6:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <mem_free+0xf8>)
 800aad8:	f240 2295 	movw	r2, #661	; 0x295
 800aadc:	4919      	ldr	r1, [pc, #100]	; (800ab44 <mem_free+0x118>)
 800aade:	4813      	ldr	r0, [pc, #76]	; (800ab2c <mem_free+0x100>)
 800aae0:	f00c ff0c 	bl	80178fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aae4:	4815      	ldr	r0, [pc, #84]	; (800ab3c <mem_free+0x110>)
 800aae6:	f00c fe38 	bl	801775a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aaea:	f00c fe69 	bl	80177c0 <sys_arch_protect>
 800aaee:	61b8      	str	r0, [r7, #24]
 800aaf0:	69b8      	ldr	r0, [r7, #24]
 800aaf2:	f00c fe73 	bl	80177dc <sys_arch_unprotect>
    return;
 800aaf6:	e012      	b.n	800ab1e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	2200      	movs	r2, #0
 800aafc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800aafe:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <mem_free+0x11c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	69fa      	ldr	r2, [r7, #28]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d202      	bcs.n	800ab0e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ab08:	4a0f      	ldr	r2, [pc, #60]	; (800ab48 <mem_free+0x11c>)
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ab0e:	69f8      	ldr	r0, [r7, #28]
 800ab10:	f7ff fe5c 	bl	800a7cc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ab14:	4809      	ldr	r0, [pc, #36]	; (800ab3c <mem_free+0x110>)
 800ab16:	f00c fe20 	bl	801775a <sys_mutex_unlock>
 800ab1a:	e000      	b.n	800ab1e <mem_free+0xf2>
    return;
 800ab1c:	bf00      	nop
}
 800ab1e:	3720      	adds	r7, #32
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	080198bc 	.word	0x080198bc
 800ab28:	080199ac 	.word	0x080199ac
 800ab2c:	08019904 	.word	0x08019904
 800ab30:	20008608 	.word	0x20008608
 800ab34:	2000860c 	.word	0x2000860c
 800ab38:	080199d0 	.word	0x080199d0
 800ab3c:	20008610 	.word	0x20008610
 800ab40:	080199ec 	.word	0x080199ec
 800ab44:	08019a14 	.word	0x08019a14
 800ab48:	20008614 	.word	0x20008614

0800ab4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ab58:	887b      	ldrh	r3, [r7, #2]
 800ab5a:	3303      	adds	r3, #3
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	f023 0303 	bic.w	r3, r3, #3
 800ab62:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ab64:	8bfb      	ldrh	r3, [r7, #30]
 800ab66:	2b0b      	cmp	r3, #11
 800ab68:	d801      	bhi.n	800ab6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ab6a:	230c      	movs	r3, #12
 800ab6c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ab6e:	8bfb      	ldrh	r3, [r7, #30]
 800ab70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab74:	d803      	bhi.n	800ab7e <mem_trim+0x32>
 800ab76:	8bfa      	ldrh	r2, [r7, #30]
 800ab78:	887b      	ldrh	r3, [r7, #2]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d201      	bcs.n	800ab82 <mem_trim+0x36>
    return NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e0d8      	b.n	800ad34 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ab82:	4b6e      	ldr	r3, [pc, #440]	; (800ad3c <mem_trim+0x1f0>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d304      	bcc.n	800ab96 <mem_trim+0x4a>
 800ab8c:	4b6c      	ldr	r3, [pc, #432]	; (800ad40 <mem_trim+0x1f4>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d306      	bcc.n	800aba4 <mem_trim+0x58>
 800ab96:	4b6b      	ldr	r3, [pc, #428]	; (800ad44 <mem_trim+0x1f8>)
 800ab98:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ab9c:	496a      	ldr	r1, [pc, #424]	; (800ad48 <mem_trim+0x1fc>)
 800ab9e:	486b      	ldr	r0, [pc, #428]	; (800ad4c <mem_trim+0x200>)
 800aba0:	f00c feac 	bl	80178fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aba4:	4b65      	ldr	r3, [pc, #404]	; (800ad3c <mem_trim+0x1f0>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d304      	bcc.n	800abb8 <mem_trim+0x6c>
 800abae:	4b64      	ldr	r3, [pc, #400]	; (800ad40 <mem_trim+0x1f4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d307      	bcc.n	800abc8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800abb8:	f00c fe02 	bl	80177c0 <sys_arch_protect>
 800abbc:	60b8      	str	r0, [r7, #8]
 800abbe:	68b8      	ldr	r0, [r7, #8]
 800abc0:	f00c fe0c 	bl	80177dc <sys_arch_unprotect>
    return rmem;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	e0b5      	b.n	800ad34 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3b08      	subs	r3, #8
 800abcc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800abce:	69b8      	ldr	r0, [r7, #24]
 800abd0:	f7ff fdea 	bl	800a7a8 <mem_to_ptr>
 800abd4:	4603      	mov	r3, r0
 800abd6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	881a      	ldrh	r2, [r3, #0]
 800abdc:	8afb      	ldrh	r3, [r7, #22]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	3b08      	subs	r3, #8
 800abe4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800abe6:	8bfa      	ldrh	r2, [r7, #30]
 800abe8:	8abb      	ldrh	r3, [r7, #20]
 800abea:	429a      	cmp	r2, r3
 800abec:	d906      	bls.n	800abfc <mem_trim+0xb0>
 800abee:	4b55      	ldr	r3, [pc, #340]	; (800ad44 <mem_trim+0x1f8>)
 800abf0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800abf4:	4956      	ldr	r1, [pc, #344]	; (800ad50 <mem_trim+0x204>)
 800abf6:	4855      	ldr	r0, [pc, #340]	; (800ad4c <mem_trim+0x200>)
 800abf8:	f00c fe80 	bl	80178fc <iprintf>
  if (newsize > size) {
 800abfc:	8bfa      	ldrh	r2, [r7, #30]
 800abfe:	8abb      	ldrh	r3, [r7, #20]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d901      	bls.n	800ac08 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	e095      	b.n	800ad34 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ac08:	8bfa      	ldrh	r2, [r7, #30]
 800ac0a:	8abb      	ldrh	r3, [r7, #20]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d101      	bne.n	800ac14 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	e08f      	b.n	800ad34 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ac14:	484f      	ldr	r0, [pc, #316]	; (800ad54 <mem_trim+0x208>)
 800ac16:	f00c fd91 	bl	801773c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff fdb0 	bl	800a784 <ptr_to_mem>
 800ac24:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	791b      	ldrb	r3, [r3, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d13f      	bne.n	800acae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	881b      	ldrh	r3, [r3, #0]
 800ac32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac36:	d106      	bne.n	800ac46 <mem_trim+0xfa>
 800ac38:	4b42      	ldr	r3, [pc, #264]	; (800ad44 <mem_trim+0x1f8>)
 800ac3a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ac3e:	4946      	ldr	r1, [pc, #280]	; (800ad58 <mem_trim+0x20c>)
 800ac40:	4842      	ldr	r0, [pc, #264]	; (800ad4c <mem_trim+0x200>)
 800ac42:	f00c fe5b 	bl	80178fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ac4c:	8afa      	ldrh	r2, [r7, #22]
 800ac4e:	8bfb      	ldrh	r3, [r7, #30]
 800ac50:	4413      	add	r3, r2
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	3308      	adds	r3, #8
 800ac56:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ac58:	4b40      	ldr	r3, [pc, #256]	; (800ad5c <mem_trim+0x210>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d106      	bne.n	800ac70 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ac62:	89fb      	ldrh	r3, [r7, #14]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff fd8d 	bl	800a784 <ptr_to_mem>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4b3b      	ldr	r3, [pc, #236]	; (800ad5c <mem_trim+0x210>)
 800ac6e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ac70:	89fb      	ldrh	r3, [r7, #14]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7ff fd86 	bl	800a784 <ptr_to_mem>
 800ac78:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	89ba      	ldrh	r2, [r7, #12]
 800ac84:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	8afa      	ldrh	r2, [r7, #22]
 800ac8a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	89fa      	ldrh	r2, [r7, #14]
 800ac90:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac9a:	d047      	beq.n	800ad2c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fd6f 	bl	800a784 <ptr_to_mem>
 800aca6:	4602      	mov	r2, r0
 800aca8:	89fb      	ldrh	r3, [r7, #14]
 800acaa:	8053      	strh	r3, [r2, #2]
 800acac:	e03e      	b.n	800ad2c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800acae:	8bfb      	ldrh	r3, [r7, #30]
 800acb0:	f103 0214 	add.w	r2, r3, #20
 800acb4:	8abb      	ldrh	r3, [r7, #20]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d838      	bhi.n	800ad2c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800acba:	8afa      	ldrh	r2, [r7, #22]
 800acbc:	8bfb      	ldrh	r3, [r7, #30]
 800acbe:	4413      	add	r3, r2
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	3308      	adds	r3, #8
 800acc4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acce:	d106      	bne.n	800acde <mem_trim+0x192>
 800acd0:	4b1c      	ldr	r3, [pc, #112]	; (800ad44 <mem_trim+0x1f8>)
 800acd2:	f240 3216 	movw	r2, #790	; 0x316
 800acd6:	4920      	ldr	r1, [pc, #128]	; (800ad58 <mem_trim+0x20c>)
 800acd8:	481c      	ldr	r0, [pc, #112]	; (800ad4c <mem_trim+0x200>)
 800acda:	f00c fe0f 	bl	80178fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800acde:	89fb      	ldrh	r3, [r7, #14]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff fd4f 	bl	800a784 <ptr_to_mem>
 800ace6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ace8:	4b1c      	ldr	r3, [pc, #112]	; (800ad5c <mem_trim+0x210>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d202      	bcs.n	800acf8 <mem_trim+0x1ac>
      lfree = mem2;
 800acf2:	4a1a      	ldr	r2, [pc, #104]	; (800ad5c <mem_trim+0x210>)
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2200      	movs	r2, #0
 800acfc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	881a      	ldrh	r2, [r3, #0]
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	8afa      	ldrh	r2, [r7, #22]
 800ad0a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	89fa      	ldrh	r2, [r7, #14]
 800ad10:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad1a:	d007      	beq.n	800ad2c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7ff fd2f 	bl	800a784 <ptr_to_mem>
 800ad26:	4602      	mov	r2, r0
 800ad28:	89fb      	ldrh	r3, [r7, #14]
 800ad2a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ad2c:	4809      	ldr	r0, [pc, #36]	; (800ad54 <mem_trim+0x208>)
 800ad2e:	f00c fd14 	bl	801775a <sys_mutex_unlock>
  return rmem;
 800ad32:	687b      	ldr	r3, [r7, #4]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3720      	adds	r7, #32
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	20008608 	.word	0x20008608
 800ad40:	2000860c 	.word	0x2000860c
 800ad44:	080198bc 	.word	0x080198bc
 800ad48:	08019a48 	.word	0x08019a48
 800ad4c:	08019904 	.word	0x08019904
 800ad50:	08019a60 	.word	0x08019a60
 800ad54:	20008610 	.word	0x20008610
 800ad58:	08019a80 	.word	0x08019a80
 800ad5c:	20008614 	.word	0x20008614

0800ad60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ad6a:	88fb      	ldrh	r3, [r7, #6]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <mem_malloc+0x14>
    return NULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	e0e2      	b.n	800af3a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ad74:	88fb      	ldrh	r3, [r7, #6]
 800ad76:	3303      	adds	r3, #3
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	f023 0303 	bic.w	r3, r3, #3
 800ad7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ad80:	8bbb      	ldrh	r3, [r7, #28]
 800ad82:	2b0b      	cmp	r3, #11
 800ad84:	d801      	bhi.n	800ad8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ad86:	230c      	movs	r3, #12
 800ad88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ad8a:	8bbb      	ldrh	r3, [r7, #28]
 800ad8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad90:	d803      	bhi.n	800ad9a <mem_malloc+0x3a>
 800ad92:	8bba      	ldrh	r2, [r7, #28]
 800ad94:	88fb      	ldrh	r3, [r7, #6]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d201      	bcs.n	800ad9e <mem_malloc+0x3e>
    return NULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e0cd      	b.n	800af3a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ad9e:	4869      	ldr	r0, [pc, #420]	; (800af44 <mem_malloc+0x1e4>)
 800ada0:	f00c fccc 	bl	801773c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ada4:	4b68      	ldr	r3, [pc, #416]	; (800af48 <mem_malloc+0x1e8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff fcfd 	bl	800a7a8 <mem_to_ptr>
 800adae:	4603      	mov	r3, r0
 800adb0:	83fb      	strh	r3, [r7, #30]
 800adb2:	e0b7      	b.n	800af24 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800adb4:	8bfb      	ldrh	r3, [r7, #30]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff fce4 	bl	800a784 <ptr_to_mem>
 800adbc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	791b      	ldrb	r3, [r3, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f040 80a7 	bne.w	800af16 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	8bfb      	ldrh	r3, [r7, #30]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	f1a3 0208 	sub.w	r2, r3, #8
 800add6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800add8:	429a      	cmp	r2, r3
 800adda:	f0c0 809c 	bcc.w	800af16 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	8bfb      	ldrh	r3, [r7, #30]
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	f1a3 0208 	sub.w	r2, r3, #8
 800adec:	8bbb      	ldrh	r3, [r7, #28]
 800adee:	3314      	adds	r3, #20
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d333      	bcc.n	800ae5c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800adf4:	8bfa      	ldrh	r2, [r7, #30]
 800adf6:	8bbb      	ldrh	r3, [r7, #28]
 800adf8:	4413      	add	r3, r2
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	3308      	adds	r3, #8
 800adfe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ae00:	8a7b      	ldrh	r3, [r7, #18]
 800ae02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae06:	d106      	bne.n	800ae16 <mem_malloc+0xb6>
 800ae08:	4b50      	ldr	r3, [pc, #320]	; (800af4c <mem_malloc+0x1ec>)
 800ae0a:	f240 3287 	movw	r2, #903	; 0x387
 800ae0e:	4950      	ldr	r1, [pc, #320]	; (800af50 <mem_malloc+0x1f0>)
 800ae10:	4850      	ldr	r0, [pc, #320]	; (800af54 <mem_malloc+0x1f4>)
 800ae12:	f00c fd73 	bl	80178fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ae16:	8a7b      	ldrh	r3, [r7, #18]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fcb3 	bl	800a784 <ptr_to_mem>
 800ae1e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	881a      	ldrh	r2, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	8bfa      	ldrh	r2, [r7, #30]
 800ae32:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	8a7a      	ldrh	r2, [r7, #18]
 800ae38:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae48:	d00b      	beq.n	800ae62 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7ff fc98 	bl	800a784 <ptr_to_mem>
 800ae54:	4602      	mov	r2, r0
 800ae56:	8a7b      	ldrh	r3, [r7, #18]
 800ae58:	8053      	strh	r3, [r2, #2]
 800ae5a:	e002      	b.n	800ae62 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ae62:	4b39      	ldr	r3, [pc, #228]	; (800af48 <mem_malloc+0x1e8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d127      	bne.n	800aebc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ae6c:	4b36      	ldr	r3, [pc, #216]	; (800af48 <mem_malloc+0x1e8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ae72:	e005      	b.n	800ae80 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	881b      	ldrh	r3, [r3, #0]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fc83 	bl	800a784 <ptr_to_mem>
 800ae7e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	791b      	ldrb	r3, [r3, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d004      	beq.n	800ae92 <mem_malloc+0x132>
 800ae88:	4b33      	ldr	r3, [pc, #204]	; (800af58 <mem_malloc+0x1f8>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	69ba      	ldr	r2, [r7, #24]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d1f0      	bne.n	800ae74 <mem_malloc+0x114>
          }
          lfree = cur;
 800ae92:	4a2d      	ldr	r2, [pc, #180]	; (800af48 <mem_malloc+0x1e8>)
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ae98:	4b2b      	ldr	r3, [pc, #172]	; (800af48 <mem_malloc+0x1e8>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	4b2e      	ldr	r3, [pc, #184]	; (800af58 <mem_malloc+0x1f8>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d00b      	beq.n	800aebc <mem_malloc+0x15c>
 800aea4:	4b28      	ldr	r3, [pc, #160]	; (800af48 <mem_malloc+0x1e8>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	791b      	ldrb	r3, [r3, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d006      	beq.n	800aebc <mem_malloc+0x15c>
 800aeae:	4b27      	ldr	r3, [pc, #156]	; (800af4c <mem_malloc+0x1ec>)
 800aeb0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aeb4:	4929      	ldr	r1, [pc, #164]	; (800af5c <mem_malloc+0x1fc>)
 800aeb6:	4827      	ldr	r0, [pc, #156]	; (800af54 <mem_malloc+0x1f4>)
 800aeb8:	f00c fd20 	bl	80178fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800aebc:	4821      	ldr	r0, [pc, #132]	; (800af44 <mem_malloc+0x1e4>)
 800aebe:	f00c fc4c 	bl	801775a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aec2:	8bba      	ldrh	r2, [r7, #28]
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	4413      	add	r3, r2
 800aec8:	3308      	adds	r3, #8
 800aeca:	4a23      	ldr	r2, [pc, #140]	; (800af58 <mem_malloc+0x1f8>)
 800aecc:	6812      	ldr	r2, [r2, #0]
 800aece:	4293      	cmp	r3, r2
 800aed0:	d906      	bls.n	800aee0 <mem_malloc+0x180>
 800aed2:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <mem_malloc+0x1ec>)
 800aed4:	f240 32ba 	movw	r2, #954	; 0x3ba
 800aed8:	4921      	ldr	r1, [pc, #132]	; (800af60 <mem_malloc+0x200>)
 800aeda:	481e      	ldr	r0, [pc, #120]	; (800af54 <mem_malloc+0x1f4>)
 800aedc:	f00c fd0e 	bl	80178fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f003 0303 	and.w	r3, r3, #3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d006      	beq.n	800aef8 <mem_malloc+0x198>
 800aeea:	4b18      	ldr	r3, [pc, #96]	; (800af4c <mem_malloc+0x1ec>)
 800aeec:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800aef0:	491c      	ldr	r1, [pc, #112]	; (800af64 <mem_malloc+0x204>)
 800aef2:	4818      	ldr	r0, [pc, #96]	; (800af54 <mem_malloc+0x1f4>)
 800aef4:	f00c fd02 	bl	80178fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f003 0303 	and.w	r3, r3, #3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d006      	beq.n	800af10 <mem_malloc+0x1b0>
 800af02:	4b12      	ldr	r3, [pc, #72]	; (800af4c <mem_malloc+0x1ec>)
 800af04:	f240 32be 	movw	r2, #958	; 0x3be
 800af08:	4917      	ldr	r1, [pc, #92]	; (800af68 <mem_malloc+0x208>)
 800af0a:	4812      	ldr	r0, [pc, #72]	; (800af54 <mem_malloc+0x1f4>)
 800af0c:	f00c fcf6 	bl	80178fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	3308      	adds	r3, #8
 800af14:	e011      	b.n	800af3a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800af16:	8bfb      	ldrh	r3, [r7, #30]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7ff fc33 	bl	800a784 <ptr_to_mem>
 800af1e:	4603      	mov	r3, r0
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800af24:	8bfa      	ldrh	r2, [r7, #30]
 800af26:	8bbb      	ldrh	r3, [r7, #28]
 800af28:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800af2c:	429a      	cmp	r2, r3
 800af2e:	f4ff af41 	bcc.w	800adb4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800af32:	4804      	ldr	r0, [pc, #16]	; (800af44 <mem_malloc+0x1e4>)
 800af34:	f00c fc11 	bl	801775a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20008610 	.word	0x20008610
 800af48:	20008614 	.word	0x20008614
 800af4c:	080198bc 	.word	0x080198bc
 800af50:	08019a80 	.word	0x08019a80
 800af54:	08019904 	.word	0x08019904
 800af58:	2000860c 	.word	0x2000860c
 800af5c:	08019a94 	.word	0x08019a94
 800af60:	08019ab0 	.word	0x08019ab0
 800af64:	08019ae0 	.word	0x08019ae0
 800af68:	08019b10 	.word	0x08019b10

0800af6c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2200      	movs	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	3303      	adds	r3, #3
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	e011      	b.n	800afb2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	461a      	mov	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	4413      	add	r3, r2
 800afaa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3301      	adds	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	885b      	ldrh	r3, [r3, #2]
 800afb6:	461a      	mov	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4293      	cmp	r3, r2
 800afbc:	dbe7      	blt.n	800af8e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800afbe:	bf00      	nop
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
	...

0800afcc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800afd2:	2300      	movs	r3, #0
 800afd4:	80fb      	strh	r3, [r7, #6]
 800afd6:	e009      	b.n	800afec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800afd8:	88fb      	ldrh	r3, [r7, #6]
 800afda:	4a08      	ldr	r2, [pc, #32]	; (800affc <memp_init+0x30>)
 800afdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7ff ffc3 	bl	800af6c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800afe6:	88fb      	ldrh	r3, [r7, #6]
 800afe8:	3301      	adds	r3, #1
 800afea:	80fb      	strh	r3, [r7, #6]
 800afec:	88fb      	ldrh	r3, [r7, #6]
 800afee:	2b0c      	cmp	r3, #12
 800aff0:	d9f2      	bls.n	800afd8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aff2:	bf00      	nop
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	0801c6bc 	.word	0x0801c6bc

0800b000 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b008:	f00c fbda 	bl	80177c0 <sys_arch_protect>
 800b00c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d015      	beq.n	800b048 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	6812      	ldr	r2, [r2, #0]
 800b024:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f003 0303 	and.w	r3, r3, #3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d006      	beq.n	800b03e <do_memp_malloc_pool+0x3e>
 800b030:	4b09      	ldr	r3, [pc, #36]	; (800b058 <do_memp_malloc_pool+0x58>)
 800b032:	f240 1219 	movw	r2, #281	; 0x119
 800b036:	4909      	ldr	r1, [pc, #36]	; (800b05c <do_memp_malloc_pool+0x5c>)
 800b038:	4809      	ldr	r0, [pc, #36]	; (800b060 <do_memp_malloc_pool+0x60>)
 800b03a:	f00c fc5f 	bl	80178fc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f00c fbcc 	bl	80177dc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	e003      	b.n	800b050 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f00c fbc7 	bl	80177dc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	08019b34 	.word	0x08019b34
 800b05c:	08019b64 	.word	0x08019b64
 800b060:	08019b88 	.word	0x08019b88

0800b064 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	4603      	mov	r3, r0
 800b06c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b06e:	79fb      	ldrb	r3, [r7, #7]
 800b070:	2b0c      	cmp	r3, #12
 800b072:	d908      	bls.n	800b086 <memp_malloc+0x22>
 800b074:	4b0a      	ldr	r3, [pc, #40]	; (800b0a0 <memp_malloc+0x3c>)
 800b076:	f240 1257 	movw	r2, #343	; 0x157
 800b07a:	490a      	ldr	r1, [pc, #40]	; (800b0a4 <memp_malloc+0x40>)
 800b07c:	480a      	ldr	r0, [pc, #40]	; (800b0a8 <memp_malloc+0x44>)
 800b07e:	f00c fc3d 	bl	80178fc <iprintf>
 800b082:	2300      	movs	r3, #0
 800b084:	e008      	b.n	800b098 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b086:	79fb      	ldrb	r3, [r7, #7]
 800b088:	4a08      	ldr	r2, [pc, #32]	; (800b0ac <memp_malloc+0x48>)
 800b08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff ffb6 	bl	800b000 <do_memp_malloc_pool>
 800b094:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b096:	68fb      	ldr	r3, [r7, #12]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	08019b34 	.word	0x08019b34
 800b0a4:	08019bc4 	.word	0x08019bc4
 800b0a8:	08019b88 	.word	0x08019b88
 800b0ac:	0801c6bc 	.word	0x0801c6bc

0800b0b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	f003 0303 	and.w	r3, r3, #3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d006      	beq.n	800b0d2 <do_memp_free_pool+0x22>
 800b0c4:	4b0d      	ldr	r3, [pc, #52]	; (800b0fc <do_memp_free_pool+0x4c>)
 800b0c6:	f240 126d 	movw	r2, #365	; 0x16d
 800b0ca:	490d      	ldr	r1, [pc, #52]	; (800b100 <do_memp_free_pool+0x50>)
 800b0cc:	480d      	ldr	r0, [pc, #52]	; (800b104 <do_memp_free_pool+0x54>)
 800b0ce:	f00c fc15 	bl	80178fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b0d6:	f00c fb73 	bl	80177c0 <sys_arch_protect>
 800b0da:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b0ee:	68b8      	ldr	r0, [r7, #8]
 800b0f0:	f00c fb74 	bl	80177dc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b0f4:	bf00      	nop
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	08019b34 	.word	0x08019b34
 800b100:	08019be4 	.word	0x08019be4
 800b104:	08019b88 	.word	0x08019b88

0800b108 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	6039      	str	r1, [r7, #0]
 800b112:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b114:	79fb      	ldrb	r3, [r7, #7]
 800b116:	2b0c      	cmp	r3, #12
 800b118:	d907      	bls.n	800b12a <memp_free+0x22>
 800b11a:	4b0c      	ldr	r3, [pc, #48]	; (800b14c <memp_free+0x44>)
 800b11c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b120:	490b      	ldr	r1, [pc, #44]	; (800b150 <memp_free+0x48>)
 800b122:	480c      	ldr	r0, [pc, #48]	; (800b154 <memp_free+0x4c>)
 800b124:	f00c fbea 	bl	80178fc <iprintf>
 800b128:	e00c      	b.n	800b144 <memp_free+0x3c>

  if (mem == NULL) {
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d008      	beq.n	800b142 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b130:	79fb      	ldrb	r3, [r7, #7]
 800b132:	4a09      	ldr	r2, [pc, #36]	; (800b158 <memp_free+0x50>)
 800b134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7ff ffb8 	bl	800b0b0 <do_memp_free_pool>
 800b140:	e000      	b.n	800b144 <memp_free+0x3c>
    return;
 800b142:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	08019b34 	.word	0x08019b34
 800b150:	08019c04 	.word	0x08019c04
 800b154:	08019b88 	.word	0x08019b88
 800b158:	0801c6bc 	.word	0x0801c6bc

0800b15c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b15c:	b480      	push	{r7}
 800b15e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b160:	bf00      	nop
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d108      	bne.n	800b192 <netif_add+0x26>
 800b180:	4b5b      	ldr	r3, [pc, #364]	; (800b2f0 <netif_add+0x184>)
 800b182:	f240 1227 	movw	r2, #295	; 0x127
 800b186:	495b      	ldr	r1, [pc, #364]	; (800b2f4 <netif_add+0x188>)
 800b188:	485b      	ldr	r0, [pc, #364]	; (800b2f8 <netif_add+0x18c>)
 800b18a:	f00c fbb7 	bl	80178fc <iprintf>
 800b18e:	2300      	movs	r3, #0
 800b190:	e0a9      	b.n	800b2e6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	2b00      	cmp	r3, #0
 800b196:	d108      	bne.n	800b1aa <netif_add+0x3e>
 800b198:	4b55      	ldr	r3, [pc, #340]	; (800b2f0 <netif_add+0x184>)
 800b19a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b19e:	4957      	ldr	r1, [pc, #348]	; (800b2fc <netif_add+0x190>)
 800b1a0:	4855      	ldr	r0, [pc, #340]	; (800b2f8 <netif_add+0x18c>)
 800b1a2:	f00c fbab 	bl	80178fc <iprintf>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e09d      	b.n	800b2e6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b1b0:	4b53      	ldr	r3, [pc, #332]	; (800b300 <netif_add+0x194>)
 800b1b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b1ba:	4b51      	ldr	r3, [pc, #324]	; (800b300 <netif_add+0x194>)
 800b1bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b1c4:	4b4e      	ldr	r3, [pc, #312]	; (800b300 <netif_add+0x194>)
 800b1c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	4a49      	ldr	r2, [pc, #292]	; (800b304 <netif_add+0x198>)
 800b1de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3324      	adds	r3, #36	; 0x24
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f00c fb77 	bl	80178ea <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6a3a      	ldr	r2, [r7, #32]
 800b206:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b208:	4b3f      	ldr	r3, [pc, #252]	; (800b308 <netif_add+0x19c>)
 800b20a:	781a      	ldrb	r2, [r3, #0]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b216:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	68b9      	ldr	r1, [r7, #8]
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 f914 	bl	800b44c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	4798      	blx	r3
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <netif_add+0xc8>
    return NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	e058      	b.n	800b2e6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b23a:	2bff      	cmp	r3, #255	; 0xff
 800b23c:	d103      	bne.n	800b246 <netif_add+0xda>
        netif->num = 0;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b24a:	4b30      	ldr	r3, [pc, #192]	; (800b30c <netif_add+0x1a0>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	e02b      	b.n	800b2aa <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	429a      	cmp	r2, r3
 800b258:	d106      	bne.n	800b268 <netif_add+0xfc>
 800b25a:	4b25      	ldr	r3, [pc, #148]	; (800b2f0 <netif_add+0x184>)
 800b25c:	f240 128b 	movw	r2, #395	; 0x18b
 800b260:	492b      	ldr	r1, [pc, #172]	; (800b310 <netif_add+0x1a4>)
 800b262:	4825      	ldr	r0, [pc, #148]	; (800b2f8 <netif_add+0x18c>)
 800b264:	f00c fb4a 	bl	80178fc <iprintf>
        num_netifs++;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	3301      	adds	r3, #1
 800b26c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	2bff      	cmp	r3, #255	; 0xff
 800b272:	dd06      	ble.n	800b282 <netif_add+0x116>
 800b274:	4b1e      	ldr	r3, [pc, #120]	; (800b2f0 <netif_add+0x184>)
 800b276:	f240 128d 	movw	r2, #397	; 0x18d
 800b27a:	4926      	ldr	r1, [pc, #152]	; (800b314 <netif_add+0x1a8>)
 800b27c:	481e      	ldr	r0, [pc, #120]	; (800b2f8 <netif_add+0x18c>)
 800b27e:	f00c fb3d 	bl	80178fc <iprintf>
        if (netif2->num == netif->num) {
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b28e:	429a      	cmp	r2, r3
 800b290:	d108      	bne.n	800b2a4 <netif_add+0x138>
          netif->num++;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b298:	3301      	adds	r3, #1
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b2a2:	e005      	b.n	800b2b0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	617b      	str	r3, [r7, #20]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1d0      	bne.n	800b252 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1be      	bne.n	800b234 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2bc:	2bfe      	cmp	r3, #254	; 0xfe
 800b2be:	d103      	bne.n	800b2c8 <netif_add+0x15c>
    netif_num = 0;
 800b2c0:	4b11      	ldr	r3, [pc, #68]	; (800b308 <netif_add+0x19c>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	e006      	b.n	800b2d6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	4b0d      	ldr	r3, [pc, #52]	; (800b308 <netif_add+0x19c>)
 800b2d4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b2d6:	4b0d      	ldr	r3, [pc, #52]	; (800b30c <netif_add+0x1a0>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b2de:	4a0b      	ldr	r2, [pc, #44]	; (800b30c <netif_add+0x1a0>)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	08019c20 	.word	0x08019c20
 800b2f4:	08019cb4 	.word	0x08019cb4
 800b2f8:	08019c70 	.word	0x08019c70
 800b2fc:	08019cd0 	.word	0x08019cd0
 800b300:	0801c740 	.word	0x0801c740
 800b304:	0800b72f 	.word	0x0800b72f
 800b308:	2000864c 	.word	0x2000864c
 800b30c:	2000f4cc 	.word	0x2000f4cc
 800b310:	08019cf4 	.word	0x08019cf4
 800b314:	08019d08 	.word	0x08019d08

0800b318 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f002 fe51 	bl	800dfcc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f007 fed5 	bl	80130dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b332:	bf00      	nop
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d106      	bne.n	800b35c <netif_do_set_ipaddr+0x20>
 800b34e:	4b1d      	ldr	r3, [pc, #116]	; (800b3c4 <netif_do_set_ipaddr+0x88>)
 800b350:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b354:	491c      	ldr	r1, [pc, #112]	; (800b3c8 <netif_do_set_ipaddr+0x8c>)
 800b356:	481d      	ldr	r0, [pc, #116]	; (800b3cc <netif_do_set_ipaddr+0x90>)
 800b358:	f00c fad0 	bl	80178fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <netif_do_set_ipaddr+0x34>
 800b362:	4b18      	ldr	r3, [pc, #96]	; (800b3c4 <netif_do_set_ipaddr+0x88>)
 800b364:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b368:	4917      	ldr	r1, [pc, #92]	; (800b3c8 <netif_do_set_ipaddr+0x8c>)
 800b36a:	4818      	ldr	r0, [pc, #96]	; (800b3cc <netif_do_set_ipaddr+0x90>)
 800b36c:	f00c fac6 	bl	80178fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3304      	adds	r3, #4
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d01c      	beq.n	800b3b8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3304      	adds	r3, #4
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b38e:	f107 0314 	add.w	r3, r7, #20
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff ffbf 	bl	800b318 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <netif_do_set_ipaddr+0x6a>
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	e000      	b.n	800b3a8 <netif_do_set_ipaddr+0x6c>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 f8d2 	bl	800b558 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e000      	b.n	800b3ba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	08019c20 	.word	0x08019c20
 800b3c8:	08019d38 	.word	0x08019d38
 800b3cc:	08019c70 	.word	0x08019c70

0800b3d0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d00a      	beq.n	800b400 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <netif_do_set_netmask+0x26>
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	e000      	b.n	800b3f8 <netif_do_set_netmask+0x28>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e000      	b.n	800b402 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b40e:	b480      	push	{r7}
 800b410:	b085      	sub	sp, #20
 800b412:	af00      	add	r7, sp, #0
 800b414:	60f8      	str	r0, [r7, #12]
 800b416:	60b9      	str	r1, [r7, #8]
 800b418:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	330c      	adds	r3, #12
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d00a      	beq.n	800b43e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <netif_do_set_gw+0x26>
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	e000      	b.n	800b436 <netif_do_set_gw+0x28>
 800b434:	2300      	movs	r3, #0
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b468:	4b1c      	ldr	r3, [pc, #112]	; (800b4dc <netif_set_addr+0x90>)
 800b46a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b472:	4b1a      	ldr	r3, [pc, #104]	; (800b4dc <netif_set_addr+0x90>)
 800b474:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b47c:	4b17      	ldr	r3, [pc, #92]	; (800b4dc <netif_set_addr+0x90>)
 800b47e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <netif_set_addr+0x42>
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <netif_set_addr+0x46>
 800b48e:	2301      	movs	r3, #1
 800b490:	e000      	b.n	800b494 <netif_set_addr+0x48>
 800b492:	2300      	movs	r3, #0
 800b494:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d006      	beq.n	800b4aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b49c:	f107 0310 	add.w	r3, r7, #16
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	68b9      	ldr	r1, [r7, #8]
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f7ff ff49 	bl	800b33c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b4aa:	69fa      	ldr	r2, [r7, #28]
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f7ff ff8e 	bl	800b3d0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b4b4:	69ba      	ldr	r2, [r7, #24]
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff ffa8 	bl	800b40e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b4c4:	f107 0310 	add.w	r3, r7, #16
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	68b9      	ldr	r1, [r7, #8]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f7ff ff35 	bl	800b33c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b4d2:	bf00      	nop
 800b4d4:	3720      	adds	r7, #32
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	0801c740 	.word	0x0801c740

0800b4e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b4e8:	4a04      	ldr	r2, [pc, #16]	; (800b4fc <netif_set_default+0x1c>)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b4ee:	bf00      	nop
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	2000f4d0 	.word	0x2000f4d0

0800b500 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d107      	bne.n	800b51e <netif_set_up+0x1e>
 800b50e:	4b0f      	ldr	r3, [pc, #60]	; (800b54c <netif_set_up+0x4c>)
 800b510:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b514:	490e      	ldr	r1, [pc, #56]	; (800b550 <netif_set_up+0x50>)
 800b516:	480f      	ldr	r0, [pc, #60]	; (800b554 <netif_set_up+0x54>)
 800b518:	f00c f9f0 	bl	80178fc <iprintf>
 800b51c:	e013      	b.n	800b546 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b524:	f003 0301 	and.w	r3, r3, #1
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10c      	bne.n	800b546 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b532:	f043 0301 	orr.w	r3, r3, #1
 800b536:	b2da      	uxtb	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b53e:	2103      	movs	r1, #3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f809 	bl	800b558 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	08019c20 	.word	0x08019c20
 800b550:	08019da8 	.word	0x08019da8
 800b554:	08019c70 	.word	0x08019c70

0800b558 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	460b      	mov	r3, r1
 800b562:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <netif_issue_reports+0x20>
 800b56a:	4b18      	ldr	r3, [pc, #96]	; (800b5cc <netif_issue_reports+0x74>)
 800b56c:	f240 326d 	movw	r2, #877	; 0x36d
 800b570:	4917      	ldr	r1, [pc, #92]	; (800b5d0 <netif_issue_reports+0x78>)
 800b572:	4818      	ldr	r0, [pc, #96]	; (800b5d4 <netif_issue_reports+0x7c>)
 800b574:	f00c f9c2 	bl	80178fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b57e:	f003 0304 	and.w	r3, r3, #4
 800b582:	2b00      	cmp	r3, #0
 800b584:	d01e      	beq.n	800b5c4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b58c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b590:	2b00      	cmp	r3, #0
 800b592:	d017      	beq.n	800b5c4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b594:	78fb      	ldrb	r3, [r7, #3]
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d013      	beq.n	800b5c6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3304      	adds	r3, #4
 800b5a2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00e      	beq.n	800b5c6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b5ae:	f003 0308 	and.w	r3, r3, #8
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d007      	beq.n	800b5c6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f00a fb9d 	bl	8015cfc <etharp_request>
 800b5c2:	e000      	b.n	800b5c6 <netif_issue_reports+0x6e>
    return;
 800b5c4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	08019c20 	.word	0x08019c20
 800b5d0:	08019dc4 	.word	0x08019dc4
 800b5d4:	08019c70 	.word	0x08019c70

0800b5d8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d107      	bne.n	800b5f6 <netif_set_down+0x1e>
 800b5e6:	4b12      	ldr	r3, [pc, #72]	; (800b630 <netif_set_down+0x58>)
 800b5e8:	f240 329b 	movw	r2, #923	; 0x39b
 800b5ec:	4911      	ldr	r1, [pc, #68]	; (800b634 <netif_set_down+0x5c>)
 800b5ee:	4812      	ldr	r0, [pc, #72]	; (800b638 <netif_set_down+0x60>)
 800b5f0:	f00c f984 	bl	80178fc <iprintf>
 800b5f4:	e019      	b.n	800b62a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d012      	beq.n	800b62a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b60a:	f023 0301 	bic.w	r3, r3, #1
 800b60e:	b2da      	uxtb	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b61c:	f003 0308 	and.w	r3, r3, #8
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f009 ff23 	bl	8015470 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	08019c20 	.word	0x08019c20
 800b634:	08019de8 	.word	0x08019de8
 800b638:	08019c70 	.word	0x08019c70

0800b63c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d107      	bne.n	800b65a <netif_set_link_up+0x1e>
 800b64a:	4b15      	ldr	r3, [pc, #84]	; (800b6a0 <netif_set_link_up+0x64>)
 800b64c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b650:	4914      	ldr	r1, [pc, #80]	; (800b6a4 <netif_set_link_up+0x68>)
 800b652:	4815      	ldr	r0, [pc, #84]	; (800b6a8 <netif_set_link_up+0x6c>)
 800b654:	f00c f952 	bl	80178fc <iprintf>
 800b658:	e01e      	b.n	800b698 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b00      	cmp	r3, #0
 800b666:	d117      	bne.n	800b698 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b66e:	f043 0304 	orr.w	r3, r3, #4
 800b672:	b2da      	uxtb	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f008 f958 	bl	8013930 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b680:	2103      	movs	r1, #3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff ff68 	bl	800b558 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <netif_set_link_up+0x5c>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	69db      	ldr	r3, [r3, #28]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	08019c20 	.word	0x08019c20
 800b6a4:	08019e08 	.word	0x08019e08
 800b6a8:	08019c70 	.word	0x08019c70

0800b6ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d107      	bne.n	800b6ca <netif_set_link_down+0x1e>
 800b6ba:	4b11      	ldr	r3, [pc, #68]	; (800b700 <netif_set_link_down+0x54>)
 800b6bc:	f240 4206 	movw	r2, #1030	; 0x406
 800b6c0:	4910      	ldr	r1, [pc, #64]	; (800b704 <netif_set_link_down+0x58>)
 800b6c2:	4811      	ldr	r0, [pc, #68]	; (800b708 <netif_set_link_down+0x5c>)
 800b6c4:	f00c f91a 	bl	80178fc <iprintf>
 800b6c8:	e017      	b.n	800b6fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b6d0:	f003 0304 	and.w	r3, r3, #4
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d010      	beq.n	800b6fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b6de:	f023 0304 	bic.w	r3, r3, #4
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <netif_set_link_down+0x4e>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	69db      	ldr	r3, [r3, #28]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	08019c20 	.word	0x08019c20
 800b704:	08019e2c 	.word	0x08019e2c
 800b708:	08019c70 	.word	0x08019c70

0800b70c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	61da      	str	r2, [r3, #28]
  }
}
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b72e:	b480      	push	{r7}
 800b730:	b085      	sub	sp, #20
 800b732:	af00      	add	r7, sp, #0
 800b734:	60f8      	str	r0, [r7, #12]
 800b736:	60b9      	str	r1, [r7, #8]
 800b738:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b73a:	f06f 030b 	mvn.w	r3, #11
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
	...

0800b74c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d013      	beq.n	800b784 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b75c:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <netif_get_by_index+0x48>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	e00c      	b.n	800b77e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b76a:	3301      	adds	r3, #1
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	79fa      	ldrb	r2, [r7, #7]
 800b770:	429a      	cmp	r2, r3
 800b772:	d101      	bne.n	800b778 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	e006      	b.n	800b786 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1ef      	bne.n	800b764 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	2000f4cc 	.word	0x2000f4cc

0800b798 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b79e:	f00c f80f 	bl	80177c0 <sys_arch_protect>
 800b7a2:	6038      	str	r0, [r7, #0]
 800b7a4:	4b0d      	ldr	r3, [pc, #52]	; (800b7dc <pbuf_free_ooseq+0x44>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	701a      	strb	r2, [r3, #0]
 800b7aa:	6838      	ldr	r0, [r7, #0]
 800b7ac:	f00c f816 	bl	80177dc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <pbuf_free_ooseq+0x48>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	607b      	str	r3, [r7, #4]
 800b7b6:	e00a      	b.n	800b7ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d003      	beq.n	800b7c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f002 fc41 	bl	800e048 <tcp_free_ooseq>
      return;
 800b7c6:	e005      	b.n	800b7d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	607b      	str	r3, [r7, #4]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1f1      	bne.n	800b7b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	2000f4d4 	.word	0x2000f4d4
 800b7e0:	2000f4dc 	.word	0x2000f4dc

0800b7e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b7ec:	f7ff ffd4 	bl	800b798 <pbuf_free_ooseq>
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b7fe:	f00b ffdf 	bl	80177c0 <sys_arch_protect>
 800b802:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b804:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <pbuf_pool_is_empty+0x4c>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b80a:	4b0e      	ldr	r3, [pc, #56]	; (800b844 <pbuf_pool_is_empty+0x4c>)
 800b80c:	2201      	movs	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f00b ffe3 	bl	80177dc <sys_arch_unprotect>

  if (!queued) {
 800b816:	78fb      	ldrb	r3, [r7, #3]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10f      	bne.n	800b83c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b81c:	2100      	movs	r1, #0
 800b81e:	480a      	ldr	r0, [pc, #40]	; (800b848 <pbuf_pool_is_empty+0x50>)
 800b820:	f7fe feca 	bl	800a5b8 <tcpip_try_callback>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d008      	beq.n	800b83c <pbuf_pool_is_empty+0x44>
 800b82a:	f00b ffc9 	bl	80177c0 <sys_arch_protect>
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	4b04      	ldr	r3, [pc, #16]	; (800b844 <pbuf_pool_is_empty+0x4c>)
 800b832:	2200      	movs	r2, #0
 800b834:	701a      	strb	r2, [r3, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f00b ffd0 	bl	80177dc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	2000f4d4 	.word	0x2000f4d4
 800b848:	0800b7e5 	.word	0x0800b7e5

0800b84c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4611      	mov	r1, r2
 800b858:	461a      	mov	r2, r3
 800b85a:	460b      	mov	r3, r1
 800b85c:	80fb      	strh	r3, [r7, #6]
 800b85e:	4613      	mov	r3, r2
 800b860:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	88fa      	ldrh	r2, [r7, #6]
 800b872:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	88ba      	ldrh	r2, [r7, #4]
 800b878:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b87a:	8b3b      	ldrh	r3, [r7, #24]
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	7f3a      	ldrb	r2, [r7, #28]
 800b886:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2201      	movs	r2, #1
 800b88c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	73da      	strb	r2, [r3, #15]
}
 800b894:	bf00      	nop
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08c      	sub	sp, #48	; 0x30
 800b8a4:	af02      	add	r7, sp, #8
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	71fb      	strb	r3, [r7, #7]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	80bb      	strh	r3, [r7, #4]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b8b6:	887b      	ldrh	r3, [r7, #2]
 800b8b8:	2b41      	cmp	r3, #65	; 0x41
 800b8ba:	d00b      	beq.n	800b8d4 <pbuf_alloc+0x34>
 800b8bc:	2b41      	cmp	r3, #65	; 0x41
 800b8be:	dc02      	bgt.n	800b8c6 <pbuf_alloc+0x26>
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d007      	beq.n	800b8d4 <pbuf_alloc+0x34>
 800b8c4:	e0c2      	b.n	800ba4c <pbuf_alloc+0x1ac>
 800b8c6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b8ca:	d00b      	beq.n	800b8e4 <pbuf_alloc+0x44>
 800b8cc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b8d0:	d070      	beq.n	800b9b4 <pbuf_alloc+0x114>
 800b8d2:	e0bb      	b.n	800ba4c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b8d4:	887a      	ldrh	r2, [r7, #2]
 800b8d6:	88bb      	ldrh	r3, [r7, #4]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f000 f8d2 	bl	800ba84 <pbuf_alloc_reference>
 800b8e0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b8e2:	e0bd      	b.n	800ba60 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b8ec:	88bb      	ldrh	r3, [r7, #4]
 800b8ee:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b8f0:	200c      	movs	r0, #12
 800b8f2:	f7ff fbb7 	bl	800b064 <memp_malloc>
 800b8f6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d109      	bne.n	800b912 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800b8fe:	f7ff ff7b 	bl	800b7f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800b908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b90a:	f000 faa9 	bl	800be60 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	e0a7      	b.n	800ba62 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b912:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b914:	3303      	adds	r3, #3
 800b916:	b29b      	uxth	r3, r3
 800b918:	f023 0303 	bic.w	r3, r3, #3
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b922:	b29b      	uxth	r3, r3
 800b924:	8b7a      	ldrh	r2, [r7, #26]
 800b926:	4293      	cmp	r3, r2
 800b928:	bf28      	it	cs
 800b92a:	4613      	movcs	r3, r2
 800b92c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b92e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b930:	3310      	adds	r3, #16
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4413      	add	r3, r2
 800b936:	3303      	adds	r3, #3
 800b938:	f023 0303 	bic.w	r3, r3, #3
 800b93c:	4618      	mov	r0, r3
 800b93e:	89f9      	ldrh	r1, [r7, #14]
 800b940:	8b7a      	ldrh	r2, [r7, #26]
 800b942:	2300      	movs	r3, #0
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	887b      	ldrh	r3, [r7, #2]
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	460b      	mov	r3, r1
 800b94c:	4601      	mov	r1, r0
 800b94e:	6938      	ldr	r0, [r7, #16]
 800b950:	f7ff ff7c 	bl	800b84c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f003 0303 	and.w	r3, r3, #3
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d006      	beq.n	800b96e <pbuf_alloc+0xce>
 800b960:	4b42      	ldr	r3, [pc, #264]	; (800ba6c <pbuf_alloc+0x1cc>)
 800b962:	f240 1201 	movw	r2, #257	; 0x101
 800b966:	4942      	ldr	r1, [pc, #264]	; (800ba70 <pbuf_alloc+0x1d0>)
 800b968:	4842      	ldr	r0, [pc, #264]	; (800ba74 <pbuf_alloc+0x1d4>)
 800b96a:	f00b ffc7 	bl	80178fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b96e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b970:	3303      	adds	r3, #3
 800b972:	f023 0303 	bic.w	r3, r3, #3
 800b976:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b97a:	d106      	bne.n	800b98a <pbuf_alloc+0xea>
 800b97c:	4b3b      	ldr	r3, [pc, #236]	; (800ba6c <pbuf_alloc+0x1cc>)
 800b97e:	f240 1203 	movw	r2, #259	; 0x103
 800b982:	493d      	ldr	r1, [pc, #244]	; (800ba78 <pbuf_alloc+0x1d8>)
 800b984:	483b      	ldr	r0, [pc, #236]	; (800ba74 <pbuf_alloc+0x1d4>)
 800b986:	f00b ffb9 	bl	80178fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d102      	bne.n	800b996 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
 800b994:	e002      	b.n	800b99c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b9a0:	8b7a      	ldrh	r2, [r7, #26]
 800b9a2:	89fb      	ldrh	r3, [r7, #14]
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b9ac:	8b7b      	ldrh	r3, [r7, #26]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d19e      	bne.n	800b8f0 <pbuf_alloc+0x50>
      break;
 800b9b2:	e055      	b.n	800ba60 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b9b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9b6:	3303      	adds	r3, #3
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	f023 0303 	bic.w	r3, r3, #3
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	88bb      	ldrh	r3, [r7, #4]
 800b9c2:	3303      	adds	r3, #3
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	f023 0303 	bic.w	r3, r3, #3
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	4413      	add	r3, r2
 800b9ce:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b9d0:	8b3b      	ldrh	r3, [r7, #24]
 800b9d2:	3310      	adds	r3, #16
 800b9d4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b9d6:	8b3a      	ldrh	r2, [r7, #24]
 800b9d8:	88bb      	ldrh	r3, [r7, #4]
 800b9da:	3303      	adds	r3, #3
 800b9dc:	f023 0303 	bic.w	r3, r3, #3
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d306      	bcc.n	800b9f2 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b9e4:	8afa      	ldrh	r2, [r7, #22]
 800b9e6:	88bb      	ldrh	r3, [r7, #4]
 800b9e8:	3303      	adds	r3, #3
 800b9ea:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d201      	bcs.n	800b9f6 <pbuf_alloc+0x156>
        return NULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e035      	b.n	800ba62 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b9f6:	8afb      	ldrh	r3, [r7, #22]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff f9b1 	bl	800ad60 <mem_malloc>
 800b9fe:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d101      	bne.n	800ba0a <pbuf_alloc+0x16a>
        return NULL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	e02b      	b.n	800ba62 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ba0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba10:	4413      	add	r3, r2
 800ba12:	3303      	adds	r3, #3
 800ba14:	f023 0303 	bic.w	r3, r3, #3
 800ba18:	4618      	mov	r0, r3
 800ba1a:	88b9      	ldrh	r1, [r7, #4]
 800ba1c:	88ba      	ldrh	r2, [r7, #4]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	887b      	ldrh	r3, [r7, #2]
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	460b      	mov	r3, r1
 800ba28:	4601      	mov	r1, r0
 800ba2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba2c:	f7ff ff0e 	bl	800b84c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f003 0303 	and.w	r3, r3, #3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d010      	beq.n	800ba5e <pbuf_alloc+0x1be>
 800ba3c:	4b0b      	ldr	r3, [pc, #44]	; (800ba6c <pbuf_alloc+0x1cc>)
 800ba3e:	f240 1223 	movw	r2, #291	; 0x123
 800ba42:	490e      	ldr	r1, [pc, #56]	; (800ba7c <pbuf_alloc+0x1dc>)
 800ba44:	480b      	ldr	r0, [pc, #44]	; (800ba74 <pbuf_alloc+0x1d4>)
 800ba46:	f00b ff59 	bl	80178fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ba4a:	e008      	b.n	800ba5e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ba4c:	4b07      	ldr	r3, [pc, #28]	; (800ba6c <pbuf_alloc+0x1cc>)
 800ba4e:	f240 1227 	movw	r2, #295	; 0x127
 800ba52:	490b      	ldr	r1, [pc, #44]	; (800ba80 <pbuf_alloc+0x1e0>)
 800ba54:	4807      	ldr	r0, [pc, #28]	; (800ba74 <pbuf_alloc+0x1d4>)
 800ba56:	f00b ff51 	bl	80178fc <iprintf>
      return NULL;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e001      	b.n	800ba62 <pbuf_alloc+0x1c2>
      break;
 800ba5e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3728      	adds	r7, #40	; 0x28
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	08019e50 	.word	0x08019e50
 800ba70:	08019e80 	.word	0x08019e80
 800ba74:	08019eb0 	.word	0x08019eb0
 800ba78:	08019ed8 	.word	0x08019ed8
 800ba7c:	08019f0c 	.word	0x08019f0c
 800ba80:	08019f38 	.word	0x08019f38

0800ba84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	807b      	strh	r3, [r7, #2]
 800ba90:	4613      	mov	r3, r2
 800ba92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ba94:	883b      	ldrh	r3, [r7, #0]
 800ba96:	2b41      	cmp	r3, #65	; 0x41
 800ba98:	d009      	beq.n	800baae <pbuf_alloc_reference+0x2a>
 800ba9a:	883b      	ldrh	r3, [r7, #0]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d006      	beq.n	800baae <pbuf_alloc_reference+0x2a>
 800baa0:	4b0f      	ldr	r3, [pc, #60]	; (800bae0 <pbuf_alloc_reference+0x5c>)
 800baa2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800baa6:	490f      	ldr	r1, [pc, #60]	; (800bae4 <pbuf_alloc_reference+0x60>)
 800baa8:	480f      	ldr	r0, [pc, #60]	; (800bae8 <pbuf_alloc_reference+0x64>)
 800baaa:	f00b ff27 	bl	80178fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800baae:	200b      	movs	r0, #11
 800bab0:	f7ff fad8 	bl	800b064 <memp_malloc>
 800bab4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800babc:	2300      	movs	r3, #0
 800babe:	e00b      	b.n	800bad8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bac0:	8879      	ldrh	r1, [r7, #2]
 800bac2:	887a      	ldrh	r2, [r7, #2]
 800bac4:	2300      	movs	r3, #0
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	883b      	ldrh	r3, [r7, #0]
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	460b      	mov	r3, r1
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f7ff febb 	bl	800b84c <pbuf_init_alloced_pbuf>
  return p;
 800bad6:	68fb      	ldr	r3, [r7, #12]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	08019e50 	.word	0x08019e50
 800bae4:	08019f54 	.word	0x08019f54
 800bae8:	08019eb0 	.word	0x08019eb0

0800baec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	607b      	str	r3, [r7, #4]
 800baf4:	4603      	mov	r3, r0
 800baf6:	73fb      	strb	r3, [r7, #15]
 800baf8:	460b      	mov	r3, r1
 800bafa:	81bb      	strh	r3, [r7, #12]
 800bafc:	4613      	mov	r3, r2
 800bafe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bb04:	8a7b      	ldrh	r3, [r7, #18]
 800bb06:	3303      	adds	r3, #3
 800bb08:	f023 0203 	bic.w	r2, r3, #3
 800bb0c:	89bb      	ldrh	r3, [r7, #12]
 800bb0e:	441a      	add	r2, r3
 800bb10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d901      	bls.n	800bb1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	e018      	b.n	800bb4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d007      	beq.n	800bb30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bb20:	8a7b      	ldrh	r3, [r7, #18]
 800bb22:	3303      	adds	r3, #3
 800bb24:	f023 0303 	bic.w	r3, r3, #3
 800bb28:	6a3a      	ldr	r2, [r7, #32]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	e001      	b.n	800bb34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bb30:	2300      	movs	r3, #0
 800bb32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	89b9      	ldrh	r1, [r7, #12]
 800bb38:	89ba      	ldrh	r2, [r7, #12]
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	9301      	str	r3, [sp, #4]
 800bb3e:	897b      	ldrh	r3, [r7, #10]
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	460b      	mov	r3, r1
 800bb44:	6979      	ldr	r1, [r7, #20]
 800bb46:	f7ff fe81 	bl	800b84c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bb4a:	687b      	ldr	r3, [r7, #4]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d106      	bne.n	800bb74 <pbuf_realloc+0x20>
 800bb66:	4b3a      	ldr	r3, [pc, #232]	; (800bc50 <pbuf_realloc+0xfc>)
 800bb68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bb6c:	4939      	ldr	r1, [pc, #228]	; (800bc54 <pbuf_realloc+0x100>)
 800bb6e:	483a      	ldr	r0, [pc, #232]	; (800bc58 <pbuf_realloc+0x104>)
 800bb70:	f00b fec4 	bl	80178fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	891b      	ldrh	r3, [r3, #8]
 800bb78:	887a      	ldrh	r2, [r7, #2]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d264      	bcs.n	800bc48 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	891a      	ldrh	r2, [r3, #8]
 800bb82:	887b      	ldrh	r3, [r7, #2]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bb88:	887b      	ldrh	r3, [r7, #2]
 800bb8a:	817b      	strh	r3, [r7, #10]
  q = p;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bb90:	e018      	b.n	800bbc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	895b      	ldrh	r3, [r3, #10]
 800bb96:	897a      	ldrh	r2, [r7, #10]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	891a      	ldrh	r2, [r3, #8]
 800bba0:	893b      	ldrh	r3, [r7, #8]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <pbuf_realloc+0x70>
 800bbb6:	4b26      	ldr	r3, [pc, #152]	; (800bc50 <pbuf_realloc+0xfc>)
 800bbb8:	f240 12af 	movw	r2, #431	; 0x1af
 800bbbc:	4927      	ldr	r1, [pc, #156]	; (800bc5c <pbuf_realloc+0x108>)
 800bbbe:	4826      	ldr	r0, [pc, #152]	; (800bc58 <pbuf_realloc+0x104>)
 800bbc0:	f00b fe9c 	bl	80178fc <iprintf>
  while (rem_len > q->len) {
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	895b      	ldrh	r3, [r3, #10]
 800bbc8:	897a      	ldrh	r2, [r7, #10]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d8e1      	bhi.n	800bb92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	7b1b      	ldrb	r3, [r3, #12]
 800bbd2:	f003 030f 	and.w	r3, r3, #15
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d122      	bne.n	800bc20 <pbuf_realloc+0xcc>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	895b      	ldrh	r3, [r3, #10]
 800bbde:	897a      	ldrh	r2, [r7, #10]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d01d      	beq.n	800bc20 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	7b5b      	ldrb	r3, [r3, #13]
 800bbe8:	f003 0302 	and.w	r3, r3, #2
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d117      	bne.n	800bc20 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	897b      	ldrh	r3, [r7, #10]
 800bbfe:	4413      	add	r3, r2
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	4619      	mov	r1, r3
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f7fe ffa1 	bl	800ab4c <mem_trim>
 800bc0a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d106      	bne.n	800bc20 <pbuf_realloc+0xcc>
 800bc12:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <pbuf_realloc+0xfc>)
 800bc14:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bc18:	4911      	ldr	r1, [pc, #68]	; (800bc60 <pbuf_realloc+0x10c>)
 800bc1a:	480f      	ldr	r0, [pc, #60]	; (800bc58 <pbuf_realloc+0x104>)
 800bc1c:	f00b fe6e 	bl	80178fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	897a      	ldrh	r2, [r7, #10]
 800bc24:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	895a      	ldrh	r2, [r3, #10]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 f910 	bl	800be60 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	e000      	b.n	800bc4a <pbuf_realloc+0xf6>
    return;
 800bc48:	bf00      	nop

}
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	08019e50 	.word	0x08019e50
 800bc54:	08019f68 	.word	0x08019f68
 800bc58:	08019eb0 	.word	0x08019eb0
 800bc5c:	08019f80 	.word	0x08019f80
 800bc60:	08019f98 	.word	0x08019f98

0800bc64 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d106      	bne.n	800bc86 <pbuf_add_header_impl+0x22>
 800bc78:	4b2b      	ldr	r3, [pc, #172]	; (800bd28 <pbuf_add_header_impl+0xc4>)
 800bc7a:	f240 12df 	movw	r2, #479	; 0x1df
 800bc7e:	492b      	ldr	r1, [pc, #172]	; (800bd2c <pbuf_add_header_impl+0xc8>)
 800bc80:	482b      	ldr	r0, [pc, #172]	; (800bd30 <pbuf_add_header_impl+0xcc>)
 800bc82:	f00b fe3b 	bl	80178fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d003      	beq.n	800bc94 <pbuf_add_header_impl+0x30>
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc92:	d301      	bcc.n	800bc98 <pbuf_add_header_impl+0x34>
    return 1;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e043      	b.n	800bd20 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <pbuf_add_header_impl+0x3e>
    return 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e03e      	b.n	800bd20 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	891a      	ldrh	r2, [r3, #8]
 800bcaa:	8a7b      	ldrh	r3, [r7, #18]
 800bcac:	4413      	add	r3, r2
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	8a7a      	ldrh	r2, [r7, #18]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d901      	bls.n	800bcba <pbuf_add_header_impl+0x56>
    return 1;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e032      	b.n	800bd20 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	7b1b      	ldrb	r3, [r3, #12]
 800bcbe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bcc0:	8a3b      	ldrh	r3, [r7, #16]
 800bcc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00c      	beq.n	800bce4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	685a      	ldr	r2, [r3, #4]
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	425b      	negs	r3, r3
 800bcd2:	4413      	add	r3, r2
 800bcd4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3310      	adds	r3, #16
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d20d      	bcs.n	800bcfc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e01d      	b.n	800bd20 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d006      	beq.n	800bcf8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	425b      	negs	r3, r3
 800bcf2:	4413      	add	r3, r2
 800bcf4:	617b      	str	r3, [r7, #20]
 800bcf6:	e001      	b.n	800bcfc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e011      	b.n	800bd20 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	895a      	ldrh	r2, [r3, #10]
 800bd06:	8a7b      	ldrh	r3, [r7, #18]
 800bd08:	4413      	add	r3, r2
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	891a      	ldrh	r2, [r3, #8]
 800bd14:	8a7b      	ldrh	r3, [r7, #18]
 800bd16:	4413      	add	r3, r2
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	811a      	strh	r2, [r3, #8]


  return 0;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3718      	adds	r7, #24
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	08019e50 	.word	0x08019e50
 800bd2c:	08019fb4 	.word	0x08019fb4
 800bd30:	08019eb0 	.word	0x08019eb0

0800bd34 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bd3e:	2200      	movs	r2, #0
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff ff8e 	bl	800bc64 <pbuf_add_header_impl>
 800bd48:	4603      	mov	r3, r0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d106      	bne.n	800bd72 <pbuf_remove_header+0x1e>
 800bd64:	4b20      	ldr	r3, [pc, #128]	; (800bde8 <pbuf_remove_header+0x94>)
 800bd66:	f240 224b 	movw	r2, #587	; 0x24b
 800bd6a:	4920      	ldr	r1, [pc, #128]	; (800bdec <pbuf_remove_header+0x98>)
 800bd6c:	4820      	ldr	r0, [pc, #128]	; (800bdf0 <pbuf_remove_header+0x9c>)
 800bd6e:	f00b fdc5 	bl	80178fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <pbuf_remove_header+0x2c>
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7e:	d301      	bcc.n	800bd84 <pbuf_remove_header+0x30>
    return 1;
 800bd80:	2301      	movs	r3, #1
 800bd82:	e02c      	b.n	800bdde <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <pbuf_remove_header+0x3a>
    return 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	e027      	b.n	800bdde <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	895b      	ldrh	r3, [r3, #10]
 800bd96:	89fa      	ldrh	r2, [r7, #14]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d908      	bls.n	800bdae <pbuf_remove_header+0x5a>
 800bd9c:	4b12      	ldr	r3, [pc, #72]	; (800bde8 <pbuf_remove_header+0x94>)
 800bd9e:	f240 2255 	movw	r2, #597	; 0x255
 800bda2:	4914      	ldr	r1, [pc, #80]	; (800bdf4 <pbuf_remove_header+0xa0>)
 800bda4:	4812      	ldr	r0, [pc, #72]	; (800bdf0 <pbuf_remove_header+0x9c>)
 800bda6:	f00b fda9 	bl	80178fc <iprintf>
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e017      	b.n	800bdde <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	441a      	add	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	895a      	ldrh	r2, [r3, #10]
 800bdc4:	89fb      	ldrh	r3, [r7, #14]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	891a      	ldrh	r2, [r3, #8]
 800bdd2:	89fb      	ldrh	r3, [r7, #14]
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	08019e50 	.word	0x08019e50
 800bdec:	08019fb4 	.word	0x08019fb4
 800bdf0:	08019eb0 	.word	0x08019eb0
 800bdf4:	08019fc0 	.word	0x08019fc0

0800bdf8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	460b      	mov	r3, r1
 800be02:	807b      	strh	r3, [r7, #2]
 800be04:	4613      	mov	r3, r2
 800be06:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800be08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	da08      	bge.n	800be22 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800be10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be14:	425b      	negs	r3, r3
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ff9b 	bl	800bd54 <pbuf_remove_header>
 800be1e:	4603      	mov	r3, r0
 800be20:	e007      	b.n	800be32 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800be22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be26:	787a      	ldrb	r2, [r7, #1]
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f7ff ff1a 	bl	800bc64 <pbuf_add_header_impl>
 800be30:	4603      	mov	r3, r0
  }
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	460b      	mov	r3, r1
 800be44:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800be46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be4a:	2201      	movs	r2, #1
 800be4c:	4619      	mov	r1, r3
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff ffd2 	bl	800bdf8 <pbuf_header_impl>
 800be54:	4603      	mov	r3, r0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10b      	bne.n	800be86 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d106      	bne.n	800be82 <pbuf_free+0x22>
 800be74:	4b3b      	ldr	r3, [pc, #236]	; (800bf64 <pbuf_free+0x104>)
 800be76:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800be7a:	493b      	ldr	r1, [pc, #236]	; (800bf68 <pbuf_free+0x108>)
 800be7c:	483b      	ldr	r0, [pc, #236]	; (800bf6c <pbuf_free+0x10c>)
 800be7e:	f00b fd3d 	bl	80178fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800be82:	2300      	movs	r3, #0
 800be84:	e069      	b.n	800bf5a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800be8a:	e062      	b.n	800bf52 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800be8c:	f00b fc98 	bl	80177c0 <sys_arch_protect>
 800be90:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7b9b      	ldrb	r3, [r3, #14]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d106      	bne.n	800bea8 <pbuf_free+0x48>
 800be9a:	4b32      	ldr	r3, [pc, #200]	; (800bf64 <pbuf_free+0x104>)
 800be9c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bea0:	4933      	ldr	r1, [pc, #204]	; (800bf70 <pbuf_free+0x110>)
 800bea2:	4832      	ldr	r0, [pc, #200]	; (800bf6c <pbuf_free+0x10c>)
 800bea4:	f00b fd2a 	bl	80178fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7b9b      	ldrb	r3, [r3, #14]
 800beac:	3b01      	subs	r3, #1
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	739a      	strb	r2, [r3, #14]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	7b9b      	ldrb	r3, [r3, #14]
 800beb8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800beba:	69b8      	ldr	r0, [r7, #24]
 800bebc:	f00b fc8e 	bl	80177dc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d143      	bne.n	800bf4e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	7b1b      	ldrb	r3, [r3, #12]
 800bed0:	f003 030f 	and.w	r3, r3, #15
 800bed4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	7b5b      	ldrb	r3, [r3, #13]
 800beda:	f003 0302 	and.w	r3, r3, #2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d011      	beq.n	800bf06 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d106      	bne.n	800befc <pbuf_free+0x9c>
 800beee:	4b1d      	ldr	r3, [pc, #116]	; (800bf64 <pbuf_free+0x104>)
 800bef0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bef4:	491f      	ldr	r1, [pc, #124]	; (800bf74 <pbuf_free+0x114>)
 800bef6:	481d      	ldr	r0, [pc, #116]	; (800bf6c <pbuf_free+0x10c>)
 800bef8:	f00b fd00 	bl	80178fc <iprintf>
        pc->custom_free_function(p);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	4798      	blx	r3
 800bf04:	e01d      	b.n	800bf42 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d104      	bne.n	800bf16 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bf0c:	6879      	ldr	r1, [r7, #4]
 800bf0e:	200c      	movs	r0, #12
 800bf10:	f7ff f8fa 	bl	800b108 <memp_free>
 800bf14:	e015      	b.n	800bf42 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d104      	bne.n	800bf26 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	200b      	movs	r0, #11
 800bf20:	f7ff f8f2 	bl	800b108 <memp_free>
 800bf24:	e00d      	b.n	800bf42 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d103      	bne.n	800bf34 <pbuf_free+0xd4>
          mem_free(p);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7fe fd7d 	bl	800aa2c <mem_free>
 800bf32:	e006      	b.n	800bf42 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bf34:	4b0b      	ldr	r3, [pc, #44]	; (800bf64 <pbuf_free+0x104>)
 800bf36:	f240 320f 	movw	r2, #783	; 0x30f
 800bf3a:	490f      	ldr	r1, [pc, #60]	; (800bf78 <pbuf_free+0x118>)
 800bf3c:	480b      	ldr	r0, [pc, #44]	; (800bf6c <pbuf_free+0x10c>)
 800bf3e:	f00b fcdd 	bl	80178fc <iprintf>
        }
      }
      count++;
 800bf42:	7ffb      	ldrb	r3, [r7, #31]
 800bf44:	3301      	adds	r3, #1
 800bf46:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	607b      	str	r3, [r7, #4]
 800bf4c:	e001      	b.n	800bf52 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d199      	bne.n	800be8c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bf58:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3720      	adds	r7, #32
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	08019e50 	.word	0x08019e50
 800bf68:	08019fb4 	.word	0x08019fb4
 800bf6c:	08019eb0 	.word	0x08019eb0
 800bf70:	08019fe0 	.word	0x08019fe0
 800bf74:	08019ff8 	.word	0x08019ff8
 800bf78:	0801a01c 	.word	0x0801a01c

0800bf7c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bf88:	e005      	b.n	800bf96 <pbuf_clen+0x1a>
    ++len;
 800bf8a:	89fb      	ldrh	r3, [r7, #14]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1f6      	bne.n	800bf8a <pbuf_clen+0xe>
  }
  return len;
 800bf9c:	89fb      	ldrh	r3, [r7, #14]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
	...

0800bfac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d016      	beq.n	800bfe8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bfba:	f00b fc01 	bl	80177c0 <sys_arch_protect>
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	7b9b      	ldrb	r3, [r3, #14]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	739a      	strb	r2, [r3, #14]
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f00b fc05 	bl	80177dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	7b9b      	ldrb	r3, [r3, #14]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <pbuf_ref+0x3c>
 800bfda:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <pbuf_ref+0x44>)
 800bfdc:	f240 3242 	movw	r2, #834	; 0x342
 800bfe0:	4904      	ldr	r1, [pc, #16]	; (800bff4 <pbuf_ref+0x48>)
 800bfe2:	4805      	ldr	r0, [pc, #20]	; (800bff8 <pbuf_ref+0x4c>)
 800bfe4:	f00b fc8a 	bl	80178fc <iprintf>
  }
}
 800bfe8:	bf00      	nop
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	08019e50 	.word	0x08019e50
 800bff4:	0801a030 	.word	0x0801a030
 800bff8:	08019eb0 	.word	0x08019eb0

0800bffc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <pbuf_cat+0x16>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d107      	bne.n	800c022 <pbuf_cat+0x26>
 800c012:	4b20      	ldr	r3, [pc, #128]	; (800c094 <pbuf_cat+0x98>)
 800c014:	f240 325a 	movw	r2, #858	; 0x35a
 800c018:	491f      	ldr	r1, [pc, #124]	; (800c098 <pbuf_cat+0x9c>)
 800c01a:	4820      	ldr	r0, [pc, #128]	; (800c09c <pbuf_cat+0xa0>)
 800c01c:	f00b fc6e 	bl	80178fc <iprintf>
 800c020:	e034      	b.n	800c08c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	e00a      	b.n	800c03e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	891a      	ldrh	r2, [r3, #8]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	891b      	ldrh	r3, [r3, #8]
 800c030:	4413      	add	r3, r2
 800c032:	b29a      	uxth	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	60fb      	str	r3, [r7, #12]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1f0      	bne.n	800c028 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	891a      	ldrh	r2, [r3, #8]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	895b      	ldrh	r3, [r3, #10]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d006      	beq.n	800c060 <pbuf_cat+0x64>
 800c052:	4b10      	ldr	r3, [pc, #64]	; (800c094 <pbuf_cat+0x98>)
 800c054:	f240 3262 	movw	r2, #866	; 0x362
 800c058:	4911      	ldr	r1, [pc, #68]	; (800c0a0 <pbuf_cat+0xa4>)
 800c05a:	4810      	ldr	r0, [pc, #64]	; (800c09c <pbuf_cat+0xa0>)
 800c05c:	f00b fc4e 	bl	80178fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d006      	beq.n	800c076 <pbuf_cat+0x7a>
 800c068:	4b0a      	ldr	r3, [pc, #40]	; (800c094 <pbuf_cat+0x98>)
 800c06a:	f240 3263 	movw	r2, #867	; 0x363
 800c06e:	490d      	ldr	r1, [pc, #52]	; (800c0a4 <pbuf_cat+0xa8>)
 800c070:	480a      	ldr	r0, [pc, #40]	; (800c09c <pbuf_cat+0xa0>)
 800c072:	f00b fc43 	bl	80178fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	891a      	ldrh	r2, [r3, #8]
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	891b      	ldrh	r3, [r3, #8]
 800c07e:	4413      	add	r3, r2
 800c080:	b29a      	uxth	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	08019e50 	.word	0x08019e50
 800c098:	0801a044 	.word	0x0801a044
 800c09c:	08019eb0 	.word	0x08019eb0
 800c0a0:	0801a07c 	.word	0x0801a07c
 800c0a4:	0801a0ac 	.word	0x0801a0ac

0800c0a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f7ff ffa1 	bl	800bffc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c0ba:	6838      	ldr	r0, [r7, #0]
 800c0bc:	f7ff ff76 	bl	800bfac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b086      	sub	sp, #24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	617b      	str	r3, [r7, #20]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d008      	beq.n	800c0f2 <pbuf_copy+0x2a>
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d005      	beq.n	800c0f2 <pbuf_copy+0x2a>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	891a      	ldrh	r2, [r3, #8]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	891b      	ldrh	r3, [r3, #8]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d209      	bcs.n	800c106 <pbuf_copy+0x3e>
 800c0f2:	4b57      	ldr	r3, [pc, #348]	; (800c250 <pbuf_copy+0x188>)
 800c0f4:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c0f8:	4956      	ldr	r1, [pc, #344]	; (800c254 <pbuf_copy+0x18c>)
 800c0fa:	4857      	ldr	r0, [pc, #348]	; (800c258 <pbuf_copy+0x190>)
 800c0fc:	f00b fbfe 	bl	80178fc <iprintf>
 800c100:	f06f 030f 	mvn.w	r3, #15
 800c104:	e09f      	b.n	800c246 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	895b      	ldrh	r3, [r3, #10]
 800c10a:	461a      	mov	r2, r3
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	895b      	ldrh	r3, [r3, #10]
 800c114:	4619      	mov	r1, r3
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	1acb      	subs	r3, r1, r3
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d306      	bcc.n	800c12c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	895b      	ldrh	r3, [r3, #10]
 800c122:	461a      	mov	r2, r3
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e005      	b.n	800c138 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	895b      	ldrh	r3, [r3, #10]
 800c130:	461a      	mov	r2, r3
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	18d0      	adds	r0, r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	4413      	add	r3, r2
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	4619      	mov	r1, r3
 800c14c:	f00b fba9 	bl	80178a2 <memcpy>
    offset_to += len;
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	4413      	add	r3, r2
 800c156:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	4413      	add	r3, r2
 800c15e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	895b      	ldrh	r3, [r3, #10]
 800c164:	461a      	mov	r2, r3
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	4293      	cmp	r3, r2
 800c16a:	d906      	bls.n	800c17a <pbuf_copy+0xb2>
 800c16c:	4b38      	ldr	r3, [pc, #224]	; (800c250 <pbuf_copy+0x188>)
 800c16e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c172:	493a      	ldr	r1, [pc, #232]	; (800c25c <pbuf_copy+0x194>)
 800c174:	4838      	ldr	r0, [pc, #224]	; (800c258 <pbuf_copy+0x190>)
 800c176:	f00b fbc1 	bl	80178fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	895b      	ldrh	r3, [r3, #10]
 800c17e:	461a      	mov	r2, r3
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	4293      	cmp	r3, r2
 800c184:	d906      	bls.n	800c194 <pbuf_copy+0xcc>
 800c186:	4b32      	ldr	r3, [pc, #200]	; (800c250 <pbuf_copy+0x188>)
 800c188:	f240 32da 	movw	r2, #986	; 0x3da
 800c18c:	4934      	ldr	r1, [pc, #208]	; (800c260 <pbuf_copy+0x198>)
 800c18e:	4832      	ldr	r0, [pc, #200]	; (800c258 <pbuf_copy+0x190>)
 800c190:	f00b fbb4 	bl	80178fc <iprintf>
    if (offset_from >= p_from->len) {
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	895b      	ldrh	r3, [r3, #10]
 800c198:	461a      	mov	r2, r3
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d304      	bcc.n	800c1aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	895b      	ldrh	r3, [r3, #10]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d114      	bne.n	800c1e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10c      	bne.n	800c1e0 <pbuf_copy+0x118>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d009      	beq.n	800c1e0 <pbuf_copy+0x118>
 800c1cc:	4b20      	ldr	r3, [pc, #128]	; (800c250 <pbuf_copy+0x188>)
 800c1ce:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c1d2:	4924      	ldr	r1, [pc, #144]	; (800c264 <pbuf_copy+0x19c>)
 800c1d4:	4820      	ldr	r0, [pc, #128]	; (800c258 <pbuf_copy+0x190>)
 800c1d6:	f00b fb91 	bl	80178fc <iprintf>
 800c1da:	f06f 030f 	mvn.w	r3, #15
 800c1de:	e032      	b.n	800c246 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d013      	beq.n	800c20e <pbuf_copy+0x146>
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	895a      	ldrh	r2, [r3, #10]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	891b      	ldrh	r3, [r3, #8]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d10d      	bne.n	800c20e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d009      	beq.n	800c20e <pbuf_copy+0x146>
 800c1fa:	4b15      	ldr	r3, [pc, #84]	; (800c250 <pbuf_copy+0x188>)
 800c1fc:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c200:	4919      	ldr	r1, [pc, #100]	; (800c268 <pbuf_copy+0x1a0>)
 800c202:	4815      	ldr	r0, [pc, #84]	; (800c258 <pbuf_copy+0x190>)
 800c204:	f00b fb7a 	bl	80178fc <iprintf>
 800c208:	f06f 0305 	mvn.w	r3, #5
 800c20c:	e01b      	b.n	800c246 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d013      	beq.n	800c23c <pbuf_copy+0x174>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	895a      	ldrh	r2, [r3, #10]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	891b      	ldrh	r3, [r3, #8]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d10d      	bne.n	800c23c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d009      	beq.n	800c23c <pbuf_copy+0x174>
 800c228:	4b09      	ldr	r3, [pc, #36]	; (800c250 <pbuf_copy+0x188>)
 800c22a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c22e:	490e      	ldr	r1, [pc, #56]	; (800c268 <pbuf_copy+0x1a0>)
 800c230:	4809      	ldr	r0, [pc, #36]	; (800c258 <pbuf_copy+0x190>)
 800c232:	f00b fb63 	bl	80178fc <iprintf>
 800c236:	f06f 0305 	mvn.w	r3, #5
 800c23a:	e004      	b.n	800c246 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f47f af61 	bne.w	800c106 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	08019e50 	.word	0x08019e50
 800c254:	0801a0f8 	.word	0x0801a0f8
 800c258:	08019eb0 	.word	0x08019eb0
 800c25c:	0801a128 	.word	0x0801a128
 800c260:	0801a140 	.word	0x0801a140
 800c264:	0801a15c 	.word	0x0801a15c
 800c268:	0801a16c 	.word	0x0801a16c

0800c26c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	4611      	mov	r1, r2
 800c278:	461a      	mov	r2, r3
 800c27a:	460b      	mov	r3, r1
 800c27c:	80fb      	strh	r3, [r7, #6]
 800c27e:	4613      	mov	r3, r2
 800c280:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d108      	bne.n	800c2a2 <pbuf_copy_partial+0x36>
 800c290:	4b2b      	ldr	r3, [pc, #172]	; (800c340 <pbuf_copy_partial+0xd4>)
 800c292:	f240 420a 	movw	r2, #1034	; 0x40a
 800c296:	492b      	ldr	r1, [pc, #172]	; (800c344 <pbuf_copy_partial+0xd8>)
 800c298:	482b      	ldr	r0, [pc, #172]	; (800c348 <pbuf_copy_partial+0xdc>)
 800c29a:	f00b fb2f 	bl	80178fc <iprintf>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e04a      	b.n	800c338 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d108      	bne.n	800c2ba <pbuf_copy_partial+0x4e>
 800c2a8:	4b25      	ldr	r3, [pc, #148]	; (800c340 <pbuf_copy_partial+0xd4>)
 800c2aa:	f240 420b 	movw	r2, #1035	; 0x40b
 800c2ae:	4927      	ldr	r1, [pc, #156]	; (800c34c <pbuf_copy_partial+0xe0>)
 800c2b0:	4825      	ldr	r0, [pc, #148]	; (800c348 <pbuf_copy_partial+0xdc>)
 800c2b2:	f00b fb23 	bl	80178fc <iprintf>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e03e      	b.n	800c338 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	61fb      	str	r3, [r7, #28]
 800c2be:	e034      	b.n	800c32a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c2c0:	88bb      	ldrh	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00a      	beq.n	800c2dc <pbuf_copy_partial+0x70>
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	895b      	ldrh	r3, [r3, #10]
 800c2ca:	88ba      	ldrh	r2, [r7, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d305      	bcc.n	800c2dc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	895b      	ldrh	r3, [r3, #10]
 800c2d4:	88ba      	ldrh	r2, [r7, #4]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	80bb      	strh	r3, [r7, #4]
 800c2da:	e023      	b.n	800c324 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	895a      	ldrh	r2, [r3, #10]
 800c2e0:	88bb      	ldrh	r3, [r7, #4]
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c2e6:	8b3a      	ldrh	r2, [r7, #24]
 800c2e8:	88fb      	ldrh	r3, [r7, #6]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d901      	bls.n	800c2f2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c2ee:	88fb      	ldrh	r3, [r7, #6]
 800c2f0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c2f2:	8b7b      	ldrh	r3, [r7, #26]
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	18d0      	adds	r0, r2, r3
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	88bb      	ldrh	r3, [r7, #4]
 800c2fe:	4413      	add	r3, r2
 800c300:	8b3a      	ldrh	r2, [r7, #24]
 800c302:	4619      	mov	r1, r3
 800c304:	f00b facd 	bl	80178a2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c308:	8afa      	ldrh	r2, [r7, #22]
 800c30a:	8b3b      	ldrh	r3, [r7, #24]
 800c30c:	4413      	add	r3, r2
 800c30e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c310:	8b7a      	ldrh	r2, [r7, #26]
 800c312:	8b3b      	ldrh	r3, [r7, #24]
 800c314:	4413      	add	r3, r2
 800c316:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c318:	88fa      	ldrh	r2, [r7, #6]
 800c31a:	8b3b      	ldrh	r3, [r7, #24]
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c320:	2300      	movs	r3, #0
 800c322:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	61fb      	str	r3, [r7, #28]
 800c32a:	88fb      	ldrh	r3, [r7, #6]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <pbuf_copy_partial+0xca>
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1c4      	bne.n	800c2c0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c336:	8afb      	ldrh	r3, [r7, #22]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3720      	adds	r7, #32
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	08019e50 	.word	0x08019e50
 800c344:	0801a198 	.word	0x0801a198
 800c348:	08019eb0 	.word	0x08019eb0
 800c34c:	0801a1b8 	.word	0x0801a1b8

0800c350 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	603a      	str	r2, [r7, #0]
 800c35a:	71fb      	strb	r3, [r7, #7]
 800c35c:	460b      	mov	r3, r1
 800c35e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	8919      	ldrh	r1, [r3, #8]
 800c364:	88ba      	ldrh	r2, [r7, #4]
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff fa99 	bl	800b8a0 <pbuf_alloc>
 800c36e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <pbuf_clone+0x2a>
    return NULL;
 800c376:	2300      	movs	r3, #0
 800c378:	e011      	b.n	800c39e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c37a:	6839      	ldr	r1, [r7, #0]
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f7ff fea3 	bl	800c0c8 <pbuf_copy>
 800c382:	4603      	mov	r3, r0
 800c384:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c386:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d006      	beq.n	800c39c <pbuf_clone+0x4c>
 800c38e:	4b06      	ldr	r3, [pc, #24]	; (800c3a8 <pbuf_clone+0x58>)
 800c390:	f240 5224 	movw	r2, #1316	; 0x524
 800c394:	4905      	ldr	r1, [pc, #20]	; (800c3ac <pbuf_clone+0x5c>)
 800c396:	4806      	ldr	r0, [pc, #24]	; (800c3b0 <pbuf_clone+0x60>)
 800c398:	f00b fab0 	bl	80178fc <iprintf>
  return q;
 800c39c:	68fb      	ldr	r3, [r7, #12]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	08019e50 	.word	0x08019e50
 800c3ac:	0801a2c4 	.word	0x0801a2c4
 800c3b0:	08019eb0 	.word	0x08019eb0

0800c3b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c3b8:	f00b fb1c 	bl	80179f4 <rand>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	4b01      	ldr	r3, [pc, #4]	; (800c3d4 <tcp_init+0x20>)
 800c3ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c3d0:	bf00      	nop
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20000010 	.word	0x20000010

0800c3d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	7d1b      	ldrb	r3, [r3, #20]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d105      	bne.n	800c3f4 <tcp_free+0x1c>
 800c3e8:	4b06      	ldr	r3, [pc, #24]	; (800c404 <tcp_free+0x2c>)
 800c3ea:	22d4      	movs	r2, #212	; 0xd4
 800c3ec:	4906      	ldr	r1, [pc, #24]	; (800c408 <tcp_free+0x30>)
 800c3ee:	4807      	ldr	r0, [pc, #28]	; (800c40c <tcp_free+0x34>)
 800c3f0:	f00b fa84 	bl	80178fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	2001      	movs	r0, #1
 800c3f8:	f7fe fe86 	bl	800b108 <memp_free>
}
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	0801a350 	.word	0x0801a350
 800c408:	0801a380 	.word	0x0801a380
 800c40c:	0801a394 	.word	0x0801a394

0800c410 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	7d1b      	ldrb	r3, [r3, #20]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d105      	bne.n	800c42c <tcp_free_listen+0x1c>
 800c420:	4b06      	ldr	r3, [pc, #24]	; (800c43c <tcp_free_listen+0x2c>)
 800c422:	22df      	movs	r2, #223	; 0xdf
 800c424:	4906      	ldr	r1, [pc, #24]	; (800c440 <tcp_free_listen+0x30>)
 800c426:	4807      	ldr	r0, [pc, #28]	; (800c444 <tcp_free_listen+0x34>)
 800c428:	f00b fa68 	bl	80178fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c42c:	6879      	ldr	r1, [r7, #4]
 800c42e:	2002      	movs	r0, #2
 800c430:	f7fe fe6a 	bl	800b108 <memp_free>
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	0801a350 	.word	0x0801a350
 800c440:	0801a3bc 	.word	0x0801a3bc
 800c444:	0801a394 	.word	0x0801a394

0800c448 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c44c:	f001 f89a 	bl	800d584 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c450:	4b07      	ldr	r3, [pc, #28]	; (800c470 <tcp_tmr+0x28>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	3301      	adds	r3, #1
 800c456:	b2da      	uxtb	r2, r3
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <tcp_tmr+0x28>)
 800c45a:	701a      	strb	r2, [r3, #0]
 800c45c:	4b04      	ldr	r3, [pc, #16]	; (800c470 <tcp_tmr+0x28>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	f003 0301 	and.w	r3, r3, #1
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c468:	f000 fd4e 	bl	800cf08 <tcp_slowtmr>
  }
}
 800c46c:	bf00      	nop
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	2000864d 	.word	0x2000864d

0800c474 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d105      	bne.n	800c490 <tcp_remove_listener+0x1c>
 800c484:	4b0d      	ldr	r3, [pc, #52]	; (800c4bc <tcp_remove_listener+0x48>)
 800c486:	22ff      	movs	r2, #255	; 0xff
 800c488:	490d      	ldr	r1, [pc, #52]	; (800c4c0 <tcp_remove_listener+0x4c>)
 800c48a:	480e      	ldr	r0, [pc, #56]	; (800c4c4 <tcp_remove_listener+0x50>)
 800c48c:	f00b fa36 	bl	80178fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	e00a      	b.n	800c4ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d102      	bne.n	800c4a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1f1      	bne.n	800c496 <tcp_remove_listener+0x22>
    }
  }
}
 800c4b2:	bf00      	nop
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	0801a350 	.word	0x0801a350
 800c4c0:	0801a3d8 	.word	0x0801a3d8
 800c4c4:	0801a394 	.word	0x0801a394

0800c4c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <tcp_listen_closed+0x1c>
 800c4d6:	4b14      	ldr	r3, [pc, #80]	; (800c528 <tcp_listen_closed+0x60>)
 800c4d8:	f240 1211 	movw	r2, #273	; 0x111
 800c4dc:	4913      	ldr	r1, [pc, #76]	; (800c52c <tcp_listen_closed+0x64>)
 800c4de:	4814      	ldr	r0, [pc, #80]	; (800c530 <tcp_listen_closed+0x68>)
 800c4e0:	f00b fa0c 	bl	80178fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	7d1b      	ldrb	r3, [r3, #20]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d006      	beq.n	800c4fa <tcp_listen_closed+0x32>
 800c4ec:	4b0e      	ldr	r3, [pc, #56]	; (800c528 <tcp_listen_closed+0x60>)
 800c4ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c4f2:	4910      	ldr	r1, [pc, #64]	; (800c534 <tcp_listen_closed+0x6c>)
 800c4f4:	480e      	ldr	r0, [pc, #56]	; (800c530 <tcp_listen_closed+0x68>)
 800c4f6:	f00b fa01 	bl	80178fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e00b      	b.n	800c518 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c500:	4a0d      	ldr	r2, [pc, #52]	; (800c538 <tcp_listen_closed+0x70>)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff ffb1 	bl	800c474 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	3301      	adds	r3, #1
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b03      	cmp	r3, #3
 800c51c:	d9f0      	bls.n	800c500 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c51e:	bf00      	nop
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	0801a350 	.word	0x0801a350
 800c52c:	0801a400 	.word	0x0801a400
 800c530:	0801a394 	.word	0x0801a394
 800c534:	0801a40c 	.word	0x0801a40c
 800c538:	0801c708 	.word	0x0801c708

0800c53c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c53c:	b5b0      	push	{r4, r5, r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af04      	add	r7, sp, #16
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d106      	bne.n	800c55c <tcp_close_shutdown+0x20>
 800c54e:	4b61      	ldr	r3, [pc, #388]	; (800c6d4 <tcp_close_shutdown+0x198>)
 800c550:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c554:	4960      	ldr	r1, [pc, #384]	; (800c6d8 <tcp_close_shutdown+0x19c>)
 800c556:	4861      	ldr	r0, [pc, #388]	; (800c6dc <tcp_close_shutdown+0x1a0>)
 800c558:	f00b f9d0 	bl	80178fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c55c:	78fb      	ldrb	r3, [r7, #3]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d066      	beq.n	800c630 <tcp_close_shutdown+0xf4>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7d1b      	ldrb	r3, [r3, #20]
 800c566:	2b04      	cmp	r3, #4
 800c568:	d003      	beq.n	800c572 <tcp_close_shutdown+0x36>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7d1b      	ldrb	r3, [r3, #20]
 800c56e:	2b07      	cmp	r3, #7
 800c570:	d15e      	bne.n	800c630 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c576:	2b00      	cmp	r3, #0
 800c578:	d104      	bne.n	800c584 <tcp_close_shutdown+0x48>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c57e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c582:	d055      	beq.n	800c630 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	8b5b      	ldrh	r3, [r3, #26]
 800c588:	f003 0310 	and.w	r3, r3, #16
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d106      	bne.n	800c59e <tcp_close_shutdown+0x62>
 800c590:	4b50      	ldr	r3, [pc, #320]	; (800c6d4 <tcp_close_shutdown+0x198>)
 800c592:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c596:	4952      	ldr	r1, [pc, #328]	; (800c6e0 <tcp_close_shutdown+0x1a4>)
 800c598:	4850      	ldr	r0, [pc, #320]	; (800c6dc <tcp_close_shutdown+0x1a0>)
 800c59a:	f00b f9af 	bl	80178fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c5a6:	687d      	ldr	r5, [r7, #4]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	8ad2      	ldrh	r2, [r2, #22]
 800c5b0:	6879      	ldr	r1, [r7, #4]
 800c5b2:	8b09      	ldrh	r1, [r1, #24]
 800c5b4:	9102      	str	r1, [sp, #8]
 800c5b6:	9201      	str	r2, [sp, #4]
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	462b      	mov	r3, r5
 800c5bc:	4622      	mov	r2, r4
 800c5be:	4601      	mov	r1, r0
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f005 fdb9 	bl	8012138 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f001 fb8a 	bl	800dce0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c5cc:	4b45      	ldr	r3, [pc, #276]	; (800c6e4 <tcp_close_shutdown+0x1a8>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d105      	bne.n	800c5e2 <tcp_close_shutdown+0xa6>
 800c5d6:	4b43      	ldr	r3, [pc, #268]	; (800c6e4 <tcp_close_shutdown+0x1a8>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	4a41      	ldr	r2, [pc, #260]	; (800c6e4 <tcp_close_shutdown+0x1a8>)
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	e013      	b.n	800c60a <tcp_close_shutdown+0xce>
 800c5e2:	4b40      	ldr	r3, [pc, #256]	; (800c6e4 <tcp_close_shutdown+0x1a8>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	60fb      	str	r3, [r7, #12]
 800c5e8:	e00c      	b.n	800c604 <tcp_close_shutdown+0xc8>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d104      	bne.n	800c5fe <tcp_close_shutdown+0xc2>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	68da      	ldr	r2, [r3, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	60da      	str	r2, [r3, #12]
 800c5fc:	e005      	b.n	800c60a <tcp_close_shutdown+0xce>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	60fb      	str	r3, [r7, #12]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1ef      	bne.n	800c5ea <tcp_close_shutdown+0xae>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	60da      	str	r2, [r3, #12]
 800c610:	4b35      	ldr	r3, [pc, #212]	; (800c6e8 <tcp_close_shutdown+0x1ac>)
 800c612:	2201      	movs	r2, #1
 800c614:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c616:	4b35      	ldr	r3, [pc, #212]	; (800c6ec <tcp_close_shutdown+0x1b0>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d102      	bne.n	800c626 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c620:	f004 f81c 	bl	801065c <tcp_trigger_input_pcb_close>
 800c624:	e002      	b.n	800c62c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff fed6 	bl	800c3d8 <tcp_free>
      }
      return ERR_OK;
 800c62c:	2300      	movs	r3, #0
 800c62e:	e04d      	b.n	800c6cc <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7d1b      	ldrb	r3, [r3, #20]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d02d      	beq.n	800c694 <tcp_close_shutdown+0x158>
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d036      	beq.n	800c6aa <tcp_close_shutdown+0x16e>
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d13f      	bne.n	800c6c0 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	8adb      	ldrh	r3, [r3, #22]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d021      	beq.n	800c68c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c648:	4b29      	ldr	r3, [pc, #164]	; (800c6f0 <tcp_close_shutdown+0x1b4>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d105      	bne.n	800c65e <tcp_close_shutdown+0x122>
 800c652:	4b27      	ldr	r3, [pc, #156]	; (800c6f0 <tcp_close_shutdown+0x1b4>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	4a25      	ldr	r2, [pc, #148]	; (800c6f0 <tcp_close_shutdown+0x1b4>)
 800c65a:	6013      	str	r3, [r2, #0]
 800c65c:	e013      	b.n	800c686 <tcp_close_shutdown+0x14a>
 800c65e:	4b24      	ldr	r3, [pc, #144]	; (800c6f0 <tcp_close_shutdown+0x1b4>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	60bb      	str	r3, [r7, #8]
 800c664:	e00c      	b.n	800c680 <tcp_close_shutdown+0x144>
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d104      	bne.n	800c67a <tcp_close_shutdown+0x13e>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	68da      	ldr	r2, [r3, #12]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	60da      	str	r2, [r3, #12]
 800c678:	e005      	b.n	800c686 <tcp_close_shutdown+0x14a>
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	60bb      	str	r3, [r7, #8]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1ef      	bne.n	800c666 <tcp_close_shutdown+0x12a>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff fea3 	bl	800c3d8 <tcp_free>
      break;
 800c692:	e01a      	b.n	800c6ca <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff ff17 	bl	800c4c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	4815      	ldr	r0, [pc, #84]	; (800c6f4 <tcp_close_shutdown+0x1b8>)
 800c69e:	f001 fb6f 	bl	800dd80 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff feb4 	bl	800c410 <tcp_free_listen>
      break;
 800c6a8:	e00f      	b.n	800c6ca <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	480d      	ldr	r0, [pc, #52]	; (800c6e4 <tcp_close_shutdown+0x1a8>)
 800c6ae:	f001 fb67 	bl	800dd80 <tcp_pcb_remove>
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <tcp_close_shutdown+0x1ac>)
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff fe8d 	bl	800c3d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c6be:	e004      	b.n	800c6ca <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f819 	bl	800c6f8 <tcp_close_shutdown_fin>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	e000      	b.n	800c6cc <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d4:	0801a350 	.word	0x0801a350
 800c6d8:	0801a424 	.word	0x0801a424
 800c6dc:	0801a394 	.word	0x0801a394
 800c6e0:	0801a444 	.word	0x0801a444
 800c6e4:	2000f4dc 	.word	0x2000f4dc
 800c6e8:	2000f4d8 	.word	0x2000f4d8
 800c6ec:	2000f4f0 	.word	0x2000f4f0
 800c6f0:	2000f4e8 	.word	0x2000f4e8
 800c6f4:	2000f4e4 	.word	0x2000f4e4

0800c6f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <tcp_close_shutdown_fin+0x1c>
 800c706:	4b2c      	ldr	r3, [pc, #176]	; (800c7b8 <tcp_close_shutdown_fin+0xc0>)
 800c708:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c70c:	492b      	ldr	r1, [pc, #172]	; (800c7bc <tcp_close_shutdown_fin+0xc4>)
 800c70e:	482c      	ldr	r0, [pc, #176]	; (800c7c0 <tcp_close_shutdown_fin+0xc8>)
 800c710:	f00b f8f4 	bl	80178fc <iprintf>

  switch (pcb->state) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	7d1b      	ldrb	r3, [r3, #20]
 800c718:	2b04      	cmp	r3, #4
 800c71a:	d010      	beq.n	800c73e <tcp_close_shutdown_fin+0x46>
 800c71c:	2b07      	cmp	r3, #7
 800c71e:	d01b      	beq.n	800c758 <tcp_close_shutdown_fin+0x60>
 800c720:	2b03      	cmp	r3, #3
 800c722:	d126      	bne.n	800c772 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f004 fe05 	bl	8011334 <tcp_send_fin>
 800c72a:	4603      	mov	r3, r0
 800c72c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d11f      	bne.n	800c776 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2205      	movs	r2, #5
 800c73a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c73c:	e01b      	b.n	800c776 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f004 fdf8 	bl	8011334 <tcp_send_fin>
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d114      	bne.n	800c77a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2205      	movs	r2, #5
 800c754:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c756:	e010      	b.n	800c77a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f004 fdeb 	bl	8011334 <tcp_send_fin>
 800c75e:	4603      	mov	r3, r0
 800c760:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d109      	bne.n	800c77e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2209      	movs	r2, #9
 800c76e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c770:	e005      	b.n	800c77e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	e01c      	b.n	800c7b0 <tcp_close_shutdown_fin+0xb8>
      break;
 800c776:	bf00      	nop
 800c778:	e002      	b.n	800c780 <tcp_close_shutdown_fin+0x88>
      break;
 800c77a:	bf00      	nop
 800c77c:	e000      	b.n	800c780 <tcp_close_shutdown_fin+0x88>
      break;
 800c77e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d103      	bne.n	800c790 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f004 ff11 	bl	80115b0 <tcp_output>
 800c78e:	e00d      	b.n	800c7ac <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c798:	d108      	bne.n	800c7ac <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8b5b      	ldrh	r3, [r3, #26]
 800c79e:	f043 0308 	orr.w	r3, r3, #8
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e001      	b.n	800c7b0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c7ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	0801a350 	.word	0x0801a350
 800c7bc:	0801a400 	.word	0x0801a400
 800c7c0:	0801a394 	.word	0x0801a394

0800c7c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d109      	bne.n	800c7e6 <tcp_close+0x22>
 800c7d2:	4b0f      	ldr	r3, [pc, #60]	; (800c810 <tcp_close+0x4c>)
 800c7d4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c7d8:	490e      	ldr	r1, [pc, #56]	; (800c814 <tcp_close+0x50>)
 800c7da:	480f      	ldr	r0, [pc, #60]	; (800c818 <tcp_close+0x54>)
 800c7dc:	f00b f88e 	bl	80178fc <iprintf>
 800c7e0:	f06f 030f 	mvn.w	r3, #15
 800c7e4:	e00f      	b.n	800c806 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7d1b      	ldrb	r3, [r3, #20]
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d006      	beq.n	800c7fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	8b5b      	ldrh	r3, [r3, #26]
 800c7f2:	f043 0310 	orr.w	r3, r3, #16
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff fe9c 	bl	800c53c <tcp_close_shutdown>
 800c804:	4603      	mov	r3, r0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	0801a350 	.word	0x0801a350
 800c814:	0801a460 	.word	0x0801a460
 800c818:	0801a394 	.word	0x0801a394

0800c81c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <tcp_shutdown+0x26>
 800c82e:	4b25      	ldr	r3, [pc, #148]	; (800c8c4 <tcp_shutdown+0xa8>)
 800c830:	f240 2207 	movw	r2, #519	; 0x207
 800c834:	4924      	ldr	r1, [pc, #144]	; (800c8c8 <tcp_shutdown+0xac>)
 800c836:	4825      	ldr	r0, [pc, #148]	; (800c8cc <tcp_shutdown+0xb0>)
 800c838:	f00b f860 	bl	80178fc <iprintf>
 800c83c:	f06f 030f 	mvn.w	r3, #15
 800c840:	e03c      	b.n	800c8bc <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	7d1b      	ldrb	r3, [r3, #20]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d102      	bne.n	800c850 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c84a:	f06f 030a 	mvn.w	r3, #10
 800c84e:	e035      	b.n	800c8bc <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d01b      	beq.n	800c88e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	8b5b      	ldrh	r3, [r3, #26]
 800c85a:	f043 0310 	orr.w	r3, r3, #16
 800c85e:	b29a      	uxth	r2, r3
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c86a:	2101      	movs	r1, #1
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f7ff fe65 	bl	800c53c <tcp_close_shutdown>
 800c872:	4603      	mov	r3, r0
 800c874:	e022      	b.n	800c8bc <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d007      	beq.n	800c88e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff faec 	bl	800be60 <pbuf_free>
      pcb->refused_data = NULL;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d012      	beq.n	800c8ba <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	7d1b      	ldrb	r3, [r3, #20]
 800c898:	2b03      	cmp	r3, #3
 800c89a:	db0b      	blt.n	800c8b4 <tcp_shutdown+0x98>
 800c89c:	2b04      	cmp	r3, #4
 800c89e:	dd01      	ble.n	800c8a4 <tcp_shutdown+0x88>
 800c8a0:	2b07      	cmp	r3, #7
 800c8a2:	d107      	bne.n	800c8b4 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f7ff fe46 	bl	800c53c <tcp_close_shutdown>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	e003      	b.n	800c8bc <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c8b4:	f06f 030a 	mvn.w	r3, #10
 800c8b8:	e000      	b.n	800c8bc <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	0801a350 	.word	0x0801a350
 800c8c8:	0801a478 	.word	0x0801a478
 800c8cc:	0801a394 	.word	0x0801a394

0800c8d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b08e      	sub	sp, #56	; 0x38
 800c8d4:	af04      	add	r7, sp, #16
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d107      	bne.n	800c8f0 <tcp_abandon+0x20>
 800c8e0:	4b52      	ldr	r3, [pc, #328]	; (800ca2c <tcp_abandon+0x15c>)
 800c8e2:	f240 223d 	movw	r2, #573	; 0x23d
 800c8e6:	4952      	ldr	r1, [pc, #328]	; (800ca30 <tcp_abandon+0x160>)
 800c8e8:	4852      	ldr	r0, [pc, #328]	; (800ca34 <tcp_abandon+0x164>)
 800c8ea:	f00b f807 	bl	80178fc <iprintf>
 800c8ee:	e099      	b.n	800ca24 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7d1b      	ldrb	r3, [r3, #20]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d106      	bne.n	800c906 <tcp_abandon+0x36>
 800c8f8:	4b4c      	ldr	r3, [pc, #304]	; (800ca2c <tcp_abandon+0x15c>)
 800c8fa:	f240 2241 	movw	r2, #577	; 0x241
 800c8fe:	494e      	ldr	r1, [pc, #312]	; (800ca38 <tcp_abandon+0x168>)
 800c900:	484c      	ldr	r0, [pc, #304]	; (800ca34 <tcp_abandon+0x164>)
 800c902:	f00a fffb 	bl	80178fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7d1b      	ldrb	r3, [r3, #20]
 800c90a:	2b0a      	cmp	r3, #10
 800c90c:	d107      	bne.n	800c91e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	484a      	ldr	r0, [pc, #296]	; (800ca3c <tcp_abandon+0x16c>)
 800c912:	f001 fa35 	bl	800dd80 <tcp_pcb_remove>
    tcp_free(pcb);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff fd5e 	bl	800c3d8 <tcp_free>
 800c91c:	e082      	b.n	800ca24 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c92a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c930:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c938:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	7d1b      	ldrb	r3, [r3, #20]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d126      	bne.n	800c996 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	8adb      	ldrh	r3, [r3, #22]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d02e      	beq.n	800c9ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c950:	4b3b      	ldr	r3, [pc, #236]	; (800ca40 <tcp_abandon+0x170>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d105      	bne.n	800c966 <tcp_abandon+0x96>
 800c95a:	4b39      	ldr	r3, [pc, #228]	; (800ca40 <tcp_abandon+0x170>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	4a37      	ldr	r2, [pc, #220]	; (800ca40 <tcp_abandon+0x170>)
 800c962:	6013      	str	r3, [r2, #0]
 800c964:	e013      	b.n	800c98e <tcp_abandon+0xbe>
 800c966:	4b36      	ldr	r3, [pc, #216]	; (800ca40 <tcp_abandon+0x170>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	61fb      	str	r3, [r7, #28]
 800c96c:	e00c      	b.n	800c988 <tcp_abandon+0xb8>
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	429a      	cmp	r2, r3
 800c976:	d104      	bne.n	800c982 <tcp_abandon+0xb2>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	68da      	ldr	r2, [r3, #12]
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	60da      	str	r2, [r3, #12]
 800c980:	e005      	b.n	800c98e <tcp_abandon+0xbe>
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	61fb      	str	r3, [r7, #28]
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1ef      	bne.n	800c96e <tcp_abandon+0x9e>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	60da      	str	r2, [r3, #12]
 800c994:	e00b      	b.n	800c9ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	8adb      	ldrh	r3, [r3, #22]
 800c99e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c9a0:	6879      	ldr	r1, [r7, #4]
 800c9a2:	4828      	ldr	r0, [pc, #160]	; (800ca44 <tcp_abandon+0x174>)
 800c9a4:	f001 f9ec 	bl	800dd80 <tcp_pcb_remove>
 800c9a8:	4b27      	ldr	r3, [pc, #156]	; (800ca48 <tcp_abandon+0x178>)
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d004      	beq.n	800c9c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 fec2 	bl	800d744 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d004      	beq.n	800c9d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 feb9 	bl	800d744 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d004      	beq.n	800c9e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 feb0 	bl	800d744 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00e      	beq.n	800ca08 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c9ea:	6879      	ldr	r1, [r7, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	8b12      	ldrh	r2, [r2, #24]
 800c9f4:	9202      	str	r2, [sp, #8]
 800c9f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c9f8:	9201      	str	r2, [sp, #4]
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	69b9      	ldr	r1, [r7, #24]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f005 fb98 	bl	8012138 <tcp_rst>
    }
    last_state = pcb->state;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7d1b      	ldrb	r3, [r3, #20]
 800ca0c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fce2 	bl	800c3d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d004      	beq.n	800ca24 <tcp_abandon+0x154>
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	f06f 010c 	mvn.w	r1, #12
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	4798      	blx	r3
  }
}
 800ca24:	3728      	adds	r7, #40	; 0x28
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0801a350 	.word	0x0801a350
 800ca30:	0801a494 	.word	0x0801a494
 800ca34:	0801a394 	.word	0x0801a394
 800ca38:	0801a4b0 	.word	0x0801a4b0
 800ca3c:	2000f4ec 	.word	0x2000f4ec
 800ca40:	2000f4e8 	.word	0x2000f4e8
 800ca44:	2000f4dc 	.word	0x2000f4dc
 800ca48:	2000f4d8 	.word	0x2000f4d8

0800ca4c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ca54:	2101      	movs	r1, #1
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff ff3a 	bl	800c8d0 <tcp_abandon>
}
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ca72:	2304      	movs	r3, #4
 800ca74:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ca7c:	4b3e      	ldr	r3, [pc, #248]	; (800cb78 <tcp_bind+0x114>)
 800ca7e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d109      	bne.n	800ca9a <tcp_bind+0x36>
 800ca86:	4b3d      	ldr	r3, [pc, #244]	; (800cb7c <tcp_bind+0x118>)
 800ca88:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ca8c:	493c      	ldr	r1, [pc, #240]	; (800cb80 <tcp_bind+0x11c>)
 800ca8e:	483d      	ldr	r0, [pc, #244]	; (800cb84 <tcp_bind+0x120>)
 800ca90:	f00a ff34 	bl	80178fc <iprintf>
 800ca94:	f06f 030f 	mvn.w	r3, #15
 800ca98:	e06a      	b.n	800cb70 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	7d1b      	ldrb	r3, [r3, #20]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d009      	beq.n	800cab6 <tcp_bind+0x52>
 800caa2:	4b36      	ldr	r3, [pc, #216]	; (800cb7c <tcp_bind+0x118>)
 800caa4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800caa8:	4937      	ldr	r1, [pc, #220]	; (800cb88 <tcp_bind+0x124>)
 800caaa:	4836      	ldr	r0, [pc, #216]	; (800cb84 <tcp_bind+0x120>)
 800caac:	f00a ff26 	bl	80178fc <iprintf>
 800cab0:	f06f 0305 	mvn.w	r3, #5
 800cab4:	e05c      	b.n	800cb70 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cab6:	88fb      	ldrh	r3, [r7, #6]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d109      	bne.n	800cad0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800cabc:	f000 f9de 	bl	800ce7c <tcp_new_port>
 800cac0:	4603      	mov	r3, r0
 800cac2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cac4:	88fb      	ldrh	r3, [r7, #6]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d135      	bne.n	800cb36 <tcp_bind+0xd2>
      return ERR_BUF;
 800caca:	f06f 0301 	mvn.w	r3, #1
 800cace:	e04f      	b.n	800cb70 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cad0:	2300      	movs	r3, #0
 800cad2:	61fb      	str	r3, [r7, #28]
 800cad4:	e02b      	b.n	800cb2e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cad6:	4a2d      	ldr	r2, [pc, #180]	; (800cb8c <tcp_bind+0x128>)
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	61bb      	str	r3, [r7, #24]
 800cae2:	e01e      	b.n	800cb22 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	8adb      	ldrh	r3, [r3, #22]
 800cae8:	88fa      	ldrh	r2, [r7, #6]
 800caea:	429a      	cmp	r2, r3
 800caec:	d116      	bne.n	800cb1c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800caee:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d010      	beq.n	800cb16 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d00c      	beq.n	800cb16 <tcp_bind+0xb2>
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d009      	beq.n	800cb16 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d005      	beq.n	800cb16 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d102      	bne.n	800cb1c <tcp_bind+0xb8>
              return ERR_USE;
 800cb16:	f06f 0307 	mvn.w	r3, #7
 800cb1a:	e029      	b.n	800cb70 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1dd      	bne.n	800cae4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	61fb      	str	r3, [r7, #28]
 800cb2e:	69fa      	ldr	r2, [r7, #28]
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	dbcf      	blt.n	800cad6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00c      	beq.n	800cb56 <tcp_bind+0xf2>
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d008      	beq.n	800cb56 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <tcp_bind+0xec>
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	e000      	b.n	800cb52 <tcp_bind+0xee>
 800cb50:	2300      	movs	r3, #0
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	88fa      	ldrh	r2, [r7, #6]
 800cb5a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cb5c:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <tcp_bind+0x12c>)
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	60da      	str	r2, [r3, #12]
 800cb64:	4a0a      	ldr	r2, [pc, #40]	; (800cb90 <tcp_bind+0x12c>)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6013      	str	r3, [r2, #0]
 800cb6a:	f005 fca7 	bl	80124bc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3720      	adds	r7, #32
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	0801c740 	.word	0x0801c740
 800cb7c:	0801a350 	.word	0x0801a350
 800cb80:	0801a4e4 	.word	0x0801a4e4
 800cb84:	0801a394 	.word	0x0801a394
 800cb88:	0801a4fc 	.word	0x0801a4fc
 800cb8c:	0801c708 	.word	0x0801c708
 800cb90:	2000f4e8 	.word	0x2000f4e8

0800cb94 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <tcp_accept_null+0x22>
 800cba8:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <tcp_accept_null+0x34>)
 800cbaa:	f240 320f 	movw	r2, #783	; 0x30f
 800cbae:	4907      	ldr	r1, [pc, #28]	; (800cbcc <tcp_accept_null+0x38>)
 800cbb0:	4807      	ldr	r0, [pc, #28]	; (800cbd0 <tcp_accept_null+0x3c>)
 800cbb2:	f00a fea3 	bl	80178fc <iprintf>

  tcp_abort(pcb);
 800cbb6:	68b8      	ldr	r0, [r7, #8]
 800cbb8:	f7ff ff48 	bl	800ca4c <tcp_abort>

  return ERR_ABRT;
 800cbbc:	f06f 030c 	mvn.w	r3, #12
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	0801a350 	.word	0x0801a350
 800cbcc:	0801a524 	.word	0x0801a524
 800cbd0:	0801a394 	.word	0x0801a394

0800cbd4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	607a      	str	r2, [r7, #4]
 800cbe0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d109      	bne.n	800cc00 <tcp_listen_with_backlog_and_err+0x2c>
 800cbec:	4b47      	ldr	r3, [pc, #284]	; (800cd0c <tcp_listen_with_backlog_and_err+0x138>)
 800cbee:	f240 3259 	movw	r2, #857	; 0x359
 800cbf2:	4947      	ldr	r1, [pc, #284]	; (800cd10 <tcp_listen_with_backlog_and_err+0x13c>)
 800cbf4:	4847      	ldr	r0, [pc, #284]	; (800cd14 <tcp_listen_with_backlog_and_err+0x140>)
 800cbf6:	f00a fe81 	bl	80178fc <iprintf>
 800cbfa:	23f0      	movs	r3, #240	; 0xf0
 800cbfc:	76fb      	strb	r3, [r7, #27]
 800cbfe:	e079      	b.n	800ccf4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	7d1b      	ldrb	r3, [r3, #20]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d009      	beq.n	800cc1c <tcp_listen_with_backlog_and_err+0x48>
 800cc08:	4b40      	ldr	r3, [pc, #256]	; (800cd0c <tcp_listen_with_backlog_and_err+0x138>)
 800cc0a:	f240 325a 	movw	r2, #858	; 0x35a
 800cc0e:	4942      	ldr	r1, [pc, #264]	; (800cd18 <tcp_listen_with_backlog_and_err+0x144>)
 800cc10:	4840      	ldr	r0, [pc, #256]	; (800cd14 <tcp_listen_with_backlog_and_err+0x140>)
 800cc12:	f00a fe73 	bl	80178fc <iprintf>
 800cc16:	23f1      	movs	r3, #241	; 0xf1
 800cc18:	76fb      	strb	r3, [r7, #27]
 800cc1a:	e06b      	b.n	800ccf4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	7d1b      	ldrb	r3, [r3, #20]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d104      	bne.n	800cc2e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cc28:	23f7      	movs	r3, #247	; 0xf7
 800cc2a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cc2c:	e062      	b.n	800ccf4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cc2e:	2002      	movs	r0, #2
 800cc30:	f7fe fa18 	bl	800b064 <memp_malloc>
 800cc34:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d102      	bne.n	800cc42 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800cc3c:	23ff      	movs	r3, #255	; 0xff
 800cc3e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cc40:	e058      	b.n	800ccf4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	691a      	ldr	r2, [r3, #16]
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	8ada      	ldrh	r2, [r3, #22]
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	2201      	movs	r2, #1
 800cc56:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	7d5a      	ldrb	r2, [r3, #21]
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	7a5a      	ldrb	r2, [r3, #9]
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	7ada      	ldrb	r2, [r3, #11]
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	7a9a      	ldrb	r2, [r3, #10]
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	8adb      	ldrh	r3, [r3, #22]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d021      	beq.n	800ccd2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc8e:	4b23      	ldr	r3, [pc, #140]	; (800cd1c <tcp_listen_with_backlog_and_err+0x148>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d105      	bne.n	800cca4 <tcp_listen_with_backlog_and_err+0xd0>
 800cc98:	4b20      	ldr	r3, [pc, #128]	; (800cd1c <tcp_listen_with_backlog_and_err+0x148>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	4a1f      	ldr	r2, [pc, #124]	; (800cd1c <tcp_listen_with_backlog_and_err+0x148>)
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	e013      	b.n	800cccc <tcp_listen_with_backlog_and_err+0xf8>
 800cca4:	4b1d      	ldr	r3, [pc, #116]	; (800cd1c <tcp_listen_with_backlog_and_err+0x148>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	617b      	str	r3, [r7, #20]
 800ccaa:	e00c      	b.n	800ccc6 <tcp_listen_with_backlog_and_err+0xf2>
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d104      	bne.n	800ccc0 <tcp_listen_with_backlog_and_err+0xec>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	68da      	ldr	r2, [r3, #12]
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	60da      	str	r2, [r3, #12]
 800ccbe:	e005      	b.n	800cccc <tcp_listen_with_backlog_and_err+0xf8>
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	617b      	str	r3, [r7, #20]
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1ef      	bne.n	800ccac <tcp_listen_with_backlog_and_err+0xd8>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f7ff fb80 	bl	800c3d8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	4a11      	ldr	r2, [pc, #68]	; (800cd20 <tcp_listen_with_backlog_and_err+0x14c>)
 800ccdc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ccde:	4b11      	ldr	r3, [pc, #68]	; (800cd24 <tcp_listen_with_backlog_and_err+0x150>)
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	60da      	str	r2, [r3, #12]
 800cce6:	4a0f      	ldr	r2, [pc, #60]	; (800cd24 <tcp_listen_with_backlog_and_err+0x150>)
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	6013      	str	r3, [r2, #0]
 800ccec:	f005 fbe6 	bl	80124bc <tcp_timer_needed>
  res = ERR_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	7efa      	ldrb	r2, [r7, #27]
 800ccfe:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800cd00:	69fb      	ldr	r3, [r7, #28]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3720      	adds	r7, #32
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	0801a350 	.word	0x0801a350
 800cd10:	0801a544 	.word	0x0801a544
 800cd14:	0801a394 	.word	0x0801a394
 800cd18:	0801a574 	.word	0x0801a574
 800cd1c:	2000f4e8 	.word	0x2000f4e8
 800cd20:	0800cb95 	.word	0x0800cb95
 800cd24:	2000f4e4 	.word	0x2000f4e4

0800cd28 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d106      	bne.n	800cd44 <tcp_update_rcv_ann_wnd+0x1c>
 800cd36:	4b25      	ldr	r3, [pc, #148]	; (800cdcc <tcp_update_rcv_ann_wnd+0xa4>)
 800cd38:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cd3c:	4924      	ldr	r1, [pc, #144]	; (800cdd0 <tcp_update_rcv_ann_wnd+0xa8>)
 800cd3e:	4825      	ldr	r0, [pc, #148]	; (800cdd4 <tcp_update_rcv_ann_wnd+0xac>)
 800cd40:	f00a fddc 	bl	80178fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cd4c:	4413      	add	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd58:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd5c:	bf28      	it	cs
 800cd5e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd62:	b292      	uxth	r2, r2
 800cd64:	4413      	add	r3, r2
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	db08      	blt.n	800cd80 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	e020      	b.n	800cdc2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	dd03      	ble.n	800cd96 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd94:	e014      	b.n	800cdc0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cda8:	d306      	bcc.n	800cdb8 <tcp_update_rcv_ann_wnd+0x90>
 800cdaa:	4b08      	ldr	r3, [pc, #32]	; (800cdcc <tcp_update_rcv_ann_wnd+0xa4>)
 800cdac:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cdb0:	4909      	ldr	r1, [pc, #36]	; (800cdd8 <tcp_update_rcv_ann_wnd+0xb0>)
 800cdb2:	4808      	ldr	r0, [pc, #32]	; (800cdd4 <tcp_update_rcv_ann_wnd+0xac>)
 800cdb4:	f00a fda2 	bl	80178fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cdc0:	2300      	movs	r3, #0
  }
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	0801a350 	.word	0x0801a350
 800cdd0:	0801a5ac 	.word	0x0801a5ac
 800cdd4:	0801a394 	.word	0x0801a394
 800cdd8:	0801a5d0 	.word	0x0801a5d0

0800cddc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	460b      	mov	r3, r1
 800cde6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d107      	bne.n	800cdfe <tcp_recved+0x22>
 800cdee:	4b1f      	ldr	r3, [pc, #124]	; (800ce6c <tcp_recved+0x90>)
 800cdf0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cdf4:	491e      	ldr	r1, [pc, #120]	; (800ce70 <tcp_recved+0x94>)
 800cdf6:	481f      	ldr	r0, [pc, #124]	; (800ce74 <tcp_recved+0x98>)
 800cdf8:	f00a fd80 	bl	80178fc <iprintf>
 800cdfc:	e032      	b.n	800ce64 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	7d1b      	ldrb	r3, [r3, #20]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d106      	bne.n	800ce14 <tcp_recved+0x38>
 800ce06:	4b19      	ldr	r3, [pc, #100]	; (800ce6c <tcp_recved+0x90>)
 800ce08:	f240 32d3 	movw	r2, #979	; 0x3d3
 800ce0c:	491a      	ldr	r1, [pc, #104]	; (800ce78 <tcp_recved+0x9c>)
 800ce0e:	4819      	ldr	r0, [pc, #100]	; (800ce74 <tcp_recved+0x98>)
 800ce10:	f00a fd74 	bl	80178fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce18:	887b      	ldrh	r3, [r7, #2]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ce1e:	89fb      	ldrh	r3, [r7, #14]
 800ce20:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce24:	d804      	bhi.n	800ce30 <tcp_recved+0x54>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce2a:	89fa      	ldrh	r2, [r7, #14]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d204      	bcs.n	800ce3a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce36:	851a      	strh	r2, [r3, #40]	; 0x28
 800ce38:	e002      	b.n	800ce40 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	89fa      	ldrh	r2, [r7, #14]
 800ce3e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff ff71 	bl	800cd28 <tcp_update_rcv_ann_wnd>
 800ce46:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce4e:	d309      	bcc.n	800ce64 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	8b5b      	ldrh	r3, [r3, #26]
 800ce54:	f043 0302 	orr.w	r3, r3, #2
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f004 fba6 	bl	80115b0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	0801a350 	.word	0x0801a350
 800ce70:	0801a5ec 	.word	0x0801a5ec
 800ce74:	0801a394 	.word	0x0801a394
 800ce78:	0801a604 	.word	0x0801a604

0800ce7c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ce86:	4b1e      	ldr	r3, [pc, #120]	; (800cf00 <tcp_new_port+0x84>)
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	4b1c      	ldr	r3, [pc, #112]	; (800cf00 <tcp_new_port+0x84>)
 800ce90:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ce92:	4b1b      	ldr	r3, [pc, #108]	; (800cf00 <tcp_new_port+0x84>)
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d103      	bne.n	800cea6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ce9e:	4b18      	ldr	r3, [pc, #96]	; (800cf00 <tcp_new_port+0x84>)
 800cea0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cea4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cea6:	2300      	movs	r3, #0
 800cea8:	71fb      	strb	r3, [r7, #7]
 800ceaa:	e01e      	b.n	800ceea <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ceac:	79fb      	ldrb	r3, [r7, #7]
 800ceae:	4a15      	ldr	r2, [pc, #84]	; (800cf04 <tcp_new_port+0x88>)
 800ceb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	603b      	str	r3, [r7, #0]
 800ceb8:	e011      	b.n	800cede <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	8ada      	ldrh	r2, [r3, #22]
 800cebe:	4b10      	ldr	r3, [pc, #64]	; (800cf00 <tcp_new_port+0x84>)
 800cec0:	881b      	ldrh	r3, [r3, #0]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d108      	bne.n	800ced8 <tcp_new_port+0x5c>
        n++;
 800cec6:	88bb      	ldrh	r3, [r7, #4]
 800cec8:	3301      	adds	r3, #1
 800ceca:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cecc:	88bb      	ldrh	r3, [r7, #4]
 800cece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ced2:	d3d8      	bcc.n	800ce86 <tcp_new_port+0xa>
          return 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	e00d      	b.n	800cef4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	603b      	str	r3, [r7, #0]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d1ea      	bne.n	800ceba <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cee4:	79fb      	ldrb	r3, [r7, #7]
 800cee6:	3301      	adds	r3, #1
 800cee8:	71fb      	strb	r3, [r7, #7]
 800ceea:	79fb      	ldrb	r3, [r7, #7]
 800ceec:	2b03      	cmp	r3, #3
 800ceee:	d9dd      	bls.n	800ceac <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cef0:	4b03      	ldr	r3, [pc, #12]	; (800cf00 <tcp_new_port+0x84>)
 800cef2:	881b      	ldrh	r3, [r3, #0]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	20000010 	.word	0x20000010
 800cf04:	0801c708 	.word	0x0801c708

0800cf08 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cf08:	b5b0      	push	{r4, r5, r7, lr}
 800cf0a:	b090      	sub	sp, #64	; 0x40
 800cf0c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cf14:	4b94      	ldr	r3, [pc, #592]	; (800d168 <tcp_slowtmr+0x260>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	4a93      	ldr	r2, [pc, #588]	; (800d168 <tcp_slowtmr+0x260>)
 800cf1c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cf1e:	4b93      	ldr	r3, [pc, #588]	; (800d16c <tcp_slowtmr+0x264>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	3301      	adds	r3, #1
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	4b91      	ldr	r3, [pc, #580]	; (800d16c <tcp_slowtmr+0x264>)
 800cf28:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cf2e:	4b90      	ldr	r3, [pc, #576]	; (800d170 <tcp_slowtmr+0x268>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cf34:	e29f      	b.n	800d476 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf38:	7d1b      	ldrb	r3, [r3, #20]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d106      	bne.n	800cf4c <tcp_slowtmr+0x44>
 800cf3e:	4b8d      	ldr	r3, [pc, #564]	; (800d174 <tcp_slowtmr+0x26c>)
 800cf40:	f240 42be 	movw	r2, #1214	; 0x4be
 800cf44:	498c      	ldr	r1, [pc, #560]	; (800d178 <tcp_slowtmr+0x270>)
 800cf46:	488d      	ldr	r0, [pc, #564]	; (800d17c <tcp_slowtmr+0x274>)
 800cf48:	f00a fcd8 	bl	80178fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4e:	7d1b      	ldrb	r3, [r3, #20]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d106      	bne.n	800cf62 <tcp_slowtmr+0x5a>
 800cf54:	4b87      	ldr	r3, [pc, #540]	; (800d174 <tcp_slowtmr+0x26c>)
 800cf56:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cf5a:	4989      	ldr	r1, [pc, #548]	; (800d180 <tcp_slowtmr+0x278>)
 800cf5c:	4887      	ldr	r0, [pc, #540]	; (800d17c <tcp_slowtmr+0x274>)
 800cf5e:	f00a fccd 	bl	80178fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf64:	7d1b      	ldrb	r3, [r3, #20]
 800cf66:	2b0a      	cmp	r3, #10
 800cf68:	d106      	bne.n	800cf78 <tcp_slowtmr+0x70>
 800cf6a:	4b82      	ldr	r3, [pc, #520]	; (800d174 <tcp_slowtmr+0x26c>)
 800cf6c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cf70:	4984      	ldr	r1, [pc, #528]	; (800d184 <tcp_slowtmr+0x27c>)
 800cf72:	4882      	ldr	r0, [pc, #520]	; (800d17c <tcp_slowtmr+0x274>)
 800cf74:	f00a fcc2 	bl	80178fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7a:	7f9a      	ldrb	r2, [r3, #30]
 800cf7c:	4b7b      	ldr	r3, [pc, #492]	; (800d16c <tcp_slowtmr+0x264>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d105      	bne.n	800cf90 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cf8e:	e272      	b.n	800d476 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cf90:	4b76      	ldr	r3, [pc, #472]	; (800d16c <tcp_slowtmr+0x264>)
 800cf92:	781a      	ldrb	r2, [r3, #0]
 800cf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf96:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	7d1b      	ldrb	r3, [r3, #20]
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d10a      	bne.n	800cfc2 <tcp_slowtmr+0xba>
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfb2:	2b05      	cmp	r3, #5
 800cfb4:	d905      	bls.n	800cfc2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cfb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfba:	3301      	adds	r3, #1
 800cfbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfc0:	e11e      	b.n	800d200 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfc8:	2b0b      	cmp	r3, #11
 800cfca:	d905      	bls.n	800cfd8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cfcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfd6:	e113      	b.n	800d200 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d075      	beq.n	800d0ce <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d006      	beq.n	800cff8 <tcp_slowtmr+0xf0>
 800cfea:	4b62      	ldr	r3, [pc, #392]	; (800d174 <tcp_slowtmr+0x26c>)
 800cfec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cff0:	4965      	ldr	r1, [pc, #404]	; (800d188 <tcp_slowtmr+0x280>)
 800cff2:	4862      	ldr	r0, [pc, #392]	; (800d17c <tcp_slowtmr+0x274>)
 800cff4:	f00a fc82 	bl	80178fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d106      	bne.n	800d00e <tcp_slowtmr+0x106>
 800d000:	4b5c      	ldr	r3, [pc, #368]	; (800d174 <tcp_slowtmr+0x26c>)
 800d002:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d006:	4961      	ldr	r1, [pc, #388]	; (800d18c <tcp_slowtmr+0x284>)
 800d008:	485c      	ldr	r0, [pc, #368]	; (800d17c <tcp_slowtmr+0x274>)
 800d00a:	f00a fc77 	bl	80178fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d010:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d014:	2b0b      	cmp	r3, #11
 800d016:	d905      	bls.n	800d024 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d01c:	3301      	adds	r3, #1
 800d01e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d022:	e0ed      	b.n	800d200 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d026:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d02a:	3b01      	subs	r3, #1
 800d02c:	4a58      	ldr	r2, [pc, #352]	; (800d190 <tcp_slowtmr+0x288>)
 800d02e:	5cd3      	ldrb	r3, [r2, r3]
 800d030:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d038:	7c7a      	ldrb	r2, [r7, #17]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d907      	bls.n	800d04e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d044:	3301      	adds	r3, #1
 800d046:	b2da      	uxtb	r2, r3
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d050:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d054:	7c7a      	ldrb	r2, [r7, #17]
 800d056:	429a      	cmp	r2, r3
 800d058:	f200 80d2 	bhi.w	800d200 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d05c:	2301      	movs	r3, #1
 800d05e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d066:	2b00      	cmp	r3, #0
 800d068:	d108      	bne.n	800d07c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d06a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d06c:	f005 f958 	bl	8012320 <tcp_zero_window_probe>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d014      	beq.n	800d0a0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d076:	2300      	movs	r3, #0
 800d078:	623b      	str	r3, [r7, #32]
 800d07a:	e011      	b.n	800d0a0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d082:	4619      	mov	r1, r3
 800d084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d086:	f004 f80d 	bl	80110a4 <tcp_split_unsent_seg>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d107      	bne.n	800d0a0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d092:	f004 fa8d 	bl	80115b0 <tcp_output>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 80ac 	beq.w	800d200 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d0b6:	2b06      	cmp	r3, #6
 800d0b8:	f200 80a2 	bhi.w	800d200 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d0cc:	e098      	b.n	800d200 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	db0f      	blt.n	800d0f8 <tcp_slowtmr+0x1f0>
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d008      	beq.n	800d0f8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	b21a      	sxth	r2, r3
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d100:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d104:	429a      	cmp	r2, r3
 800d106:	db7b      	blt.n	800d200 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d10a:	f004 fd49 	bl	8011ba0 <tcp_rexmit_rto_prepare>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d007      	beq.n	800d124 <tcp_slowtmr+0x21c>
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d171      	bne.n	800d200 <tcp_slowtmr+0x2f8>
 800d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d120:	2b00      	cmp	r3, #0
 800d122:	d06d      	beq.n	800d200 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d126:	7d1b      	ldrb	r3, [r3, #20]
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d03a      	beq.n	800d1a2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d132:	2b0c      	cmp	r3, #12
 800d134:	bf28      	it	cs
 800d136:	230c      	movcs	r3, #12
 800d138:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d140:	10db      	asrs	r3, r3, #3
 800d142:	b21b      	sxth	r3, r3
 800d144:	461a      	mov	r2, r3
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d14c:	4413      	add	r3, r2
 800d14e:	7efa      	ldrb	r2, [r7, #27]
 800d150:	4910      	ldr	r1, [pc, #64]	; (800d194 <tcp_slowtmr+0x28c>)
 800d152:	5c8a      	ldrb	r2, [r1, r2]
 800d154:	4093      	lsls	r3, r2
 800d156:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d15e:	4293      	cmp	r3, r2
 800d160:	dc1a      	bgt.n	800d198 <tcp_slowtmr+0x290>
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	b21a      	sxth	r2, r3
 800d166:	e019      	b.n	800d19c <tcp_slowtmr+0x294>
 800d168:	2000f4e0 	.word	0x2000f4e0
 800d16c:	2000864e 	.word	0x2000864e
 800d170:	2000f4dc 	.word	0x2000f4dc
 800d174:	0801a350 	.word	0x0801a350
 800d178:	0801a694 	.word	0x0801a694
 800d17c:	0801a394 	.word	0x0801a394
 800d180:	0801a6c0 	.word	0x0801a6c0
 800d184:	0801a6ec 	.word	0x0801a6ec
 800d188:	0801a71c 	.word	0x0801a71c
 800d18c:	0801a750 	.word	0x0801a750
 800d190:	0801c700 	.word	0x0801c700
 800d194:	0801c6f0 	.word	0x0801c6f0
 800d198:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	bf28      	it	cs
 800d1b8:	4613      	movcs	r3, r2
 800d1ba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d1bc:	8a7b      	ldrh	r3, [r7, #18]
 800d1be:	085b      	lsrs	r3, r3, #1
 800d1c0:	b29a      	uxth	r2, r3
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d206      	bcs.n	800d1e8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1de:	005b      	lsls	r3, r3, #1
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d1fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1fc:	f004 fd40 	bl	8011c80 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d202:	7d1b      	ldrb	r3, [r3, #20]
 800d204:	2b06      	cmp	r3, #6
 800d206:	d111      	bne.n	800d22c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20a:	8b5b      	ldrh	r3, [r3, #26]
 800d20c:	f003 0310 	and.w	r3, r3, #16
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00b      	beq.n	800d22c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d214:	4b9d      	ldr	r3, [pc, #628]	; (800d48c <tcp_slowtmr+0x584>)
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	6a1b      	ldr	r3, [r3, #32]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	2b28      	cmp	r3, #40	; 0x28
 800d220:	d904      	bls.n	800d22c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d226:	3301      	adds	r3, #1
 800d228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22e:	7a5b      	ldrb	r3, [r3, #9]
 800d230:	f003 0308 	and.w	r3, r3, #8
 800d234:	2b00      	cmp	r3, #0
 800d236:	d04c      	beq.n	800d2d2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d23c:	2b04      	cmp	r3, #4
 800d23e:	d003      	beq.n	800d248 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d242:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d244:	2b07      	cmp	r3, #7
 800d246:	d144      	bne.n	800d2d2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d248:	4b90      	ldr	r3, [pc, #576]	; (800d48c <tcp_slowtmr+0x584>)
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24e:	6a1b      	ldr	r3, [r3, #32]
 800d250:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d258:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d25c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d260:	498b      	ldr	r1, [pc, #556]	; (800d490 <tcp_slowtmr+0x588>)
 800d262:	fba1 1303 	umull	r1, r3, r1, r3
 800d266:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d268:	429a      	cmp	r2, r3
 800d26a:	d90a      	bls.n	800d282 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d26c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d270:	3301      	adds	r3, #1
 800d272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d27a:	3301      	adds	r3, #1
 800d27c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d280:	e027      	b.n	800d2d2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d282:	4b82      	ldr	r3, [pc, #520]	; (800d48c <tcp_slowtmr+0x584>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d288:	6a1b      	ldr	r3, [r3, #32]
 800d28a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d298:	4618      	mov	r0, r3
 800d29a:	4b7e      	ldr	r3, [pc, #504]	; (800d494 <tcp_slowtmr+0x58c>)
 800d29c:	fb03 f300 	mul.w	r3, r3, r0
 800d2a0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d2a2:	497b      	ldr	r1, [pc, #492]	; (800d490 <tcp_slowtmr+0x588>)
 800d2a4:	fba1 1303 	umull	r1, r3, r1, r3
 800d2a8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d911      	bls.n	800d2d2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d2ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2b0:	f004 fff6 	bl	80122a0 <tcp_keepalive>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d2ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d107      	bne.n	800d2d2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d011      	beq.n	800d2fe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d2da:	4b6c      	ldr	r3, [pc, #432]	; (800d48c <tcp_slowtmr+0x584>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	1ad2      	subs	r2, r2, r3
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	005b      	lsls	r3, r3, #1
 800d2f0:	440b      	add	r3, r1
 800d2f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d302      	bcc.n	800d2fe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d2f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2fa:	f000 fea5 	bl	800e048 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d300:	7d1b      	ldrb	r3, [r3, #20]
 800d302:	2b03      	cmp	r3, #3
 800d304:	d10b      	bne.n	800d31e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d306:	4b61      	ldr	r3, [pc, #388]	; (800d48c <tcp_slowtmr+0x584>)
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2b28      	cmp	r3, #40	; 0x28
 800d312:	d904      	bls.n	800d31e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d318:	3301      	adds	r3, #1
 800d31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	7d1b      	ldrb	r3, [r3, #20]
 800d322:	2b09      	cmp	r3, #9
 800d324:	d10b      	bne.n	800d33e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d326:	4b59      	ldr	r3, [pc, #356]	; (800d48c <tcp_slowtmr+0x584>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	6a1b      	ldr	r3, [r3, #32]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	2bf0      	cmp	r3, #240	; 0xf0
 800d332:	d904      	bls.n	800d33e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d338:	3301      	adds	r3, #1
 800d33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d33e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d342:	2b00      	cmp	r3, #0
 800d344:	d060      	beq.n	800d408 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d350:	f000 fcc6 	bl	800dce0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d356:	2b00      	cmp	r3, #0
 800d358:	d010      	beq.n	800d37c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d35a:	4b4f      	ldr	r3, [pc, #316]	; (800d498 <tcp_slowtmr+0x590>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d360:	429a      	cmp	r2, r3
 800d362:	d106      	bne.n	800d372 <tcp_slowtmr+0x46a>
 800d364:	4b4d      	ldr	r3, [pc, #308]	; (800d49c <tcp_slowtmr+0x594>)
 800d366:	f240 526d 	movw	r2, #1389	; 0x56d
 800d36a:	494d      	ldr	r1, [pc, #308]	; (800d4a0 <tcp_slowtmr+0x598>)
 800d36c:	484d      	ldr	r0, [pc, #308]	; (800d4a4 <tcp_slowtmr+0x59c>)
 800d36e:	f00a fac5 	bl	80178fc <iprintf>
        prev->next = pcb->next;
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	68da      	ldr	r2, [r3, #12]
 800d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d378:	60da      	str	r2, [r3, #12]
 800d37a:	e00f      	b.n	800d39c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d37c:	4b46      	ldr	r3, [pc, #280]	; (800d498 <tcp_slowtmr+0x590>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d382:	429a      	cmp	r2, r3
 800d384:	d006      	beq.n	800d394 <tcp_slowtmr+0x48c>
 800d386:	4b45      	ldr	r3, [pc, #276]	; (800d49c <tcp_slowtmr+0x594>)
 800d388:	f240 5271 	movw	r2, #1393	; 0x571
 800d38c:	4946      	ldr	r1, [pc, #280]	; (800d4a8 <tcp_slowtmr+0x5a0>)
 800d38e:	4845      	ldr	r0, [pc, #276]	; (800d4a4 <tcp_slowtmr+0x59c>)
 800d390:	f00a fab4 	bl	80178fc <iprintf>
        tcp_active_pcbs = pcb->next;
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	4a3f      	ldr	r2, [pc, #252]	; (800d498 <tcp_slowtmr+0x590>)
 800d39a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d39c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d013      	beq.n	800d3cc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d3ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3b4:	8ad2      	ldrh	r2, [r2, #22]
 800d3b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3b8:	8b09      	ldrh	r1, [r1, #24]
 800d3ba:	9102      	str	r1, [sp, #8]
 800d3bc:	9201      	str	r2, [sp, #4]
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	462b      	mov	r3, r5
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	4601      	mov	r1, r0
 800d3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c8:	f004 feb6 	bl	8012138 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	7d1b      	ldrb	r3, [r3, #20]
 800d3d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d3e2:	6838      	ldr	r0, [r7, #0]
 800d3e4:	f7fe fff8 	bl	800c3d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d3e8:	4b30      	ldr	r3, [pc, #192]	; (800d4ac <tcp_slowtmr+0x5a4>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <tcp_slowtmr+0x4f6>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f06f 010c 	mvn.w	r1, #12
 800d3fa:	68b8      	ldr	r0, [r7, #8]
 800d3fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d3fe:	4b2b      	ldr	r3, [pc, #172]	; (800d4ac <tcp_slowtmr+0x5a4>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d037      	beq.n	800d476 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d406:	e590      	b.n	800cf2a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	7f1b      	ldrb	r3, [r3, #28]
 800d416:	3301      	adds	r3, #1
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	7f1a      	ldrb	r2, [r3, #28]
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	7f5b      	ldrb	r3, [r3, #29]
 800d426:	429a      	cmp	r2, r3
 800d428:	d325      	bcc.n	800d476 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	2200      	movs	r2, #0
 800d42e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d430:	4b1e      	ldr	r3, [pc, #120]	; (800d4ac <tcp_slowtmr+0x5a4>)
 800d432:	2200      	movs	r2, #0
 800d434:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <tcp_slowtmr+0x550>
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d448:	6912      	ldr	r2, [r2, #16]
 800d44a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d44c:	4610      	mov	r0, r2
 800d44e:	4798      	blx	r3
 800d450:	4603      	mov	r3, r0
 800d452:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d456:	e002      	b.n	800d45e <tcp_slowtmr+0x556>
 800d458:	2300      	movs	r3, #0
 800d45a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d45e:	4b13      	ldr	r3, [pc, #76]	; (800d4ac <tcp_slowtmr+0x5a4>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d000      	beq.n	800d468 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d466:	e560      	b.n	800cf2a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d468:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d102      	bne.n	800d476 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d472:	f004 f89d 	bl	80115b0 <tcp_output>
  while (pcb != NULL) {
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f47f ad5c 	bne.w	800cf36 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d47e:	2300      	movs	r3, #0
 800d480:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d482:	4b0b      	ldr	r3, [pc, #44]	; (800d4b0 <tcp_slowtmr+0x5a8>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d488:	e067      	b.n	800d55a <tcp_slowtmr+0x652>
 800d48a:	bf00      	nop
 800d48c:	2000f4e0 	.word	0x2000f4e0
 800d490:	10624dd3 	.word	0x10624dd3
 800d494:	000124f8 	.word	0x000124f8
 800d498:	2000f4dc 	.word	0x2000f4dc
 800d49c:	0801a350 	.word	0x0801a350
 800d4a0:	0801a788 	.word	0x0801a788
 800d4a4:	0801a394 	.word	0x0801a394
 800d4a8:	0801a7b4 	.word	0x0801a7b4
 800d4ac:	2000f4d8 	.word	0x2000f4d8
 800d4b0:	2000f4ec 	.word	0x2000f4ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	7d1b      	ldrb	r3, [r3, #20]
 800d4b8:	2b0a      	cmp	r3, #10
 800d4ba:	d006      	beq.n	800d4ca <tcp_slowtmr+0x5c2>
 800d4bc:	4b2a      	ldr	r3, [pc, #168]	; (800d568 <tcp_slowtmr+0x660>)
 800d4be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d4c2:	492a      	ldr	r1, [pc, #168]	; (800d56c <tcp_slowtmr+0x664>)
 800d4c4:	482a      	ldr	r0, [pc, #168]	; (800d570 <tcp_slowtmr+0x668>)
 800d4c6:	f00a fa19 	bl	80178fc <iprintf>
    pcb_remove = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d4d0:	4b28      	ldr	r3, [pc, #160]	; (800d574 <tcp_slowtmr+0x66c>)
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	6a1b      	ldr	r3, [r3, #32]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	2bf0      	cmp	r3, #240	; 0xf0
 800d4dc:	d904      	bls.n	800d4e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d4de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d02f      	beq.n	800d550 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d4f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4f2:	f000 fbf5 	bl	800dce0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d010      	beq.n	800d51e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d4fc:	4b1e      	ldr	r3, [pc, #120]	; (800d578 <tcp_slowtmr+0x670>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d502:	429a      	cmp	r2, r3
 800d504:	d106      	bne.n	800d514 <tcp_slowtmr+0x60c>
 800d506:	4b18      	ldr	r3, [pc, #96]	; (800d568 <tcp_slowtmr+0x660>)
 800d508:	f240 52af 	movw	r2, #1455	; 0x5af
 800d50c:	491b      	ldr	r1, [pc, #108]	; (800d57c <tcp_slowtmr+0x674>)
 800d50e:	4818      	ldr	r0, [pc, #96]	; (800d570 <tcp_slowtmr+0x668>)
 800d510:	f00a f9f4 	bl	80178fc <iprintf>
        prev->next = pcb->next;
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	60da      	str	r2, [r3, #12]
 800d51c:	e00f      	b.n	800d53e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d51e:	4b16      	ldr	r3, [pc, #88]	; (800d578 <tcp_slowtmr+0x670>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d524:	429a      	cmp	r2, r3
 800d526:	d006      	beq.n	800d536 <tcp_slowtmr+0x62e>
 800d528:	4b0f      	ldr	r3, [pc, #60]	; (800d568 <tcp_slowtmr+0x660>)
 800d52a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d52e:	4914      	ldr	r1, [pc, #80]	; (800d580 <tcp_slowtmr+0x678>)
 800d530:	480f      	ldr	r0, [pc, #60]	; (800d570 <tcp_slowtmr+0x668>)
 800d532:	f00a f9e3 	bl	80178fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	4a0f      	ldr	r2, [pc, #60]	; (800d578 <tcp_slowtmr+0x670>)
 800d53c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d548:	69f8      	ldr	r0, [r7, #28]
 800d54a:	f7fe ff45 	bl	800c3d8 <tcp_free>
 800d54e:	e004      	b.n	800d55a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d552:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1a9      	bne.n	800d4b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d560:	bf00      	nop
 800d562:	3730      	adds	r7, #48	; 0x30
 800d564:	46bd      	mov	sp, r7
 800d566:	bdb0      	pop	{r4, r5, r7, pc}
 800d568:	0801a350 	.word	0x0801a350
 800d56c:	0801a7e0 	.word	0x0801a7e0
 800d570:	0801a394 	.word	0x0801a394
 800d574:	2000f4e0 	.word	0x2000f4e0
 800d578:	2000f4ec 	.word	0x2000f4ec
 800d57c:	0801a810 	.word	0x0801a810
 800d580:	0801a838 	.word	0x0801a838

0800d584 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d58a:	4b2d      	ldr	r3, [pc, #180]	; (800d640 <tcp_fasttmr+0xbc>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	3301      	adds	r3, #1
 800d590:	b2da      	uxtb	r2, r3
 800d592:	4b2b      	ldr	r3, [pc, #172]	; (800d640 <tcp_fasttmr+0xbc>)
 800d594:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d596:	4b2b      	ldr	r3, [pc, #172]	; (800d644 <tcp_fasttmr+0xc0>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d59c:	e048      	b.n	800d630 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	7f9a      	ldrb	r2, [r3, #30]
 800d5a2:	4b27      	ldr	r3, [pc, #156]	; (800d640 <tcp_fasttmr+0xbc>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d03f      	beq.n	800d62a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d5aa:	4b25      	ldr	r3, [pc, #148]	; (800d640 <tcp_fasttmr+0xbc>)
 800d5ac:	781a      	ldrb	r2, [r3, #0]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	8b5b      	ldrh	r3, [r3, #26]
 800d5b6:	f003 0301 	and.w	r3, r3, #1
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d010      	beq.n	800d5e0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	8b5b      	ldrh	r3, [r3, #26]
 800d5c2:	f043 0302 	orr.w	r3, r3, #2
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f003 ffef 	bl	80115b0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	8b5b      	ldrh	r3, [r3, #26]
 800d5d6:	f023 0303 	bic.w	r3, r3, #3
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	8b5b      	ldrh	r3, [r3, #26]
 800d5e4:	f003 0308 	and.w	r3, r3, #8
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d009      	beq.n	800d600 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	8b5b      	ldrh	r3, [r3, #26]
 800d5f0:	f023 0308 	bic.w	r3, r3, #8
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7ff f87c 	bl	800c6f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00a      	beq.n	800d624 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d60e:	4b0e      	ldr	r3, [pc, #56]	; (800d648 <tcp_fasttmr+0xc4>)
 800d610:	2200      	movs	r2, #0
 800d612:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f819 	bl	800d64c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d61a:	4b0b      	ldr	r3, [pc, #44]	; (800d648 <tcp_fasttmr+0xc4>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d000      	beq.n	800d624 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d622:	e7b8      	b.n	800d596 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	607b      	str	r3, [r7, #4]
 800d628:	e002      	b.n	800d630 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1b3      	bne.n	800d59e <tcp_fasttmr+0x1a>
    }
  }
}
 800d636:	bf00      	nop
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	2000864e 	.word	0x2000864e
 800d644:	2000f4dc 	.word	0x2000f4dc
 800d648:	2000f4d8 	.word	0x2000f4d8

0800d64c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d64c:	b590      	push	{r4, r7, lr}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d109      	bne.n	800d66e <tcp_process_refused_data+0x22>
 800d65a:	4b37      	ldr	r3, [pc, #220]	; (800d738 <tcp_process_refused_data+0xec>)
 800d65c:	f240 6209 	movw	r2, #1545	; 0x609
 800d660:	4936      	ldr	r1, [pc, #216]	; (800d73c <tcp_process_refused_data+0xf0>)
 800d662:	4837      	ldr	r0, [pc, #220]	; (800d740 <tcp_process_refused_data+0xf4>)
 800d664:	f00a f94a 	bl	80178fc <iprintf>
 800d668:	f06f 030f 	mvn.w	r3, #15
 800d66c:	e060      	b.n	800d730 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d672:	7b5b      	ldrb	r3, [r3, #13]
 800d674:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d67a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00b      	beq.n	800d6a4 <tcp_process_refused_data+0x58>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6918      	ldr	r0, [r3, #16]
 800d696:	2300      	movs	r3, #0
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	6879      	ldr	r1, [r7, #4]
 800d69c:	47a0      	blx	r4
 800d69e:	4603      	mov	r3, r0
 800d6a0:	73fb      	strb	r3, [r7, #15]
 800d6a2:	e007      	b.n	800d6b4 <tcp_process_refused_data+0x68>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	6879      	ldr	r1, [r7, #4]
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	f000 f8a2 	bl	800d7f4 <tcp_recv_null>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d12a      	bne.n	800d712 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d6bc:	7bbb      	ldrb	r3, [r7, #14]
 800d6be:	f003 0320 	and.w	r3, r3, #32
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d033      	beq.n	800d72e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d6ce:	d005      	beq.n	800d6dc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00b      	beq.n	800d6fe <tcp_process_refused_data+0xb2>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6918      	ldr	r0, [r3, #16]
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	6879      	ldr	r1, [r7, #4]
 800d6f6:	47a0      	blx	r4
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	73fb      	strb	r3, [r7, #15]
 800d6fc:	e001      	b.n	800d702 <tcp_process_refused_data+0xb6>
 800d6fe:	2300      	movs	r3, #0
 800d700:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d706:	f113 0f0d 	cmn.w	r3, #13
 800d70a:	d110      	bne.n	800d72e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d70c:	f06f 030c 	mvn.w	r3, #12
 800d710:	e00e      	b.n	800d730 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d716:	f113 0f0d 	cmn.w	r3, #13
 800d71a:	d102      	bne.n	800d722 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d71c:	f06f 030c 	mvn.w	r3, #12
 800d720:	e006      	b.n	800d730 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d728:	f06f 0304 	mvn.w	r3, #4
 800d72c:	e000      	b.n	800d730 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3714      	adds	r7, #20
 800d734:	46bd      	mov	sp, r7
 800d736:	bd90      	pop	{r4, r7, pc}
 800d738:	0801a350 	.word	0x0801a350
 800d73c:	0801a860 	.word	0x0801a860
 800d740:	0801a394 	.word	0x0801a394

0800d744 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d74c:	e007      	b.n	800d75e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f809 	bl	800d76c <tcp_seg_free>
    seg = next;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1f4      	bne.n	800d74e <tcp_segs_free+0xa>
  }
}
 800d764:	bf00      	nop
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00c      	beq.n	800d794 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d004      	beq.n	800d78c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	4618      	mov	r0, r3
 800d788:	f7fe fb6a 	bl	800be60 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d78c:	6879      	ldr	r1, [r7, #4]
 800d78e:	2003      	movs	r0, #3
 800d790:	f7fd fcba 	bl	800b108 <memp_free>
  }
}
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d106      	bne.n	800d7b8 <tcp_seg_copy+0x1c>
 800d7aa:	4b0f      	ldr	r3, [pc, #60]	; (800d7e8 <tcp_seg_copy+0x4c>)
 800d7ac:	f240 6282 	movw	r2, #1666	; 0x682
 800d7b0:	490e      	ldr	r1, [pc, #56]	; (800d7ec <tcp_seg_copy+0x50>)
 800d7b2:	480f      	ldr	r0, [pc, #60]	; (800d7f0 <tcp_seg_copy+0x54>)
 800d7b4:	f00a f8a2 	bl	80178fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d7b8:	2003      	movs	r0, #3
 800d7ba:	f7fd fc53 	bl	800b064 <memp_malloc>
 800d7be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <tcp_seg_copy+0x2e>
    return NULL;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	e00a      	b.n	800d7e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d7ca:	2210      	movs	r2, #16
 800d7cc:	6879      	ldr	r1, [r7, #4]
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f00a f867 	bl	80178a2 <memcpy>
  pbuf_ref(cseg->p);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe fbe7 	bl	800bfac <pbuf_ref>
  return cseg;
 800d7de:	68fb      	ldr	r3, [r7, #12]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	0801a350 	.word	0x0801a350
 800d7ec:	0801a8a4 	.word	0x0801a8a4
 800d7f0:	0801a394 	.word	0x0801a394

0800d7f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
 800d800:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d109      	bne.n	800d81c <tcp_recv_null+0x28>
 800d808:	4b12      	ldr	r3, [pc, #72]	; (800d854 <tcp_recv_null+0x60>)
 800d80a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d80e:	4912      	ldr	r1, [pc, #72]	; (800d858 <tcp_recv_null+0x64>)
 800d810:	4812      	ldr	r0, [pc, #72]	; (800d85c <tcp_recv_null+0x68>)
 800d812:	f00a f873 	bl	80178fc <iprintf>
 800d816:	f06f 030f 	mvn.w	r3, #15
 800d81a:	e016      	b.n	800d84a <tcp_recv_null+0x56>

  if (p != NULL) {
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d009      	beq.n	800d836 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	891b      	ldrh	r3, [r3, #8]
 800d826:	4619      	mov	r1, r3
 800d828:	68b8      	ldr	r0, [r7, #8]
 800d82a:	f7ff fad7 	bl	800cddc <tcp_recved>
    pbuf_free(p);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7fe fb16 	bl	800be60 <pbuf_free>
 800d834:	e008      	b.n	800d848 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d104      	bne.n	800d848 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d83e:	68b8      	ldr	r0, [r7, #8]
 800d840:	f7fe ffc0 	bl	800c7c4 <tcp_close>
 800d844:	4603      	mov	r3, r0
 800d846:	e000      	b.n	800d84a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	0801a350 	.word	0x0801a350
 800d858:	0801a8c0 	.word	0x0801a8c0
 800d85c:	0801a394 	.word	0x0801a394

0800d860 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	4603      	mov	r3, r0
 800d868:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	db01      	blt.n	800d876 <tcp_kill_prio+0x16>
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	e000      	b.n	800d878 <tcp_kill_prio+0x18>
 800d876:	237f      	movs	r3, #127	; 0x7f
 800d878:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d87a:	7afb      	ldrb	r3, [r7, #11]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d034      	beq.n	800d8ea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d880:	7afb      	ldrb	r3, [r7, #11]
 800d882:	3b01      	subs	r3, #1
 800d884:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d88a:	2300      	movs	r3, #0
 800d88c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d88e:	4b19      	ldr	r3, [pc, #100]	; (800d8f4 <tcp_kill_prio+0x94>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	617b      	str	r3, [r7, #20]
 800d894:	e01f      	b.n	800d8d6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	7d5b      	ldrb	r3, [r3, #21]
 800d89a:	7afa      	ldrb	r2, [r7, #11]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d80c      	bhi.n	800d8ba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d8a4:	7afa      	ldrb	r2, [r7, #11]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d112      	bne.n	800d8d0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d8aa:	4b13      	ldr	r3, [pc, #76]	; (800d8f8 <tcp_kill_prio+0x98>)
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d80a      	bhi.n	800d8d0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d8ba:	4b0f      	ldr	r3, [pc, #60]	; (800d8f8 <tcp_kill_prio+0x98>)
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	7d5b      	ldrb	r3, [r3, #21]
 800d8ce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	617b      	str	r3, [r7, #20]
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1dc      	bne.n	800d896 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d004      	beq.n	800d8ec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d8e2:	6938      	ldr	r0, [r7, #16]
 800d8e4:	f7ff f8b2 	bl	800ca4c <tcp_abort>
 800d8e8:	e000      	b.n	800d8ec <tcp_kill_prio+0x8c>
    return;
 800d8ea:	bf00      	nop
  }
}
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	2000f4dc 	.word	0x2000f4dc
 800d8f8:	2000f4e0 	.word	0x2000f4e0

0800d8fc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d906:	79fb      	ldrb	r3, [r7, #7]
 800d908:	2b08      	cmp	r3, #8
 800d90a:	d009      	beq.n	800d920 <tcp_kill_state+0x24>
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	2b09      	cmp	r3, #9
 800d910:	d006      	beq.n	800d920 <tcp_kill_state+0x24>
 800d912:	4b1a      	ldr	r3, [pc, #104]	; (800d97c <tcp_kill_state+0x80>)
 800d914:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d918:	4919      	ldr	r1, [pc, #100]	; (800d980 <tcp_kill_state+0x84>)
 800d91a:	481a      	ldr	r0, [pc, #104]	; (800d984 <tcp_kill_state+0x88>)
 800d91c:	f009 ffee 	bl	80178fc <iprintf>

  inactivity = 0;
 800d920:	2300      	movs	r3, #0
 800d922:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d924:	2300      	movs	r3, #0
 800d926:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d928:	4b17      	ldr	r3, [pc, #92]	; (800d988 <tcp_kill_state+0x8c>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	617b      	str	r3, [r7, #20]
 800d92e:	e017      	b.n	800d960 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	7d1b      	ldrb	r3, [r3, #20]
 800d934:	79fa      	ldrb	r2, [r7, #7]
 800d936:	429a      	cmp	r2, r3
 800d938:	d10f      	bne.n	800d95a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d93a:	4b14      	ldr	r3, [pc, #80]	; (800d98c <tcp_kill_state+0x90>)
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	429a      	cmp	r2, r3
 800d948:	d807      	bhi.n	800d95a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d94a:	4b10      	ldr	r3, [pc, #64]	; (800d98c <tcp_kill_state+0x90>)
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	617b      	str	r3, [r7, #20]
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1e4      	bne.n	800d930 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d003      	beq.n	800d974 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d96c:	2100      	movs	r1, #0
 800d96e:	6938      	ldr	r0, [r7, #16]
 800d970:	f7fe ffae 	bl	800c8d0 <tcp_abandon>
  }
}
 800d974:	bf00      	nop
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	0801a350 	.word	0x0801a350
 800d980:	0801a8dc 	.word	0x0801a8dc
 800d984:	0801a394 	.word	0x0801a394
 800d988:	2000f4dc 	.word	0x2000f4dc
 800d98c:	2000f4e0 	.word	0x2000f4e0

0800d990 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d99a:	2300      	movs	r3, #0
 800d99c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d99e:	4b12      	ldr	r3, [pc, #72]	; (800d9e8 <tcp_kill_timewait+0x58>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	e012      	b.n	800d9cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d9a6:	4b11      	ldr	r3, [pc, #68]	; (800d9ec <tcp_kill_timewait+0x5c>)
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d807      	bhi.n	800d9c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d9b6:	4b0d      	ldr	r3, [pc, #52]	; (800d9ec <tcp_kill_timewait+0x5c>)
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1e9      	bne.n	800d9a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d9d8:	68b8      	ldr	r0, [r7, #8]
 800d9da:	f7ff f837 	bl	800ca4c <tcp_abort>
  }
}
 800d9de:	bf00      	nop
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	2000f4ec 	.word	0x2000f4ec
 800d9ec:	2000f4e0 	.word	0x2000f4e0

0800d9f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d9f6:	4b10      	ldr	r3, [pc, #64]	; (800da38 <tcp_handle_closepend+0x48>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d9fc:	e014      	b.n	800da28 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	8b5b      	ldrh	r3, [r3, #26]
 800da08:	f003 0308 	and.w	r3, r3, #8
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d009      	beq.n	800da24 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	8b5b      	ldrh	r3, [r3, #26]
 800da14:	f023 0308 	bic.w	r3, r3, #8
 800da18:	b29a      	uxth	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7fe fe6a 	bl	800c6f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d1e7      	bne.n	800d9fe <tcp_handle_closepend+0xe>
  }
}
 800da2e:	bf00      	nop
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	2000f4dc 	.word	0x2000f4dc

0800da3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	4603      	mov	r3, r0
 800da44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da46:	2001      	movs	r0, #1
 800da48:	f7fd fb0c 	bl	800b064 <memp_malloc>
 800da4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d126      	bne.n	800daa2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800da54:	f7ff ffcc 	bl	800d9f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800da58:	f7ff ff9a 	bl	800d990 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da5c:	2001      	movs	r0, #1
 800da5e:	f7fd fb01 	bl	800b064 <memp_malloc>
 800da62:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d11b      	bne.n	800daa2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800da6a:	2009      	movs	r0, #9
 800da6c:	f7ff ff46 	bl	800d8fc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da70:	2001      	movs	r0, #1
 800da72:	f7fd faf7 	bl	800b064 <memp_malloc>
 800da76:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d111      	bne.n	800daa2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800da7e:	2008      	movs	r0, #8
 800da80:	f7ff ff3c 	bl	800d8fc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da84:	2001      	movs	r0, #1
 800da86:	f7fd faed 	bl	800b064 <memp_malloc>
 800da8a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d107      	bne.n	800daa2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800da92:	79fb      	ldrb	r3, [r7, #7]
 800da94:	4618      	mov	r0, r3
 800da96:	f7ff fee3 	bl	800d860 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da9a:	2001      	movs	r0, #1
 800da9c:	f7fd fae2 	bl	800b064 <memp_malloc>
 800daa0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d03f      	beq.n	800db28 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800daa8:	229c      	movs	r2, #156	; 0x9c
 800daaa:	2100      	movs	r1, #0
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f009 ff1c 	bl	80178ea <memset>
    pcb->prio = prio;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	79fa      	ldrb	r2, [r7, #7]
 800dab6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dabe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dac8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	22ff      	movs	r2, #255	; 0xff
 800dad6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dade:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2206      	movs	r2, #6
 800dae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2206      	movs	r2, #6
 800daec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daf4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2201      	movs	r2, #1
 800dafa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dafe:	4b0d      	ldr	r3, [pc, #52]	; (800db34 <tcp_alloc+0xf8>)
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800db06:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <tcp_alloc+0xfc>)
 800db08:	781a      	ldrb	r2, [r3, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800db14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	4a08      	ldr	r2, [pc, #32]	; (800db3c <tcp_alloc+0x100>)
 800db1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	4a07      	ldr	r2, [pc, #28]	; (800db40 <tcp_alloc+0x104>)
 800db24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800db28:	68fb      	ldr	r3, [r7, #12]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	2000f4e0 	.word	0x2000f4e0
 800db38:	2000864e 	.word	0x2000864e
 800db3c:	0800d7f5 	.word	0x0800d7f5
 800db40:	006ddd00 	.word	0x006ddd00

0800db44 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800db4e:	2040      	movs	r0, #64	; 0x40
 800db50:	f7ff ff74 	bl	800da3c <tcp_alloc>
 800db54:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800db56:	68fb      	ldr	r3, [r7, #12]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d002      	beq.n	800db76 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	611a      	str	r2, [r3, #16]
  }
}
 800db76:	bf00      	nop
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
	...

0800db84 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00e      	beq.n	800dbb2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	7d1b      	ldrb	r3, [r3, #20]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d106      	bne.n	800dbaa <tcp_recv+0x26>
 800db9c:	4b07      	ldr	r3, [pc, #28]	; (800dbbc <tcp_recv+0x38>)
 800db9e:	f240 72df 	movw	r2, #2015	; 0x7df
 800dba2:	4907      	ldr	r1, [pc, #28]	; (800dbc0 <tcp_recv+0x3c>)
 800dba4:	4807      	ldr	r0, [pc, #28]	; (800dbc4 <tcp_recv+0x40>)
 800dba6:	f009 fea9 	bl	80178fc <iprintf>
    pcb->recv = recv;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	0801a350 	.word	0x0801a350
 800dbc0:	0801a8ec 	.word	0x0801a8ec
 800dbc4:	0801a394 	.word	0x0801a394

0800dbc8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00e      	beq.n	800dbf6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	7d1b      	ldrb	r3, [r3, #20]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d106      	bne.n	800dbee <tcp_sent+0x26>
 800dbe0:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <tcp_sent+0x38>)
 800dbe2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800dbe6:	4907      	ldr	r1, [pc, #28]	; (800dc04 <tcp_sent+0x3c>)
 800dbe8:	4807      	ldr	r0, [pc, #28]	; (800dc08 <tcp_sent+0x40>)
 800dbea:	f009 fe87 	bl	80178fc <iprintf>
    pcb->sent = sent;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800dbf6:	bf00      	nop
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	0801a350 	.word	0x0801a350
 800dc04:	0801a914 	.word	0x0801a914
 800dc08:	0801a394 	.word	0x0801a394

0800dc0c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00e      	beq.n	800dc3a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	7d1b      	ldrb	r3, [r3, #20]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d106      	bne.n	800dc32 <tcp_err+0x26>
 800dc24:	4b07      	ldr	r3, [pc, #28]	; (800dc44 <tcp_err+0x38>)
 800dc26:	f640 020d 	movw	r2, #2061	; 0x80d
 800dc2a:	4907      	ldr	r1, [pc, #28]	; (800dc48 <tcp_err+0x3c>)
 800dc2c:	4807      	ldr	r0, [pc, #28]	; (800dc4c <tcp_err+0x40>)
 800dc2e:	f009 fe65 	bl	80178fc <iprintf>
    pcb->errf = err;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	683a      	ldr	r2, [r7, #0]
 800dc36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800dc3a:	bf00      	nop
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	0801a350 	.word	0x0801a350
 800dc48:	0801a93c 	.word	0x0801a93c
 800dc4c:	0801a394 	.word	0x0801a394

0800dc50 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d008      	beq.n	800dc72 <tcp_accept+0x22>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7d1b      	ldrb	r3, [r3, #20]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d104      	bne.n	800dc72 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	619a      	str	r2, [r3, #24]
  }
}
 800dc72:	bf00      	nop
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
	...

0800dc80 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d107      	bne.n	800dca4 <tcp_poll+0x24>
 800dc94:	4b0e      	ldr	r3, [pc, #56]	; (800dcd0 <tcp_poll+0x50>)
 800dc96:	f640 023d 	movw	r2, #2109	; 0x83d
 800dc9a:	490e      	ldr	r1, [pc, #56]	; (800dcd4 <tcp_poll+0x54>)
 800dc9c:	480e      	ldr	r0, [pc, #56]	; (800dcd8 <tcp_poll+0x58>)
 800dc9e:	f009 fe2d 	bl	80178fc <iprintf>
 800dca2:	e011      	b.n	800dcc8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	7d1b      	ldrb	r3, [r3, #20]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d106      	bne.n	800dcba <tcp_poll+0x3a>
 800dcac:	4b08      	ldr	r3, [pc, #32]	; (800dcd0 <tcp_poll+0x50>)
 800dcae:	f640 023e 	movw	r2, #2110	; 0x83e
 800dcb2:	490a      	ldr	r1, [pc, #40]	; (800dcdc <tcp_poll+0x5c>)
 800dcb4:	4808      	ldr	r0, [pc, #32]	; (800dcd8 <tcp_poll+0x58>)
 800dcb6:	f009 fe21 	bl	80178fc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	79fa      	ldrb	r2, [r7, #7]
 800dcc6:	775a      	strb	r2, [r3, #29]
}
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	0801a350 	.word	0x0801a350
 800dcd4:	0801a964 	.word	0x0801a964
 800dcd8:	0801a394 	.word	0x0801a394
 800dcdc:	0801a97c 	.word	0x0801a97c

0800dce0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d107      	bne.n	800dcfe <tcp_pcb_purge+0x1e>
 800dcee:	4b21      	ldr	r3, [pc, #132]	; (800dd74 <tcp_pcb_purge+0x94>)
 800dcf0:	f640 0251 	movw	r2, #2129	; 0x851
 800dcf4:	4920      	ldr	r1, [pc, #128]	; (800dd78 <tcp_pcb_purge+0x98>)
 800dcf6:	4821      	ldr	r0, [pc, #132]	; (800dd7c <tcp_pcb_purge+0x9c>)
 800dcf8:	f009 fe00 	bl	80178fc <iprintf>
 800dcfc:	e037      	b.n	800dd6e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	7d1b      	ldrb	r3, [r3, #20]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d033      	beq.n	800dd6e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dd0a:	2b0a      	cmp	r3, #10
 800dd0c:	d02f      	beq.n	800dd6e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d02b      	beq.n	800dd6e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d007      	beq.n	800dd2e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fe f89c 	bl	800be60 <pbuf_free>
      pcb->refused_data = NULL;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d002      	beq.n	800dd3c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 f986 	bl	800e048 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd42:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7ff fcfb 	bl	800d744 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7ff fcf6 	bl	800d744 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	0801a350 	.word	0x0801a350
 800dd78:	0801a99c 	.word	0x0801a99c
 800dd7c:	0801a394 	.word	0x0801a394

0800dd80 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d106      	bne.n	800dd9e <tcp_pcb_remove+0x1e>
 800dd90:	4b3e      	ldr	r3, [pc, #248]	; (800de8c <tcp_pcb_remove+0x10c>)
 800dd92:	f640 0283 	movw	r2, #2179	; 0x883
 800dd96:	493e      	ldr	r1, [pc, #248]	; (800de90 <tcp_pcb_remove+0x110>)
 800dd98:	483e      	ldr	r0, [pc, #248]	; (800de94 <tcp_pcb_remove+0x114>)
 800dd9a:	f009 fdaf 	bl	80178fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d106      	bne.n	800ddb2 <tcp_pcb_remove+0x32>
 800dda4:	4b39      	ldr	r3, [pc, #228]	; (800de8c <tcp_pcb_remove+0x10c>)
 800dda6:	f640 0284 	movw	r2, #2180	; 0x884
 800ddaa:	493b      	ldr	r1, [pc, #236]	; (800de98 <tcp_pcb_remove+0x118>)
 800ddac:	4839      	ldr	r0, [pc, #228]	; (800de94 <tcp_pcb_remove+0x114>)
 800ddae:	f009 fda5 	bl	80178fc <iprintf>

  TCP_RMV(pcblist, pcb);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d105      	bne.n	800ddc8 <tcp_pcb_remove+0x48>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68da      	ldr	r2, [r3, #12]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	601a      	str	r2, [r3, #0]
 800ddc6:	e013      	b.n	800ddf0 <tcp_pcb_remove+0x70>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	60fb      	str	r3, [r7, #12]
 800ddce:	e00c      	b.n	800ddea <tcp_pcb_remove+0x6a>
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d104      	bne.n	800dde4 <tcp_pcb_remove+0x64>
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	68da      	ldr	r2, [r3, #12]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	60da      	str	r2, [r3, #12]
 800dde2:	e005      	b.n	800ddf0 <tcp_pcb_remove+0x70>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	60fb      	str	r3, [r7, #12]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d1ef      	bne.n	800ddd0 <tcp_pcb_remove+0x50>
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ddf6:	6838      	ldr	r0, [r7, #0]
 800ddf8:	f7ff ff72 	bl	800dce0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	7d1b      	ldrb	r3, [r3, #20]
 800de00:	2b0a      	cmp	r3, #10
 800de02:	d013      	beq.n	800de2c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d00f      	beq.n	800de2c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	8b5b      	ldrh	r3, [r3, #26]
 800de10:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800de14:	2b00      	cmp	r3, #0
 800de16:	d009      	beq.n	800de2c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	8b5b      	ldrh	r3, [r3, #26]
 800de1c:	f043 0302 	orr.w	r3, r3, #2
 800de20:	b29a      	uxth	r2, r3
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de26:	6838      	ldr	r0, [r7, #0]
 800de28:	f003 fbc2 	bl	80115b0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	7d1b      	ldrb	r3, [r3, #20]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d020      	beq.n	800de76 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d006      	beq.n	800de4a <tcp_pcb_remove+0xca>
 800de3c:	4b13      	ldr	r3, [pc, #76]	; (800de8c <tcp_pcb_remove+0x10c>)
 800de3e:	f640 0293 	movw	r2, #2195	; 0x893
 800de42:	4916      	ldr	r1, [pc, #88]	; (800de9c <tcp_pcb_remove+0x11c>)
 800de44:	4813      	ldr	r0, [pc, #76]	; (800de94 <tcp_pcb_remove+0x114>)
 800de46:	f009 fd59 	bl	80178fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d006      	beq.n	800de60 <tcp_pcb_remove+0xe0>
 800de52:	4b0e      	ldr	r3, [pc, #56]	; (800de8c <tcp_pcb_remove+0x10c>)
 800de54:	f640 0294 	movw	r2, #2196	; 0x894
 800de58:	4911      	ldr	r1, [pc, #68]	; (800dea0 <tcp_pcb_remove+0x120>)
 800de5a:	480e      	ldr	r0, [pc, #56]	; (800de94 <tcp_pcb_remove+0x114>)
 800de5c:	f009 fd4e 	bl	80178fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de64:	2b00      	cmp	r3, #0
 800de66:	d006      	beq.n	800de76 <tcp_pcb_remove+0xf6>
 800de68:	4b08      	ldr	r3, [pc, #32]	; (800de8c <tcp_pcb_remove+0x10c>)
 800de6a:	f640 0296 	movw	r2, #2198	; 0x896
 800de6e:	490d      	ldr	r1, [pc, #52]	; (800dea4 <tcp_pcb_remove+0x124>)
 800de70:	4808      	ldr	r0, [pc, #32]	; (800de94 <tcp_pcb_remove+0x114>)
 800de72:	f009 fd43 	bl	80178fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2200      	movs	r2, #0
 800de7a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2200      	movs	r2, #0
 800de80:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800de82:	bf00      	nop
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	0801a350 	.word	0x0801a350
 800de90:	0801a9b8 	.word	0x0801a9b8
 800de94:	0801a394 	.word	0x0801a394
 800de98:	0801a9d4 	.word	0x0801a9d4
 800de9c:	0801a9f4 	.word	0x0801a9f4
 800dea0:	0801aa0c 	.word	0x0801aa0c
 800dea4:	0801aa28 	.word	0x0801aa28

0800dea8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <tcp_next_iss+0x1c>
 800deb6:	4b0a      	ldr	r3, [pc, #40]	; (800dee0 <tcp_next_iss+0x38>)
 800deb8:	f640 02af 	movw	r2, #2223	; 0x8af
 800debc:	4909      	ldr	r1, [pc, #36]	; (800dee4 <tcp_next_iss+0x3c>)
 800debe:	480a      	ldr	r0, [pc, #40]	; (800dee8 <tcp_next_iss+0x40>)
 800dec0:	f009 fd1c 	bl	80178fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dec4:	4b09      	ldr	r3, [pc, #36]	; (800deec <tcp_next_iss+0x44>)
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	4b09      	ldr	r3, [pc, #36]	; (800def0 <tcp_next_iss+0x48>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4413      	add	r3, r2
 800dece:	4a07      	ldr	r2, [pc, #28]	; (800deec <tcp_next_iss+0x44>)
 800ded0:	6013      	str	r3, [r2, #0]
  return iss;
 800ded2:	4b06      	ldr	r3, [pc, #24]	; (800deec <tcp_next_iss+0x44>)
 800ded4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	0801a350 	.word	0x0801a350
 800dee4:	0801aa40 	.word	0x0801aa40
 800dee8:	0801a394 	.word	0x0801a394
 800deec:	20000014 	.word	0x20000014
 800def0:	2000f4e0 	.word	0x2000f4e0

0800def4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	4603      	mov	r3, r0
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d106      	bne.n	800df16 <tcp_eff_send_mss_netif+0x22>
 800df08:	4b14      	ldr	r3, [pc, #80]	; (800df5c <tcp_eff_send_mss_netif+0x68>)
 800df0a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800df0e:	4914      	ldr	r1, [pc, #80]	; (800df60 <tcp_eff_send_mss_netif+0x6c>)
 800df10:	4814      	ldr	r0, [pc, #80]	; (800df64 <tcp_eff_send_mss_netif+0x70>)
 800df12:	f009 fcf3 	bl	80178fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800df1c:	89fb      	ldrh	r3, [r7, #14]
 800df1e:	e019      	b.n	800df54 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df24:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800df26:	8afb      	ldrh	r3, [r7, #22]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d012      	beq.n	800df52 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800df2c:	2328      	movs	r3, #40	; 0x28
 800df2e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800df30:	8afa      	ldrh	r2, [r7, #22]
 800df32:	8abb      	ldrh	r3, [r7, #20]
 800df34:	429a      	cmp	r2, r3
 800df36:	d904      	bls.n	800df42 <tcp_eff_send_mss_netif+0x4e>
 800df38:	8afa      	ldrh	r2, [r7, #22]
 800df3a:	8abb      	ldrh	r3, [r7, #20]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	b29b      	uxth	r3, r3
 800df40:	e000      	b.n	800df44 <tcp_eff_send_mss_netif+0x50>
 800df42:	2300      	movs	r3, #0
 800df44:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800df46:	8a7a      	ldrh	r2, [r7, #18]
 800df48:	89fb      	ldrh	r3, [r7, #14]
 800df4a:	4293      	cmp	r3, r2
 800df4c:	bf28      	it	cs
 800df4e:	4613      	movcs	r3, r2
 800df50:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800df52:	89fb      	ldrh	r3, [r7, #14]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	0801a350 	.word	0x0801a350
 800df60:	0801aa5c 	.word	0x0801aa5c
 800df64:	0801a394 	.word	0x0801a394

0800df68 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d119      	bne.n	800dfb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800df7c:	4b10      	ldr	r3, [pc, #64]	; (800dfc0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800df7e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800df82:	4910      	ldr	r1, [pc, #64]	; (800dfc4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800df84:	4810      	ldr	r0, [pc, #64]	; (800dfc8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800df86:	f009 fcb9 	bl	80178fc <iprintf>

  while (pcb != NULL) {
 800df8a:	e011      	b.n	800dfb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	429a      	cmp	r2, r3
 800df96:	d108      	bne.n	800dfaa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f7fe fd54 	bl	800ca4c <tcp_abort>
      pcb = next;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	60fb      	str	r3, [r7, #12]
 800dfa8:	e002      	b.n	800dfb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1ea      	bne.n	800df8c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dfb6:	bf00      	nop
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	0801a350 	.word	0x0801a350
 800dfc4:	0801aa84 	.word	0x0801aa84
 800dfc8:	0801a394 	.word	0x0801a394

0800dfcc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d02a      	beq.n	800e032 <tcp_netif_ip_addr_changed+0x66>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d026      	beq.n	800e032 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dfe4:	4b15      	ldr	r3, [pc, #84]	; (800e03c <tcp_netif_ip_addr_changed+0x70>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4619      	mov	r1, r3
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff ffbc 	bl	800df68 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dff0:	4b13      	ldr	r3, [pc, #76]	; (800e040 <tcp_netif_ip_addr_changed+0x74>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4619      	mov	r1, r3
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7ff ffb6 	bl	800df68 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d017      	beq.n	800e032 <tcp_netif_ip_addr_changed+0x66>
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d013      	beq.n	800e032 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e00a:	4b0e      	ldr	r3, [pc, #56]	; (800e044 <tcp_netif_ip_addr_changed+0x78>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	60fb      	str	r3, [r7, #12]
 800e010:	e00c      	b.n	800e02c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d103      	bne.n	800e026 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	60fb      	str	r3, [r7, #12]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1ef      	bne.n	800e012 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e032:	bf00      	nop
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	2000f4dc 	.word	0x2000f4dc
 800e040:	2000f4e8 	.word	0x2000f4e8
 800e044:	2000f4e4 	.word	0x2000f4e4

0800e048 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e054:	2b00      	cmp	r3, #0
 800e056:	d007      	beq.n	800e068 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff fb71 	bl	800d744 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e068:	bf00      	nop
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e070:	b590      	push	{r4, r7, lr}
 800e072:	b08d      	sub	sp, #52	; 0x34
 800e074:	af04      	add	r7, sp, #16
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d105      	bne.n	800e08c <tcp_input+0x1c>
 800e080:	4b9b      	ldr	r3, [pc, #620]	; (800e2f0 <tcp_input+0x280>)
 800e082:	2283      	movs	r2, #131	; 0x83
 800e084:	499b      	ldr	r1, [pc, #620]	; (800e2f4 <tcp_input+0x284>)
 800e086:	489c      	ldr	r0, [pc, #624]	; (800e2f8 <tcp_input+0x288>)
 800e088:	f009 fc38 	bl	80178fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	4a9a      	ldr	r2, [pc, #616]	; (800e2fc <tcp_input+0x28c>)
 800e092:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	895b      	ldrh	r3, [r3, #10]
 800e098:	2b13      	cmp	r3, #19
 800e09a:	f240 83c4 	bls.w	800e826 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e09e:	4b98      	ldr	r3, [pc, #608]	; (800e300 <tcp_input+0x290>)
 800e0a0:	695a      	ldr	r2, [r3, #20]
 800e0a2:	4b97      	ldr	r3, [pc, #604]	; (800e300 <tcp_input+0x290>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	f008 fa79 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f040 83ba 	bne.w	800e82a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e0b6:	4b92      	ldr	r3, [pc, #584]	; (800e300 <tcp_input+0x290>)
 800e0b8:	695b      	ldr	r3, [r3, #20]
 800e0ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e0be:	2be0      	cmp	r3, #224	; 0xe0
 800e0c0:	f000 83b3 	beq.w	800e82a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e0c4:	4b8d      	ldr	r3, [pc, #564]	; (800e2fc <tcp_input+0x28c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	899b      	ldrh	r3, [r3, #12]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fc fb13 	bl	800a6f8 <lwip_htons>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	0b1b      	lsrs	r3, r3, #12
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e0de:	7cbb      	ldrb	r3, [r7, #18]
 800e0e0:	2b13      	cmp	r3, #19
 800e0e2:	f240 83a2 	bls.w	800e82a <tcp_input+0x7ba>
 800e0e6:	7cbb      	ldrb	r3, [r7, #18]
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	891b      	ldrh	r3, [r3, #8]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	f200 839b 	bhi.w	800e82a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e0f4:	7cbb      	ldrb	r3, [r7, #18]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	3b14      	subs	r3, #20
 800e0fa:	b29a      	uxth	r2, r3
 800e0fc:	4b81      	ldr	r3, [pc, #516]	; (800e304 <tcp_input+0x294>)
 800e0fe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e100:	4b81      	ldr	r3, [pc, #516]	; (800e308 <tcp_input+0x298>)
 800e102:	2200      	movs	r2, #0
 800e104:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	895a      	ldrh	r2, [r3, #10]
 800e10a:	7cbb      	ldrb	r3, [r7, #18]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	429a      	cmp	r2, r3
 800e110:	d309      	bcc.n	800e126 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e112:	4b7c      	ldr	r3, [pc, #496]	; (800e304 <tcp_input+0x294>)
 800e114:	881a      	ldrh	r2, [r3, #0]
 800e116:	4b7d      	ldr	r3, [pc, #500]	; (800e30c <tcp_input+0x29c>)
 800e118:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e11a:	7cbb      	ldrb	r3, [r7, #18]
 800e11c:	4619      	mov	r1, r3
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7fd fe18 	bl	800bd54 <pbuf_remove_header>
 800e124:	e04e      	b.n	800e1c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d105      	bne.n	800e13a <tcp_input+0xca>
 800e12e:	4b70      	ldr	r3, [pc, #448]	; (800e2f0 <tcp_input+0x280>)
 800e130:	22c2      	movs	r2, #194	; 0xc2
 800e132:	4977      	ldr	r1, [pc, #476]	; (800e310 <tcp_input+0x2a0>)
 800e134:	4870      	ldr	r0, [pc, #448]	; (800e2f8 <tcp_input+0x288>)
 800e136:	f009 fbe1 	bl	80178fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e13a:	2114      	movs	r1, #20
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7fd fe09 	bl	800bd54 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	895a      	ldrh	r2, [r3, #10]
 800e146:	4b71      	ldr	r3, [pc, #452]	; (800e30c <tcp_input+0x29c>)
 800e148:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e14a:	4b6e      	ldr	r3, [pc, #440]	; (800e304 <tcp_input+0x294>)
 800e14c:	881a      	ldrh	r2, [r3, #0]
 800e14e:	4b6f      	ldr	r3, [pc, #444]	; (800e30c <tcp_input+0x29c>)
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e156:	4b6d      	ldr	r3, [pc, #436]	; (800e30c <tcp_input+0x29c>)
 800e158:	881b      	ldrh	r3, [r3, #0]
 800e15a:	4619      	mov	r1, r3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7fd fdf9 	bl	800bd54 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	895b      	ldrh	r3, [r3, #10]
 800e168:	8a3a      	ldrh	r2, [r7, #16]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	f200 835f 	bhi.w	800e82e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	4a64      	ldr	r2, [pc, #400]	; (800e308 <tcp_input+0x298>)
 800e178:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	8a3a      	ldrh	r2, [r7, #16]
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7fd fde6 	bl	800bd54 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	891a      	ldrh	r2, [r3, #8]
 800e18c:	8a3b      	ldrh	r3, [r7, #16]
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	b29a      	uxth	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	895b      	ldrh	r3, [r3, #10]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d005      	beq.n	800e1aa <tcp_input+0x13a>
 800e19e:	4b54      	ldr	r3, [pc, #336]	; (800e2f0 <tcp_input+0x280>)
 800e1a0:	22df      	movs	r2, #223	; 0xdf
 800e1a2:	495c      	ldr	r1, [pc, #368]	; (800e314 <tcp_input+0x2a4>)
 800e1a4:	4854      	ldr	r0, [pc, #336]	; (800e2f8 <tcp_input+0x288>)
 800e1a6:	f009 fba9 	bl	80178fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	891a      	ldrh	r2, [r3, #8]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	891b      	ldrh	r3, [r3, #8]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d005      	beq.n	800e1c4 <tcp_input+0x154>
 800e1b8:	4b4d      	ldr	r3, [pc, #308]	; (800e2f0 <tcp_input+0x280>)
 800e1ba:	22e0      	movs	r2, #224	; 0xe0
 800e1bc:	4956      	ldr	r1, [pc, #344]	; (800e318 <tcp_input+0x2a8>)
 800e1be:	484e      	ldr	r0, [pc, #312]	; (800e2f8 <tcp_input+0x288>)
 800e1c0:	f009 fb9c 	bl	80178fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e1c4:	4b4d      	ldr	r3, [pc, #308]	; (800e2fc <tcp_input+0x28c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	4b4b      	ldr	r3, [pc, #300]	; (800e2fc <tcp_input+0x28c>)
 800e1ce:	681c      	ldr	r4, [r3, #0]
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7fc fa91 	bl	800a6f8 <lwip_htons>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e1da:	4b48      	ldr	r3, [pc, #288]	; (800e2fc <tcp_input+0x28c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	885b      	ldrh	r3, [r3, #2]
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	4b46      	ldr	r3, [pc, #280]	; (800e2fc <tcp_input+0x28c>)
 800e1e4:	681c      	ldr	r4, [r3, #0]
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	f7fc fa86 	bl	800a6f8 <lwip_htons>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e1f0:	4b42      	ldr	r3, [pc, #264]	; (800e2fc <tcp_input+0x28c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	685a      	ldr	r2, [r3, #4]
 800e1f6:	4b41      	ldr	r3, [pc, #260]	; (800e2fc <tcp_input+0x28c>)
 800e1f8:	681c      	ldr	r4, [r3, #0]
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	f7fc fa91 	bl	800a722 <lwip_htonl>
 800e200:	4603      	mov	r3, r0
 800e202:	6063      	str	r3, [r4, #4]
 800e204:	6863      	ldr	r3, [r4, #4]
 800e206:	4a45      	ldr	r2, [pc, #276]	; (800e31c <tcp_input+0x2ac>)
 800e208:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e20a:	4b3c      	ldr	r3, [pc, #240]	; (800e2fc <tcp_input+0x28c>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	4b3a      	ldr	r3, [pc, #232]	; (800e2fc <tcp_input+0x28c>)
 800e212:	681c      	ldr	r4, [r3, #0]
 800e214:	4610      	mov	r0, r2
 800e216:	f7fc fa84 	bl	800a722 <lwip_htonl>
 800e21a:	4603      	mov	r3, r0
 800e21c:	60a3      	str	r3, [r4, #8]
 800e21e:	68a3      	ldr	r3, [r4, #8]
 800e220:	4a3f      	ldr	r2, [pc, #252]	; (800e320 <tcp_input+0x2b0>)
 800e222:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e224:	4b35      	ldr	r3, [pc, #212]	; (800e2fc <tcp_input+0x28c>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	89db      	ldrh	r3, [r3, #14]
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	4b33      	ldr	r3, [pc, #204]	; (800e2fc <tcp_input+0x28c>)
 800e22e:	681c      	ldr	r4, [r3, #0]
 800e230:	4610      	mov	r0, r2
 800e232:	f7fc fa61 	bl	800a6f8 <lwip_htons>
 800e236:	4603      	mov	r3, r0
 800e238:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e23a:	4b30      	ldr	r3, [pc, #192]	; (800e2fc <tcp_input+0x28c>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	899b      	ldrh	r3, [r3, #12]
 800e240:	b29b      	uxth	r3, r3
 800e242:	4618      	mov	r0, r3
 800e244:	f7fc fa58 	bl	800a6f8 <lwip_htons>
 800e248:	4603      	mov	r3, r0
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e250:	b2da      	uxtb	r2, r3
 800e252:	4b34      	ldr	r3, [pc, #208]	; (800e324 <tcp_input+0x2b4>)
 800e254:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	891a      	ldrh	r2, [r3, #8]
 800e25a:	4b33      	ldr	r3, [pc, #204]	; (800e328 <tcp_input+0x2b8>)
 800e25c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e25e:	4b31      	ldr	r3, [pc, #196]	; (800e324 <tcp_input+0x2b4>)
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	f003 0303 	and.w	r3, r3, #3
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00c      	beq.n	800e284 <tcp_input+0x214>
    tcplen++;
 800e26a:	4b2f      	ldr	r3, [pc, #188]	; (800e328 <tcp_input+0x2b8>)
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	3301      	adds	r3, #1
 800e270:	b29a      	uxth	r2, r3
 800e272:	4b2d      	ldr	r3, [pc, #180]	; (800e328 <tcp_input+0x2b8>)
 800e274:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	891a      	ldrh	r2, [r3, #8]
 800e27a:	4b2b      	ldr	r3, [pc, #172]	; (800e328 <tcp_input+0x2b8>)
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	429a      	cmp	r2, r3
 800e280:	f200 82d7 	bhi.w	800e832 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e284:	2300      	movs	r3, #0
 800e286:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e288:	4b28      	ldr	r3, [pc, #160]	; (800e32c <tcp_input+0x2bc>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	61fb      	str	r3, [r7, #28]
 800e28e:	e09d      	b.n	800e3cc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	7d1b      	ldrb	r3, [r3, #20]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d105      	bne.n	800e2a4 <tcp_input+0x234>
 800e298:	4b15      	ldr	r3, [pc, #84]	; (800e2f0 <tcp_input+0x280>)
 800e29a:	22fb      	movs	r2, #251	; 0xfb
 800e29c:	4924      	ldr	r1, [pc, #144]	; (800e330 <tcp_input+0x2c0>)
 800e29e:	4816      	ldr	r0, [pc, #88]	; (800e2f8 <tcp_input+0x288>)
 800e2a0:	f009 fb2c 	bl	80178fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	7d1b      	ldrb	r3, [r3, #20]
 800e2a8:	2b0a      	cmp	r3, #10
 800e2aa:	d105      	bne.n	800e2b8 <tcp_input+0x248>
 800e2ac:	4b10      	ldr	r3, [pc, #64]	; (800e2f0 <tcp_input+0x280>)
 800e2ae:	22fc      	movs	r2, #252	; 0xfc
 800e2b0:	4920      	ldr	r1, [pc, #128]	; (800e334 <tcp_input+0x2c4>)
 800e2b2:	4811      	ldr	r0, [pc, #68]	; (800e2f8 <tcp_input+0x288>)
 800e2b4:	f009 fb22 	bl	80178fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	7d1b      	ldrb	r3, [r3, #20]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d105      	bne.n	800e2cc <tcp_input+0x25c>
 800e2c0:	4b0b      	ldr	r3, [pc, #44]	; (800e2f0 <tcp_input+0x280>)
 800e2c2:	22fd      	movs	r2, #253	; 0xfd
 800e2c4:	491c      	ldr	r1, [pc, #112]	; (800e338 <tcp_input+0x2c8>)
 800e2c6:	480c      	ldr	r0, [pc, #48]	; (800e2f8 <tcp_input+0x288>)
 800e2c8:	f009 fb18 	bl	80178fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	7a1b      	ldrb	r3, [r3, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d033      	beq.n	800e33c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	7a1a      	ldrb	r2, [r3, #8]
 800e2d8:	4b09      	ldr	r3, [pc, #36]	; (800e300 <tcp_input+0x290>)
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d029      	beq.n	800e33c <tcp_input+0x2cc>
      prev = pcb;
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	61bb      	str	r3, [r7, #24]
      continue;
 800e2ec:	e06b      	b.n	800e3c6 <tcp_input+0x356>
 800e2ee:	bf00      	nop
 800e2f0:	0801aab8 	.word	0x0801aab8
 800e2f4:	0801aaec 	.word	0x0801aaec
 800e2f8:	0801ab04 	.word	0x0801ab04
 800e2fc:	20008660 	.word	0x20008660
 800e300:	2000bda8 	.word	0x2000bda8
 800e304:	20008664 	.word	0x20008664
 800e308:	20008668 	.word	0x20008668
 800e30c:	20008666 	.word	0x20008666
 800e310:	0801ab2c 	.word	0x0801ab2c
 800e314:	0801ab3c 	.word	0x0801ab3c
 800e318:	0801ab48 	.word	0x0801ab48
 800e31c:	20008670 	.word	0x20008670
 800e320:	20008674 	.word	0x20008674
 800e324:	2000867c 	.word	0x2000867c
 800e328:	2000867a 	.word	0x2000867a
 800e32c:	2000f4dc 	.word	0x2000f4dc
 800e330:	0801ab68 	.word	0x0801ab68
 800e334:	0801ab90 	.word	0x0801ab90
 800e338:	0801abbc 	.word	0x0801abbc
    }

    if (pcb->remote_port == tcphdr->src &&
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	8b1a      	ldrh	r2, [r3, #24]
 800e340:	4b94      	ldr	r3, [pc, #592]	; (800e594 <tcp_input+0x524>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	881b      	ldrh	r3, [r3, #0]
 800e346:	b29b      	uxth	r3, r3
 800e348:	429a      	cmp	r2, r3
 800e34a:	d13a      	bne.n	800e3c2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	8ada      	ldrh	r2, [r3, #22]
 800e350:	4b90      	ldr	r3, [pc, #576]	; (800e594 <tcp_input+0x524>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	885b      	ldrh	r3, [r3, #2]
 800e356:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e358:	429a      	cmp	r2, r3
 800e35a:	d132      	bne.n	800e3c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	685a      	ldr	r2, [r3, #4]
 800e360:	4b8d      	ldr	r3, [pc, #564]	; (800e598 <tcp_input+0x528>)
 800e362:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e364:	429a      	cmp	r2, r3
 800e366:	d12c      	bne.n	800e3c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	4b8a      	ldr	r3, [pc, #552]	; (800e598 <tcp_input+0x528>)
 800e36e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e370:	429a      	cmp	r2, r3
 800e372:	d126      	bne.n	800e3c2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	69fa      	ldr	r2, [r7, #28]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d106      	bne.n	800e38c <tcp_input+0x31c>
 800e37e:	4b87      	ldr	r3, [pc, #540]	; (800e59c <tcp_input+0x52c>)
 800e380:	f240 120d 	movw	r2, #269	; 0x10d
 800e384:	4986      	ldr	r1, [pc, #536]	; (800e5a0 <tcp_input+0x530>)
 800e386:	4887      	ldr	r0, [pc, #540]	; (800e5a4 <tcp_input+0x534>)
 800e388:	f009 fab8 	bl	80178fc <iprintf>
      if (prev != NULL) {
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00a      	beq.n	800e3a8 <tcp_input+0x338>
        prev->next = pcb->next;
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	68da      	ldr	r2, [r3, #12]
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e39a:	4b83      	ldr	r3, [pc, #524]	; (800e5a8 <tcp_input+0x538>)
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e3a2:	4a81      	ldr	r2, [pc, #516]	; (800e5a8 <tcp_input+0x538>)
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	69fa      	ldr	r2, [r7, #28]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d111      	bne.n	800e3d6 <tcp_input+0x366>
 800e3b2:	4b7a      	ldr	r3, [pc, #488]	; (800e59c <tcp_input+0x52c>)
 800e3b4:	f240 1215 	movw	r2, #277	; 0x115
 800e3b8:	497c      	ldr	r1, [pc, #496]	; (800e5ac <tcp_input+0x53c>)
 800e3ba:	487a      	ldr	r0, [pc, #488]	; (800e5a4 <tcp_input+0x534>)
 800e3bc:	f009 fa9e 	bl	80178fc <iprintf>
      break;
 800e3c0:	e009      	b.n	800e3d6 <tcp_input+0x366>
    }
    prev = pcb;
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	61fb      	str	r3, [r7, #28]
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f47f af5e 	bne.w	800e290 <tcp_input+0x220>
 800e3d4:	e000      	b.n	800e3d8 <tcp_input+0x368>
      break;
 800e3d6:	bf00      	nop
  }

  if (pcb == NULL) {
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f040 8095 	bne.w	800e50a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3e0:	4b73      	ldr	r3, [pc, #460]	; (800e5b0 <tcp_input+0x540>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	61fb      	str	r3, [r7, #28]
 800e3e6:	e03f      	b.n	800e468 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	7d1b      	ldrb	r3, [r3, #20]
 800e3ec:	2b0a      	cmp	r3, #10
 800e3ee:	d006      	beq.n	800e3fe <tcp_input+0x38e>
 800e3f0:	4b6a      	ldr	r3, [pc, #424]	; (800e59c <tcp_input+0x52c>)
 800e3f2:	f240 121f 	movw	r2, #287	; 0x11f
 800e3f6:	496f      	ldr	r1, [pc, #444]	; (800e5b4 <tcp_input+0x544>)
 800e3f8:	486a      	ldr	r0, [pc, #424]	; (800e5a4 <tcp_input+0x534>)
 800e3fa:	f009 fa7f 	bl	80178fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	7a1b      	ldrb	r3, [r3, #8]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d009      	beq.n	800e41a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	7a1a      	ldrb	r2, [r3, #8]
 800e40a:	4b63      	ldr	r3, [pc, #396]	; (800e598 <tcp_input+0x528>)
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e412:	3301      	adds	r3, #1
 800e414:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e416:	429a      	cmp	r2, r3
 800e418:	d122      	bne.n	800e460 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	8b1a      	ldrh	r2, [r3, #24]
 800e41e:	4b5d      	ldr	r3, [pc, #372]	; (800e594 <tcp_input+0x524>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	b29b      	uxth	r3, r3
 800e426:	429a      	cmp	r2, r3
 800e428:	d11b      	bne.n	800e462 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	8ada      	ldrh	r2, [r3, #22]
 800e42e:	4b59      	ldr	r3, [pc, #356]	; (800e594 <tcp_input+0x524>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	885b      	ldrh	r3, [r3, #2]
 800e434:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e436:	429a      	cmp	r2, r3
 800e438:	d113      	bne.n	800e462 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	685a      	ldr	r2, [r3, #4]
 800e43e:	4b56      	ldr	r3, [pc, #344]	; (800e598 <tcp_input+0x528>)
 800e440:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e442:	429a      	cmp	r2, r3
 800e444:	d10d      	bne.n	800e462 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	4b53      	ldr	r3, [pc, #332]	; (800e598 <tcp_input+0x528>)
 800e44c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e44e:	429a      	cmp	r2, r3
 800e450:	d107      	bne.n	800e462 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e452:	69f8      	ldr	r0, [r7, #28]
 800e454:	f000 fb52 	bl	800eafc <tcp_timewait_input>
        }
        pbuf_free(p);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7fd fd01 	bl	800be60 <pbuf_free>
        return;
 800e45e:	e1ee      	b.n	800e83e <tcp_input+0x7ce>
        continue;
 800e460:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	61fb      	str	r3, [r7, #28]
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1bc      	bne.n	800e3e8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e46e:	2300      	movs	r3, #0
 800e470:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e472:	4b51      	ldr	r3, [pc, #324]	; (800e5b8 <tcp_input+0x548>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	617b      	str	r3, [r7, #20]
 800e478:	e02a      	b.n	800e4d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	7a1b      	ldrb	r3, [r3, #8]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00c      	beq.n	800e49c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	7a1a      	ldrb	r2, [r3, #8]
 800e486:	4b44      	ldr	r3, [pc, #272]	; (800e598 <tcp_input+0x528>)
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e48e:	3301      	adds	r3, #1
 800e490:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e492:	429a      	cmp	r2, r3
 800e494:	d002      	beq.n	800e49c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	61bb      	str	r3, [r7, #24]
        continue;
 800e49a:	e016      	b.n	800e4ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	8ada      	ldrh	r2, [r3, #22]
 800e4a0:	4b3c      	ldr	r3, [pc, #240]	; (800e594 <tcp_input+0x524>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	885b      	ldrh	r3, [r3, #2]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d10c      	bne.n	800e4c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	4b39      	ldr	r3, [pc, #228]	; (800e598 <tcp_input+0x528>)
 800e4b2:	695b      	ldr	r3, [r3, #20]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d00f      	beq.n	800e4d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00d      	beq.n	800e4da <tcp_input+0x46a>
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d009      	beq.n	800e4da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	617b      	str	r3, [r7, #20]
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1d1      	bne.n	800e47a <tcp_input+0x40a>
 800e4d6:	e000      	b.n	800e4da <tcp_input+0x46a>
            break;
 800e4d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d014      	beq.n	800e50a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00a      	beq.n	800e4fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	68da      	ldr	r2, [r3, #12]
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e4ee:	4b32      	ldr	r3, [pc, #200]	; (800e5b8 <tcp_input+0x548>)
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e4f6:	4a30      	ldr	r2, [pc, #192]	; (800e5b8 <tcp_input+0x548>)
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e4fc:	6978      	ldr	r0, [r7, #20]
 800e4fe:	f000 f9ff 	bl	800e900 <tcp_listen_input>
      }
      pbuf_free(p);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7fd fcac 	bl	800be60 <pbuf_free>
      return;
 800e508:	e199      	b.n	800e83e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f000 8160 	beq.w	800e7d2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e512:	4b2a      	ldr	r3, [pc, #168]	; (800e5bc <tcp_input+0x54c>)
 800e514:	2200      	movs	r2, #0
 800e516:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	891a      	ldrh	r2, [r3, #8]
 800e51c:	4b27      	ldr	r3, [pc, #156]	; (800e5bc <tcp_input+0x54c>)
 800e51e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e520:	4a26      	ldr	r2, [pc, #152]	; (800e5bc <tcp_input+0x54c>)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e526:	4b1b      	ldr	r3, [pc, #108]	; (800e594 <tcp_input+0x524>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a24      	ldr	r2, [pc, #144]	; (800e5bc <tcp_input+0x54c>)
 800e52c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e52e:	4b24      	ldr	r3, [pc, #144]	; (800e5c0 <tcp_input+0x550>)
 800e530:	2200      	movs	r2, #0
 800e532:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e534:	4b23      	ldr	r3, [pc, #140]	; (800e5c4 <tcp_input+0x554>)
 800e536:	2200      	movs	r2, #0
 800e538:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e53a:	4b23      	ldr	r3, [pc, #140]	; (800e5c8 <tcp_input+0x558>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e540:	4b22      	ldr	r3, [pc, #136]	; (800e5cc <tcp_input+0x55c>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	f003 0308 	and.w	r3, r3, #8
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d006      	beq.n	800e55a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	7b5b      	ldrb	r3, [r3, #13]
 800e550:	f043 0301 	orr.w	r3, r3, #1
 800e554:	b2da      	uxtb	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d038      	beq.n	800e5d4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e562:	69f8      	ldr	r0, [r7, #28]
 800e564:	f7ff f872 	bl	800d64c <tcp_process_refused_data>
 800e568:	4603      	mov	r3, r0
 800e56a:	f113 0f0d 	cmn.w	r3, #13
 800e56e:	d007      	beq.n	800e580 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e574:	2b00      	cmp	r3, #0
 800e576:	d02d      	beq.n	800e5d4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e578:	4b15      	ldr	r3, [pc, #84]	; (800e5d0 <tcp_input+0x560>)
 800e57a:	881b      	ldrh	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d029      	beq.n	800e5d4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e584:	2b00      	cmp	r3, #0
 800e586:	f040 8104 	bne.w	800e792 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e58a:	69f8      	ldr	r0, [r7, #28]
 800e58c:	f003 fe26 	bl	80121dc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e590:	e0ff      	b.n	800e792 <tcp_input+0x722>
 800e592:	bf00      	nop
 800e594:	20008660 	.word	0x20008660
 800e598:	2000bda8 	.word	0x2000bda8
 800e59c:	0801aab8 	.word	0x0801aab8
 800e5a0:	0801abe4 	.word	0x0801abe4
 800e5a4:	0801ab04 	.word	0x0801ab04
 800e5a8:	2000f4dc 	.word	0x2000f4dc
 800e5ac:	0801ac10 	.word	0x0801ac10
 800e5b0:	2000f4ec 	.word	0x2000f4ec
 800e5b4:	0801ac3c 	.word	0x0801ac3c
 800e5b8:	2000f4e4 	.word	0x2000f4e4
 800e5bc:	20008650 	.word	0x20008650
 800e5c0:	20008680 	.word	0x20008680
 800e5c4:	2000867d 	.word	0x2000867d
 800e5c8:	20008678 	.word	0x20008678
 800e5cc:	2000867c 	.word	0x2000867c
 800e5d0:	2000867a 	.word	0x2000867a
      }
    }
    tcp_input_pcb = pcb;
 800e5d4:	4a9b      	ldr	r2, [pc, #620]	; (800e844 <tcp_input+0x7d4>)
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e5da:	69f8      	ldr	r0, [r7, #28]
 800e5dc:	f000 fb0a 	bl	800ebf4 <tcp_process>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e5e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5e8:	f113 0f0d 	cmn.w	r3, #13
 800e5ec:	f000 80d3 	beq.w	800e796 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e5f0:	4b95      	ldr	r3, [pc, #596]	; (800e848 <tcp_input+0x7d8>)
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	f003 0308 	and.w	r3, r3, #8
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d015      	beq.n	800e628 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e602:	2b00      	cmp	r3, #0
 800e604:	d008      	beq.n	800e618 <tcp_input+0x5a8>
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e60c:	69fa      	ldr	r2, [r7, #28]
 800e60e:	6912      	ldr	r2, [r2, #16]
 800e610:	f06f 010d 	mvn.w	r1, #13
 800e614:	4610      	mov	r0, r2
 800e616:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e618:	69f9      	ldr	r1, [r7, #28]
 800e61a:	488c      	ldr	r0, [pc, #560]	; (800e84c <tcp_input+0x7dc>)
 800e61c:	f7ff fbb0 	bl	800dd80 <tcp_pcb_remove>
        tcp_free(pcb);
 800e620:	69f8      	ldr	r0, [r7, #28]
 800e622:	f7fd fed9 	bl	800c3d8 <tcp_free>
 800e626:	e0c1      	b.n	800e7ac <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e628:	2300      	movs	r3, #0
 800e62a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e62c:	4b88      	ldr	r3, [pc, #544]	; (800e850 <tcp_input+0x7e0>)
 800e62e:	881b      	ldrh	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d01d      	beq.n	800e670 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e634:	4b86      	ldr	r3, [pc, #536]	; (800e850 <tcp_input+0x7e0>)
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00a      	beq.n	800e65a <tcp_input+0x5ea>
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e64a:	69fa      	ldr	r2, [r7, #28]
 800e64c:	6910      	ldr	r0, [r2, #16]
 800e64e:	89fa      	ldrh	r2, [r7, #14]
 800e650:	69f9      	ldr	r1, [r7, #28]
 800e652:	4798      	blx	r3
 800e654:	4603      	mov	r3, r0
 800e656:	74fb      	strb	r3, [r7, #19]
 800e658:	e001      	b.n	800e65e <tcp_input+0x5ee>
 800e65a:	2300      	movs	r3, #0
 800e65c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e65e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e662:	f113 0f0d 	cmn.w	r3, #13
 800e666:	f000 8098 	beq.w	800e79a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e66a:	4b79      	ldr	r3, [pc, #484]	; (800e850 <tcp_input+0x7e0>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e670:	69f8      	ldr	r0, [r7, #28]
 800e672:	f000 f905 	bl	800e880 <tcp_input_delayed_close>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f040 8090 	bne.w	800e79e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e67e:	4b75      	ldr	r3, [pc, #468]	; (800e854 <tcp_input+0x7e4>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d041      	beq.n	800e70a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d006      	beq.n	800e69c <tcp_input+0x62c>
 800e68e:	4b72      	ldr	r3, [pc, #456]	; (800e858 <tcp_input+0x7e8>)
 800e690:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e694:	4971      	ldr	r1, [pc, #452]	; (800e85c <tcp_input+0x7ec>)
 800e696:	4872      	ldr	r0, [pc, #456]	; (800e860 <tcp_input+0x7f0>)
 800e698:	f009 f930 	bl	80178fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	8b5b      	ldrh	r3, [r3, #26]
 800e6a0:	f003 0310 	and.w	r3, r3, #16
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d008      	beq.n	800e6ba <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e6a8:	4b6a      	ldr	r3, [pc, #424]	; (800e854 <tcp_input+0x7e4>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fd fbd7 	bl	800be60 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e6b2:	69f8      	ldr	r0, [r7, #28]
 800e6b4:	f7fe f9ca 	bl	800ca4c <tcp_abort>
            goto aborted;
 800e6b8:	e078      	b.n	800e7ac <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00c      	beq.n	800e6de <tcp_input+0x66e>
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	6918      	ldr	r0, [r3, #16]
 800e6ce:	4b61      	ldr	r3, [pc, #388]	; (800e854 <tcp_input+0x7e4>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	69f9      	ldr	r1, [r7, #28]
 800e6d6:	47a0      	blx	r4
 800e6d8:	4603      	mov	r3, r0
 800e6da:	74fb      	strb	r3, [r7, #19]
 800e6dc:	e008      	b.n	800e6f0 <tcp_input+0x680>
 800e6de:	4b5d      	ldr	r3, [pc, #372]	; (800e854 <tcp_input+0x7e4>)
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	69f9      	ldr	r1, [r7, #28]
 800e6e6:	2000      	movs	r0, #0
 800e6e8:	f7ff f884 	bl	800d7f4 <tcp_recv_null>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e6f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6f4:	f113 0f0d 	cmn.w	r3, #13
 800e6f8:	d053      	beq.n	800e7a2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e6fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d003      	beq.n	800e70a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e702:	4b54      	ldr	r3, [pc, #336]	; (800e854 <tcp_input+0x7e4>)
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e70a:	4b4f      	ldr	r3, [pc, #316]	; (800e848 <tcp_input+0x7d8>)
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	f003 0320 	and.w	r3, r3, #32
 800e712:	2b00      	cmp	r3, #0
 800e714:	d030      	beq.n	800e778 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d009      	beq.n	800e732 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e722:	7b5a      	ldrb	r2, [r3, #13]
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e728:	f042 0220 	orr.w	r2, r2, #32
 800e72c:	b2d2      	uxtb	r2, r2
 800e72e:	735a      	strb	r2, [r3, #13]
 800e730:	e022      	b.n	800e778 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e736:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e73a:	d005      	beq.n	800e748 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e740:	3301      	adds	r3, #1
 800e742:	b29a      	uxth	r2, r3
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00b      	beq.n	800e76a <tcp_input+0x6fa>
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	6918      	ldr	r0, [r3, #16]
 800e75c:	2300      	movs	r3, #0
 800e75e:	2200      	movs	r2, #0
 800e760:	69f9      	ldr	r1, [r7, #28]
 800e762:	47a0      	blx	r4
 800e764:	4603      	mov	r3, r0
 800e766:	74fb      	strb	r3, [r7, #19]
 800e768:	e001      	b.n	800e76e <tcp_input+0x6fe>
 800e76a:	2300      	movs	r3, #0
 800e76c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e76e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e772:	f113 0f0d 	cmn.w	r3, #13
 800e776:	d016      	beq.n	800e7a6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e778:	4b32      	ldr	r3, [pc, #200]	; (800e844 <tcp_input+0x7d4>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e77e:	69f8      	ldr	r0, [r7, #28]
 800e780:	f000 f87e 	bl	800e880 <tcp_input_delayed_close>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10f      	bne.n	800e7aa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e78a:	69f8      	ldr	r0, [r7, #28]
 800e78c:	f002 ff10 	bl	80115b0 <tcp_output>
 800e790:	e00c      	b.n	800e7ac <tcp_input+0x73c>
        goto aborted;
 800e792:	bf00      	nop
 800e794:	e00a      	b.n	800e7ac <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e796:	bf00      	nop
 800e798:	e008      	b.n	800e7ac <tcp_input+0x73c>
              goto aborted;
 800e79a:	bf00      	nop
 800e79c:	e006      	b.n	800e7ac <tcp_input+0x73c>
          goto aborted;
 800e79e:	bf00      	nop
 800e7a0:	e004      	b.n	800e7ac <tcp_input+0x73c>
            goto aborted;
 800e7a2:	bf00      	nop
 800e7a4:	e002      	b.n	800e7ac <tcp_input+0x73c>
              goto aborted;
 800e7a6:	bf00      	nop
 800e7a8:	e000      	b.n	800e7ac <tcp_input+0x73c>
          goto aborted;
 800e7aa:	bf00      	nop
    tcp_input_pcb = NULL;
 800e7ac:	4b25      	ldr	r3, [pc, #148]	; (800e844 <tcp_input+0x7d4>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e7b2:	4b28      	ldr	r3, [pc, #160]	; (800e854 <tcp_input+0x7e4>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e7b8:	4b2a      	ldr	r3, [pc, #168]	; (800e864 <tcp_input+0x7f4>)
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d03d      	beq.n	800e83c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800e7c0:	4b28      	ldr	r3, [pc, #160]	; (800e864 <tcp_input+0x7f4>)
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fd fb4b 	bl	800be60 <pbuf_free>
      inseg.p = NULL;
 800e7ca:	4b26      	ldr	r3, [pc, #152]	; (800e864 <tcp_input+0x7f4>)
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e7d0:	e034      	b.n	800e83c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e7d2:	4b25      	ldr	r3, [pc, #148]	; (800e868 <tcp_input+0x7f8>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	899b      	ldrh	r3, [r3, #12]
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fb ff8c 	bl	800a6f8 <lwip_htons>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	f003 0304 	and.w	r3, r3, #4
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d118      	bne.n	800e81e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ec:	4b1f      	ldr	r3, [pc, #124]	; (800e86c <tcp_input+0x7fc>)
 800e7ee:	6819      	ldr	r1, [r3, #0]
 800e7f0:	4b1f      	ldr	r3, [pc, #124]	; (800e870 <tcp_input+0x800>)
 800e7f2:	881b      	ldrh	r3, [r3, #0]
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	4b1f      	ldr	r3, [pc, #124]	; (800e874 <tcp_input+0x804>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7fc:	4b1a      	ldr	r3, [pc, #104]	; (800e868 <tcp_input+0x7f8>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e800:	885b      	ldrh	r3, [r3, #2]
 800e802:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e804:	4a18      	ldr	r2, [pc, #96]	; (800e868 <tcp_input+0x7f8>)
 800e806:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e808:	8812      	ldrh	r2, [r2, #0]
 800e80a:	b292      	uxth	r2, r2
 800e80c:	9202      	str	r2, [sp, #8]
 800e80e:	9301      	str	r3, [sp, #4]
 800e810:	4b19      	ldr	r3, [pc, #100]	; (800e878 <tcp_input+0x808>)
 800e812:	9300      	str	r3, [sp, #0]
 800e814:	4b19      	ldr	r3, [pc, #100]	; (800e87c <tcp_input+0x80c>)
 800e816:	4602      	mov	r2, r0
 800e818:	2000      	movs	r0, #0
 800e81a:	f003 fc8d 	bl	8012138 <tcp_rst>
    pbuf_free(p);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f7fd fb1e 	bl	800be60 <pbuf_free>
  return;
 800e824:	e00a      	b.n	800e83c <tcp_input+0x7cc>
    goto dropped;
 800e826:	bf00      	nop
 800e828:	e004      	b.n	800e834 <tcp_input+0x7c4>
dropped:
 800e82a:	bf00      	nop
 800e82c:	e002      	b.n	800e834 <tcp_input+0x7c4>
      goto dropped;
 800e82e:	bf00      	nop
 800e830:	e000      	b.n	800e834 <tcp_input+0x7c4>
      goto dropped;
 800e832:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7fd fb13 	bl	800be60 <pbuf_free>
 800e83a:	e000      	b.n	800e83e <tcp_input+0x7ce>
  return;
 800e83c:	bf00      	nop
}
 800e83e:	3724      	adds	r7, #36	; 0x24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd90      	pop	{r4, r7, pc}
 800e844:	2000f4f0 	.word	0x2000f4f0
 800e848:	2000867d 	.word	0x2000867d
 800e84c:	2000f4dc 	.word	0x2000f4dc
 800e850:	20008678 	.word	0x20008678
 800e854:	20008680 	.word	0x20008680
 800e858:	0801aab8 	.word	0x0801aab8
 800e85c:	0801ac6c 	.word	0x0801ac6c
 800e860:	0801ab04 	.word	0x0801ab04
 800e864:	20008650 	.word	0x20008650
 800e868:	20008660 	.word	0x20008660
 800e86c:	20008674 	.word	0x20008674
 800e870:	2000867a 	.word	0x2000867a
 800e874:	20008670 	.word	0x20008670
 800e878:	2000bdb8 	.word	0x2000bdb8
 800e87c:	2000bdbc 	.word	0x2000bdbc

0800e880 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d106      	bne.n	800e89c <tcp_input_delayed_close+0x1c>
 800e88e:	4b17      	ldr	r3, [pc, #92]	; (800e8ec <tcp_input_delayed_close+0x6c>)
 800e890:	f240 225a 	movw	r2, #602	; 0x25a
 800e894:	4916      	ldr	r1, [pc, #88]	; (800e8f0 <tcp_input_delayed_close+0x70>)
 800e896:	4817      	ldr	r0, [pc, #92]	; (800e8f4 <tcp_input_delayed_close+0x74>)
 800e898:	f009 f830 	bl	80178fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e89c:	4b16      	ldr	r3, [pc, #88]	; (800e8f8 <tcp_input_delayed_close+0x78>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f003 0310 	and.w	r3, r3, #16
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d01c      	beq.n	800e8e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	8b5b      	ldrh	r3, [r3, #26]
 800e8ac:	f003 0310 	and.w	r3, r3, #16
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10d      	bne.n	800e8d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d008      	beq.n	800e8d0 <tcp_input_delayed_close+0x50>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	6912      	ldr	r2, [r2, #16]
 800e8c8:	f06f 010e 	mvn.w	r1, #14
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e8d0:	6879      	ldr	r1, [r7, #4]
 800e8d2:	480a      	ldr	r0, [pc, #40]	; (800e8fc <tcp_input_delayed_close+0x7c>)
 800e8d4:	f7ff fa54 	bl	800dd80 <tcp_pcb_remove>
    tcp_free(pcb);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7fd fd7d 	bl	800c3d8 <tcp_free>
    return 1;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e000      	b.n	800e8e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e8e2:	2300      	movs	r3, #0
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	0801aab8 	.word	0x0801aab8
 800e8f0:	0801ac88 	.word	0x0801ac88
 800e8f4:	0801ab04 	.word	0x0801ab04
 800e8f8:	2000867d 	.word	0x2000867d
 800e8fc:	2000f4dc 	.word	0x2000f4dc

0800e900 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e900:	b590      	push	{r4, r7, lr}
 800e902:	b08b      	sub	sp, #44	; 0x2c
 800e904:	af04      	add	r7, sp, #16
 800e906:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e908:	4b6f      	ldr	r3, [pc, #444]	; (800eac8 <tcp_listen_input+0x1c8>)
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	f040 80d3 	bne.w	800eabc <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d106      	bne.n	800e92a <tcp_listen_input+0x2a>
 800e91c:	4b6b      	ldr	r3, [pc, #428]	; (800eacc <tcp_listen_input+0x1cc>)
 800e91e:	f240 2281 	movw	r2, #641	; 0x281
 800e922:	496b      	ldr	r1, [pc, #428]	; (800ead0 <tcp_listen_input+0x1d0>)
 800e924:	486b      	ldr	r0, [pc, #428]	; (800ead4 <tcp_listen_input+0x1d4>)
 800e926:	f008 ffe9 	bl	80178fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e92a:	4b67      	ldr	r3, [pc, #412]	; (800eac8 <tcp_listen_input+0x1c8>)
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	f003 0310 	and.w	r3, r3, #16
 800e932:	2b00      	cmp	r3, #0
 800e934:	d019      	beq.n	800e96a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e936:	4b68      	ldr	r3, [pc, #416]	; (800ead8 <tcp_listen_input+0x1d8>)
 800e938:	6819      	ldr	r1, [r3, #0]
 800e93a:	4b68      	ldr	r3, [pc, #416]	; (800eadc <tcp_listen_input+0x1dc>)
 800e93c:	881b      	ldrh	r3, [r3, #0]
 800e93e:	461a      	mov	r2, r3
 800e940:	4b67      	ldr	r3, [pc, #412]	; (800eae0 <tcp_listen_input+0x1e0>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e946:	4b67      	ldr	r3, [pc, #412]	; (800eae4 <tcp_listen_input+0x1e4>)
 800e948:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e94a:	885b      	ldrh	r3, [r3, #2]
 800e94c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e94e:	4a65      	ldr	r2, [pc, #404]	; (800eae4 <tcp_listen_input+0x1e4>)
 800e950:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e952:	8812      	ldrh	r2, [r2, #0]
 800e954:	b292      	uxth	r2, r2
 800e956:	9202      	str	r2, [sp, #8]
 800e958:	9301      	str	r3, [sp, #4]
 800e95a:	4b63      	ldr	r3, [pc, #396]	; (800eae8 <tcp_listen_input+0x1e8>)
 800e95c:	9300      	str	r3, [sp, #0]
 800e95e:	4b63      	ldr	r3, [pc, #396]	; (800eaec <tcp_listen_input+0x1ec>)
 800e960:	4602      	mov	r2, r0
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f003 fbe8 	bl	8012138 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e968:	e0aa      	b.n	800eac0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800e96a:	4b57      	ldr	r3, [pc, #348]	; (800eac8 <tcp_listen_input+0x1c8>)
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	f003 0302 	and.w	r3, r3, #2
 800e972:	2b00      	cmp	r3, #0
 800e974:	f000 80a4 	beq.w	800eac0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	7d5b      	ldrb	r3, [r3, #21]
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7ff f85d 	bl	800da3c <tcp_alloc>
 800e982:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d111      	bne.n	800e9ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	699b      	ldr	r3, [r3, #24]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00a      	beq.n	800e9a8 <tcp_listen_input+0xa8>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	6910      	ldr	r0, [r2, #16]
 800e99a:	f04f 32ff 	mov.w	r2, #4294967295
 800e99e:	2100      	movs	r1, #0
 800e9a0:	4798      	blx	r3
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	73bb      	strb	r3, [r7, #14]
      return;
 800e9a6:	e08c      	b.n	800eac2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9a8:	23f0      	movs	r3, #240	; 0xf0
 800e9aa:	73bb      	strb	r3, [r7, #14]
      return;
 800e9ac:	e089      	b.n	800eac2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e9ae:	4b50      	ldr	r3, [pc, #320]	; (800eaf0 <tcp_listen_input+0x1f0>)
 800e9b0:	695a      	ldr	r2, [r3, #20]
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e9b6:	4b4e      	ldr	r3, [pc, #312]	; (800eaf0 <tcp_listen_input+0x1f0>)
 800e9b8:	691a      	ldr	r2, [r3, #16]
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	8ada      	ldrh	r2, [r3, #22]
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e9c6:	4b47      	ldr	r3, [pc, #284]	; (800eae4 <tcp_listen_input+0x1e4>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	881b      	ldrh	r3, [r3, #0]
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2203      	movs	r2, #3
 800e9d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e9d8:	4b41      	ldr	r3, [pc, #260]	; (800eae0 <tcp_listen_input+0x1e0>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	1c5a      	adds	r2, r3, #1
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e9ea:	6978      	ldr	r0, [r7, #20]
 800e9ec:	f7ff fa5c 	bl	800dea8 <tcp_next_iss>
 800e9f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	693a      	ldr	r2, [r7, #16]
 800e9fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	693a      	ldr	r2, [r7, #16]
 800ea02:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ea0a:	4b35      	ldr	r3, [pc, #212]	; (800eae0 <tcp_listen_input+0x1e0>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	1e5a      	subs	r2, r3, #1
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	691a      	ldr	r2, [r3, #16]
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	7a5b      	ldrb	r3, [r3, #9]
 800ea26:	f003 030c 	and.w	r3, r3, #12
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	7a1a      	ldrb	r2, [r3, #8]
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ea38:	4b2e      	ldr	r3, [pc, #184]	; (800eaf4 <tcp_listen_input+0x1f4>)
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	60da      	str	r2, [r3, #12]
 800ea40:	4a2c      	ldr	r2, [pc, #176]	; (800eaf4 <tcp_listen_input+0x1f4>)
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	6013      	str	r3, [r2, #0]
 800ea46:	f003 fd39 	bl	80124bc <tcp_timer_needed>
 800ea4a:	4b2b      	ldr	r3, [pc, #172]	; (800eaf8 <tcp_listen_input+0x1f8>)
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ea50:	6978      	ldr	r0, [r7, #20]
 800ea52:	f001 fd8f 	bl	8010574 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ea56:	4b23      	ldr	r3, [pc, #140]	; (800eae4 <tcp_listen_input+0x1e4>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	89db      	ldrh	r3, [r3, #14]
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f007 fadf 	bl	801603c <ip4_route>
 800ea7e:	4601      	mov	r1, r0
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	3304      	adds	r3, #4
 800ea84:	461a      	mov	r2, r3
 800ea86:	4620      	mov	r0, r4
 800ea88:	f7ff fa34 	bl	800def4 <tcp_eff_send_mss_netif>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	461a      	mov	r2, r3
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ea94:	2112      	movs	r1, #18
 800ea96:	6978      	ldr	r0, [r7, #20]
 800ea98:	f002 fc9c 	bl	80113d4 <tcp_enqueue_flags>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800eaa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d004      	beq.n	800eab2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	6978      	ldr	r0, [r7, #20]
 800eaac:	f7fd ff10 	bl	800c8d0 <tcp_abandon>
      return;
 800eab0:	e007      	b.n	800eac2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800eab2:	6978      	ldr	r0, [r7, #20]
 800eab4:	f002 fd7c 	bl	80115b0 <tcp_output>
  return;
 800eab8:	bf00      	nop
 800eaba:	e001      	b.n	800eac0 <tcp_listen_input+0x1c0>
    return;
 800eabc:	bf00      	nop
 800eabe:	e000      	b.n	800eac2 <tcp_listen_input+0x1c2>
  return;
 800eac0:	bf00      	nop
}
 800eac2:	371c      	adds	r7, #28
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd90      	pop	{r4, r7, pc}
 800eac8:	2000867c 	.word	0x2000867c
 800eacc:	0801aab8 	.word	0x0801aab8
 800ead0:	0801acb0 	.word	0x0801acb0
 800ead4:	0801ab04 	.word	0x0801ab04
 800ead8:	20008674 	.word	0x20008674
 800eadc:	2000867a 	.word	0x2000867a
 800eae0:	20008670 	.word	0x20008670
 800eae4:	20008660 	.word	0x20008660
 800eae8:	2000bdb8 	.word	0x2000bdb8
 800eaec:	2000bdbc 	.word	0x2000bdbc
 800eaf0:	2000bda8 	.word	0x2000bda8
 800eaf4:	2000f4dc 	.word	0x2000f4dc
 800eaf8:	2000f4d8 	.word	0x2000f4d8

0800eafc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b086      	sub	sp, #24
 800eb00:	af04      	add	r7, sp, #16
 800eb02:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800eb04:	4b30      	ldr	r3, [pc, #192]	; (800ebc8 <tcp_timewait_input+0xcc>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f003 0304 	and.w	r3, r3, #4
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d154      	bne.n	800ebba <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d106      	bne.n	800eb24 <tcp_timewait_input+0x28>
 800eb16:	4b2d      	ldr	r3, [pc, #180]	; (800ebcc <tcp_timewait_input+0xd0>)
 800eb18:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eb1c:	492c      	ldr	r1, [pc, #176]	; (800ebd0 <tcp_timewait_input+0xd4>)
 800eb1e:	482d      	ldr	r0, [pc, #180]	; (800ebd4 <tcp_timewait_input+0xd8>)
 800eb20:	f008 feec 	bl	80178fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eb24:	4b28      	ldr	r3, [pc, #160]	; (800ebc8 <tcp_timewait_input+0xcc>)
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	f003 0302 	and.w	r3, r3, #2
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d02a      	beq.n	800eb86 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eb30:	4b29      	ldr	r3, [pc, #164]	; (800ebd8 <tcp_timewait_input+0xdc>)
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	db2d      	blt.n	800eb9a <tcp_timewait_input+0x9e>
 800eb3e:	4b26      	ldr	r3, [pc, #152]	; (800ebd8 <tcp_timewait_input+0xdc>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb46:	6879      	ldr	r1, [r7, #4]
 800eb48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb4a:	440b      	add	r3, r1
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	dc23      	bgt.n	800eb9a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb52:	4b22      	ldr	r3, [pc, #136]	; (800ebdc <tcp_timewait_input+0xe0>)
 800eb54:	6819      	ldr	r1, [r3, #0]
 800eb56:	4b22      	ldr	r3, [pc, #136]	; (800ebe0 <tcp_timewait_input+0xe4>)
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	4b1e      	ldr	r3, [pc, #120]	; (800ebd8 <tcp_timewait_input+0xdc>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb62:	4b20      	ldr	r3, [pc, #128]	; (800ebe4 <tcp_timewait_input+0xe8>)
 800eb64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb66:	885b      	ldrh	r3, [r3, #2]
 800eb68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb6a:	4a1e      	ldr	r2, [pc, #120]	; (800ebe4 <tcp_timewait_input+0xe8>)
 800eb6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb6e:	8812      	ldrh	r2, [r2, #0]
 800eb70:	b292      	uxth	r2, r2
 800eb72:	9202      	str	r2, [sp, #8]
 800eb74:	9301      	str	r3, [sp, #4]
 800eb76:	4b1c      	ldr	r3, [pc, #112]	; (800ebe8 <tcp_timewait_input+0xec>)
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	4b1c      	ldr	r3, [pc, #112]	; (800ebec <tcp_timewait_input+0xf0>)
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f003 fada 	bl	8012138 <tcp_rst>
      return;
 800eb84:	e01c      	b.n	800ebc0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800eb86:	4b10      	ldr	r3, [pc, #64]	; (800ebc8 <tcp_timewait_input+0xcc>)
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	f003 0301 	and.w	r3, r3, #1
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d003      	beq.n	800eb9a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800eb92:	4b17      	ldr	r3, [pc, #92]	; (800ebf0 <tcp_timewait_input+0xf4>)
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800eb9a:	4b11      	ldr	r3, [pc, #68]	; (800ebe0 <tcp_timewait_input+0xe4>)
 800eb9c:	881b      	ldrh	r3, [r3, #0]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d00d      	beq.n	800ebbe <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	8b5b      	ldrh	r3, [r3, #26]
 800eba6:	f043 0302 	orr.w	r3, r3, #2
 800ebaa:	b29a      	uxth	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f002 fcfd 	bl	80115b0 <tcp_output>
  }
  return;
 800ebb6:	bf00      	nop
 800ebb8:	e001      	b.n	800ebbe <tcp_timewait_input+0xc2>
    return;
 800ebba:	bf00      	nop
 800ebbc:	e000      	b.n	800ebc0 <tcp_timewait_input+0xc4>
  return;
 800ebbe:	bf00      	nop
}
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	2000867c 	.word	0x2000867c
 800ebcc:	0801aab8 	.word	0x0801aab8
 800ebd0:	0801acd0 	.word	0x0801acd0
 800ebd4:	0801ab04 	.word	0x0801ab04
 800ebd8:	20008670 	.word	0x20008670
 800ebdc:	20008674 	.word	0x20008674
 800ebe0:	2000867a 	.word	0x2000867a
 800ebe4:	20008660 	.word	0x20008660
 800ebe8:	2000bdb8 	.word	0x2000bdb8
 800ebec:	2000bdbc 	.word	0x2000bdbc
 800ebf0:	2000f4e0 	.word	0x2000f4e0

0800ebf4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ebf4:	b590      	push	{r4, r7, lr}
 800ebf6:	b08d      	sub	sp, #52	; 0x34
 800ebf8:	af04      	add	r7, sp, #16
 800ebfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d106      	bne.n	800ec18 <tcp_process+0x24>
 800ec0a:	4ba5      	ldr	r3, [pc, #660]	; (800eea0 <tcp_process+0x2ac>)
 800ec0c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ec10:	49a4      	ldr	r1, [pc, #656]	; (800eea4 <tcp_process+0x2b0>)
 800ec12:	48a5      	ldr	r0, [pc, #660]	; (800eea8 <tcp_process+0x2b4>)
 800ec14:	f008 fe72 	bl	80178fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ec18:	4ba4      	ldr	r3, [pc, #656]	; (800eeac <tcp_process+0x2b8>)
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d04e      	beq.n	800ecc2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	7d1b      	ldrb	r3, [r3, #20]
 800ec28:	2b02      	cmp	r3, #2
 800ec2a:	d108      	bne.n	800ec3e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec30:	4b9f      	ldr	r3, [pc, #636]	; (800eeb0 <tcp_process+0x2bc>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d123      	bne.n	800ec80 <tcp_process+0x8c>
        acceptable = 1;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	76fb      	strb	r3, [r7, #27]
 800ec3c:	e020      	b.n	800ec80 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec42:	4b9c      	ldr	r3, [pc, #624]	; (800eeb4 <tcp_process+0x2c0>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d102      	bne.n	800ec50 <tcp_process+0x5c>
        acceptable = 1;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	76fb      	strb	r3, [r7, #27]
 800ec4e:	e017      	b.n	800ec80 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec50:	4b98      	ldr	r3, [pc, #608]	; (800eeb4 <tcp_process+0x2c0>)
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	db10      	blt.n	800ec80 <tcp_process+0x8c>
 800ec5e:	4b95      	ldr	r3, [pc, #596]	; (800eeb4 <tcp_process+0x2c0>)
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec66:	6879      	ldr	r1, [r7, #4]
 800ec68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec6a:	440b      	add	r3, r1
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	dc06      	bgt.n	800ec80 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	8b5b      	ldrh	r3, [r3, #26]
 800ec76:	f043 0302 	orr.w	r3, r3, #2
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ec80:	7efb      	ldrb	r3, [r7, #27]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d01b      	beq.n	800ecbe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	7d1b      	ldrb	r3, [r3, #20]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d106      	bne.n	800ec9c <tcp_process+0xa8>
 800ec8e:	4b84      	ldr	r3, [pc, #528]	; (800eea0 <tcp_process+0x2ac>)
 800ec90:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ec94:	4988      	ldr	r1, [pc, #544]	; (800eeb8 <tcp_process+0x2c4>)
 800ec96:	4884      	ldr	r0, [pc, #528]	; (800eea8 <tcp_process+0x2b4>)
 800ec98:	f008 fe30 	bl	80178fc <iprintf>
      recv_flags |= TF_RESET;
 800ec9c:	4b87      	ldr	r3, [pc, #540]	; (800eebc <tcp_process+0x2c8>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	f043 0308 	orr.w	r3, r3, #8
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	4b85      	ldr	r3, [pc, #532]	; (800eebc <tcp_process+0x2c8>)
 800eca8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	8b5b      	ldrh	r3, [r3, #26]
 800ecae:	f023 0301 	bic.w	r3, r3, #1
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ecb8:	f06f 030d 	mvn.w	r3, #13
 800ecbc:	e37a      	b.n	800f3b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	e378      	b.n	800f3b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ecc2:	4b7a      	ldr	r3, [pc, #488]	; (800eeac <tcp_process+0x2b8>)
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	f003 0302 	and.w	r3, r3, #2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d010      	beq.n	800ecf0 <tcp_process+0xfc>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	7d1b      	ldrb	r3, [r3, #20]
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d00c      	beq.n	800ecf0 <tcp_process+0xfc>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	7d1b      	ldrb	r3, [r3, #20]
 800ecda:	2b03      	cmp	r3, #3
 800ecdc:	d008      	beq.n	800ecf0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	8b5b      	ldrh	r3, [r3, #26]
 800ece2:	f043 0302 	orr.w	r3, r3, #2
 800ece6:	b29a      	uxth	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ecec:	2300      	movs	r3, #0
 800ecee:	e361      	b.n	800f3b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	8b5b      	ldrh	r3, [r3, #26]
 800ecf4:	f003 0310 	and.w	r3, r3, #16
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d103      	bne.n	800ed04 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ecfc:	4b70      	ldr	r3, [pc, #448]	; (800eec0 <tcp_process+0x2cc>)
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f001 fc2d 	bl	8010574 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	7d1b      	ldrb	r3, [r3, #20]
 800ed1e:	3b02      	subs	r3, #2
 800ed20:	2b07      	cmp	r3, #7
 800ed22:	f200 8337 	bhi.w	800f394 <tcp_process+0x7a0>
 800ed26:	a201      	add	r2, pc, #4	; (adr r2, 800ed2c <tcp_process+0x138>)
 800ed28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed2c:	0800ed4d 	.word	0x0800ed4d
 800ed30:	0800ef7d 	.word	0x0800ef7d
 800ed34:	0800f0f5 	.word	0x0800f0f5
 800ed38:	0800f11f 	.word	0x0800f11f
 800ed3c:	0800f243 	.word	0x0800f243
 800ed40:	0800f0f5 	.word	0x0800f0f5
 800ed44:	0800f2cf 	.word	0x0800f2cf
 800ed48:	0800f35f 	.word	0x0800f35f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ed4c:	4b57      	ldr	r3, [pc, #348]	; (800eeac <tcp_process+0x2b8>)
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	f003 0310 	and.w	r3, r3, #16
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f000 80e4 	beq.w	800ef22 <tcp_process+0x32e>
 800ed5a:	4b54      	ldr	r3, [pc, #336]	; (800eeac <tcp_process+0x2b8>)
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	f003 0302 	and.w	r3, r3, #2
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 80dd 	beq.w	800ef22 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed6c:	1c5a      	adds	r2, r3, #1
 800ed6e:	4b50      	ldr	r3, [pc, #320]	; (800eeb0 <tcp_process+0x2bc>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	f040 80d5 	bne.w	800ef22 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ed78:	4b4e      	ldr	r3, [pc, #312]	; (800eeb4 <tcp_process+0x2c0>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	1c5a      	adds	r2, r3, #1
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ed8a:	4b49      	ldr	r3, [pc, #292]	; (800eeb0 <tcp_process+0x2bc>)
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ed92:	4b4c      	ldr	r3, [pc, #304]	; (800eec4 <tcp_process+0x2d0>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	89db      	ldrh	r3, [r3, #14]
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800edac:	4b41      	ldr	r3, [pc, #260]	; (800eeb4 <tcp_process+0x2c0>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	1e5a      	subs	r2, r3, #1
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2204      	movs	r2, #4
 800edba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4618      	mov	r0, r3
 800edc6:	f007 f939 	bl	801603c <ip4_route>
 800edca:	4601      	mov	r1, r0
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3304      	adds	r3, #4
 800edd0:	461a      	mov	r2, r3
 800edd2:	4620      	mov	r0, r4
 800edd4:	f7ff f88e 	bl	800def4 <tcp_eff_send_mss_netif>
 800edd8:	4603      	mov	r3, r0
 800edda:	461a      	mov	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ede4:	009a      	lsls	r2, r3, #2
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	f241 111c 	movw	r1, #4380	; 0x111c
 800edf0:	428b      	cmp	r3, r1
 800edf2:	bf38      	it	cc
 800edf4:	460b      	movcc	r3, r1
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d204      	bcs.n	800ee04 <tcp_process+0x210>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	e00d      	b.n	800ee20 <tcp_process+0x22c>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d904      	bls.n	800ee1c <tcp_process+0x228>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	e001      	b.n	800ee20 <tcp_process+0x22c>
 800ee1c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d106      	bne.n	800ee3e <tcp_process+0x24a>
 800ee30:	4b1b      	ldr	r3, [pc, #108]	; (800eea0 <tcp_process+0x2ac>)
 800ee32:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ee36:	4924      	ldr	r1, [pc, #144]	; (800eec8 <tcp_process+0x2d4>)
 800ee38:	481b      	ldr	r0, [pc, #108]	; (800eea8 <tcp_process+0x2b4>)
 800ee3a:	f008 fd5f 	bl	80178fc <iprintf>
        --pcb->snd_queuelen;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee44:	3b01      	subs	r3, #1
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee52:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d111      	bne.n	800ee7e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee5e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d106      	bne.n	800ee74 <tcp_process+0x280>
 800ee66:	4b0e      	ldr	r3, [pc, #56]	; (800eea0 <tcp_process+0x2ac>)
 800ee68:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ee6c:	4917      	ldr	r1, [pc, #92]	; (800eecc <tcp_process+0x2d8>)
 800ee6e:	480e      	ldr	r0, [pc, #56]	; (800eea8 <tcp_process+0x2b4>)
 800ee70:	f008 fd44 	bl	80178fc <iprintf>
          pcb->unsent = rseg->next;
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ee7c:	e003      	b.n	800ee86 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ee86:	69f8      	ldr	r0, [r7, #28]
 800ee88:	f7fe fc70 	bl	800d76c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d11d      	bne.n	800eed0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee9a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ee9c:	e01f      	b.n	800eede <tcp_process+0x2ea>
 800ee9e:	bf00      	nop
 800eea0:	0801aab8 	.word	0x0801aab8
 800eea4:	0801acf0 	.word	0x0801acf0
 800eea8:	0801ab04 	.word	0x0801ab04
 800eeac:	2000867c 	.word	0x2000867c
 800eeb0:	20008674 	.word	0x20008674
 800eeb4:	20008670 	.word	0x20008670
 800eeb8:	0801ad0c 	.word	0x0801ad0c
 800eebc:	2000867d 	.word	0x2000867d
 800eec0:	2000f4e0 	.word	0x2000f4e0
 800eec4:	20008660 	.word	0x20008660
 800eec8:	0801ad2c 	.word	0x0801ad2c
 800eecc:	0801ad44 	.word	0x0801ad44
        } else {
          pcb->rtime = 0;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d00a      	beq.n	800eefe <tcp_process+0x30a>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6910      	ldr	r0, [r2, #16]
 800eef2:	2200      	movs	r2, #0
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	4798      	blx	r3
 800eef8:	4603      	mov	r3, r0
 800eefa:	76bb      	strb	r3, [r7, #26]
 800eefc:	e001      	b.n	800ef02 <tcp_process+0x30e>
 800eefe:	2300      	movs	r3, #0
 800ef00:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ef02:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef06:	f113 0f0d 	cmn.w	r3, #13
 800ef0a:	d102      	bne.n	800ef12 <tcp_process+0x31e>
          return ERR_ABRT;
 800ef0c:	f06f 030c 	mvn.w	r3, #12
 800ef10:	e250      	b.n	800f3b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	8b5b      	ldrh	r3, [r3, #26]
 800ef16:	f043 0302 	orr.w	r3, r3, #2
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ef20:	e23a      	b.n	800f398 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ef22:	4b9d      	ldr	r3, [pc, #628]	; (800f198 <tcp_process+0x5a4>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	f003 0310 	and.w	r3, r3, #16
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f000 8234 	beq.w	800f398 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef30:	4b9a      	ldr	r3, [pc, #616]	; (800f19c <tcp_process+0x5a8>)
 800ef32:	6819      	ldr	r1, [r3, #0]
 800ef34:	4b9a      	ldr	r3, [pc, #616]	; (800f1a0 <tcp_process+0x5ac>)
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	4b9a      	ldr	r3, [pc, #616]	; (800f1a4 <tcp_process+0x5b0>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef40:	4b99      	ldr	r3, [pc, #612]	; (800f1a8 <tcp_process+0x5b4>)
 800ef42:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef44:	885b      	ldrh	r3, [r3, #2]
 800ef46:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef48:	4a97      	ldr	r2, [pc, #604]	; (800f1a8 <tcp_process+0x5b4>)
 800ef4a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef4c:	8812      	ldrh	r2, [r2, #0]
 800ef4e:	b292      	uxth	r2, r2
 800ef50:	9202      	str	r2, [sp, #8]
 800ef52:	9301      	str	r3, [sp, #4]
 800ef54:	4b95      	ldr	r3, [pc, #596]	; (800f1ac <tcp_process+0x5b8>)
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	4b95      	ldr	r3, [pc, #596]	; (800f1b0 <tcp_process+0x5bc>)
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f003 f8eb 	bl	8012138 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef68:	2b05      	cmp	r3, #5
 800ef6a:	f200 8215 	bhi.w	800f398 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f002 feab 	bl	8011cd0 <tcp_rexmit_rto>
      break;
 800ef7a:	e20d      	b.n	800f398 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ef7c:	4b86      	ldr	r3, [pc, #536]	; (800f198 <tcp_process+0x5a4>)
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	f003 0310 	and.w	r3, r3, #16
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f000 80a1 	beq.w	800f0cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ef8a:	4b84      	ldr	r3, [pc, #528]	; (800f19c <tcp_process+0x5a8>)
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	3b01      	subs	r3, #1
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	db7e      	blt.n	800f098 <tcp_process+0x4a4>
 800ef9a:	4b80      	ldr	r3, [pc, #512]	; (800f19c <tcp_process+0x5a8>)
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	dc77      	bgt.n	800f098 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2204      	movs	r2, #4
 800efac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d102      	bne.n	800efbc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800efb6:	23fa      	movs	r3, #250	; 0xfa
 800efb8:	76bb      	strb	r3, [r7, #26]
 800efba:	e01d      	b.n	800eff8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efc0:	699b      	ldr	r3, [r3, #24]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d106      	bne.n	800efd4 <tcp_process+0x3e0>
 800efc6:	4b7b      	ldr	r3, [pc, #492]	; (800f1b4 <tcp_process+0x5c0>)
 800efc8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800efcc:	497a      	ldr	r1, [pc, #488]	; (800f1b8 <tcp_process+0x5c4>)
 800efce:	487b      	ldr	r0, [pc, #492]	; (800f1bc <tcp_process+0x5c8>)
 800efd0:	f008 fc94 	bl	80178fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efd8:	699b      	ldr	r3, [r3, #24]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00a      	beq.n	800eff4 <tcp_process+0x400>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efe2:	699b      	ldr	r3, [r3, #24]
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	6910      	ldr	r0, [r2, #16]
 800efe8:	2200      	movs	r2, #0
 800efea:	6879      	ldr	r1, [r7, #4]
 800efec:	4798      	blx	r3
 800efee:	4603      	mov	r3, r0
 800eff0:	76bb      	strb	r3, [r7, #26]
 800eff2:	e001      	b.n	800eff8 <tcp_process+0x404>
 800eff4:	23f0      	movs	r3, #240	; 0xf0
 800eff6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800eff8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00a      	beq.n	800f016 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f000:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f004:	f113 0f0d 	cmn.w	r3, #13
 800f008:	d002      	beq.n	800f010 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7fd fd1e 	bl	800ca4c <tcp_abort>
            }
            return ERR_ABRT;
 800f010:	f06f 030c 	mvn.w	r3, #12
 800f014:	e1ce      	b.n	800f3b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 fae0 	bl	800f5dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f01c:	4b68      	ldr	r3, [pc, #416]	; (800f1c0 <tcp_process+0x5cc>)
 800f01e:	881b      	ldrh	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d005      	beq.n	800f030 <tcp_process+0x43c>
            recv_acked--;
 800f024:	4b66      	ldr	r3, [pc, #408]	; (800f1c0 <tcp_process+0x5cc>)
 800f026:	881b      	ldrh	r3, [r3, #0]
 800f028:	3b01      	subs	r3, #1
 800f02a:	b29a      	uxth	r2, r3
 800f02c:	4b64      	ldr	r3, [pc, #400]	; (800f1c0 <tcp_process+0x5cc>)
 800f02e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f034:	009a      	lsls	r2, r3, #2
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f040:	428b      	cmp	r3, r1
 800f042:	bf38      	it	cc
 800f044:	460b      	movcc	r3, r1
 800f046:	429a      	cmp	r2, r3
 800f048:	d204      	bcs.n	800f054 <tcp_process+0x460>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	b29b      	uxth	r3, r3
 800f052:	e00d      	b.n	800f070 <tcp_process+0x47c>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f05e:	4293      	cmp	r3, r2
 800f060:	d904      	bls.n	800f06c <tcp_process+0x478>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	b29b      	uxth	r3, r3
 800f06a:	e001      	b.n	800f070 <tcp_process+0x47c>
 800f06c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f076:	4b53      	ldr	r3, [pc, #332]	; (800f1c4 <tcp_process+0x5d0>)
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	f003 0320 	and.w	r3, r3, #32
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d037      	beq.n	800f0f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	8b5b      	ldrh	r3, [r3, #26]
 800f086:	f043 0302 	orr.w	r3, r3, #2
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2207      	movs	r2, #7
 800f094:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f096:	e02c      	b.n	800f0f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f098:	4b40      	ldr	r3, [pc, #256]	; (800f19c <tcp_process+0x5a8>)
 800f09a:	6819      	ldr	r1, [r3, #0]
 800f09c:	4b40      	ldr	r3, [pc, #256]	; (800f1a0 <tcp_process+0x5ac>)
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	4b40      	ldr	r3, [pc, #256]	; (800f1a4 <tcp_process+0x5b0>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0a8:	4b3f      	ldr	r3, [pc, #252]	; (800f1a8 <tcp_process+0x5b4>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0ac:	885b      	ldrh	r3, [r3, #2]
 800f0ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0b0:	4a3d      	ldr	r2, [pc, #244]	; (800f1a8 <tcp_process+0x5b4>)
 800f0b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0b4:	8812      	ldrh	r2, [r2, #0]
 800f0b6:	b292      	uxth	r2, r2
 800f0b8:	9202      	str	r2, [sp, #8]
 800f0ba:	9301      	str	r3, [sp, #4]
 800f0bc:	4b3b      	ldr	r3, [pc, #236]	; (800f1ac <tcp_process+0x5b8>)
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	4b3b      	ldr	r3, [pc, #236]	; (800f1b0 <tcp_process+0x5bc>)
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f003 f837 	bl	8012138 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f0ca:	e167      	b.n	800f39c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f0cc:	4b32      	ldr	r3, [pc, #200]	; (800f198 <tcp_process+0x5a4>)
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	f003 0302 	and.w	r3, r3, #2
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f000 8161 	beq.w	800f39c <tcp_process+0x7a8>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0de:	1e5a      	subs	r2, r3, #1
 800f0e0:	4b30      	ldr	r3, [pc, #192]	; (800f1a4 <tcp_process+0x5b0>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	f040 8159 	bne.w	800f39c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f002 fe12 	bl	8011d14 <tcp_rexmit>
      break;
 800f0f0:	e154      	b.n	800f39c <tcp_process+0x7a8>
 800f0f2:	e153      	b.n	800f39c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 fa71 	bl	800f5dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f0fa:	4b32      	ldr	r3, [pc, #200]	; (800f1c4 <tcp_process+0x5d0>)
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	f003 0320 	and.w	r3, r3, #32
 800f102:	2b00      	cmp	r3, #0
 800f104:	f000 814c 	beq.w	800f3a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	8b5b      	ldrh	r3, [r3, #26]
 800f10c:	f043 0302 	orr.w	r3, r3, #2
 800f110:	b29a      	uxth	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2207      	movs	r2, #7
 800f11a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f11c:	e140      	b.n	800f3a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 fa5c 	bl	800f5dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f124:	4b27      	ldr	r3, [pc, #156]	; (800f1c4 <tcp_process+0x5d0>)
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	f003 0320 	and.w	r3, r3, #32
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d071      	beq.n	800f214 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f130:	4b19      	ldr	r3, [pc, #100]	; (800f198 <tcp_process+0x5a4>)
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	f003 0310 	and.w	r3, r3, #16
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d060      	beq.n	800f1fe <tcp_process+0x60a>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f140:	4b16      	ldr	r3, [pc, #88]	; (800f19c <tcp_process+0x5a8>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	d15a      	bne.n	800f1fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d156      	bne.n	800f1fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	8b5b      	ldrh	r3, [r3, #26]
 800f154:	f043 0302 	orr.w	r3, r3, #2
 800f158:	b29a      	uxth	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f7fe fdbe 	bl	800dce0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f164:	4b18      	ldr	r3, [pc, #96]	; (800f1c8 <tcp_process+0x5d4>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d105      	bne.n	800f17a <tcp_process+0x586>
 800f16e:	4b16      	ldr	r3, [pc, #88]	; (800f1c8 <tcp_process+0x5d4>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	4a14      	ldr	r2, [pc, #80]	; (800f1c8 <tcp_process+0x5d4>)
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	e02e      	b.n	800f1d8 <tcp_process+0x5e4>
 800f17a:	4b13      	ldr	r3, [pc, #76]	; (800f1c8 <tcp_process+0x5d4>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	617b      	str	r3, [r7, #20]
 800f180:	e027      	b.n	800f1d2 <tcp_process+0x5de>
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d11f      	bne.n	800f1cc <tcp_process+0x5d8>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	68da      	ldr	r2, [r3, #12]
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	60da      	str	r2, [r3, #12]
 800f194:	e020      	b.n	800f1d8 <tcp_process+0x5e4>
 800f196:	bf00      	nop
 800f198:	2000867c 	.word	0x2000867c
 800f19c:	20008674 	.word	0x20008674
 800f1a0:	2000867a 	.word	0x2000867a
 800f1a4:	20008670 	.word	0x20008670
 800f1a8:	20008660 	.word	0x20008660
 800f1ac:	2000bdb8 	.word	0x2000bdb8
 800f1b0:	2000bdbc 	.word	0x2000bdbc
 800f1b4:	0801aab8 	.word	0x0801aab8
 800f1b8:	0801ad58 	.word	0x0801ad58
 800f1bc:	0801ab04 	.word	0x0801ab04
 800f1c0:	20008678 	.word	0x20008678
 800f1c4:	2000867d 	.word	0x2000867d
 800f1c8:	2000f4dc 	.word	0x2000f4dc
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	617b      	str	r3, [r7, #20]
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1d4      	bne.n	800f182 <tcp_process+0x58e>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	60da      	str	r2, [r3, #12]
 800f1de:	4b77      	ldr	r3, [pc, #476]	; (800f3bc <tcp_process+0x7c8>)
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	220a      	movs	r2, #10
 800f1e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f1ea:	4b75      	ldr	r3, [pc, #468]	; (800f3c0 <tcp_process+0x7cc>)
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	60da      	str	r2, [r3, #12]
 800f1f2:	4a73      	ldr	r2, [pc, #460]	; (800f3c0 <tcp_process+0x7cc>)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6013      	str	r3, [r2, #0]
 800f1f8:	f003 f960 	bl	80124bc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f1fc:	e0d2      	b.n	800f3a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	8b5b      	ldrh	r3, [r3, #26]
 800f202:	f043 0302 	orr.w	r3, r3, #2
 800f206:	b29a      	uxth	r2, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2208      	movs	r2, #8
 800f210:	751a      	strb	r2, [r3, #20]
      break;
 800f212:	e0c7      	b.n	800f3a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f214:	4b6b      	ldr	r3, [pc, #428]	; (800f3c4 <tcp_process+0x7d0>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 0310 	and.w	r3, r3, #16
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f000 80c1 	beq.w	800f3a4 <tcp_process+0x7b0>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f226:	4b68      	ldr	r3, [pc, #416]	; (800f3c8 <tcp_process+0x7d4>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	f040 80ba 	bne.w	800f3a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f234:	2b00      	cmp	r3, #0
 800f236:	f040 80b5 	bne.w	800f3a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2206      	movs	r2, #6
 800f23e:	751a      	strb	r2, [r3, #20]
      break;
 800f240:	e0b0      	b.n	800f3a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 f9ca 	bl	800f5dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f248:	4b60      	ldr	r3, [pc, #384]	; (800f3cc <tcp_process+0x7d8>)
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	f003 0320 	and.w	r3, r3, #32
 800f250:	2b00      	cmp	r3, #0
 800f252:	f000 80a9 	beq.w	800f3a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	8b5b      	ldrh	r3, [r3, #26]
 800f25a:	f043 0302 	orr.w	r3, r3, #2
 800f25e:	b29a      	uxth	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7fe fd3b 	bl	800dce0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f26a:	4b59      	ldr	r3, [pc, #356]	; (800f3d0 <tcp_process+0x7dc>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	687a      	ldr	r2, [r7, #4]
 800f270:	429a      	cmp	r2, r3
 800f272:	d105      	bne.n	800f280 <tcp_process+0x68c>
 800f274:	4b56      	ldr	r3, [pc, #344]	; (800f3d0 <tcp_process+0x7dc>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	4a55      	ldr	r2, [pc, #340]	; (800f3d0 <tcp_process+0x7dc>)
 800f27c:	6013      	str	r3, [r2, #0]
 800f27e:	e013      	b.n	800f2a8 <tcp_process+0x6b4>
 800f280:	4b53      	ldr	r3, [pc, #332]	; (800f3d0 <tcp_process+0x7dc>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	613b      	str	r3, [r7, #16]
 800f286:	e00c      	b.n	800f2a2 <tcp_process+0x6ae>
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d104      	bne.n	800f29c <tcp_process+0x6a8>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	68da      	ldr	r2, [r3, #12]
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	60da      	str	r2, [r3, #12]
 800f29a:	e005      	b.n	800f2a8 <tcp_process+0x6b4>
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	613b      	str	r3, [r7, #16]
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d1ef      	bne.n	800f288 <tcp_process+0x694>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	60da      	str	r2, [r3, #12]
 800f2ae:	4b43      	ldr	r3, [pc, #268]	; (800f3bc <tcp_process+0x7c8>)
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	220a      	movs	r2, #10
 800f2b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f2ba:	4b41      	ldr	r3, [pc, #260]	; (800f3c0 <tcp_process+0x7cc>)
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	60da      	str	r2, [r3, #12]
 800f2c2:	4a3f      	ldr	r2, [pc, #252]	; (800f3c0 <tcp_process+0x7cc>)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6013      	str	r3, [r2, #0]
 800f2c8:	f003 f8f8 	bl	80124bc <tcp_timer_needed>
      }
      break;
 800f2cc:	e06c      	b.n	800f3a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 f984 	bl	800f5dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f2d4:	4b3b      	ldr	r3, [pc, #236]	; (800f3c4 <tcp_process+0x7d0>)
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	f003 0310 	and.w	r3, r3, #16
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d065      	beq.n	800f3ac <tcp_process+0x7b8>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2e4:	4b38      	ldr	r3, [pc, #224]	; (800f3c8 <tcp_process+0x7d4>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d15f      	bne.n	800f3ac <tcp_process+0x7b8>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d15b      	bne.n	800f3ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7fe fcf3 	bl	800dce0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f2fa:	4b35      	ldr	r3, [pc, #212]	; (800f3d0 <tcp_process+0x7dc>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	429a      	cmp	r2, r3
 800f302:	d105      	bne.n	800f310 <tcp_process+0x71c>
 800f304:	4b32      	ldr	r3, [pc, #200]	; (800f3d0 <tcp_process+0x7dc>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	4a31      	ldr	r2, [pc, #196]	; (800f3d0 <tcp_process+0x7dc>)
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	e013      	b.n	800f338 <tcp_process+0x744>
 800f310:	4b2f      	ldr	r3, [pc, #188]	; (800f3d0 <tcp_process+0x7dc>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	60fb      	str	r3, [r7, #12]
 800f316:	e00c      	b.n	800f332 <tcp_process+0x73e>
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d104      	bne.n	800f32c <tcp_process+0x738>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	68da      	ldr	r2, [r3, #12]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	60da      	str	r2, [r3, #12]
 800f32a:	e005      	b.n	800f338 <tcp_process+0x744>
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	60fb      	str	r3, [r7, #12]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1ef      	bne.n	800f318 <tcp_process+0x724>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	60da      	str	r2, [r3, #12]
 800f33e:	4b1f      	ldr	r3, [pc, #124]	; (800f3bc <tcp_process+0x7c8>)
 800f340:	2201      	movs	r2, #1
 800f342:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	220a      	movs	r2, #10
 800f348:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f34a:	4b1d      	ldr	r3, [pc, #116]	; (800f3c0 <tcp_process+0x7cc>)
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	60da      	str	r2, [r3, #12]
 800f352:	4a1b      	ldr	r2, [pc, #108]	; (800f3c0 <tcp_process+0x7cc>)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6013      	str	r3, [r2, #0]
 800f358:	f003 f8b0 	bl	80124bc <tcp_timer_needed>
      }
      break;
 800f35c:	e026      	b.n	800f3ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f93c 	bl	800f5dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f364:	4b17      	ldr	r3, [pc, #92]	; (800f3c4 <tcp_process+0x7d0>)
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	f003 0310 	and.w	r3, r3, #16
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d01f      	beq.n	800f3b0 <tcp_process+0x7bc>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f374:	4b14      	ldr	r3, [pc, #80]	; (800f3c8 <tcp_process+0x7d4>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d119      	bne.n	800f3b0 <tcp_process+0x7bc>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f380:	2b00      	cmp	r3, #0
 800f382:	d115      	bne.n	800f3b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f384:	4b11      	ldr	r3, [pc, #68]	; (800f3cc <tcp_process+0x7d8>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	f043 0310 	orr.w	r3, r3, #16
 800f38c:	b2da      	uxtb	r2, r3
 800f38e:	4b0f      	ldr	r3, [pc, #60]	; (800f3cc <tcp_process+0x7d8>)
 800f390:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f392:	e00d      	b.n	800f3b0 <tcp_process+0x7bc>
    default:
      break;
 800f394:	bf00      	nop
 800f396:	e00c      	b.n	800f3b2 <tcp_process+0x7be>
      break;
 800f398:	bf00      	nop
 800f39a:	e00a      	b.n	800f3b2 <tcp_process+0x7be>
      break;
 800f39c:	bf00      	nop
 800f39e:	e008      	b.n	800f3b2 <tcp_process+0x7be>
      break;
 800f3a0:	bf00      	nop
 800f3a2:	e006      	b.n	800f3b2 <tcp_process+0x7be>
      break;
 800f3a4:	bf00      	nop
 800f3a6:	e004      	b.n	800f3b2 <tcp_process+0x7be>
      break;
 800f3a8:	bf00      	nop
 800f3aa:	e002      	b.n	800f3b2 <tcp_process+0x7be>
      break;
 800f3ac:	bf00      	nop
 800f3ae:	e000      	b.n	800f3b2 <tcp_process+0x7be>
      break;
 800f3b0:	bf00      	nop
  }
  return ERR_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3724      	adds	r7, #36	; 0x24
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd90      	pop	{r4, r7, pc}
 800f3bc:	2000f4d8 	.word	0x2000f4d8
 800f3c0:	2000f4ec 	.word	0x2000f4ec
 800f3c4:	2000867c 	.word	0x2000867c
 800f3c8:	20008674 	.word	0x20008674
 800f3cc:	2000867d 	.word	0x2000867d
 800f3d0:	2000f4dc 	.word	0x2000f4dc

0800f3d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f3d4:	b590      	push	{r4, r7, lr}
 800f3d6:	b085      	sub	sp, #20
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d106      	bne.n	800f3f2 <tcp_oos_insert_segment+0x1e>
 800f3e4:	4b3b      	ldr	r3, [pc, #236]	; (800f4d4 <tcp_oos_insert_segment+0x100>)
 800f3e6:	f240 421f 	movw	r2, #1055	; 0x41f
 800f3ea:	493b      	ldr	r1, [pc, #236]	; (800f4d8 <tcp_oos_insert_segment+0x104>)
 800f3ec:	483b      	ldr	r0, [pc, #236]	; (800f4dc <tcp_oos_insert_segment+0x108>)
 800f3ee:	f008 fa85 	bl	80178fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	899b      	ldrh	r3, [r3, #12]
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fb f97c 	bl	800a6f8 <lwip_htons>
 800f400:	4603      	mov	r3, r0
 800f402:	b2db      	uxtb	r3, r3
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d028      	beq.n	800f45e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f40c:	6838      	ldr	r0, [r7, #0]
 800f40e:	f7fe f999 	bl	800d744 <tcp_segs_free>
    next = NULL;
 800f412:	2300      	movs	r3, #0
 800f414:	603b      	str	r3, [r7, #0]
 800f416:	e056      	b.n	800f4c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	899b      	ldrh	r3, [r3, #12]
 800f41e:	b29b      	uxth	r3, r3
 800f420:	4618      	mov	r0, r3
 800f422:	f7fb f969 	bl	800a6f8 <lwip_htons>
 800f426:	4603      	mov	r3, r0
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00d      	beq.n	800f44e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	68db      	ldr	r3, [r3, #12]
 800f436:	899b      	ldrh	r3, [r3, #12]
 800f438:	b29c      	uxth	r4, r3
 800f43a:	2001      	movs	r0, #1
 800f43c:	f7fb f95c 	bl	800a6f8 <lwip_htons>
 800f440:	4603      	mov	r3, r0
 800f442:	461a      	mov	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	4322      	orrs	r2, r4
 800f44a:	b292      	uxth	r2, r2
 800f44c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f7fe f987 	bl	800d76c <tcp_seg_free>
    while (next &&
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d00e      	beq.n	800f482 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	891b      	ldrh	r3, [r3, #8]
 800f468:	461a      	mov	r2, r3
 800f46a:	4b1d      	ldr	r3, [pc, #116]	; (800f4e0 <tcp_oos_insert_segment+0x10c>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	441a      	add	r2, r3
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	6839      	ldr	r1, [r7, #0]
 800f478:	8909      	ldrh	r1, [r1, #8]
 800f47a:	440b      	add	r3, r1
 800f47c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f47e:	2b00      	cmp	r3, #0
 800f480:	daca      	bge.n	800f418 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d01e      	beq.n	800f4c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	891b      	ldrh	r3, [r3, #8]
 800f48c:	461a      	mov	r2, r3
 800f48e:	4b14      	ldr	r3, [pc, #80]	; (800f4e0 <tcp_oos_insert_segment+0x10c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	441a      	add	r2, r3
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	dd12      	ble.n	800f4c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	4b0d      	ldr	r3, [pc, #52]	; (800f4e0 <tcp_oos_insert_segment+0x10c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	685a      	ldr	r2, [r3, #4]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	891b      	ldrh	r3, [r3, #8]
 800f4be:	4619      	mov	r1, r3
 800f4c0:	4610      	mov	r0, r2
 800f4c2:	f7fc fb47 	bl	800bb54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	601a      	str	r2, [r3, #0]
}
 800f4cc:	bf00      	nop
 800f4ce:	3714      	adds	r7, #20
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd90      	pop	{r4, r7, pc}
 800f4d4:	0801aab8 	.word	0x0801aab8
 800f4d8:	0801ad78 	.word	0x0801ad78
 800f4dc:	0801ab04 	.word	0x0801ab04
 800f4e0:	20008670 	.word	0x20008670

0800f4e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f4e4:	b5b0      	push	{r4, r5, r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
 800f4f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f4f2:	e03e      	b.n	800f572 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	4618      	mov	r0, r3
 800f504:	f7fc fd3a 	bl	800bf7c <pbuf_clen>
 800f508:	4603      	mov	r3, r0
 800f50a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f512:	8a7a      	ldrh	r2, [r7, #18]
 800f514:	429a      	cmp	r2, r3
 800f516:	d906      	bls.n	800f526 <tcp_free_acked_segments+0x42>
 800f518:	4b2a      	ldr	r3, [pc, #168]	; (800f5c4 <tcp_free_acked_segments+0xe0>)
 800f51a:	f240 4257 	movw	r2, #1111	; 0x457
 800f51e:	492a      	ldr	r1, [pc, #168]	; (800f5c8 <tcp_free_acked_segments+0xe4>)
 800f520:	482a      	ldr	r0, [pc, #168]	; (800f5cc <tcp_free_acked_segments+0xe8>)
 800f522:	f008 f9eb 	bl	80178fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f52c:	8a7b      	ldrh	r3, [r7, #18]
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	b29a      	uxth	r2, r3
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	891a      	ldrh	r2, [r3, #8]
 800f53c:	4b24      	ldr	r3, [pc, #144]	; (800f5d0 <tcp_free_acked_segments+0xec>)
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	4413      	add	r3, r2
 800f542:	b29a      	uxth	r2, r3
 800f544:	4b22      	ldr	r3, [pc, #136]	; (800f5d0 <tcp_free_acked_segments+0xec>)
 800f546:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f548:	6978      	ldr	r0, [r7, #20]
 800f54a:	f7fe f90f 	bl	800d76c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00c      	beq.n	800f572 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d109      	bne.n	800f572 <tcp_free_acked_segments+0x8e>
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d106      	bne.n	800f572 <tcp_free_acked_segments+0x8e>
 800f564:	4b17      	ldr	r3, [pc, #92]	; (800f5c4 <tcp_free_acked_segments+0xe0>)
 800f566:	f240 4262 	movw	r2, #1122	; 0x462
 800f56a:	491a      	ldr	r1, [pc, #104]	; (800f5d4 <tcp_free_acked_segments+0xf0>)
 800f56c:	4817      	ldr	r0, [pc, #92]	; (800f5cc <tcp_free_acked_segments+0xe8>)
 800f56e:	f008 f9c5 	bl	80178fc <iprintf>
  while (seg_list != NULL &&
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d020      	beq.n	800f5ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fb f8cf 	bl	800a722 <lwip_htonl>
 800f584:	4604      	mov	r4, r0
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	891b      	ldrh	r3, [r3, #8]
 800f58a:	461d      	mov	r5, r3
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	899b      	ldrh	r3, [r3, #12]
 800f592:	b29b      	uxth	r3, r3
 800f594:	4618      	mov	r0, r3
 800f596:	f7fb f8af 	bl	800a6f8 <lwip_htons>
 800f59a:	4603      	mov	r3, r0
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	f003 0303 	and.w	r3, r3, #3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d001      	beq.n	800f5aa <tcp_free_acked_segments+0xc6>
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	e000      	b.n	800f5ac <tcp_free_acked_segments+0xc8>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	442b      	add	r3, r5
 800f5ae:	18e2      	adds	r2, r4, r3
 800f5b0:	4b09      	ldr	r3, [pc, #36]	; (800f5d8 <tcp_free_acked_segments+0xf4>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	dd9c      	ble.n	800f4f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f5ba:	68bb      	ldr	r3, [r7, #8]
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3718      	adds	r7, #24
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800f5c4:	0801aab8 	.word	0x0801aab8
 800f5c8:	0801ada0 	.word	0x0801ada0
 800f5cc:	0801ab04 	.word	0x0801ab04
 800f5d0:	20008678 	.word	0x20008678
 800f5d4:	0801adc8 	.word	0x0801adc8
 800f5d8:	20008674 	.word	0x20008674

0800f5dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f5dc:	b5b0      	push	{r4, r5, r7, lr}
 800f5de:	b094      	sub	sp, #80	; 0x50
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d106      	bne.n	800f5fc <tcp_receive+0x20>
 800f5ee:	4ba6      	ldr	r3, [pc, #664]	; (800f888 <tcp_receive+0x2ac>)
 800f5f0:	f240 427b 	movw	r2, #1147	; 0x47b
 800f5f4:	49a5      	ldr	r1, [pc, #660]	; (800f88c <tcp_receive+0x2b0>)
 800f5f6:	48a6      	ldr	r0, [pc, #664]	; (800f890 <tcp_receive+0x2b4>)
 800f5f8:	f008 f980 	bl	80178fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	7d1b      	ldrb	r3, [r3, #20]
 800f600:	2b03      	cmp	r3, #3
 800f602:	d806      	bhi.n	800f612 <tcp_receive+0x36>
 800f604:	4ba0      	ldr	r3, [pc, #640]	; (800f888 <tcp_receive+0x2ac>)
 800f606:	f240 427c 	movw	r2, #1148	; 0x47c
 800f60a:	49a2      	ldr	r1, [pc, #648]	; (800f894 <tcp_receive+0x2b8>)
 800f60c:	48a0      	ldr	r0, [pc, #640]	; (800f890 <tcp_receive+0x2b4>)
 800f60e:	f008 f975 	bl	80178fc <iprintf>

  if (flags & TCP_ACK) {
 800f612:	4ba1      	ldr	r3, [pc, #644]	; (800f898 <tcp_receive+0x2bc>)
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	f003 0310 	and.w	r3, r3, #16
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f000 8263 	beq.w	800fae6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f626:	461a      	mov	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f62c:	4413      	add	r3, r2
 800f62e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f634:	4b99      	ldr	r3, [pc, #612]	; (800f89c <tcp_receive+0x2c0>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	1ad3      	subs	r3, r2, r3
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	db1b      	blt.n	800f676 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f642:	4b96      	ldr	r3, [pc, #600]	; (800f89c <tcp_receive+0x2c0>)
 800f644:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f646:	429a      	cmp	r2, r3
 800f648:	d106      	bne.n	800f658 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f64e:	4b94      	ldr	r3, [pc, #592]	; (800f8a0 <tcp_receive+0x2c4>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	1ad3      	subs	r3, r2, r3
 800f654:	2b00      	cmp	r3, #0
 800f656:	db0e      	blt.n	800f676 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f65c:	4b90      	ldr	r3, [pc, #576]	; (800f8a0 <tcp_receive+0x2c4>)
 800f65e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f660:	429a      	cmp	r2, r3
 800f662:	d125      	bne.n	800f6b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f664:	4b8f      	ldr	r3, [pc, #572]	; (800f8a4 <tcp_receive+0x2c8>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	89db      	ldrh	r3, [r3, #14]
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f672:	429a      	cmp	r2, r3
 800f674:	d91c      	bls.n	800f6b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f676:	4b8b      	ldr	r3, [pc, #556]	; (800f8a4 <tcp_receive+0x2c8>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	89db      	ldrh	r3, [r3, #14]
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f690:	429a      	cmp	r2, r3
 800f692:	d205      	bcs.n	800f6a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f6a0:	4b7e      	ldr	r3, [pc, #504]	; (800f89c <tcp_receive+0x2c0>)
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f6a8:	4b7d      	ldr	r3, [pc, #500]	; (800f8a0 <tcp_receive+0x2c4>)
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f6b0:	4b7b      	ldr	r3, [pc, #492]	; (800f8a0 <tcp_receive+0x2c4>)
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	dc58      	bgt.n	800f770 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f6be:	4b7a      	ldr	r3, [pc, #488]	; (800f8a8 <tcp_receive+0x2cc>)
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d14b      	bne.n	800f75e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f6d0:	4413      	add	r3, r2
 800f6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d142      	bne.n	800f75e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	db3d      	blt.n	800f75e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6e6:	4b6e      	ldr	r3, [pc, #440]	; (800f8a0 <tcp_receive+0x2c4>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d137      	bne.n	800f75e <tcp_receive+0x182>
              found_dupack = 1;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6f8:	2bff      	cmp	r3, #255	; 0xff
 800f6fa:	d007      	beq.n	800f70c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f702:	3301      	adds	r3, #1
 800f704:	b2da      	uxtb	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f712:	2b03      	cmp	r3, #3
 800f714:	d91b      	bls.n	800f74e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f720:	4413      	add	r3, r2
 800f722:	b29a      	uxth	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d30a      	bcc.n	800f744 <tcp_receive+0x168>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f738:	4413      	add	r3, r2
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f742:	e004      	b.n	800f74e <tcp_receive+0x172>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f74a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f754:	2b02      	cmp	r3, #2
 800f756:	d902      	bls.n	800f75e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f002 fb47 	bl	8011dec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f75e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f760:	2b00      	cmp	r3, #0
 800f762:	f040 8160 	bne.w	800fa26 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2200      	movs	r2, #0
 800f76a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f76e:	e15a      	b.n	800fa26 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f770:	4b4b      	ldr	r3, [pc, #300]	; (800f8a0 <tcp_receive+0x2c4>)
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f778:	1ad3      	subs	r3, r2, r3
 800f77a:	3b01      	subs	r3, #1
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f2c0 814d 	blt.w	800fa1c <tcp_receive+0x440>
 800f782:	4b47      	ldr	r3, [pc, #284]	; (800f8a0 <tcp_receive+0x2c4>)
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f78a:	1ad3      	subs	r3, r2, r3
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f300 8145 	bgt.w	800fa1c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	8b5b      	ldrh	r3, [r3, #26]
 800f796:	f003 0304 	and.w	r3, r3, #4
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d010      	beq.n	800f7c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	8b5b      	ldrh	r3, [r3, #26]
 800f7a2:	f023 0304 	bic.w	r3, r3, #4
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7ce:	10db      	asrs	r3, r3, #3
 800f7d0:	b21b      	sxth	r3, r3
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	4413      	add	r3, r2
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	b21a      	sxth	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f7e8:	4b2d      	ldr	r3, [pc, #180]	; (800f8a0 <tcp_receive+0x2c4>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	1ad3      	subs	r3, r2, r3
 800f7f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f800:	4b27      	ldr	r3, [pc, #156]	; (800f8a0 <tcp_receive+0x2c4>)
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	7d1b      	ldrb	r3, [r3, #20]
 800f80c:	2b03      	cmp	r3, #3
 800f80e:	f240 8096 	bls.w	800f93e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f81e:	429a      	cmp	r2, r3
 800f820:	d244      	bcs.n	800f8ac <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8b5b      	ldrh	r3, [r3, #26]
 800f826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d001      	beq.n	800f832 <tcp_receive+0x256>
 800f82e:	2301      	movs	r3, #1
 800f830:	e000      	b.n	800f834 <tcp_receive+0x258>
 800f832:	2302      	movs	r3, #2
 800f834:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f838:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f842:	fb12 f303 	smulbb	r3, r2, r3
 800f846:	b29b      	uxth	r3, r3
 800f848:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f84a:	4293      	cmp	r3, r2
 800f84c:	bf28      	it	cs
 800f84e:	4613      	movcs	r3, r2
 800f850:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f858:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f85a:	4413      	add	r3, r2
 800f85c:	b29a      	uxth	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f864:	429a      	cmp	r2, r3
 800f866:	d309      	bcc.n	800f87c <tcp_receive+0x2a0>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f86e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f870:	4413      	add	r3, r2
 800f872:	b29a      	uxth	r2, r3
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f87a:	e060      	b.n	800f93e <tcp_receive+0x362>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f882:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f886:	e05a      	b.n	800f93e <tcp_receive+0x362>
 800f888:	0801aab8 	.word	0x0801aab8
 800f88c:	0801ade8 	.word	0x0801ade8
 800f890:	0801ab04 	.word	0x0801ab04
 800f894:	0801ae04 	.word	0x0801ae04
 800f898:	2000867c 	.word	0x2000867c
 800f89c:	20008670 	.word	0x20008670
 800f8a0:	20008674 	.word	0x20008674
 800f8a4:	20008660 	.word	0x20008660
 800f8a8:	2000867a 	.word	0x2000867a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8b4:	4413      	add	r3, r2
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d309      	bcc.n	800f8d6 <tcp_receive+0x2fa>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8ca:	4413      	add	r3, r2
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f8d4:	e004      	b.n	800f8e0 <tcp_receive+0x304>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d326      	bcc.n	800f93e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f910:	4413      	add	r3, r2
 800f912:	b29a      	uxth	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d30a      	bcc.n	800f934 <tcp_receive+0x358>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f928:	4413      	add	r3, r2
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f932:	e004      	b.n	800f93e <tcp_receive+0x362>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f93a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f946:	4a98      	ldr	r2, [pc, #608]	; (800fba8 <tcp_receive+0x5cc>)
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f7ff fdcb 	bl	800f4e4 <tcp_free_acked_segments>
 800f94e:	4602      	mov	r2, r0
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f95c:	4a93      	ldr	r2, [pc, #588]	; (800fbac <tcp_receive+0x5d0>)
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f7ff fdc0 	bl	800f4e4 <tcp_free_acked_segments>
 800f964:	4602      	mov	r2, r0
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d104      	bne.n	800f97c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f978:	861a      	strh	r2, [r3, #48]	; 0x30
 800f97a:	e002      	b.n	800f982 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2200      	movs	r2, #0
 800f986:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d103      	bne.n	800f998 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f99e:	4b84      	ldr	r3, [pc, #528]	; (800fbb0 <tcp_receive+0x5d4>)
 800f9a0:	881b      	ldrh	r3, [r3, #0]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	8b5b      	ldrh	r3, [r3, #26]
 800f9b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d035      	beq.n	800fa24 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d118      	bne.n	800f9f2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d00c      	beq.n	800f9e2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7fa fea4 	bl	800a722 <lwip_htonl>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	dc20      	bgt.n	800fa24 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	8b5b      	ldrh	r3, [r3, #26]
 800f9e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9f0:	e018      	b.n	800fa24 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fa fe8f 	bl	800a722 <lwip_htonl>
 800fa04:	4603      	mov	r3, r0
 800fa06:	1ae3      	subs	r3, r4, r3
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	dc0b      	bgt.n	800fa24 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	8b5b      	ldrh	r3, [r3, #26]
 800fa10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa14:	b29a      	uxth	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa1a:	e003      	b.n	800fa24 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f002 fbdd 	bl	80121dc <tcp_send_empty_ack>
 800fa22:	e000      	b.n	800fa26 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa24:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d05b      	beq.n	800fae6 <tcp_receive+0x50a>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa32:	4b60      	ldr	r3, [pc, #384]	; (800fbb4 <tcp_receive+0x5d8>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	da54      	bge.n	800fae6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fa3c:	4b5e      	ldr	r3, [pc, #376]	; (800fbb8 <tcp_receive+0x5dc>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fa50:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa5a:	10db      	asrs	r3, r3, #3
 800fa5c:	b21b      	sxth	r3, r3
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	1ad3      	subs	r3, r2, r3
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fa74:	4413      	add	r3, r2
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	b21a      	sxth	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fa7e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	da05      	bge.n	800fa92 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fa86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fa8a:	425b      	negs	r3, r3
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fa92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa9c:	109b      	asrs	r3, r3, #2
 800fa9e:	b21b      	sxth	r3, r3
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	1ad3      	subs	r3, r2, r3
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fab0:	b29a      	uxth	r2, r3
 800fab2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fab6:	4413      	add	r3, r2
 800fab8:	b29b      	uxth	r3, r3
 800faba:	b21a      	sxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fac6:	10db      	asrs	r3, r3, #3
 800fac8:	b21b      	sxth	r3, r3
 800faca:	b29a      	uxth	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	4413      	add	r3, r2
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	b21a      	sxth	r2, r3
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fae6:	4b35      	ldr	r3, [pc, #212]	; (800fbbc <tcp_receive+0x5e0>)
 800fae8:	881b      	ldrh	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	f000 84e1 	beq.w	80104b2 <tcp_receive+0xed6>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	7d1b      	ldrb	r3, [r3, #20]
 800faf4:	2b06      	cmp	r3, #6
 800faf6:	f200 84dc 	bhi.w	80104b2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fafe:	4b30      	ldr	r3, [pc, #192]	; (800fbc0 <tcp_receive+0x5e4>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	1ad3      	subs	r3, r2, r3
 800fb04:	3b01      	subs	r3, #1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f2c0 808e 	blt.w	800fc28 <tcp_receive+0x64c>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb10:	4b2a      	ldr	r3, [pc, #168]	; (800fbbc <tcp_receive+0x5e0>)
 800fb12:	881b      	ldrh	r3, [r3, #0]
 800fb14:	4619      	mov	r1, r3
 800fb16:	4b2a      	ldr	r3, [pc, #168]	; (800fbc0 <tcp_receive+0x5e4>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	440b      	add	r3, r1
 800fb1c:	1ad3      	subs	r3, r2, r3
 800fb1e:	3301      	adds	r3, #1
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f300 8081 	bgt.w	800fc28 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fb26:	4b27      	ldr	r3, [pc, #156]	; (800fbc4 <tcp_receive+0x5e8>)
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb30:	4b23      	ldr	r3, [pc, #140]	; (800fbc0 <tcp_receive+0x5e4>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fb38:	4b22      	ldr	r3, [pc, #136]	; (800fbc4 <tcp_receive+0x5e8>)
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d106      	bne.n	800fb4e <tcp_receive+0x572>
 800fb40:	4b21      	ldr	r3, [pc, #132]	; (800fbc8 <tcp_receive+0x5ec>)
 800fb42:	f240 5294 	movw	r2, #1428	; 0x594
 800fb46:	4921      	ldr	r1, [pc, #132]	; (800fbcc <tcp_receive+0x5f0>)
 800fb48:	4821      	ldr	r0, [pc, #132]	; (800fbd0 <tcp_receive+0x5f4>)
 800fb4a:	f007 fed7 	bl	80178fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d906      	bls.n	800fb66 <tcp_receive+0x58a>
 800fb58:	4b1b      	ldr	r3, [pc, #108]	; (800fbc8 <tcp_receive+0x5ec>)
 800fb5a:	f240 5295 	movw	r2, #1429	; 0x595
 800fb5e:	491d      	ldr	r1, [pc, #116]	; (800fbd4 <tcp_receive+0x5f8>)
 800fb60:	481b      	ldr	r0, [pc, #108]	; (800fbd0 <tcp_receive+0x5f4>)
 800fb62:	f007 fecb 	bl	80178fc <iprintf>
      off = (u16_t)off32;
 800fb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fb6c:	4b15      	ldr	r3, [pc, #84]	; (800fbc4 <tcp_receive+0x5e8>)
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	891b      	ldrh	r3, [r3, #8]
 800fb72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d906      	bls.n	800fb88 <tcp_receive+0x5ac>
 800fb7a:	4b13      	ldr	r3, [pc, #76]	; (800fbc8 <tcp_receive+0x5ec>)
 800fb7c:	f240 5297 	movw	r2, #1431	; 0x597
 800fb80:	4915      	ldr	r1, [pc, #84]	; (800fbd8 <tcp_receive+0x5fc>)
 800fb82:	4813      	ldr	r0, [pc, #76]	; (800fbd0 <tcp_receive+0x5f4>)
 800fb84:	f007 feba 	bl	80178fc <iprintf>
      inseg.len -= off;
 800fb88:	4b0e      	ldr	r3, [pc, #56]	; (800fbc4 <tcp_receive+0x5e8>)
 800fb8a:	891a      	ldrh	r2, [r3, #8]
 800fb8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	4b0b      	ldr	r3, [pc, #44]	; (800fbc4 <tcp_receive+0x5e8>)
 800fb96:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fb98:	4b0a      	ldr	r3, [pc, #40]	; (800fbc4 <tcp_receive+0x5e8>)
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	891a      	ldrh	r2, [r3, #8]
 800fb9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fba6:	e029      	b.n	800fbfc <tcp_receive+0x620>
 800fba8:	0801ae20 	.word	0x0801ae20
 800fbac:	0801ae28 	.word	0x0801ae28
 800fbb0:	20008678 	.word	0x20008678
 800fbb4:	20008674 	.word	0x20008674
 800fbb8:	2000f4e0 	.word	0x2000f4e0
 800fbbc:	2000867a 	.word	0x2000867a
 800fbc0:	20008670 	.word	0x20008670
 800fbc4:	20008650 	.word	0x20008650
 800fbc8:	0801aab8 	.word	0x0801aab8
 800fbcc:	0801ae30 	.word	0x0801ae30
 800fbd0:	0801ab04 	.word	0x0801ab04
 800fbd4:	0801ae40 	.word	0x0801ae40
 800fbd8:	0801ae50 	.word	0x0801ae50
        off -= p->len;
 800fbdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbde:	895b      	ldrh	r3, [r3, #10]
 800fbe0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbe4:	1ad3      	subs	r3, r2, r3
 800fbe6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fbea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fbee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fbf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fbf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fbfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbfe:	895b      	ldrh	r3, [r3, #10]
 800fc00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d8e9      	bhi.n	800fbdc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fc08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fc10:	f7fc f8a0 	bl	800bd54 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc18:	4a91      	ldr	r2, [pc, #580]	; (800fe60 <tcp_receive+0x884>)
 800fc1a:	6013      	str	r3, [r2, #0]
 800fc1c:	4b91      	ldr	r3, [pc, #580]	; (800fe64 <tcp_receive+0x888>)
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	4a8f      	ldr	r2, [pc, #572]	; (800fe60 <tcp_receive+0x884>)
 800fc22:	6812      	ldr	r2, [r2, #0]
 800fc24:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fc26:	e00d      	b.n	800fc44 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fc28:	4b8d      	ldr	r3, [pc, #564]	; (800fe60 <tcp_receive+0x884>)
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	da06      	bge.n	800fc44 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	8b5b      	ldrh	r3, [r3, #26]
 800fc3a:	f043 0302 	orr.w	r3, r3, #2
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc44:	4b86      	ldr	r3, [pc, #536]	; (800fe60 <tcp_receive+0x884>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	f2c0 842a 	blt.w	80104a8 <tcp_receive+0xecc>
 800fc54:	4b82      	ldr	r3, [pc, #520]	; (800fe60 <tcp_receive+0x884>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5c:	6879      	ldr	r1, [r7, #4]
 800fc5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc60:	440b      	add	r3, r1
 800fc62:	1ad3      	subs	r3, r2, r3
 800fc64:	3301      	adds	r3, #1
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	f300 841e 	bgt.w	80104a8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc70:	4b7b      	ldr	r3, [pc, #492]	; (800fe60 <tcp_receive+0x884>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	f040 829a 	bne.w	80101ae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fc7a:	4b7a      	ldr	r3, [pc, #488]	; (800fe64 <tcp_receive+0x888>)
 800fc7c:	891c      	ldrh	r4, [r3, #8]
 800fc7e:	4b79      	ldr	r3, [pc, #484]	; (800fe64 <tcp_receive+0x888>)
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	899b      	ldrh	r3, [r3, #12]
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fa fd36 	bl	800a6f8 <lwip_htons>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	f003 0303 	and.w	r3, r3, #3
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d001      	beq.n	800fc9c <tcp_receive+0x6c0>
 800fc98:	2301      	movs	r3, #1
 800fc9a:	e000      	b.n	800fc9e <tcp_receive+0x6c2>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	4423      	add	r3, r4
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	4b71      	ldr	r3, [pc, #452]	; (800fe68 <tcp_receive+0x88c>)
 800fca4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcaa:	4b6f      	ldr	r3, [pc, #444]	; (800fe68 <tcp_receive+0x88c>)
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d275      	bcs.n	800fd9e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fcb2:	4b6c      	ldr	r3, [pc, #432]	; (800fe64 <tcp_receive+0x888>)
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	899b      	ldrh	r3, [r3, #12]
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fa fd1c 	bl	800a6f8 <lwip_htons>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	f003 0301 	and.w	r3, r3, #1
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d01f      	beq.n	800fd0c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fccc:	4b65      	ldr	r3, [pc, #404]	; (800fe64 <tcp_receive+0x888>)
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	899b      	ldrh	r3, [r3, #12]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	b21b      	sxth	r3, r3
 800fcd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fcda:	b21c      	sxth	r4, r3
 800fcdc:	4b61      	ldr	r3, [pc, #388]	; (800fe64 <tcp_receive+0x888>)
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	899b      	ldrh	r3, [r3, #12]
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fa fd07 	bl	800a6f8 <lwip_htons>
 800fcea:	4603      	mov	r3, r0
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fa fcfe 	bl	800a6f8 <lwip_htons>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	b21b      	sxth	r3, r3
 800fd00:	4323      	orrs	r3, r4
 800fd02:	b21a      	sxth	r2, r3
 800fd04:	4b57      	ldr	r3, [pc, #348]	; (800fe64 <tcp_receive+0x888>)
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	b292      	uxth	r2, r2
 800fd0a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd10:	4b54      	ldr	r3, [pc, #336]	; (800fe64 <tcp_receive+0x888>)
 800fd12:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd14:	4b53      	ldr	r3, [pc, #332]	; (800fe64 <tcp_receive+0x888>)
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	899b      	ldrh	r3, [r3, #12]
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7fa fceb 	bl	800a6f8 <lwip_htons>
 800fd22:	4603      	mov	r3, r0
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	f003 0302 	and.w	r3, r3, #2
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d005      	beq.n	800fd3a <tcp_receive+0x75e>
            inseg.len -= 1;
 800fd2e:	4b4d      	ldr	r3, [pc, #308]	; (800fe64 <tcp_receive+0x888>)
 800fd30:	891b      	ldrh	r3, [r3, #8]
 800fd32:	3b01      	subs	r3, #1
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	4b4b      	ldr	r3, [pc, #300]	; (800fe64 <tcp_receive+0x888>)
 800fd38:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fd3a:	4b4a      	ldr	r3, [pc, #296]	; (800fe64 <tcp_receive+0x888>)
 800fd3c:	685a      	ldr	r2, [r3, #4]
 800fd3e:	4b49      	ldr	r3, [pc, #292]	; (800fe64 <tcp_receive+0x888>)
 800fd40:	891b      	ldrh	r3, [r3, #8]
 800fd42:	4619      	mov	r1, r3
 800fd44:	4610      	mov	r0, r2
 800fd46:	f7fb ff05 	bl	800bb54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fd4a:	4b46      	ldr	r3, [pc, #280]	; (800fe64 <tcp_receive+0x888>)
 800fd4c:	891c      	ldrh	r4, [r3, #8]
 800fd4e:	4b45      	ldr	r3, [pc, #276]	; (800fe64 <tcp_receive+0x888>)
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	899b      	ldrh	r3, [r3, #12]
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fa fcce 	bl	800a6f8 <lwip_htons>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	f003 0303 	and.w	r3, r3, #3
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <tcp_receive+0x790>
 800fd68:	2301      	movs	r3, #1
 800fd6a:	e000      	b.n	800fd6e <tcp_receive+0x792>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	4423      	add	r3, r4
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	4b3d      	ldr	r3, [pc, #244]	; (800fe68 <tcp_receive+0x88c>)
 800fd74:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fd76:	4b3c      	ldr	r3, [pc, #240]	; (800fe68 <tcp_receive+0x88c>)
 800fd78:	881b      	ldrh	r3, [r3, #0]
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	4b38      	ldr	r3, [pc, #224]	; (800fe60 <tcp_receive+0x884>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	441a      	add	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd86:	6879      	ldr	r1, [r7, #4]
 800fd88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd8a:	440b      	add	r3, r1
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d006      	beq.n	800fd9e <tcp_receive+0x7c2>
 800fd90:	4b36      	ldr	r3, [pc, #216]	; (800fe6c <tcp_receive+0x890>)
 800fd92:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800fd96:	4936      	ldr	r1, [pc, #216]	; (800fe70 <tcp_receive+0x894>)
 800fd98:	4836      	ldr	r0, [pc, #216]	; (800fe74 <tcp_receive+0x898>)
 800fd9a:	f007 fdaf 	bl	80178fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 80e7 	beq.w	800ff76 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fda8:	4b2e      	ldr	r3, [pc, #184]	; (800fe64 <tcp_receive+0x888>)
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	899b      	ldrh	r3, [r3, #12]
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7fa fca1 	bl	800a6f8 <lwip_htons>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	f003 0301 	and.w	r3, r3, #1
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d010      	beq.n	800fde4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fdc2:	e00a      	b.n	800fdda <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdc8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdce:	681a      	ldr	r2, [r3, #0]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	f7fd fcc9 	bl	800d76c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1f0      	bne.n	800fdc4 <tcp_receive+0x7e8>
 800fde2:	e0c8      	b.n	800ff76 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fde8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fdea:	e052      	b.n	800fe92 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	899b      	ldrh	r3, [r3, #12]
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fa fc7f 	bl	800a6f8 <lwip_htons>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	f003 0301 	and.w	r3, r3, #1
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d03d      	beq.n	800fe82 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fe06:	4b17      	ldr	r3, [pc, #92]	; (800fe64 <tcp_receive+0x888>)
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	899b      	ldrh	r3, [r3, #12]
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fa fc72 	bl	800a6f8 <lwip_htons>
 800fe14:	4603      	mov	r3, r0
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d130      	bne.n	800fe82 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fe20:	4b10      	ldr	r3, [pc, #64]	; (800fe64 <tcp_receive+0x888>)
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	899b      	ldrh	r3, [r3, #12]
 800fe26:	b29c      	uxth	r4, r3
 800fe28:	2001      	movs	r0, #1
 800fe2a:	f7fa fc65 	bl	800a6f8 <lwip_htons>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	461a      	mov	r2, r3
 800fe32:	4b0c      	ldr	r3, [pc, #48]	; (800fe64 <tcp_receive+0x888>)
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	4322      	orrs	r2, r4
 800fe38:	b292      	uxth	r2, r2
 800fe3a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fe3c:	4b09      	ldr	r3, [pc, #36]	; (800fe64 <tcp_receive+0x888>)
 800fe3e:	891c      	ldrh	r4, [r3, #8]
 800fe40:	4b08      	ldr	r3, [pc, #32]	; (800fe64 <tcp_receive+0x888>)
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	899b      	ldrh	r3, [r3, #12]
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fa fc55 	bl	800a6f8 <lwip_htons>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	f003 0303 	and.w	r3, r3, #3
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d00e      	beq.n	800fe78 <tcp_receive+0x89c>
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e00d      	b.n	800fe7a <tcp_receive+0x89e>
 800fe5e:	bf00      	nop
 800fe60:	20008670 	.word	0x20008670
 800fe64:	20008650 	.word	0x20008650
 800fe68:	2000867a 	.word	0x2000867a
 800fe6c:	0801aab8 	.word	0x0801aab8
 800fe70:	0801ae60 	.word	0x0801ae60
 800fe74:	0801ab04 	.word	0x0801ab04
 800fe78:	2300      	movs	r3, #0
 800fe7a:	4423      	add	r3, r4
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	4b98      	ldr	r3, [pc, #608]	; (80100e0 <tcp_receive+0xb04>)
 800fe80:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fe82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe84:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fe86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fe8c:	6938      	ldr	r0, [r7, #16]
 800fe8e:	f7fd fc6d 	bl	800d76c <tcp_seg_free>
            while (next &&
 800fe92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00e      	beq.n	800feb6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fe98:	4b91      	ldr	r3, [pc, #580]	; (80100e0 <tcp_receive+0xb04>)
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	4b91      	ldr	r3, [pc, #580]	; (80100e4 <tcp_receive+0xb08>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	441a      	add	r2, r3
 800fea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800feac:	8909      	ldrh	r1, [r1, #8]
 800feae:	440b      	add	r3, r1
 800feb0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	da9a      	bge.n	800fdec <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800feb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d059      	beq.n	800ff70 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800febc:	4b88      	ldr	r3, [pc, #544]	; (80100e0 <tcp_receive+0xb04>)
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	461a      	mov	r2, r3
 800fec2:	4b88      	ldr	r3, [pc, #544]	; (80100e4 <tcp_receive+0xb08>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	441a      	add	r2, r3
 800fec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	dd4d      	ble.n	800ff70 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	b29a      	uxth	r2, r3
 800fedc:	4b81      	ldr	r3, [pc, #516]	; (80100e4 <tcp_receive+0xb08>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	4b80      	ldr	r3, [pc, #512]	; (80100e8 <tcp_receive+0xb0c>)
 800fee8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800feea:	4b7f      	ldr	r3, [pc, #508]	; (80100e8 <tcp_receive+0xb0c>)
 800feec:	68db      	ldr	r3, [r3, #12]
 800feee:	899b      	ldrh	r3, [r3, #12]
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fa fc00 	bl	800a6f8 <lwip_htons>
 800fef8:	4603      	mov	r3, r0
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	f003 0302 	and.w	r3, r3, #2
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d005      	beq.n	800ff10 <tcp_receive+0x934>
                inseg.len -= 1;
 800ff04:	4b78      	ldr	r3, [pc, #480]	; (80100e8 <tcp_receive+0xb0c>)
 800ff06:	891b      	ldrh	r3, [r3, #8]
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	4b76      	ldr	r3, [pc, #472]	; (80100e8 <tcp_receive+0xb0c>)
 800ff0e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ff10:	4b75      	ldr	r3, [pc, #468]	; (80100e8 <tcp_receive+0xb0c>)
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	4b74      	ldr	r3, [pc, #464]	; (80100e8 <tcp_receive+0xb0c>)
 800ff16:	891b      	ldrh	r3, [r3, #8]
 800ff18:	4619      	mov	r1, r3
 800ff1a:	4610      	mov	r0, r2
 800ff1c:	f7fb fe1a 	bl	800bb54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ff20:	4b71      	ldr	r3, [pc, #452]	; (80100e8 <tcp_receive+0xb0c>)
 800ff22:	891c      	ldrh	r4, [r3, #8]
 800ff24:	4b70      	ldr	r3, [pc, #448]	; (80100e8 <tcp_receive+0xb0c>)
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	899b      	ldrh	r3, [r3, #12]
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7fa fbe3 	bl	800a6f8 <lwip_htons>
 800ff32:	4603      	mov	r3, r0
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	f003 0303 	and.w	r3, r3, #3
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d001      	beq.n	800ff42 <tcp_receive+0x966>
 800ff3e:	2301      	movs	r3, #1
 800ff40:	e000      	b.n	800ff44 <tcp_receive+0x968>
 800ff42:	2300      	movs	r3, #0
 800ff44:	4423      	add	r3, r4
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	4b65      	ldr	r3, [pc, #404]	; (80100e0 <tcp_receive+0xb04>)
 800ff4a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ff4c:	4b64      	ldr	r3, [pc, #400]	; (80100e0 <tcp_receive+0xb04>)
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	461a      	mov	r2, r3
 800ff52:	4b64      	ldr	r3, [pc, #400]	; (80100e4 <tcp_receive+0xb08>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	441a      	add	r2, r3
 800ff58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d006      	beq.n	800ff70 <tcp_receive+0x994>
 800ff62:	4b62      	ldr	r3, [pc, #392]	; (80100ec <tcp_receive+0xb10>)
 800ff64:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ff68:	4961      	ldr	r1, [pc, #388]	; (80100f0 <tcp_receive+0xb14>)
 800ff6a:	4862      	ldr	r0, [pc, #392]	; (80100f4 <tcp_receive+0xb18>)
 800ff6c:	f007 fcc6 	bl	80178fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff74:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ff76:	4b5a      	ldr	r3, [pc, #360]	; (80100e0 <tcp_receive+0xb04>)
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	4b59      	ldr	r3, [pc, #356]	; (80100e4 <tcp_receive+0xb08>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	441a      	add	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff8a:	4b55      	ldr	r3, [pc, #340]	; (80100e0 <tcp_receive+0xb04>)
 800ff8c:	881b      	ldrh	r3, [r3, #0]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d206      	bcs.n	800ffa0 <tcp_receive+0x9c4>
 800ff92:	4b56      	ldr	r3, [pc, #344]	; (80100ec <tcp_receive+0xb10>)
 800ff94:	f240 6207 	movw	r2, #1543	; 0x607
 800ff98:	4957      	ldr	r1, [pc, #348]	; (80100f8 <tcp_receive+0xb1c>)
 800ff9a:	4856      	ldr	r0, [pc, #344]	; (80100f4 <tcp_receive+0xb18>)
 800ff9c:	f007 fcae 	bl	80178fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ffa4:	4b4e      	ldr	r3, [pc, #312]	; (80100e0 <tcp_receive+0xb04>)
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	1ad3      	subs	r3, r2, r3
 800ffaa:	b29a      	uxth	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7fc feb9 	bl	800cd28 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ffb6:	4b4c      	ldr	r3, [pc, #304]	; (80100e8 <tcp_receive+0xb0c>)
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	891b      	ldrh	r3, [r3, #8]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d006      	beq.n	800ffce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ffc0:	4b49      	ldr	r3, [pc, #292]	; (80100e8 <tcp_receive+0xb0c>)
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	4a4d      	ldr	r2, [pc, #308]	; (80100fc <tcp_receive+0xb20>)
 800ffc6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ffc8:	4b47      	ldr	r3, [pc, #284]	; (80100e8 <tcp_receive+0xb0c>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffce:	4b46      	ldr	r3, [pc, #280]	; (80100e8 <tcp_receive+0xb0c>)
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	899b      	ldrh	r3, [r3, #12]
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fa fb8e 	bl	800a6f8 <lwip_htons>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	f003 0301 	and.w	r3, r3, #1
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f000 80b8 	beq.w	801015a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ffea:	4b45      	ldr	r3, [pc, #276]	; (8010100 <tcp_receive+0xb24>)
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	f043 0320 	orr.w	r3, r3, #32
 800fff2:	b2da      	uxtb	r2, r3
 800fff4:	4b42      	ldr	r3, [pc, #264]	; (8010100 <tcp_receive+0xb24>)
 800fff6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fff8:	e0af      	b.n	801015a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fffe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	4a36      	ldr	r2, [pc, #216]	; (80100e4 <tcp_receive+0xb08>)
 801000a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	891b      	ldrh	r3, [r3, #8]
 8010010:	461c      	mov	r4, r3
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	899b      	ldrh	r3, [r3, #12]
 8010018:	b29b      	uxth	r3, r3
 801001a:	4618      	mov	r0, r3
 801001c:	f7fa fb6c 	bl	800a6f8 <lwip_htons>
 8010020:	4603      	mov	r3, r0
 8010022:	b2db      	uxtb	r3, r3
 8010024:	f003 0303 	and.w	r3, r3, #3
 8010028:	2b00      	cmp	r3, #0
 801002a:	d001      	beq.n	8010030 <tcp_receive+0xa54>
 801002c:	2301      	movs	r3, #1
 801002e:	e000      	b.n	8010032 <tcp_receive+0xa56>
 8010030:	2300      	movs	r3, #0
 8010032:	191a      	adds	r2, r3, r4
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010038:	441a      	add	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010042:	461c      	mov	r4, r3
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	891b      	ldrh	r3, [r3, #8]
 8010048:	461d      	mov	r5, r3
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	899b      	ldrh	r3, [r3, #12]
 8010050:	b29b      	uxth	r3, r3
 8010052:	4618      	mov	r0, r3
 8010054:	f7fa fb50 	bl	800a6f8 <lwip_htons>
 8010058:	4603      	mov	r3, r0
 801005a:	b2db      	uxtb	r3, r3
 801005c:	f003 0303 	and.w	r3, r3, #3
 8010060:	2b00      	cmp	r3, #0
 8010062:	d001      	beq.n	8010068 <tcp_receive+0xa8c>
 8010064:	2301      	movs	r3, #1
 8010066:	e000      	b.n	801006a <tcp_receive+0xa8e>
 8010068:	2300      	movs	r3, #0
 801006a:	442b      	add	r3, r5
 801006c:	429c      	cmp	r4, r3
 801006e:	d206      	bcs.n	801007e <tcp_receive+0xaa2>
 8010070:	4b1e      	ldr	r3, [pc, #120]	; (80100ec <tcp_receive+0xb10>)
 8010072:	f240 622c 	movw	r2, #1580	; 0x62c
 8010076:	4923      	ldr	r1, [pc, #140]	; (8010104 <tcp_receive+0xb28>)
 8010078:	481e      	ldr	r0, [pc, #120]	; (80100f4 <tcp_receive+0xb18>)
 801007a:	f007 fc3f 	bl	80178fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	891b      	ldrh	r3, [r3, #8]
 8010082:	461c      	mov	r4, r3
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	899b      	ldrh	r3, [r3, #12]
 801008a:	b29b      	uxth	r3, r3
 801008c:	4618      	mov	r0, r3
 801008e:	f7fa fb33 	bl	800a6f8 <lwip_htons>
 8010092:	4603      	mov	r3, r0
 8010094:	b2db      	uxtb	r3, r3
 8010096:	f003 0303 	and.w	r3, r3, #3
 801009a:	2b00      	cmp	r3, #0
 801009c:	d001      	beq.n	80100a2 <tcp_receive+0xac6>
 801009e:	2301      	movs	r3, #1
 80100a0:	e000      	b.n	80100a4 <tcp_receive+0xac8>
 80100a2:	2300      	movs	r3, #0
 80100a4:	1919      	adds	r1, r3, r4
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100aa:	b28b      	uxth	r3, r1
 80100ac:	1ad3      	subs	r3, r2, r3
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f7fc fe37 	bl	800cd28 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	891b      	ldrh	r3, [r3, #8]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d028      	beq.n	8010116 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80100c4:	4b0d      	ldr	r3, [pc, #52]	; (80100fc <tcp_receive+0xb20>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d01d      	beq.n	8010108 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80100cc:	4b0b      	ldr	r3, [pc, #44]	; (80100fc <tcp_receive+0xb20>)
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	4619      	mov	r1, r3
 80100d6:	4610      	mov	r0, r2
 80100d8:	f7fb ff90 	bl	800bffc <pbuf_cat>
 80100dc:	e018      	b.n	8010110 <tcp_receive+0xb34>
 80100de:	bf00      	nop
 80100e0:	2000867a 	.word	0x2000867a
 80100e4:	20008670 	.word	0x20008670
 80100e8:	20008650 	.word	0x20008650
 80100ec:	0801aab8 	.word	0x0801aab8
 80100f0:	0801ae98 	.word	0x0801ae98
 80100f4:	0801ab04 	.word	0x0801ab04
 80100f8:	0801aed4 	.word	0x0801aed4
 80100fc:	20008680 	.word	0x20008680
 8010100:	2000867d 	.word	0x2000867d
 8010104:	0801aef4 	.word	0x0801aef4
            } else {
              recv_data = cseg->p;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	4a70      	ldr	r2, [pc, #448]	; (80102d0 <tcp_receive+0xcf4>)
 801010e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	2200      	movs	r2, #0
 8010114:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	899b      	ldrh	r3, [r3, #12]
 801011c:	b29b      	uxth	r3, r3
 801011e:	4618      	mov	r0, r3
 8010120:	f7fa faea 	bl	800a6f8 <lwip_htons>
 8010124:	4603      	mov	r3, r0
 8010126:	b2db      	uxtb	r3, r3
 8010128:	f003 0301 	and.w	r3, r3, #1
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00d      	beq.n	801014c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010130:	4b68      	ldr	r3, [pc, #416]	; (80102d4 <tcp_receive+0xcf8>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	f043 0320 	orr.w	r3, r3, #32
 8010138:	b2da      	uxtb	r2, r3
 801013a:	4b66      	ldr	r3, [pc, #408]	; (80102d4 <tcp_receive+0xcf8>)
 801013c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	7d1b      	ldrb	r3, [r3, #20]
 8010142:	2b04      	cmp	r3, #4
 8010144:	d102      	bne.n	801014c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2207      	movs	r2, #7
 801014a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010154:	68b8      	ldr	r0, [r7, #8]
 8010156:	f7fd fb09 	bl	800d76c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801015e:	2b00      	cmp	r3, #0
 8010160:	d008      	beq.n	8010174 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	685a      	ldr	r2, [r3, #4]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801016e:	429a      	cmp	r2, r3
 8010170:	f43f af43 	beq.w	800fffa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	8b5b      	ldrh	r3, [r3, #26]
 8010178:	f003 0301 	and.w	r3, r3, #1
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00e      	beq.n	801019e <tcp_receive+0xbc2>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	8b5b      	ldrh	r3, [r3, #26]
 8010184:	f023 0301 	bic.w	r3, r3, #1
 8010188:	b29a      	uxth	r2, r3
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	835a      	strh	r2, [r3, #26]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	8b5b      	ldrh	r3, [r3, #26]
 8010192:	f043 0302 	orr.w	r3, r3, #2
 8010196:	b29a      	uxth	r2, r3
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801019c:	e188      	b.n	80104b0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8b5b      	ldrh	r3, [r3, #26]
 80101a2:	f043 0301 	orr.w	r3, r3, #1
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80101ac:	e180      	b.n	80104b0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d106      	bne.n	80101c4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80101b6:	4848      	ldr	r0, [pc, #288]	; (80102d8 <tcp_receive+0xcfc>)
 80101b8:	f7fd faf0 	bl	800d79c <tcp_seg_copy>
 80101bc:	4602      	mov	r2, r0
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	675a      	str	r2, [r3, #116]	; 0x74
 80101c2:	e16d      	b.n	80104a0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80101c4:	2300      	movs	r3, #0
 80101c6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80101ce:	e157      	b.n	8010480 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80101d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	685a      	ldr	r2, [r3, #4]
 80101d6:	4b41      	ldr	r3, [pc, #260]	; (80102dc <tcp_receive+0xd00>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d11d      	bne.n	801021a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80101de:	4b3e      	ldr	r3, [pc, #248]	; (80102d8 <tcp_receive+0xcfc>)
 80101e0:	891a      	ldrh	r2, [r3, #8]
 80101e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e4:	891b      	ldrh	r3, [r3, #8]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	f240 814f 	bls.w	801048a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80101ec:	483a      	ldr	r0, [pc, #232]	; (80102d8 <tcp_receive+0xcfc>)
 80101ee:	f7fd fad5 	bl	800d79c <tcp_seg_copy>
 80101f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	f000 8149 	beq.w	801048e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80101fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d003      	beq.n	801020a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010204:	697a      	ldr	r2, [r7, #20]
 8010206:	601a      	str	r2, [r3, #0]
 8010208:	e002      	b.n	8010210 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010210:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010212:	6978      	ldr	r0, [r7, #20]
 8010214:	f7ff f8de 	bl	800f3d4 <tcp_oos_insert_segment>
                }
                break;
 8010218:	e139      	b.n	801048e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801021a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021c:	2b00      	cmp	r3, #0
 801021e:	d117      	bne.n	8010250 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010220:	4b2e      	ldr	r3, [pc, #184]	; (80102dc <tcp_receive+0xd00>)
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	2b00      	cmp	r3, #0
 801022e:	da57      	bge.n	80102e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010230:	4829      	ldr	r0, [pc, #164]	; (80102d8 <tcp_receive+0xcfc>)
 8010232:	f7fd fab3 	bl	800d79c <tcp_seg_copy>
 8010236:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	2b00      	cmp	r3, #0
 801023c:	f000 8129 	beq.w	8010492 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	69ba      	ldr	r2, [r7, #24]
 8010244:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010248:	69b8      	ldr	r0, [r7, #24]
 801024a:	f7ff f8c3 	bl	800f3d4 <tcp_oos_insert_segment>
                  }
                  break;
 801024e:	e120      	b.n	8010492 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010250:	4b22      	ldr	r3, [pc, #136]	; (80102dc <tcp_receive+0xd00>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	3b01      	subs	r3, #1
 801025e:	2b00      	cmp	r3, #0
 8010260:	db3e      	blt.n	80102e0 <tcp_receive+0xd04>
 8010262:	4b1e      	ldr	r3, [pc, #120]	; (80102dc <tcp_receive+0xd00>)
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	1ad3      	subs	r3, r2, r3
 801026e:	3301      	adds	r3, #1
 8010270:	2b00      	cmp	r3, #0
 8010272:	dc35      	bgt.n	80102e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010274:	4818      	ldr	r0, [pc, #96]	; (80102d8 <tcp_receive+0xcfc>)
 8010276:	f7fd fa91 	bl	800d79c <tcp_seg_copy>
 801027a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	2b00      	cmp	r3, #0
 8010280:	f000 8109 	beq.w	8010496 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801028c:	8912      	ldrh	r2, [r2, #8]
 801028e:	441a      	add	r2, r3
 8010290:	4b12      	ldr	r3, [pc, #72]	; (80102dc <tcp_receive+0xd00>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	1ad3      	subs	r3, r2, r3
 8010296:	2b00      	cmp	r3, #0
 8010298:	dd12      	ble.n	80102c0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801029a:	4b10      	ldr	r3, [pc, #64]	; (80102dc <tcp_receive+0xd00>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	b29a      	uxth	r2, r3
 80102a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	1ad3      	subs	r3, r2, r3
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80102b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b2:	685a      	ldr	r2, [r3, #4]
 80102b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b6:	891b      	ldrh	r3, [r3, #8]
 80102b8:	4619      	mov	r1, r3
 80102ba:	4610      	mov	r0, r2
 80102bc:	f7fb fc4a 	bl	800bb54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80102c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c2:	69fa      	ldr	r2, [r7, #28]
 80102c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80102c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102c8:	69f8      	ldr	r0, [r7, #28]
 80102ca:	f7ff f883 	bl	800f3d4 <tcp_oos_insert_segment>
                  }
                  break;
 80102ce:	e0e2      	b.n	8010496 <tcp_receive+0xeba>
 80102d0:	20008680 	.word	0x20008680
 80102d4:	2000867d 	.word	0x2000867d
 80102d8:	20008650 	.word	0x20008650
 80102dc:	20008670 	.word	0x20008670
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80102e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f040 80c6 	bne.w	801047a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80102ee:	4b80      	ldr	r3, [pc, #512]	; (80104f0 <tcp_receive+0xf14>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f340 80bd 	ble.w	801047a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	899b      	ldrh	r3, [r3, #12]
 8010306:	b29b      	uxth	r3, r3
 8010308:	4618      	mov	r0, r3
 801030a:	f7fa f9f5 	bl	800a6f8 <lwip_htons>
 801030e:	4603      	mov	r3, r0
 8010310:	b2db      	uxtb	r3, r3
 8010312:	f003 0301 	and.w	r3, r3, #1
 8010316:	2b00      	cmp	r3, #0
 8010318:	f040 80bf 	bne.w	801049a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801031c:	4875      	ldr	r0, [pc, #468]	; (80104f4 <tcp_receive+0xf18>)
 801031e:	f7fd fa3d 	bl	800d79c <tcp_seg_copy>
 8010322:	4602      	mov	r2, r0
 8010324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010326:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	f000 80b6 	beq.w	801049e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801033a:	8912      	ldrh	r2, [r2, #8]
 801033c:	441a      	add	r2, r3
 801033e:	4b6c      	ldr	r3, [pc, #432]	; (80104f0 <tcp_receive+0xf14>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	1ad3      	subs	r3, r2, r3
 8010344:	2b00      	cmp	r3, #0
 8010346:	dd12      	ble.n	801036e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010348:	4b69      	ldr	r3, [pc, #420]	; (80104f0 <tcp_receive+0xf14>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	b29a      	uxth	r2, r3
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	b29b      	uxth	r3, r3
 8010356:	1ad3      	subs	r3, r2, r3
 8010358:	b29a      	uxth	r2, r3
 801035a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801035e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010360:	685a      	ldr	r2, [r3, #4]
 8010362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010364:	891b      	ldrh	r3, [r3, #8]
 8010366:	4619      	mov	r1, r3
 8010368:	4610      	mov	r0, r2
 801036a:	f7fb fbf3 	bl	800bb54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801036e:	4b62      	ldr	r3, [pc, #392]	; (80104f8 <tcp_receive+0xf1c>)
 8010370:	881b      	ldrh	r3, [r3, #0]
 8010372:	461a      	mov	r2, r3
 8010374:	4b5e      	ldr	r3, [pc, #376]	; (80104f0 <tcp_receive+0xf14>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	441a      	add	r2, r3
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801037e:	6879      	ldr	r1, [r7, #4]
 8010380:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010382:	440b      	add	r3, r1
 8010384:	1ad3      	subs	r3, r2, r3
 8010386:	2b00      	cmp	r3, #0
 8010388:	f340 8089 	ble.w	801049e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801038c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	899b      	ldrh	r3, [r3, #12]
 8010394:	b29b      	uxth	r3, r3
 8010396:	4618      	mov	r0, r3
 8010398:	f7fa f9ae 	bl	800a6f8 <lwip_htons>
 801039c:	4603      	mov	r3, r0
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	f003 0301 	and.w	r3, r3, #1
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d022      	beq.n	80103ee <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80103a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	68db      	ldr	r3, [r3, #12]
 80103ae:	899b      	ldrh	r3, [r3, #12]
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	b21b      	sxth	r3, r3
 80103b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80103b8:	b21c      	sxth	r4, r3
 80103ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	899b      	ldrh	r3, [r3, #12]
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fa f997 	bl	800a6f8 <lwip_htons>
 80103ca:	4603      	mov	r3, r0
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fa f98e 	bl	800a6f8 <lwip_htons>
 80103dc:	4603      	mov	r3, r0
 80103de:	b21b      	sxth	r3, r3
 80103e0:	4323      	orrs	r3, r4
 80103e2:	b21a      	sxth	r2, r3
 80103e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	b292      	uxth	r2, r2
 80103ec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f2:	b29a      	uxth	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103f8:	4413      	add	r3, r2
 80103fa:	b299      	uxth	r1, r3
 80103fc:	4b3c      	ldr	r3, [pc, #240]	; (80104f0 <tcp_receive+0xf14>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	b29a      	uxth	r2, r3
 8010402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	1a8a      	subs	r2, r1, r2
 8010408:	b292      	uxth	r2, r2
 801040a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801040c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	685a      	ldr	r2, [r3, #4]
 8010412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	891b      	ldrh	r3, [r3, #8]
 8010418:	4619      	mov	r1, r3
 801041a:	4610      	mov	r0, r2
 801041c:	f7fb fb9a 	bl	800bb54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	891c      	ldrh	r4, [r3, #8]
 8010426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	899b      	ldrh	r3, [r3, #12]
 801042e:	b29b      	uxth	r3, r3
 8010430:	4618      	mov	r0, r3
 8010432:	f7fa f961 	bl	800a6f8 <lwip_htons>
 8010436:	4603      	mov	r3, r0
 8010438:	b2db      	uxtb	r3, r3
 801043a:	f003 0303 	and.w	r3, r3, #3
 801043e:	2b00      	cmp	r3, #0
 8010440:	d001      	beq.n	8010446 <tcp_receive+0xe6a>
 8010442:	2301      	movs	r3, #1
 8010444:	e000      	b.n	8010448 <tcp_receive+0xe6c>
 8010446:	2300      	movs	r3, #0
 8010448:	4423      	add	r3, r4
 801044a:	b29a      	uxth	r2, r3
 801044c:	4b2a      	ldr	r3, [pc, #168]	; (80104f8 <tcp_receive+0xf1c>)
 801044e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010450:	4b29      	ldr	r3, [pc, #164]	; (80104f8 <tcp_receive+0xf1c>)
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	461a      	mov	r2, r3
 8010456:	4b26      	ldr	r3, [pc, #152]	; (80104f0 <tcp_receive+0xf14>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	441a      	add	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010460:	6879      	ldr	r1, [r7, #4]
 8010462:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010464:	440b      	add	r3, r1
 8010466:	429a      	cmp	r2, r3
 8010468:	d019      	beq.n	801049e <tcp_receive+0xec2>
 801046a:	4b24      	ldr	r3, [pc, #144]	; (80104fc <tcp_receive+0xf20>)
 801046c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010470:	4923      	ldr	r1, [pc, #140]	; (8010500 <tcp_receive+0xf24>)
 8010472:	4824      	ldr	r0, [pc, #144]	; (8010504 <tcp_receive+0xf28>)
 8010474:	f007 fa42 	bl	80178fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010478:	e011      	b.n	801049e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801047a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010482:	2b00      	cmp	r3, #0
 8010484:	f47f aea4 	bne.w	80101d0 <tcp_receive+0xbf4>
 8010488:	e00a      	b.n	80104a0 <tcp_receive+0xec4>
                break;
 801048a:	bf00      	nop
 801048c:	e008      	b.n	80104a0 <tcp_receive+0xec4>
                break;
 801048e:	bf00      	nop
 8010490:	e006      	b.n	80104a0 <tcp_receive+0xec4>
                  break;
 8010492:	bf00      	nop
 8010494:	e004      	b.n	80104a0 <tcp_receive+0xec4>
                  break;
 8010496:	bf00      	nop
 8010498:	e002      	b.n	80104a0 <tcp_receive+0xec4>
                  break;
 801049a:	bf00      	nop
 801049c:	e000      	b.n	80104a0 <tcp_receive+0xec4>
                break;
 801049e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f001 fe9b 	bl	80121dc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80104a6:	e003      	b.n	80104b0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f001 fe97 	bl	80121dc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80104ae:	e01a      	b.n	80104e6 <tcp_receive+0xf0a>
 80104b0:	e019      	b.n	80104e6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80104b2:	4b0f      	ldr	r3, [pc, #60]	; (80104f0 <tcp_receive+0xf14>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	2b00      	cmp	r3, #0
 80104be:	db0a      	blt.n	80104d6 <tcp_receive+0xefa>
 80104c0:	4b0b      	ldr	r3, [pc, #44]	; (80104f0 <tcp_receive+0xf14>)
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c8:	6879      	ldr	r1, [r7, #4]
 80104ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104cc:	440b      	add	r3, r1
 80104ce:	1ad3      	subs	r3, r2, r3
 80104d0:	3301      	adds	r3, #1
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	dd07      	ble.n	80104e6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	8b5b      	ldrh	r3, [r3, #26]
 80104da:	f043 0302 	orr.w	r3, r3, #2
 80104de:	b29a      	uxth	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80104e4:	e7ff      	b.n	80104e6 <tcp_receive+0xf0a>
 80104e6:	bf00      	nop
 80104e8:	3750      	adds	r7, #80	; 0x50
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bdb0      	pop	{r4, r5, r7, pc}
 80104ee:	bf00      	nop
 80104f0:	20008670 	.word	0x20008670
 80104f4:	20008650 	.word	0x20008650
 80104f8:	2000867a 	.word	0x2000867a
 80104fc:	0801aab8 	.word	0x0801aab8
 8010500:	0801ae60 	.word	0x0801ae60
 8010504:	0801ab04 	.word	0x0801ab04

08010508 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801050e:	4b15      	ldr	r3, [pc, #84]	; (8010564 <tcp_get_next_optbyte+0x5c>)
 8010510:	881b      	ldrh	r3, [r3, #0]
 8010512:	1c5a      	adds	r2, r3, #1
 8010514:	b291      	uxth	r1, r2
 8010516:	4a13      	ldr	r2, [pc, #76]	; (8010564 <tcp_get_next_optbyte+0x5c>)
 8010518:	8011      	strh	r1, [r2, #0]
 801051a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801051c:	4b12      	ldr	r3, [pc, #72]	; (8010568 <tcp_get_next_optbyte+0x60>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d004      	beq.n	801052e <tcp_get_next_optbyte+0x26>
 8010524:	4b11      	ldr	r3, [pc, #68]	; (801056c <tcp_get_next_optbyte+0x64>)
 8010526:	881b      	ldrh	r3, [r3, #0]
 8010528:	88fa      	ldrh	r2, [r7, #6]
 801052a:	429a      	cmp	r2, r3
 801052c:	d208      	bcs.n	8010540 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801052e:	4b10      	ldr	r3, [pc, #64]	; (8010570 <tcp_get_next_optbyte+0x68>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	3314      	adds	r3, #20
 8010534:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010536:	88fb      	ldrh	r3, [r7, #6]
 8010538:	683a      	ldr	r2, [r7, #0]
 801053a:	4413      	add	r3, r2
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	e00b      	b.n	8010558 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010540:	88fb      	ldrh	r3, [r7, #6]
 8010542:	b2da      	uxtb	r2, r3
 8010544:	4b09      	ldr	r3, [pc, #36]	; (801056c <tcp_get_next_optbyte+0x64>)
 8010546:	881b      	ldrh	r3, [r3, #0]
 8010548:	b2db      	uxtb	r3, r3
 801054a:	1ad3      	subs	r3, r2, r3
 801054c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801054e:	4b06      	ldr	r3, [pc, #24]	; (8010568 <tcp_get_next_optbyte+0x60>)
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	797b      	ldrb	r3, [r7, #5]
 8010554:	4413      	add	r3, r2
 8010556:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010558:	4618      	mov	r0, r3
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr
 8010564:	2000866c 	.word	0x2000866c
 8010568:	20008668 	.word	0x20008668
 801056c:	20008666 	.word	0x20008666
 8010570:	20008660 	.word	0x20008660

08010574 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b084      	sub	sp, #16
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d106      	bne.n	8010590 <tcp_parseopt+0x1c>
 8010582:	4b31      	ldr	r3, [pc, #196]	; (8010648 <tcp_parseopt+0xd4>)
 8010584:	f240 727d 	movw	r2, #1917	; 0x77d
 8010588:	4930      	ldr	r1, [pc, #192]	; (801064c <tcp_parseopt+0xd8>)
 801058a:	4831      	ldr	r0, [pc, #196]	; (8010650 <tcp_parseopt+0xdc>)
 801058c:	f007 f9b6 	bl	80178fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010590:	4b30      	ldr	r3, [pc, #192]	; (8010654 <tcp_parseopt+0xe0>)
 8010592:	881b      	ldrh	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d053      	beq.n	8010640 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010598:	4b2f      	ldr	r3, [pc, #188]	; (8010658 <tcp_parseopt+0xe4>)
 801059a:	2200      	movs	r2, #0
 801059c:	801a      	strh	r2, [r3, #0]
 801059e:	e043      	b.n	8010628 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80105a0:	f7ff ffb2 	bl	8010508 <tcp_get_next_optbyte>
 80105a4:	4603      	mov	r3, r0
 80105a6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d03c      	beq.n	8010628 <tcp_parseopt+0xb4>
 80105ae:	2b02      	cmp	r3, #2
 80105b0:	d002      	beq.n	80105b8 <tcp_parseopt+0x44>
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d03f      	beq.n	8010636 <tcp_parseopt+0xc2>
 80105b6:	e026      	b.n	8010606 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80105b8:	f7ff ffa6 	bl	8010508 <tcp_get_next_optbyte>
 80105bc:	4603      	mov	r3, r0
 80105be:	2b04      	cmp	r3, #4
 80105c0:	d13b      	bne.n	801063a <tcp_parseopt+0xc6>
 80105c2:	4b25      	ldr	r3, [pc, #148]	; (8010658 <tcp_parseopt+0xe4>)
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	3302      	adds	r3, #2
 80105c8:	4a22      	ldr	r2, [pc, #136]	; (8010654 <tcp_parseopt+0xe0>)
 80105ca:	8812      	ldrh	r2, [r2, #0]
 80105cc:	4293      	cmp	r3, r2
 80105ce:	dc34      	bgt.n	801063a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80105d0:	f7ff ff9a 	bl	8010508 <tcp_get_next_optbyte>
 80105d4:	4603      	mov	r3, r0
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	021b      	lsls	r3, r3, #8
 80105da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80105dc:	f7ff ff94 	bl	8010508 <tcp_get_next_optbyte>
 80105e0:	4603      	mov	r3, r0
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	89bb      	ldrh	r3, [r7, #12]
 80105e6:	4313      	orrs	r3, r2
 80105e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80105ea:	89bb      	ldrh	r3, [r7, #12]
 80105ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80105f0:	d804      	bhi.n	80105fc <tcp_parseopt+0x88>
 80105f2:	89bb      	ldrh	r3, [r7, #12]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d001      	beq.n	80105fc <tcp_parseopt+0x88>
 80105f8:	89ba      	ldrh	r2, [r7, #12]
 80105fa:	e001      	b.n	8010600 <tcp_parseopt+0x8c>
 80105fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010604:	e010      	b.n	8010628 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010606:	f7ff ff7f 	bl	8010508 <tcp_get_next_optbyte>
 801060a:	4603      	mov	r3, r0
 801060c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801060e:	7afb      	ldrb	r3, [r7, #11]
 8010610:	2b01      	cmp	r3, #1
 8010612:	d914      	bls.n	801063e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010614:	7afb      	ldrb	r3, [r7, #11]
 8010616:	b29a      	uxth	r2, r3
 8010618:	4b0f      	ldr	r3, [pc, #60]	; (8010658 <tcp_parseopt+0xe4>)
 801061a:	881b      	ldrh	r3, [r3, #0]
 801061c:	4413      	add	r3, r2
 801061e:	b29b      	uxth	r3, r3
 8010620:	3b02      	subs	r3, #2
 8010622:	b29a      	uxth	r2, r3
 8010624:	4b0c      	ldr	r3, [pc, #48]	; (8010658 <tcp_parseopt+0xe4>)
 8010626:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010628:	4b0b      	ldr	r3, [pc, #44]	; (8010658 <tcp_parseopt+0xe4>)
 801062a:	881a      	ldrh	r2, [r3, #0]
 801062c:	4b09      	ldr	r3, [pc, #36]	; (8010654 <tcp_parseopt+0xe0>)
 801062e:	881b      	ldrh	r3, [r3, #0]
 8010630:	429a      	cmp	r2, r3
 8010632:	d3b5      	bcc.n	80105a0 <tcp_parseopt+0x2c>
 8010634:	e004      	b.n	8010640 <tcp_parseopt+0xcc>
          return;
 8010636:	bf00      	nop
 8010638:	e002      	b.n	8010640 <tcp_parseopt+0xcc>
            return;
 801063a:	bf00      	nop
 801063c:	e000      	b.n	8010640 <tcp_parseopt+0xcc>
            return;
 801063e:	bf00      	nop
      }
    }
  }
}
 8010640:	3710      	adds	r7, #16
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	0801aab8 	.word	0x0801aab8
 801064c:	0801af1c 	.word	0x0801af1c
 8010650:	0801ab04 	.word	0x0801ab04
 8010654:	20008664 	.word	0x20008664
 8010658:	2000866c 	.word	0x2000866c

0801065c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801065c:	b480      	push	{r7}
 801065e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010660:	4b05      	ldr	r3, [pc, #20]	; (8010678 <tcp_trigger_input_pcb_close+0x1c>)
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	f043 0310 	orr.w	r3, r3, #16
 8010668:	b2da      	uxtb	r2, r3
 801066a:	4b03      	ldr	r3, [pc, #12]	; (8010678 <tcp_trigger_input_pcb_close+0x1c>)
 801066c:	701a      	strb	r2, [r3, #0]
}
 801066e:	bf00      	nop
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr
 8010678:	2000867d 	.word	0x2000867d

0801067c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00a      	beq.n	80106a4 <tcp_route+0x28>
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	7a1b      	ldrb	r3, [r3, #8]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d006      	beq.n	80106a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	7a1b      	ldrb	r3, [r3, #8]
 801069a:	4618      	mov	r0, r3
 801069c:	f7fb f856 	bl	800b74c <netif_get_by_index>
 80106a0:	4603      	mov	r3, r0
 80106a2:	e003      	b.n	80106ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f005 fcc9 	bl	801603c <ip4_route>
 80106aa:	4603      	mov	r3, r0
  }
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3710      	adds	r7, #16
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80106b4:	b590      	push	{r4, r7, lr}
 80106b6:	b087      	sub	sp, #28
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	603b      	str	r3, [r7, #0]
 80106c0:	4613      	mov	r3, r2
 80106c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d105      	bne.n	80106d6 <tcp_create_segment+0x22>
 80106ca:	4b44      	ldr	r3, [pc, #272]	; (80107dc <tcp_create_segment+0x128>)
 80106cc:	22a3      	movs	r2, #163	; 0xa3
 80106ce:	4944      	ldr	r1, [pc, #272]	; (80107e0 <tcp_create_segment+0x12c>)
 80106d0:	4844      	ldr	r0, [pc, #272]	; (80107e4 <tcp_create_segment+0x130>)
 80106d2:	f007 f913 	bl	80178fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d105      	bne.n	80106e8 <tcp_create_segment+0x34>
 80106dc:	4b3f      	ldr	r3, [pc, #252]	; (80107dc <tcp_create_segment+0x128>)
 80106de:	22a4      	movs	r2, #164	; 0xa4
 80106e0:	4941      	ldr	r1, [pc, #260]	; (80107e8 <tcp_create_segment+0x134>)
 80106e2:	4840      	ldr	r0, [pc, #256]	; (80107e4 <tcp_create_segment+0x130>)
 80106e4:	f007 f90a 	bl	80178fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80106e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	f003 0304 	and.w	r3, r3, #4
 80106f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80106f6:	2003      	movs	r0, #3
 80106f8:	f7fa fcb4 	bl	800b064 <memp_malloc>
 80106fc:	6138      	str	r0, [r7, #16]
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d104      	bne.n	801070e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010704:	68b8      	ldr	r0, [r7, #8]
 8010706:	f7fb fbab 	bl	800be60 <pbuf_free>
    return NULL;
 801070a:	2300      	movs	r3, #0
 801070c:	e061      	b.n	80107d2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010714:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	2200      	movs	r2, #0
 801071a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	891a      	ldrh	r2, [r3, #8]
 8010726:	7dfb      	ldrb	r3, [r7, #23]
 8010728:	b29b      	uxth	r3, r3
 801072a:	429a      	cmp	r2, r3
 801072c:	d205      	bcs.n	801073a <tcp_create_segment+0x86>
 801072e:	4b2b      	ldr	r3, [pc, #172]	; (80107dc <tcp_create_segment+0x128>)
 8010730:	22b0      	movs	r2, #176	; 0xb0
 8010732:	492e      	ldr	r1, [pc, #184]	; (80107ec <tcp_create_segment+0x138>)
 8010734:	482b      	ldr	r0, [pc, #172]	; (80107e4 <tcp_create_segment+0x130>)
 8010736:	f007 f8e1 	bl	80178fc <iprintf>
  seg->len = p->tot_len - optlen;
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	891a      	ldrh	r2, [r3, #8]
 801073e:	7dfb      	ldrb	r3, [r7, #23]
 8010740:	b29b      	uxth	r3, r3
 8010742:	1ad3      	subs	r3, r2, r3
 8010744:	b29a      	uxth	r2, r3
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801074a:	2114      	movs	r1, #20
 801074c:	68b8      	ldr	r0, [r7, #8]
 801074e:	f7fb faf1 	bl	800bd34 <pbuf_add_header>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010758:	6938      	ldr	r0, [r7, #16]
 801075a:	f7fd f807 	bl	800d76c <tcp_seg_free>
    return NULL;
 801075e:	2300      	movs	r3, #0
 8010760:	e037      	b.n	80107d2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	685a      	ldr	r2, [r3, #4]
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	8ada      	ldrh	r2, [r3, #22]
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	68dc      	ldr	r4, [r3, #12]
 8010774:	4610      	mov	r0, r2
 8010776:	f7f9 ffbf 	bl	800a6f8 <lwip_htons>
 801077a:	4603      	mov	r3, r0
 801077c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	8b1a      	ldrh	r2, [r3, #24]
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	68dc      	ldr	r4, [r3, #12]
 8010786:	4610      	mov	r0, r2
 8010788:	f7f9 ffb6 	bl	800a6f8 <lwip_htons>
 801078c:	4603      	mov	r3, r0
 801078e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	68dc      	ldr	r4, [r3, #12]
 8010794:	6838      	ldr	r0, [r7, #0]
 8010796:	f7f9 ffc4 	bl	800a722 <lwip_htonl>
 801079a:	4603      	mov	r3, r0
 801079c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801079e:	7dfb      	ldrb	r3, [r7, #23]
 80107a0:	089b      	lsrs	r3, r3, #2
 80107a2:	b2db      	uxtb	r3, r3
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	3305      	adds	r3, #5
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	031b      	lsls	r3, r3, #12
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	79fb      	ldrb	r3, [r7, #7]
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	4313      	orrs	r3, r2
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	68dc      	ldr	r4, [r3, #12]
 80107ba:	4610      	mov	r0, r2
 80107bc:	f7f9 ff9c 	bl	800a6f8 <lwip_htons>
 80107c0:	4603      	mov	r3, r0
 80107c2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	2200      	movs	r2, #0
 80107ca:	749a      	strb	r2, [r3, #18]
 80107cc:	2200      	movs	r2, #0
 80107ce:	74da      	strb	r2, [r3, #19]
  return seg;
 80107d0:	693b      	ldr	r3, [r7, #16]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	371c      	adds	r7, #28
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd90      	pop	{r4, r7, pc}
 80107da:	bf00      	nop
 80107dc:	0801af38 	.word	0x0801af38
 80107e0:	0801af6c 	.word	0x0801af6c
 80107e4:	0801af8c 	.word	0x0801af8c
 80107e8:	0801afb4 	.word	0x0801afb4
 80107ec:	0801afd8 	.word	0x0801afd8

080107f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b086      	sub	sp, #24
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	607b      	str	r3, [r7, #4]
 80107f8:	4603      	mov	r3, r0
 80107fa:	73fb      	strb	r3, [r7, #15]
 80107fc:	460b      	mov	r3, r1
 80107fe:	81bb      	strh	r3, [r7, #12]
 8010800:	4613      	mov	r3, r2
 8010802:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010804:	89bb      	ldrh	r3, [r7, #12]
 8010806:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d105      	bne.n	801081a <tcp_pbuf_prealloc+0x2a>
 801080e:	4b30      	ldr	r3, [pc, #192]	; (80108d0 <tcp_pbuf_prealloc+0xe0>)
 8010810:	22e8      	movs	r2, #232	; 0xe8
 8010812:	4930      	ldr	r1, [pc, #192]	; (80108d4 <tcp_pbuf_prealloc+0xe4>)
 8010814:	4830      	ldr	r0, [pc, #192]	; (80108d8 <tcp_pbuf_prealloc+0xe8>)
 8010816:	f007 f871 	bl	80178fc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801081a:	6a3b      	ldr	r3, [r7, #32]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d105      	bne.n	801082c <tcp_pbuf_prealloc+0x3c>
 8010820:	4b2b      	ldr	r3, [pc, #172]	; (80108d0 <tcp_pbuf_prealloc+0xe0>)
 8010822:	22e9      	movs	r2, #233	; 0xe9
 8010824:	492d      	ldr	r1, [pc, #180]	; (80108dc <tcp_pbuf_prealloc+0xec>)
 8010826:	482c      	ldr	r0, [pc, #176]	; (80108d8 <tcp_pbuf_prealloc+0xe8>)
 8010828:	f007 f868 	bl	80178fc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801082c:	89ba      	ldrh	r2, [r7, #12]
 801082e:	897b      	ldrh	r3, [r7, #10]
 8010830:	429a      	cmp	r2, r3
 8010832:	d221      	bcs.n	8010878 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010834:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010838:	f003 0302 	and.w	r3, r3, #2
 801083c:	2b00      	cmp	r3, #0
 801083e:	d111      	bne.n	8010864 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010840:	6a3b      	ldr	r3, [r7, #32]
 8010842:	8b5b      	ldrh	r3, [r3, #26]
 8010844:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010848:	2b00      	cmp	r3, #0
 801084a:	d115      	bne.n	8010878 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801084c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010850:	2b00      	cmp	r3, #0
 8010852:	d007      	beq.n	8010864 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010854:	6a3b      	ldr	r3, [r7, #32]
 8010856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010858:	2b00      	cmp	r3, #0
 801085a:	d103      	bne.n	8010864 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801085c:	6a3b      	ldr	r3, [r7, #32]
 801085e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010860:	2b00      	cmp	r3, #0
 8010862:	d009      	beq.n	8010878 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010864:	89bb      	ldrh	r3, [r7, #12]
 8010866:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801086a:	f023 0203 	bic.w	r2, r3, #3
 801086e:	897b      	ldrh	r3, [r7, #10]
 8010870:	4293      	cmp	r3, r2
 8010872:	bf28      	it	cs
 8010874:	4613      	movcs	r3, r2
 8010876:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010878:	8af9      	ldrh	r1, [r7, #22]
 801087a:	7bfb      	ldrb	r3, [r7, #15]
 801087c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010880:	4618      	mov	r0, r3
 8010882:	f7fb f80d 	bl	800b8a0 <pbuf_alloc>
 8010886:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d101      	bne.n	8010892 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801088e:	2300      	movs	r3, #0
 8010890:	e019      	b.n	80108c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d006      	beq.n	80108a8 <tcp_pbuf_prealloc+0xb8>
 801089a:	4b0d      	ldr	r3, [pc, #52]	; (80108d0 <tcp_pbuf_prealloc+0xe0>)
 801089c:	f240 120b 	movw	r2, #267	; 0x10b
 80108a0:	490f      	ldr	r1, [pc, #60]	; (80108e0 <tcp_pbuf_prealloc+0xf0>)
 80108a2:	480d      	ldr	r0, [pc, #52]	; (80108d8 <tcp_pbuf_prealloc+0xe8>)
 80108a4:	f007 f82a 	bl	80178fc <iprintf>
  *oversize = p->len - length;
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	895a      	ldrh	r2, [r3, #10]
 80108ac:	89bb      	ldrh	r3, [r7, #12]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	89ba      	ldrh	r2, [r7, #12]
 80108ba:	811a      	strh	r2, [r3, #8]
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	891a      	ldrh	r2, [r3, #8]
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	815a      	strh	r2, [r3, #10]
  return p;
 80108c4:	693b      	ldr	r3, [r7, #16]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3718      	adds	r7, #24
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	0801af38 	.word	0x0801af38
 80108d4:	0801aff0 	.word	0x0801aff0
 80108d8:	0801af8c 	.word	0x0801af8c
 80108dc:	0801b014 	.word	0x0801b014
 80108e0:	0801b034 	.word	0x0801b034

080108e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	460b      	mov	r3, r1
 80108ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <tcp_write_checks+0x20>
 80108f6:	4b33      	ldr	r3, [pc, #204]	; (80109c4 <tcp_write_checks+0xe0>)
 80108f8:	f240 1233 	movw	r2, #307	; 0x133
 80108fc:	4932      	ldr	r1, [pc, #200]	; (80109c8 <tcp_write_checks+0xe4>)
 80108fe:	4833      	ldr	r0, [pc, #204]	; (80109cc <tcp_write_checks+0xe8>)
 8010900:	f006 fffc 	bl	80178fc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	7d1b      	ldrb	r3, [r3, #20]
 8010908:	2b04      	cmp	r3, #4
 801090a:	d00e      	beq.n	801092a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010910:	2b07      	cmp	r3, #7
 8010912:	d00a      	beq.n	801092a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010918:	2b02      	cmp	r3, #2
 801091a:	d006      	beq.n	801092a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010920:	2b03      	cmp	r3, #3
 8010922:	d002      	beq.n	801092a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010924:	f06f 030a 	mvn.w	r3, #10
 8010928:	e048      	b.n	80109bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801092a:	887b      	ldrh	r3, [r7, #2]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d101      	bne.n	8010934 <tcp_write_checks+0x50>
    return ERR_OK;
 8010930:	2300      	movs	r3, #0
 8010932:	e043      	b.n	80109bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801093a:	887a      	ldrh	r2, [r7, #2]
 801093c:	429a      	cmp	r2, r3
 801093e:	d909      	bls.n	8010954 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	8b5b      	ldrh	r3, [r3, #26]
 8010944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010948:	b29a      	uxth	r2, r3
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801094e:	f04f 33ff 	mov.w	r3, #4294967295
 8010952:	e033      	b.n	80109bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801095a:	2b08      	cmp	r3, #8
 801095c:	d909      	bls.n	8010972 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	8b5b      	ldrh	r3, [r3, #26]
 8010962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010966:	b29a      	uxth	r2, r3
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801096c:	f04f 33ff 	mov.w	r3, #4294967295
 8010970:	e024      	b.n	80109bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010978:	2b00      	cmp	r3, #0
 801097a:	d00f      	beq.n	801099c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010980:	2b00      	cmp	r3, #0
 8010982:	d11a      	bne.n	80109ba <tcp_write_checks+0xd6>
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010988:	2b00      	cmp	r3, #0
 801098a:	d116      	bne.n	80109ba <tcp_write_checks+0xd6>
 801098c:	4b0d      	ldr	r3, [pc, #52]	; (80109c4 <tcp_write_checks+0xe0>)
 801098e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010992:	490f      	ldr	r1, [pc, #60]	; (80109d0 <tcp_write_checks+0xec>)
 8010994:	480d      	ldr	r0, [pc, #52]	; (80109cc <tcp_write_checks+0xe8>)
 8010996:	f006 ffb1 	bl	80178fc <iprintf>
 801099a:	e00e      	b.n	80109ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d103      	bne.n	80109ac <tcp_write_checks+0xc8>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d006      	beq.n	80109ba <tcp_write_checks+0xd6>
 80109ac:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <tcp_write_checks+0xe0>)
 80109ae:	f240 1259 	movw	r2, #345	; 0x159
 80109b2:	4908      	ldr	r1, [pc, #32]	; (80109d4 <tcp_write_checks+0xf0>)
 80109b4:	4805      	ldr	r0, [pc, #20]	; (80109cc <tcp_write_checks+0xe8>)
 80109b6:	f006 ffa1 	bl	80178fc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80109ba:	2300      	movs	r3, #0
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	0801af38 	.word	0x0801af38
 80109c8:	0801b048 	.word	0x0801b048
 80109cc:	0801af8c 	.word	0x0801af8c
 80109d0:	0801b068 	.word	0x0801b068
 80109d4:	0801b0a4 	.word	0x0801b0a4

080109d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80109d8:	b590      	push	{r4, r7, lr}
 80109da:	b09b      	sub	sp, #108	; 0x6c
 80109dc:	af04      	add	r7, sp, #16
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	4611      	mov	r1, r2
 80109e4:	461a      	mov	r2, r3
 80109e6:	460b      	mov	r3, r1
 80109e8:	80fb      	strh	r3, [r7, #6]
 80109ea:	4613      	mov	r3, r2
 80109ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80109ee:	2300      	movs	r3, #0
 80109f0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80109f2:	2300      	movs	r3, #0
 80109f4:	653b      	str	r3, [r7, #80]	; 0x50
 80109f6:	2300      	movs	r3, #0
 80109f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109fa:	2300      	movs	r3, #0
 80109fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80109fe:	2300      	movs	r3, #0
 8010a00:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010a02:	2300      	movs	r3, #0
 8010a04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010a12:	2300      	movs	r3, #0
 8010a14:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010a16:	2300      	movs	r3, #0
 8010a18:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d109      	bne.n	8010a34 <tcp_write+0x5c>
 8010a20:	4ba5      	ldr	r3, [pc, #660]	; (8010cb8 <tcp_write+0x2e0>)
 8010a22:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010a26:	49a5      	ldr	r1, [pc, #660]	; (8010cbc <tcp_write+0x2e4>)
 8010a28:	48a5      	ldr	r0, [pc, #660]	; (8010cc0 <tcp_write+0x2e8>)
 8010a2a:	f006 ff67 	bl	80178fc <iprintf>
 8010a2e:	f06f 030f 	mvn.w	r3, #15
 8010a32:	e32c      	b.n	801108e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a3a:	085b      	lsrs	r3, r3, #1
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a42:	4293      	cmp	r3, r2
 8010a44:	bf28      	it	cs
 8010a46:	4613      	movcs	r3, r2
 8010a48:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d102      	bne.n	8010a56 <tcp_write+0x7e>
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a54:	e000      	b.n	8010a58 <tcp_write+0x80>
 8010a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a58:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d109      	bne.n	8010a74 <tcp_write+0x9c>
 8010a60:	4b95      	ldr	r3, [pc, #596]	; (8010cb8 <tcp_write+0x2e0>)
 8010a62:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8010a66:	4997      	ldr	r1, [pc, #604]	; (8010cc4 <tcp_write+0x2ec>)
 8010a68:	4895      	ldr	r0, [pc, #596]	; (8010cc0 <tcp_write+0x2e8>)
 8010a6a:	f006 ff47 	bl	80178fc <iprintf>
 8010a6e:	f06f 030f 	mvn.w	r3, #15
 8010a72:	e30c      	b.n	801108e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010a74:	88fb      	ldrh	r3, [r7, #6]
 8010a76:	4619      	mov	r1, r3
 8010a78:	68f8      	ldr	r0, [r7, #12]
 8010a7a:	f7ff ff33 	bl	80108e4 <tcp_write_checks>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010a84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d002      	beq.n	8010a92 <tcp_write+0xba>
    return err;
 8010a8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010a90:	e2fd      	b.n	801108e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	f000 80f7 	beq.w	8010c9a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8010ab2:	e002      	b.n	8010aba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d1f8      	bne.n	8010ab4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ac4:	7a9b      	ldrb	r3, [r3, #10]
 8010ac6:	009b      	lsls	r3, r3, #2
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	f003 0304 	and.w	r3, r3, #4
 8010ace:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010ad0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ad4:	891b      	ldrh	r3, [r3, #8]
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	8c3b      	ldrh	r3, [r7, #32]
 8010ada:	440b      	add	r3, r1
 8010adc:	429a      	cmp	r2, r3
 8010ade:	da06      	bge.n	8010aee <tcp_write+0x116>
 8010ae0:	4b75      	ldr	r3, [pc, #468]	; (8010cb8 <tcp_write+0x2e0>)
 8010ae2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010ae6:	4978      	ldr	r1, [pc, #480]	; (8010cc8 <tcp_write+0x2f0>)
 8010ae8:	4875      	ldr	r0, [pc, #468]	; (8010cc0 <tcp_write+0x2e8>)
 8010aea:	f006 ff07 	bl	80178fc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010af0:	891a      	ldrh	r2, [r3, #8]
 8010af2:	8c3b      	ldrh	r3, [r7, #32]
 8010af4:	4413      	add	r3, r2
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b04:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010b06:	8a7b      	ldrh	r3, [r7, #18]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d027      	beq.n	8010b5c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010b0c:	8a7b      	ldrh	r3, [r7, #18]
 8010b0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d206      	bcs.n	8010b22 <tcp_write+0x14a>
 8010b14:	4b68      	ldr	r3, [pc, #416]	; (8010cb8 <tcp_write+0x2e0>)
 8010b16:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010b1a:	496c      	ldr	r1, [pc, #432]	; (8010ccc <tcp_write+0x2f4>)
 8010b1c:	4868      	ldr	r0, [pc, #416]	; (8010cc0 <tcp_write+0x2e8>)
 8010b1e:	f006 feed 	bl	80178fc <iprintf>
      seg = last_unsent;
 8010b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b24:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010b26:	8a7b      	ldrh	r3, [r7, #18]
 8010b28:	88fa      	ldrh	r2, [r7, #6]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d901      	bls.n	8010b32 <tcp_write+0x15a>
 8010b2e:	8a7b      	ldrh	r3, [r7, #18]
 8010b30:	e000      	b.n	8010b34 <tcp_write+0x15c>
 8010b32:	88fb      	ldrh	r3, [r7, #6]
 8010b34:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010b36:	4293      	cmp	r3, r2
 8010b38:	bfa8      	it	ge
 8010b3a:	4613      	movge	r3, r2
 8010b3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010b3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b44:	4413      	add	r3, r2
 8010b46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010b4a:	8a7a      	ldrh	r2, [r7, #18]
 8010b4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010b54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010b56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010b5c:	8a7b      	ldrh	r3, [r7, #18]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00b      	beq.n	8010b7a <tcp_write+0x1a2>
 8010b62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b66:	88fb      	ldrh	r3, [r7, #6]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d006      	beq.n	8010b7a <tcp_write+0x1a2>
 8010b6c:	4b52      	ldr	r3, [pc, #328]	; (8010cb8 <tcp_write+0x2e0>)
 8010b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b72:	4957      	ldr	r1, [pc, #348]	; (8010cd0 <tcp_write+0x2f8>)
 8010b74:	4852      	ldr	r0, [pc, #328]	; (8010cc0 <tcp_write+0x2e8>)
 8010b76:	f006 fec1 	bl	80178fc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b7e:	88fb      	ldrh	r3, [r7, #6]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	f080 8168 	bcs.w	8010e56 <tcp_write+0x47e>
 8010b86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f000 8164 	beq.w	8010e56 <tcp_write+0x47e>
 8010b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b90:	891b      	ldrh	r3, [r3, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f000 815f 	beq.w	8010e56 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010b98:	88fa      	ldrh	r2, [r7, #6]
 8010b9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b9e:	1ad2      	subs	r2, r2, r3
 8010ba0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	bfa8      	it	ge
 8010ba6:	4613      	movge	r3, r2
 8010ba8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bac:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010bae:	797b      	ldrb	r3, [r7, #5]
 8010bb0:	f003 0301 	and.w	r3, r3, #1
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d027      	beq.n	8010c08 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010bb8:	f107 0012 	add.w	r0, r7, #18
 8010bbc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010bbe:	8bf9      	ldrh	r1, [r7, #30]
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	9302      	str	r3, [sp, #8]
 8010bc4:	797b      	ldrb	r3, [r7, #5]
 8010bc6:	9301      	str	r3, [sp, #4]
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2000      	movs	r0, #0
 8010bd0:	f7ff fe0e 	bl	80107f0 <tcp_pbuf_prealloc>
 8010bd4:	6578      	str	r0, [r7, #84]	; 0x54
 8010bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f000 8226 	beq.w	801102a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010be0:	6858      	ldr	r0, [r3, #4]
 8010be2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010be6:	68ba      	ldr	r2, [r7, #8]
 8010be8:	4413      	add	r3, r2
 8010bea:	8bfa      	ldrh	r2, [r7, #30]
 8010bec:	4619      	mov	r1, r3
 8010bee:	f006 fe58 	bl	80178a2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010bf2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010bf4:	f7fb f9c2 	bl	800bf7c <pbuf_clen>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c00:	4413      	add	r3, r2
 8010c02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010c06:	e041      	b.n	8010c8c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8010c0e:	e002      	b.n	8010c16 <tcp_write+0x23e>
 8010c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	637b      	str	r3, [r7, #52]	; 0x34
 8010c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d1f8      	bne.n	8010c10 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c20:	7b1b      	ldrb	r3, [r3, #12]
 8010c22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d115      	bne.n	8010c56 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c30:	8952      	ldrh	r2, [r2, #10]
 8010c32:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010c34:	68ba      	ldr	r2, [r7, #8]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d10d      	bne.n	8010c56 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d006      	beq.n	8010c50 <tcp_write+0x278>
 8010c42:	4b1d      	ldr	r3, [pc, #116]	; (8010cb8 <tcp_write+0x2e0>)
 8010c44:	f240 2231 	movw	r2, #561	; 0x231
 8010c48:	4922      	ldr	r1, [pc, #136]	; (8010cd4 <tcp_write+0x2fc>)
 8010c4a:	481d      	ldr	r0, [pc, #116]	; (8010cc0 <tcp_write+0x2e8>)
 8010c4c:	f006 fe56 	bl	80178fc <iprintf>
          extendlen = seglen;
 8010c50:	8bfb      	ldrh	r3, [r7, #30]
 8010c52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010c54:	e01a      	b.n	8010c8c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010c56:	8bfb      	ldrh	r3, [r7, #30]
 8010c58:	2201      	movs	r2, #1
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	f7fa fe1f 	bl	800b8a0 <pbuf_alloc>
 8010c62:	6578      	str	r0, [r7, #84]	; 0x54
 8010c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	f000 81e1 	beq.w	801102e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010c6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	441a      	add	r2, r3
 8010c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c76:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010c78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010c7a:	f7fb f97f 	bl	800bf7c <pbuf_clen>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	461a      	mov	r2, r3
 8010c82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c86:	4413      	add	r3, r2
 8010c88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010c8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c90:	8bfb      	ldrh	r3, [r7, #30]
 8010c92:	4413      	add	r3, r2
 8010c94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010c98:	e0dd      	b.n	8010e56 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f000 80d8 	beq.w	8010e56 <tcp_write+0x47e>
 8010ca6:	4b04      	ldr	r3, [pc, #16]	; (8010cb8 <tcp_write+0x2e0>)
 8010ca8:	f240 224b 	movw	r2, #587	; 0x24b
 8010cac:	490a      	ldr	r1, [pc, #40]	; (8010cd8 <tcp_write+0x300>)
 8010cae:	4804      	ldr	r0, [pc, #16]	; (8010cc0 <tcp_write+0x2e8>)
 8010cb0:	f006 fe24 	bl	80178fc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010cb4:	e0cf      	b.n	8010e56 <tcp_write+0x47e>
 8010cb6:	bf00      	nop
 8010cb8:	0801af38 	.word	0x0801af38
 8010cbc:	0801b0d8 	.word	0x0801b0d8
 8010cc0:	0801af8c 	.word	0x0801af8c
 8010cc4:	0801b0f0 	.word	0x0801b0f0
 8010cc8:	0801b124 	.word	0x0801b124
 8010ccc:	0801b13c 	.word	0x0801b13c
 8010cd0:	0801b15c 	.word	0x0801b15c
 8010cd4:	0801b17c 	.word	0x0801b17c
 8010cd8:	0801b1a8 	.word	0x0801b1a8
    struct pbuf *p;
    u16_t left = len - pos;
 8010cdc:	88fa      	ldrh	r2, [r7, #6]
 8010cde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010ce6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010cee:	1ad3      	subs	r3, r2, r3
 8010cf0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010cf2:	8b7a      	ldrh	r2, [r7, #26]
 8010cf4:	8bbb      	ldrh	r3, [r7, #28]
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	bf28      	it	cs
 8010cfa:	4613      	movcs	r3, r2
 8010cfc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010cfe:	797b      	ldrb	r3, [r7, #5]
 8010d00:	f003 0301 	and.w	r3, r3, #1
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d036      	beq.n	8010d76 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010d08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	8b3b      	ldrh	r3, [r7, #24]
 8010d10:	4413      	add	r3, r2
 8010d12:	b299      	uxth	r1, r3
 8010d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	bf0c      	ite	eq
 8010d1a:	2301      	moveq	r3, #1
 8010d1c:	2300      	movne	r3, #0
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	f107 0012 	add.w	r0, r7, #18
 8010d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d26:	9302      	str	r3, [sp, #8]
 8010d28:	797b      	ldrb	r3, [r7, #5]
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	4603      	mov	r3, r0
 8010d32:	2036      	movs	r0, #54	; 0x36
 8010d34:	f7ff fd5c 	bl	80107f0 <tcp_pbuf_prealloc>
 8010d38:	6338      	str	r0, [r7, #48]	; 0x30
 8010d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f000 8178 	beq.w	8011032 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	895b      	ldrh	r3, [r3, #10]
 8010d46:	8b3a      	ldrh	r2, [r7, #24]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d906      	bls.n	8010d5a <tcp_write+0x382>
 8010d4c:	4b8c      	ldr	r3, [pc, #560]	; (8010f80 <tcp_write+0x5a8>)
 8010d4e:	f240 2267 	movw	r2, #615	; 0x267
 8010d52:	498c      	ldr	r1, [pc, #560]	; (8010f84 <tcp_write+0x5ac>)
 8010d54:	488c      	ldr	r0, [pc, #560]	; (8010f88 <tcp_write+0x5b0>)
 8010d56:	f006 fdd1 	bl	80178fc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5c:	685a      	ldr	r2, [r3, #4]
 8010d5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010d62:	18d0      	adds	r0, r2, r3
 8010d64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d68:	68ba      	ldr	r2, [r7, #8]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	8b3a      	ldrh	r2, [r7, #24]
 8010d6e:	4619      	mov	r1, r3
 8010d70:	f006 fd97 	bl	80178a2 <memcpy>
 8010d74:	e02f      	b.n	8010dd6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010d76:	8a7b      	ldrh	r3, [r7, #18]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d006      	beq.n	8010d8a <tcp_write+0x3b2>
 8010d7c:	4b80      	ldr	r3, [pc, #512]	; (8010f80 <tcp_write+0x5a8>)
 8010d7e:	f240 2271 	movw	r2, #625	; 0x271
 8010d82:	4982      	ldr	r1, [pc, #520]	; (8010f8c <tcp_write+0x5b4>)
 8010d84:	4880      	ldr	r0, [pc, #512]	; (8010f88 <tcp_write+0x5b0>)
 8010d86:	f006 fdb9 	bl	80178fc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010d8a:	8b3b      	ldrh	r3, [r7, #24]
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	4619      	mov	r1, r3
 8010d90:	2036      	movs	r0, #54	; 0x36
 8010d92:	f7fa fd85 	bl	800b8a0 <pbuf_alloc>
 8010d96:	6178      	str	r0, [r7, #20]
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f000 814b 	beq.w	8011036 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010da0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010da4:	68ba      	ldr	r2, [r7, #8]
 8010da6:	441a      	add	r2, r3
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010dac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010db6:	4619      	mov	r1, r3
 8010db8:	2036      	movs	r0, #54	; 0x36
 8010dba:	f7fa fd71 	bl	800b8a0 <pbuf_alloc>
 8010dbe:	6338      	str	r0, [r7, #48]	; 0x30
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d103      	bne.n	8010dce <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010dc6:	6978      	ldr	r0, [r7, #20]
 8010dc8:	f7fb f84a 	bl	800be60 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010dcc:	e136      	b.n	801103c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010dce:	6979      	ldr	r1, [r7, #20]
 8010dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dd2:	f7fb f913 	bl	800bffc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dd8:	f7fb f8d0 	bl	800bf7c <pbuf_clen>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	461a      	mov	r2, r3
 8010de0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010de4:	4413      	add	r3, r2
 8010de6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010dea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010dee:	2b09      	cmp	r3, #9
 8010df0:	d903      	bls.n	8010dfa <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010df4:	f7fb f834 	bl	800be60 <pbuf_free>
      goto memerr;
 8010df8:	e120      	b.n	801103c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010dfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e02:	441a      	add	r2, r3
 8010e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e08:	9300      	str	r3, [sp, #0]
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	f7ff fc4f 	bl	80106b4 <tcp_create_segment>
 8010e16:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f000 810d 	beq.w	801103a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d102      	bne.n	8010e2c <tcp_write+0x454>
      queue = seg;
 8010e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e28:	647b      	str	r3, [r7, #68]	; 0x44
 8010e2a:	e00c      	b.n	8010e46 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d106      	bne.n	8010e40 <tcp_write+0x468>
 8010e32:	4b53      	ldr	r3, [pc, #332]	; (8010f80 <tcp_write+0x5a8>)
 8010e34:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010e38:	4955      	ldr	r1, [pc, #340]	; (8010f90 <tcp_write+0x5b8>)
 8010e3a:	4853      	ldr	r0, [pc, #332]	; (8010f88 <tcp_write+0x5b0>)
 8010e3c:	f006 fd5e 	bl	80178fc <iprintf>
      prev_seg->next = seg;
 8010e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e44:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e48:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010e4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e4e:	8b3b      	ldrh	r3, [r7, #24]
 8010e50:	4413      	add	r3, r2
 8010e52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010e56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e5a:	88fb      	ldrh	r3, [r7, #6]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	f4ff af3d 	bcc.w	8010cdc <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010e62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d02c      	beq.n	8010ec2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e6e:	e01e      	b.n	8010eae <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8010e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e72:	891a      	ldrh	r2, [r3, #8]
 8010e74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e76:	4413      	add	r3, r2
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e7c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d110      	bne.n	8010ea8 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e8c:	8952      	ldrh	r2, [r2, #10]
 8010e8e:	4413      	add	r3, r2
 8010e90:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010e92:	68b9      	ldr	r1, [r7, #8]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f006 fd04 	bl	80178a2 <memcpy>
        p->len += oversize_used;
 8010e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9c:	895a      	ldrh	r2, [r3, #10]
 8010e9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ea0:	4413      	add	r3, r2
 8010ea2:	b29a      	uxth	r2, r3
 8010ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1dd      	bne.n	8010e70 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8010eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eb6:	891a      	ldrh	r2, [r3, #8]
 8010eb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010eba:	4413      	add	r3, r2
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ec0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010ec2:	8a7a      	ldrh	r2, [r7, #18]
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d018      	beq.n	8010f02 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d106      	bne.n	8010ee4 <tcp_write+0x50c>
 8010ed6:	4b2a      	ldr	r3, [pc, #168]	; (8010f80 <tcp_write+0x5a8>)
 8010ed8:	f240 22e1 	movw	r2, #737	; 0x2e1
 8010edc:	492d      	ldr	r1, [pc, #180]	; (8010f94 <tcp_write+0x5bc>)
 8010ede:	482a      	ldr	r0, [pc, #168]	; (8010f88 <tcp_write+0x5b0>)
 8010ee0:	f006 fd0c 	bl	80178fc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fb f886 	bl	800bffc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ef2:	891a      	ldrh	r2, [r3, #8]
 8010ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ef6:	891b      	ldrh	r3, [r3, #8]
 8010ef8:	4413      	add	r3, r2
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010efe:	811a      	strh	r2, [r3, #8]
 8010f00:	e037      	b.n	8010f72 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8010f02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d034      	beq.n	8010f72 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d003      	beq.n	8010f16 <tcp_write+0x53e>
 8010f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d106      	bne.n	8010f24 <tcp_write+0x54c>
 8010f16:	4b1a      	ldr	r3, [pc, #104]	; (8010f80 <tcp_write+0x5a8>)
 8010f18:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010f1c:	491e      	ldr	r1, [pc, #120]	; (8010f98 <tcp_write+0x5c0>)
 8010f1e:	481a      	ldr	r0, [pc, #104]	; (8010f88 <tcp_write+0x5b0>)
 8010f20:	f006 fcec 	bl	80178fc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f2a:	e009      	b.n	8010f40 <tcp_write+0x568>
      p->tot_len += extendlen;
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	891a      	ldrh	r2, [r3, #8]
 8010f30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f32:	4413      	add	r3, r2
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f38:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d1f1      	bne.n	8010f2c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8010f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4a:	891a      	ldrh	r2, [r3, #8]
 8010f4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f4e:	4413      	add	r3, r2
 8010f50:	b29a      	uxth	r2, r3
 8010f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f54:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f58:	895a      	ldrh	r2, [r3, #10]
 8010f5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f5c:	4413      	add	r3, r2
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f62:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f66:	891a      	ldrh	r2, [r3, #8]
 8010f68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f6a:	4413      	add	r3, r2
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f70:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d111      	bne.n	8010f9c <tcp_write+0x5c4>
    pcb->unsent = queue;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f7e:	e010      	b.n	8010fa2 <tcp_write+0x5ca>
 8010f80:	0801af38 	.word	0x0801af38
 8010f84:	0801b1d8 	.word	0x0801b1d8
 8010f88:	0801af8c 	.word	0x0801af8c
 8010f8c:	0801b218 	.word	0x0801b218
 8010f90:	0801b228 	.word	0x0801b228
 8010f94:	0801b23c 	.word	0x0801b23c
 8010f98:	0801b274 	.word	0x0801b274
  } else {
    last_unsent->next = queue;
 8010f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fa0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010fa6:	88fb      	ldrh	r3, [r7, #6]
 8010fa8:	441a      	add	r2, r3
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010fb4:	88fb      	ldrh	r3, [r7, #6]
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010fc6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00e      	beq.n	8010ff2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10a      	bne.n	8010ff2 <tcp_write+0x61a>
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d106      	bne.n	8010ff2 <tcp_write+0x61a>
 8010fe4:	4b2c      	ldr	r3, [pc, #176]	; (8011098 <tcp_write+0x6c0>)
 8010fe6:	f240 3213 	movw	r2, #787	; 0x313
 8010fea:	492c      	ldr	r1, [pc, #176]	; (801109c <tcp_write+0x6c4>)
 8010fec:	482c      	ldr	r0, [pc, #176]	; (80110a0 <tcp_write+0x6c8>)
 8010fee:	f006 fc85 	bl	80178fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d016      	beq.n	8011026 <tcp_write+0x64e>
 8010ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d012      	beq.n	8011026 <tcp_write+0x64e>
 8011000:	797b      	ldrb	r3, [r7, #5]
 8011002:	f003 0302 	and.w	r3, r3, #2
 8011006:	2b00      	cmp	r3, #0
 8011008:	d10d      	bne.n	8011026 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801100a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	899b      	ldrh	r3, [r3, #12]
 8011010:	b29c      	uxth	r4, r3
 8011012:	2008      	movs	r0, #8
 8011014:	f7f9 fb70 	bl	800a6f8 <lwip_htons>
 8011018:	4603      	mov	r3, r0
 801101a:	461a      	mov	r2, r3
 801101c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	4322      	orrs	r2, r4
 8011022:	b292      	uxth	r2, r2
 8011024:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011026:	2300      	movs	r3, #0
 8011028:	e031      	b.n	801108e <tcp_write+0x6b6>
          goto memerr;
 801102a:	bf00      	nop
 801102c:	e006      	b.n	801103c <tcp_write+0x664>
            goto memerr;
 801102e:	bf00      	nop
 8011030:	e004      	b.n	801103c <tcp_write+0x664>
        goto memerr;
 8011032:	bf00      	nop
 8011034:	e002      	b.n	801103c <tcp_write+0x664>
        goto memerr;
 8011036:	bf00      	nop
 8011038:	e000      	b.n	801103c <tcp_write+0x664>
      goto memerr;
 801103a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	8b5b      	ldrh	r3, [r3, #26]
 8011040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011044:	b29a      	uxth	r2, r3
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801104a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801104c:	2b00      	cmp	r3, #0
 801104e:	d002      	beq.n	8011056 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011050:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011052:	f7fa ff05 	bl	800be60 <pbuf_free>
  }
  if (queue != NULL) {
 8011056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011058:	2b00      	cmp	r3, #0
 801105a:	d002      	beq.n	8011062 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801105c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801105e:	f7fc fb71 	bl	800d744 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011068:	2b00      	cmp	r3, #0
 801106a:	d00e      	beq.n	801108a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011070:	2b00      	cmp	r3, #0
 8011072:	d10a      	bne.n	801108a <tcp_write+0x6b2>
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011078:	2b00      	cmp	r3, #0
 801107a:	d106      	bne.n	801108a <tcp_write+0x6b2>
 801107c:	4b06      	ldr	r3, [pc, #24]	; (8011098 <tcp_write+0x6c0>)
 801107e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8011082:	4906      	ldr	r1, [pc, #24]	; (801109c <tcp_write+0x6c4>)
 8011084:	4806      	ldr	r0, [pc, #24]	; (80110a0 <tcp_write+0x6c8>)
 8011086:	f006 fc39 	bl	80178fc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801108a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801108e:	4618      	mov	r0, r3
 8011090:	375c      	adds	r7, #92	; 0x5c
 8011092:	46bd      	mov	sp, r7
 8011094:	bd90      	pop	{r4, r7, pc}
 8011096:	bf00      	nop
 8011098:	0801af38 	.word	0x0801af38
 801109c:	0801b2ac 	.word	0x0801b2ac
 80110a0:	0801af8c 	.word	0x0801af8c

080110a4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80110a4:	b590      	push	{r4, r7, lr}
 80110a6:	b08b      	sub	sp, #44	; 0x2c
 80110a8:	af02      	add	r7, sp, #8
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	460b      	mov	r3, r1
 80110ae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80110b0:	2300      	movs	r3, #0
 80110b2:	61fb      	str	r3, [r7, #28]
 80110b4:	2300      	movs	r3, #0
 80110b6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80110b8:	2300      	movs	r3, #0
 80110ba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d106      	bne.n	80110d0 <tcp_split_unsent_seg+0x2c>
 80110c2:	4b95      	ldr	r3, [pc, #596]	; (8011318 <tcp_split_unsent_seg+0x274>)
 80110c4:	f240 324b 	movw	r2, #843	; 0x34b
 80110c8:	4994      	ldr	r1, [pc, #592]	; (801131c <tcp_split_unsent_seg+0x278>)
 80110ca:	4895      	ldr	r0, [pc, #596]	; (8011320 <tcp_split_unsent_seg+0x27c>)
 80110cc:	f006 fc16 	bl	80178fc <iprintf>

  useg = pcb->unsent;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110d4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d102      	bne.n	80110e2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80110dc:	f04f 33ff 	mov.w	r3, #4294967295
 80110e0:	e116      	b.n	8011310 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80110e2:	887b      	ldrh	r3, [r7, #2]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d109      	bne.n	80110fc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80110e8:	4b8b      	ldr	r3, [pc, #556]	; (8011318 <tcp_split_unsent_seg+0x274>)
 80110ea:	f240 3253 	movw	r2, #851	; 0x353
 80110ee:	498d      	ldr	r1, [pc, #564]	; (8011324 <tcp_split_unsent_seg+0x280>)
 80110f0:	488b      	ldr	r0, [pc, #556]	; (8011320 <tcp_split_unsent_seg+0x27c>)
 80110f2:	f006 fc03 	bl	80178fc <iprintf>
    return ERR_VAL;
 80110f6:	f06f 0305 	mvn.w	r3, #5
 80110fa:	e109      	b.n	8011310 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	891b      	ldrh	r3, [r3, #8]
 8011100:	887a      	ldrh	r2, [r7, #2]
 8011102:	429a      	cmp	r2, r3
 8011104:	d301      	bcc.n	801110a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011106:	2300      	movs	r3, #0
 8011108:	e102      	b.n	8011310 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801110e:	887a      	ldrh	r2, [r7, #2]
 8011110:	429a      	cmp	r2, r3
 8011112:	d906      	bls.n	8011122 <tcp_split_unsent_seg+0x7e>
 8011114:	4b80      	ldr	r3, [pc, #512]	; (8011318 <tcp_split_unsent_seg+0x274>)
 8011116:	f240 325b 	movw	r2, #859	; 0x35b
 801111a:	4983      	ldr	r1, [pc, #524]	; (8011328 <tcp_split_unsent_seg+0x284>)
 801111c:	4880      	ldr	r0, [pc, #512]	; (8011320 <tcp_split_unsent_seg+0x27c>)
 801111e:	f006 fbed 	bl	80178fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	891b      	ldrh	r3, [r3, #8]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d106      	bne.n	8011138 <tcp_split_unsent_seg+0x94>
 801112a:	4b7b      	ldr	r3, [pc, #492]	; (8011318 <tcp_split_unsent_seg+0x274>)
 801112c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011130:	497e      	ldr	r1, [pc, #504]	; (801132c <tcp_split_unsent_seg+0x288>)
 8011132:	487b      	ldr	r0, [pc, #492]	; (8011320 <tcp_split_unsent_seg+0x27c>)
 8011134:	f006 fbe2 	bl	80178fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	7a9b      	ldrb	r3, [r3, #10]
 801113c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801113e:	7bfb      	ldrb	r3, [r7, #15]
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	b2db      	uxtb	r3, r3
 8011144:	f003 0304 	and.w	r3, r3, #4
 8011148:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	891a      	ldrh	r2, [r3, #8]
 801114e:	887b      	ldrh	r3, [r7, #2]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011154:	7bbb      	ldrb	r3, [r7, #14]
 8011156:	b29a      	uxth	r2, r3
 8011158:	89bb      	ldrh	r3, [r7, #12]
 801115a:	4413      	add	r3, r2
 801115c:	b29b      	uxth	r3, r3
 801115e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011162:	4619      	mov	r1, r3
 8011164:	2036      	movs	r0, #54	; 0x36
 8011166:	f7fa fb9b 	bl	800b8a0 <pbuf_alloc>
 801116a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 80b7 	beq.w	80112e2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	891a      	ldrh	r2, [r3, #8]
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	891b      	ldrh	r3, [r3, #8]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	b29a      	uxth	r2, r3
 8011182:	887b      	ldrh	r3, [r7, #2]
 8011184:	4413      	add	r3, r2
 8011186:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	6858      	ldr	r0, [r3, #4]
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	685a      	ldr	r2, [r3, #4]
 8011190:	7bbb      	ldrb	r3, [r7, #14]
 8011192:	18d1      	adds	r1, r2, r3
 8011194:	897b      	ldrh	r3, [r7, #10]
 8011196:	89ba      	ldrh	r2, [r7, #12]
 8011198:	f7fb f868 	bl	800c26c <pbuf_copy_partial>
 801119c:	4603      	mov	r3, r0
 801119e:	461a      	mov	r2, r3
 80111a0:	89bb      	ldrh	r3, [r7, #12]
 80111a2:	4293      	cmp	r3, r2
 80111a4:	f040 809f 	bne.w	80112e6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	899b      	ldrh	r3, [r3, #12]
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7f9 faa1 	bl	800a6f8 <lwip_htons>
 80111b6:	4603      	mov	r3, r0
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111be:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80111c0:	2300      	movs	r3, #0
 80111c2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80111c4:	7efb      	ldrb	r3, [r7, #27]
 80111c6:	f003 0308 	and.w	r3, r3, #8
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d007      	beq.n	80111de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80111ce:	7efb      	ldrb	r3, [r7, #27]
 80111d0:	f023 0308 	bic.w	r3, r3, #8
 80111d4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80111d6:	7ebb      	ldrb	r3, [r7, #26]
 80111d8:	f043 0308 	orr.w	r3, r3, #8
 80111dc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80111de:	7efb      	ldrb	r3, [r7, #27]
 80111e0:	f003 0301 	and.w	r3, r3, #1
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d007      	beq.n	80111f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80111e8:	7efb      	ldrb	r3, [r7, #27]
 80111ea:	f023 0301 	bic.w	r3, r3, #1
 80111ee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80111f0:	7ebb      	ldrb	r3, [r7, #26]
 80111f2:	f043 0301 	orr.w	r3, r3, #1
 80111f6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	4618      	mov	r0, r3
 8011200:	f7f9 fa8f 	bl	800a722 <lwip_htonl>
 8011204:	4602      	mov	r2, r0
 8011206:	887b      	ldrh	r3, [r7, #2]
 8011208:	18d1      	adds	r1, r2, r3
 801120a:	7eba      	ldrb	r2, [r7, #26]
 801120c:	7bfb      	ldrb	r3, [r7, #15]
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	460b      	mov	r3, r1
 8011212:	6939      	ldr	r1, [r7, #16]
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f7ff fa4d 	bl	80106b4 <tcp_create_segment>
 801121a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d063      	beq.n	80112ea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	4618      	mov	r0, r3
 8011228:	f7fa fea8 	bl	800bf7c <pbuf_clen>
 801122c:	4603      	mov	r3, r0
 801122e:	461a      	mov	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011236:	1a9b      	subs	r3, r3, r2
 8011238:	b29a      	uxth	r2, r3
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	6858      	ldr	r0, [r3, #4]
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	891a      	ldrh	r2, [r3, #8]
 801124a:	89bb      	ldrh	r3, [r7, #12]
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	b29b      	uxth	r3, r3
 8011250:	4619      	mov	r1, r3
 8011252:	f7fa fc7f 	bl	800bb54 <pbuf_realloc>
  useg->len -= remainder;
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	891a      	ldrh	r2, [r3, #8]
 801125a:	89bb      	ldrh	r3, [r7, #12]
 801125c:	1ad3      	subs	r3, r2, r3
 801125e:	b29a      	uxth	r2, r3
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	68db      	ldr	r3, [r3, #12]
 8011268:	899b      	ldrh	r3, [r3, #12]
 801126a:	b29c      	uxth	r4, r3
 801126c:	7efb      	ldrb	r3, [r7, #27]
 801126e:	b29b      	uxth	r3, r3
 8011270:	4618      	mov	r0, r3
 8011272:	f7f9 fa41 	bl	800a6f8 <lwip_htons>
 8011276:	4603      	mov	r3, r0
 8011278:	461a      	mov	r2, r3
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	4322      	orrs	r2, r4
 8011280:	b292      	uxth	r2, r2
 8011282:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	f7fa fe77 	bl	800bf7c <pbuf_clen>
 801128e:	4603      	mov	r3, r0
 8011290:	461a      	mov	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011298:	4413      	add	r3, r2
 801129a:	b29a      	uxth	r2, r3
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fa fe68 	bl	800bf7c <pbuf_clen>
 80112ac:	4603      	mov	r3, r0
 80112ae:	461a      	mov	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112b6:	4413      	add	r3, r2
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	69fa      	ldr	r2, [r7, #28]
 80112cc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80112ce:	69fb      	ldr	r3, [r7, #28]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d103      	bne.n	80112de <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2200      	movs	r2, #0
 80112da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80112de:	2300      	movs	r3, #0
 80112e0:	e016      	b.n	8011310 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80112e2:	bf00      	nop
 80112e4:	e002      	b.n	80112ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 80112e6:	bf00      	nop
 80112e8:	e000      	b.n	80112ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 80112ea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d006      	beq.n	8011300 <tcp_split_unsent_seg+0x25c>
 80112f2:	4b09      	ldr	r3, [pc, #36]	; (8011318 <tcp_split_unsent_seg+0x274>)
 80112f4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80112f8:	490d      	ldr	r1, [pc, #52]	; (8011330 <tcp_split_unsent_seg+0x28c>)
 80112fa:	4809      	ldr	r0, [pc, #36]	; (8011320 <tcp_split_unsent_seg+0x27c>)
 80112fc:	f006 fafe 	bl	80178fc <iprintf>
  if (p != NULL) {
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011306:	6938      	ldr	r0, [r7, #16]
 8011308:	f7fa fdaa 	bl	800be60 <pbuf_free>
  }

  return ERR_MEM;
 801130c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011310:	4618      	mov	r0, r3
 8011312:	3724      	adds	r7, #36	; 0x24
 8011314:	46bd      	mov	sp, r7
 8011316:	bd90      	pop	{r4, r7, pc}
 8011318:	0801af38 	.word	0x0801af38
 801131c:	0801b2cc 	.word	0x0801b2cc
 8011320:	0801af8c 	.word	0x0801af8c
 8011324:	0801b2f0 	.word	0x0801b2f0
 8011328:	0801b314 	.word	0x0801b314
 801132c:	0801b324 	.word	0x0801b324
 8011330:	0801b334 	.word	0x0801b334

08011334 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011334:	b590      	push	{r4, r7, lr}
 8011336:	b085      	sub	sp, #20
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d106      	bne.n	8011350 <tcp_send_fin+0x1c>
 8011342:	4b21      	ldr	r3, [pc, #132]	; (80113c8 <tcp_send_fin+0x94>)
 8011344:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011348:	4920      	ldr	r1, [pc, #128]	; (80113cc <tcp_send_fin+0x98>)
 801134a:	4821      	ldr	r0, [pc, #132]	; (80113d0 <tcp_send_fin+0x9c>)
 801134c:	f006 fad6 	bl	80178fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011354:	2b00      	cmp	r3, #0
 8011356:	d02e      	beq.n	80113b6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801135c:	60fb      	str	r3, [r7, #12]
 801135e:	e002      	b.n	8011366 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1f8      	bne.n	8011360 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	899b      	ldrh	r3, [r3, #12]
 8011374:	b29b      	uxth	r3, r3
 8011376:	4618      	mov	r0, r3
 8011378:	f7f9 f9be 	bl	800a6f8 <lwip_htons>
 801137c:	4603      	mov	r3, r0
 801137e:	b2db      	uxtb	r3, r3
 8011380:	f003 0307 	and.w	r3, r3, #7
 8011384:	2b00      	cmp	r3, #0
 8011386:	d116      	bne.n	80113b6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	899b      	ldrh	r3, [r3, #12]
 801138e:	b29c      	uxth	r4, r3
 8011390:	2001      	movs	r0, #1
 8011392:	f7f9 f9b1 	bl	800a6f8 <lwip_htons>
 8011396:	4603      	mov	r3, r0
 8011398:	461a      	mov	r2, r3
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	4322      	orrs	r2, r4
 80113a0:	b292      	uxth	r2, r2
 80113a2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	8b5b      	ldrh	r3, [r3, #26]
 80113a8:	f043 0320 	orr.w	r3, r3, #32
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80113b2:	2300      	movs	r3, #0
 80113b4:	e004      	b.n	80113c0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80113b6:	2101      	movs	r1, #1
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 f80b 	bl	80113d4 <tcp_enqueue_flags>
 80113be:	4603      	mov	r3, r0
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3714      	adds	r7, #20
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd90      	pop	{r4, r7, pc}
 80113c8:	0801af38 	.word	0x0801af38
 80113cc:	0801b340 	.word	0x0801b340
 80113d0:	0801af8c 	.word	0x0801af8c

080113d4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b08a      	sub	sp, #40	; 0x28
 80113d8:	af02      	add	r7, sp, #8
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	460b      	mov	r3, r1
 80113de:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80113e0:	2300      	movs	r3, #0
 80113e2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80113e4:	2300      	movs	r3, #0
 80113e6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80113e8:	78fb      	ldrb	r3, [r7, #3]
 80113ea:	f003 0303 	and.w	r3, r3, #3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d106      	bne.n	8011400 <tcp_enqueue_flags+0x2c>
 80113f2:	4b67      	ldr	r3, [pc, #412]	; (8011590 <tcp_enqueue_flags+0x1bc>)
 80113f4:	f240 4212 	movw	r2, #1042	; 0x412
 80113f8:	4966      	ldr	r1, [pc, #408]	; (8011594 <tcp_enqueue_flags+0x1c0>)
 80113fa:	4867      	ldr	r0, [pc, #412]	; (8011598 <tcp_enqueue_flags+0x1c4>)
 80113fc:	f006 fa7e 	bl	80178fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d106      	bne.n	8011414 <tcp_enqueue_flags+0x40>
 8011406:	4b62      	ldr	r3, [pc, #392]	; (8011590 <tcp_enqueue_flags+0x1bc>)
 8011408:	f240 4213 	movw	r2, #1043	; 0x413
 801140c:	4963      	ldr	r1, [pc, #396]	; (801159c <tcp_enqueue_flags+0x1c8>)
 801140e:	4862      	ldr	r0, [pc, #392]	; (8011598 <tcp_enqueue_flags+0x1c4>)
 8011410:	f006 fa74 	bl	80178fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011414:	78fb      	ldrb	r3, [r7, #3]
 8011416:	f003 0302 	and.w	r3, r3, #2
 801141a:	2b00      	cmp	r3, #0
 801141c:	d001      	beq.n	8011422 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801141e:	2301      	movs	r3, #1
 8011420:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011422:	7ffb      	ldrb	r3, [r7, #31]
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	b2db      	uxtb	r3, r3
 8011428:	f003 0304 	and.w	r3, r3, #4
 801142c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801142e:	7dfb      	ldrb	r3, [r7, #23]
 8011430:	b29b      	uxth	r3, r3
 8011432:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011436:	4619      	mov	r1, r3
 8011438:	2036      	movs	r0, #54	; 0x36
 801143a:	f7fa fa31 	bl	800b8a0 <pbuf_alloc>
 801143e:	6138      	str	r0, [r7, #16]
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d109      	bne.n	801145a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	8b5b      	ldrh	r3, [r3, #26]
 801144a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801144e:	b29a      	uxth	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011454:	f04f 33ff 	mov.w	r3, #4294967295
 8011458:	e095      	b.n	8011586 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	895a      	ldrh	r2, [r3, #10]
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	b29b      	uxth	r3, r3
 8011462:	429a      	cmp	r2, r3
 8011464:	d206      	bcs.n	8011474 <tcp_enqueue_flags+0xa0>
 8011466:	4b4a      	ldr	r3, [pc, #296]	; (8011590 <tcp_enqueue_flags+0x1bc>)
 8011468:	f240 423a 	movw	r2, #1082	; 0x43a
 801146c:	494c      	ldr	r1, [pc, #304]	; (80115a0 <tcp_enqueue_flags+0x1cc>)
 801146e:	484a      	ldr	r0, [pc, #296]	; (8011598 <tcp_enqueue_flags+0x1c4>)
 8011470:	f006 fa44 	bl	80178fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011478:	78fa      	ldrb	r2, [r7, #3]
 801147a:	7ffb      	ldrb	r3, [r7, #31]
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	460b      	mov	r3, r1
 8011480:	6939      	ldr	r1, [r7, #16]
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7ff f916 	bl	80106b4 <tcp_create_segment>
 8011488:	60f8      	str	r0, [r7, #12]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d109      	bne.n	80114a4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	8b5b      	ldrh	r3, [r3, #26]
 8011494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011498:	b29a      	uxth	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801149e:	f04f 33ff 	mov.w	r3, #4294967295
 80114a2:	e070      	b.n	8011586 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	f003 0303 	and.w	r3, r3, #3
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d006      	beq.n	80114be <tcp_enqueue_flags+0xea>
 80114b0:	4b37      	ldr	r3, [pc, #220]	; (8011590 <tcp_enqueue_flags+0x1bc>)
 80114b2:	f240 4242 	movw	r2, #1090	; 0x442
 80114b6:	493b      	ldr	r1, [pc, #236]	; (80115a4 <tcp_enqueue_flags+0x1d0>)
 80114b8:	4837      	ldr	r0, [pc, #220]	; (8011598 <tcp_enqueue_flags+0x1c4>)
 80114ba:	f006 fa1f 	bl	80178fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	891b      	ldrh	r3, [r3, #8]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d006      	beq.n	80114d4 <tcp_enqueue_flags+0x100>
 80114c6:	4b32      	ldr	r3, [pc, #200]	; (8011590 <tcp_enqueue_flags+0x1bc>)
 80114c8:	f240 4243 	movw	r2, #1091	; 0x443
 80114cc:	4936      	ldr	r1, [pc, #216]	; (80115a8 <tcp_enqueue_flags+0x1d4>)
 80114ce:	4832      	ldr	r0, [pc, #200]	; (8011598 <tcp_enqueue_flags+0x1c4>)
 80114d0:	f006 fa14 	bl	80178fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d103      	bne.n	80114e4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	68fa      	ldr	r2, [r7, #12]
 80114e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80114e2:	e00d      	b.n	8011500 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114e8:	61bb      	str	r3, [r7, #24]
 80114ea:	e002      	b.n	80114f2 <tcp_enqueue_flags+0x11e>
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	61bb      	str	r3, [r7, #24]
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d1f8      	bne.n	80114ec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	68fa      	ldr	r2, [r7, #12]
 80114fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011508:	78fb      	ldrb	r3, [r7, #3]
 801150a:	f003 0302 	and.w	r3, r3, #2
 801150e:	2b00      	cmp	r3, #0
 8011510:	d104      	bne.n	801151c <tcp_enqueue_flags+0x148>
 8011512:	78fb      	ldrb	r3, [r7, #3]
 8011514:	f003 0301 	and.w	r3, r3, #1
 8011518:	2b00      	cmp	r3, #0
 801151a:	d004      	beq.n	8011526 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011520:	1c5a      	adds	r2, r3, #1
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011526:	78fb      	ldrb	r3, [r7, #3]
 8011528:	f003 0301 	and.w	r3, r3, #1
 801152c:	2b00      	cmp	r3, #0
 801152e:	d006      	beq.n	801153e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	8b5b      	ldrh	r3, [r3, #26]
 8011534:	f043 0320 	orr.w	r3, r3, #32
 8011538:	b29a      	uxth	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	4618      	mov	r0, r3
 8011544:	f7fa fd1a 	bl	800bf7c <pbuf_clen>
 8011548:	4603      	mov	r3, r0
 801154a:	461a      	mov	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011552:	4413      	add	r3, r2
 8011554:	b29a      	uxth	r2, r3
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011562:	2b00      	cmp	r3, #0
 8011564:	d00e      	beq.n	8011584 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801156a:	2b00      	cmp	r3, #0
 801156c:	d10a      	bne.n	8011584 <tcp_enqueue_flags+0x1b0>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011572:	2b00      	cmp	r3, #0
 8011574:	d106      	bne.n	8011584 <tcp_enqueue_flags+0x1b0>
 8011576:	4b06      	ldr	r3, [pc, #24]	; (8011590 <tcp_enqueue_flags+0x1bc>)
 8011578:	f240 4266 	movw	r2, #1126	; 0x466
 801157c:	490b      	ldr	r1, [pc, #44]	; (80115ac <tcp_enqueue_flags+0x1d8>)
 801157e:	4806      	ldr	r0, [pc, #24]	; (8011598 <tcp_enqueue_flags+0x1c4>)
 8011580:	f006 f9bc 	bl	80178fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011584:	2300      	movs	r3, #0
}
 8011586:	4618      	mov	r0, r3
 8011588:	3720      	adds	r7, #32
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	0801af38 	.word	0x0801af38
 8011594:	0801b35c 	.word	0x0801b35c
 8011598:	0801af8c 	.word	0x0801af8c
 801159c:	0801b3b4 	.word	0x0801b3b4
 80115a0:	0801b3d4 	.word	0x0801b3d4
 80115a4:	0801b410 	.word	0x0801b410
 80115a8:	0801b428 	.word	0x0801b428
 80115ac:	0801b454 	.word	0x0801b454

080115b0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80115b0:	b5b0      	push	{r4, r5, r7, lr}
 80115b2:	b08a      	sub	sp, #40	; 0x28
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d106      	bne.n	80115cc <tcp_output+0x1c>
 80115be:	4ba0      	ldr	r3, [pc, #640]	; (8011840 <tcp_output+0x290>)
 80115c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80115c4:	499f      	ldr	r1, [pc, #636]	; (8011844 <tcp_output+0x294>)
 80115c6:	48a0      	ldr	r0, [pc, #640]	; (8011848 <tcp_output+0x298>)
 80115c8:	f006 f998 	bl	80178fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	7d1b      	ldrb	r3, [r3, #20]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d106      	bne.n	80115e2 <tcp_output+0x32>
 80115d4:	4b9a      	ldr	r3, [pc, #616]	; (8011840 <tcp_output+0x290>)
 80115d6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80115da:	499c      	ldr	r1, [pc, #624]	; (801184c <tcp_output+0x29c>)
 80115dc:	489a      	ldr	r0, [pc, #616]	; (8011848 <tcp_output+0x298>)
 80115de:	f006 f98d 	bl	80178fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80115e2:	4b9b      	ldr	r3, [pc, #620]	; (8011850 <tcp_output+0x2a0>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d101      	bne.n	80115f0 <tcp_output+0x40>
    return ERR_OK;
 80115ec:	2300      	movs	r3, #0
 80115ee:	e1d2      	b.n	8011996 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d203      	bcs.n	8011608 <tcp_output+0x58>
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011606:	e002      	b.n	801160e <tcp_output+0x5e>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801160e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011614:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011618:	2b00      	cmp	r3, #0
 801161a:	d10b      	bne.n	8011634 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	8b5b      	ldrh	r3, [r3, #26]
 8011620:	f003 0302 	and.w	r3, r3, #2
 8011624:	2b00      	cmp	r3, #0
 8011626:	f000 81a9 	beq.w	801197c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 fdd6 	bl	80121dc <tcp_send_empty_ack>
 8011630:	4603      	mov	r3, r0
 8011632:	e1b0      	b.n	8011996 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011634:	6879      	ldr	r1, [r7, #4]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	3304      	adds	r3, #4
 801163a:	461a      	mov	r2, r3
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f7ff f81d 	bl	801067c <tcp_route>
 8011642:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d102      	bne.n	8011650 <tcp_output+0xa0>
    return ERR_RTE;
 801164a:	f06f 0303 	mvn.w	r3, #3
 801164e:	e1a2      	b.n	8011996 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d003      	beq.n	801165e <tcp_output+0xae>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d111      	bne.n	8011682 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d002      	beq.n	801166a <tcp_output+0xba>
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	3304      	adds	r3, #4
 8011668:	e000      	b.n	801166c <tcp_output+0xbc>
 801166a:	2300      	movs	r3, #0
 801166c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <tcp_output+0xca>
      return ERR_RTE;
 8011674:	f06f 0303 	mvn.w	r3, #3
 8011678:	e18d      	b.n	8011996 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011684:	68db      	ldr	r3, [r3, #12]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	4618      	mov	r0, r3
 801168a:	f7f9 f84a 	bl	800a722 <lwip_htonl>
 801168e:	4602      	mov	r2, r0
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011694:	1ad3      	subs	r3, r2, r3
 8011696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011698:	8912      	ldrh	r2, [r2, #8]
 801169a:	4413      	add	r3, r2
 801169c:	69ba      	ldr	r2, [r7, #24]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d227      	bcs.n	80116f2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116a8:	461a      	mov	r2, r3
 80116aa:	69bb      	ldr	r3, [r7, #24]
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d114      	bne.n	80116da <tcp_output+0x12a>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d110      	bne.n	80116da <tcp_output+0x12a>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d10b      	bne.n	80116da <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2201      	movs	r2, #1
 80116ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	8b5b      	ldrh	r3, [r3, #26]
 80116de:	f003 0302 	and.w	r3, r3, #2
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f000 814c 	beq.w	8011980 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f000 fd77 	bl	80121dc <tcp_send_empty_ack>
 80116ee:	4603      	mov	r3, r0
 80116f0:	e151      	b.n	8011996 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116fe:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011700:	6a3b      	ldr	r3, [r7, #32]
 8011702:	2b00      	cmp	r3, #0
 8011704:	f000 811b 	beq.w	801193e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8011708:	e002      	b.n	8011710 <tcp_output+0x160>
 801170a:	6a3b      	ldr	r3, [r7, #32]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	623b      	str	r3, [r7, #32]
 8011710:	6a3b      	ldr	r3, [r7, #32]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d1f8      	bne.n	801170a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011718:	e111      	b.n	801193e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	899b      	ldrh	r3, [r3, #12]
 8011720:	b29b      	uxth	r3, r3
 8011722:	4618      	mov	r0, r3
 8011724:	f7f8 ffe8 	bl	800a6f8 <lwip_htons>
 8011728:	4603      	mov	r3, r0
 801172a:	b2db      	uxtb	r3, r3
 801172c:	f003 0304 	and.w	r3, r3, #4
 8011730:	2b00      	cmp	r3, #0
 8011732:	d006      	beq.n	8011742 <tcp_output+0x192>
 8011734:	4b42      	ldr	r3, [pc, #264]	; (8011840 <tcp_output+0x290>)
 8011736:	f240 5237 	movw	r2, #1335	; 0x537
 801173a:	4946      	ldr	r1, [pc, #280]	; (8011854 <tcp_output+0x2a4>)
 801173c:	4842      	ldr	r0, [pc, #264]	; (8011848 <tcp_output+0x298>)
 801173e:	f006 f8dd 	bl	80178fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011746:	2b00      	cmp	r3, #0
 8011748:	d01f      	beq.n	801178a <tcp_output+0x1da>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	8b5b      	ldrh	r3, [r3, #26]
 801174e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011752:	2b00      	cmp	r3, #0
 8011754:	d119      	bne.n	801178a <tcp_output+0x1da>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00b      	beq.n	8011776 <tcp_output+0x1c6>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d110      	bne.n	801178a <tcp_output+0x1da>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801176c:	891a      	ldrh	r2, [r3, #8]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011772:	429a      	cmp	r2, r3
 8011774:	d209      	bcs.n	801178a <tcp_output+0x1da>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801177c:	2b00      	cmp	r3, #0
 801177e:	d004      	beq.n	801178a <tcp_output+0x1da>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011786:	2b08      	cmp	r3, #8
 8011788:	d901      	bls.n	801178e <tcp_output+0x1de>
 801178a:	2301      	movs	r3, #1
 801178c:	e000      	b.n	8011790 <tcp_output+0x1e0>
 801178e:	2300      	movs	r3, #0
 8011790:	2b00      	cmp	r3, #0
 8011792:	d106      	bne.n	80117a2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	8b5b      	ldrh	r3, [r3, #26]
 8011798:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 80e3 	beq.w	8011968 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	7d1b      	ldrb	r3, [r3, #20]
 80117a6:	2b02      	cmp	r3, #2
 80117a8:	d00d      	beq.n	80117c6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80117aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	899b      	ldrh	r3, [r3, #12]
 80117b0:	b29c      	uxth	r4, r3
 80117b2:	2010      	movs	r0, #16
 80117b4:	f7f8 ffa0 	bl	800a6f8 <lwip_htons>
 80117b8:	4603      	mov	r3, r0
 80117ba:	461a      	mov	r2, r3
 80117bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	4322      	orrs	r2, r4
 80117c2:	b292      	uxth	r2, r2
 80117c4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80117c6:	697a      	ldr	r2, [r7, #20]
 80117c8:	6879      	ldr	r1, [r7, #4]
 80117ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117cc:	f000 f908 	bl	80119e0 <tcp_output_segment>
 80117d0:	4603      	mov	r3, r0
 80117d2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80117d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d009      	beq.n	80117f0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	8b5b      	ldrh	r3, [r3, #26]
 80117e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	835a      	strh	r2, [r3, #26]
      return err;
 80117ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117ee:	e0d2      	b.n	8011996 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80117f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	7d1b      	ldrb	r3, [r3, #20]
 80117fc:	2b02      	cmp	r3, #2
 80117fe:	d006      	beq.n	801180e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	8b5b      	ldrh	r3, [r3, #26]
 8011804:	f023 0303 	bic.w	r3, r3, #3
 8011808:	b29a      	uxth	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	4618      	mov	r0, r3
 8011816:	f7f8 ff84 	bl	800a722 <lwip_htonl>
 801181a:	4604      	mov	r4, r0
 801181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181e:	891b      	ldrh	r3, [r3, #8]
 8011820:	461d      	mov	r5, r3
 8011822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011824:	68db      	ldr	r3, [r3, #12]
 8011826:	899b      	ldrh	r3, [r3, #12]
 8011828:	b29b      	uxth	r3, r3
 801182a:	4618      	mov	r0, r3
 801182c:	f7f8 ff64 	bl	800a6f8 <lwip_htons>
 8011830:	4603      	mov	r3, r0
 8011832:	b2db      	uxtb	r3, r3
 8011834:	f003 0303 	and.w	r3, r3, #3
 8011838:	2b00      	cmp	r3, #0
 801183a:	d00d      	beq.n	8011858 <tcp_output+0x2a8>
 801183c:	2301      	movs	r3, #1
 801183e:	e00c      	b.n	801185a <tcp_output+0x2aa>
 8011840:	0801af38 	.word	0x0801af38
 8011844:	0801b47c 	.word	0x0801b47c
 8011848:	0801af8c 	.word	0x0801af8c
 801184c:	0801b494 	.word	0x0801b494
 8011850:	2000f4f0 	.word	0x2000f4f0
 8011854:	0801b4bc 	.word	0x0801b4bc
 8011858:	2300      	movs	r3, #0
 801185a:	442b      	add	r3, r5
 801185c:	4423      	add	r3, r4
 801185e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	2b00      	cmp	r3, #0
 801186a:	da02      	bge.n	8011872 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	68ba      	ldr	r2, [r7, #8]
 8011870:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011874:	891b      	ldrh	r3, [r3, #8]
 8011876:	461c      	mov	r4, r3
 8011878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187a:	68db      	ldr	r3, [r3, #12]
 801187c:	899b      	ldrh	r3, [r3, #12]
 801187e:	b29b      	uxth	r3, r3
 8011880:	4618      	mov	r0, r3
 8011882:	f7f8 ff39 	bl	800a6f8 <lwip_htons>
 8011886:	4603      	mov	r3, r0
 8011888:	b2db      	uxtb	r3, r3
 801188a:	f003 0303 	and.w	r3, r3, #3
 801188e:	2b00      	cmp	r3, #0
 8011890:	d001      	beq.n	8011896 <tcp_output+0x2e6>
 8011892:	2301      	movs	r3, #1
 8011894:	e000      	b.n	8011898 <tcp_output+0x2e8>
 8011896:	2300      	movs	r3, #0
 8011898:	4423      	add	r3, r4
 801189a:	2b00      	cmp	r3, #0
 801189c:	d049      	beq.n	8011932 <tcp_output+0x382>
      seg->next = NULL;
 801189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a0:	2200      	movs	r2, #0
 80118a2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d105      	bne.n	80118b8 <tcp_output+0x308>
        pcb->unacked = seg;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118b0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80118b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b4:	623b      	str	r3, [r7, #32]
 80118b6:	e03f      	b.n	8011938 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80118b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	4618      	mov	r0, r3
 80118c0:	f7f8 ff2f 	bl	800a722 <lwip_htonl>
 80118c4:	4604      	mov	r4, r0
 80118c6:	6a3b      	ldr	r3, [r7, #32]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7f8 ff28 	bl	800a722 <lwip_htonl>
 80118d2:	4603      	mov	r3, r0
 80118d4:	1ae3      	subs	r3, r4, r3
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	da24      	bge.n	8011924 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	3370      	adds	r3, #112	; 0x70
 80118de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80118e0:	e002      	b.n	80118e8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80118e8:	69fb      	ldr	r3, [r7, #28]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d011      	beq.n	8011914 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	685b      	ldr	r3, [r3, #4]
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7f8 ff12 	bl	800a722 <lwip_htonl>
 80118fe:	4604      	mov	r4, r0
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	68db      	ldr	r3, [r3, #12]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	4618      	mov	r0, r3
 8011908:	f7f8 ff0b 	bl	800a722 <lwip_htonl>
 801190c:	4603      	mov	r3, r0
 801190e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011910:	2b00      	cmp	r3, #0
 8011912:	dbe6      	blt.n	80118e2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011920:	601a      	str	r2, [r3, #0]
 8011922:	e009      	b.n	8011938 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011924:	6a3b      	ldr	r3, [r7, #32]
 8011926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011928:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801192a:	6a3b      	ldr	r3, [r7, #32]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	623b      	str	r3, [r7, #32]
 8011930:	e002      	b.n	8011938 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011934:	f7fb ff1a 	bl	800d76c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801193c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011940:	2b00      	cmp	r3, #0
 8011942:	d012      	beq.n	801196a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	4618      	mov	r0, r3
 801194c:	f7f8 fee9 	bl	800a722 <lwip_htonl>
 8011950:	4602      	mov	r2, r0
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011956:	1ad3      	subs	r3, r2, r3
 8011958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801195a:	8912      	ldrh	r2, [r2, #8]
 801195c:	4413      	add	r3, r2
  while (seg != NULL &&
 801195e:	69ba      	ldr	r2, [r7, #24]
 8011960:	429a      	cmp	r2, r3
 8011962:	f4bf aeda 	bcs.w	801171a <tcp_output+0x16a>
 8011966:	e000      	b.n	801196a <tcp_output+0x3ba>
      break;
 8011968:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801196e:	2b00      	cmp	r3, #0
 8011970:	d108      	bne.n	8011984 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2200      	movs	r2, #0
 8011976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801197a:	e004      	b.n	8011986 <tcp_output+0x3d6>
    goto output_done;
 801197c:	bf00      	nop
 801197e:	e002      	b.n	8011986 <tcp_output+0x3d6>
    goto output_done;
 8011980:	bf00      	nop
 8011982:	e000      	b.n	8011986 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011984:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	8b5b      	ldrh	r3, [r3, #26]
 801198a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801198e:	b29a      	uxth	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3728      	adds	r7, #40	; 0x28
 801199a:	46bd      	mov	sp, r7
 801199c:	bdb0      	pop	{r4, r5, r7, pc}
 801199e:	bf00      	nop

080119a0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d106      	bne.n	80119bc <tcp_output_segment_busy+0x1c>
 80119ae:	4b09      	ldr	r3, [pc, #36]	; (80119d4 <tcp_output_segment_busy+0x34>)
 80119b0:	f240 529a 	movw	r2, #1434	; 0x59a
 80119b4:	4908      	ldr	r1, [pc, #32]	; (80119d8 <tcp_output_segment_busy+0x38>)
 80119b6:	4809      	ldr	r0, [pc, #36]	; (80119dc <tcp_output_segment_busy+0x3c>)
 80119b8:	f005 ffa0 	bl	80178fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	7b9b      	ldrb	r3, [r3, #14]
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d001      	beq.n	80119ca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80119c6:	2301      	movs	r3, #1
 80119c8:	e000      	b.n	80119cc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80119ca:	2300      	movs	r3, #0
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	0801af38 	.word	0x0801af38
 80119d8:	0801b4d4 	.word	0x0801b4d4
 80119dc:	0801af8c 	.word	0x0801af8c

080119e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80119e0:	b5b0      	push	{r4, r5, r7, lr}
 80119e2:	b08c      	sub	sp, #48	; 0x30
 80119e4:	af04      	add	r7, sp, #16
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d106      	bne.n	8011a00 <tcp_output_segment+0x20>
 80119f2:	4b64      	ldr	r3, [pc, #400]	; (8011b84 <tcp_output_segment+0x1a4>)
 80119f4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80119f8:	4963      	ldr	r1, [pc, #396]	; (8011b88 <tcp_output_segment+0x1a8>)
 80119fa:	4864      	ldr	r0, [pc, #400]	; (8011b8c <tcp_output_segment+0x1ac>)
 80119fc:	f005 ff7e 	bl	80178fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d106      	bne.n	8011a14 <tcp_output_segment+0x34>
 8011a06:	4b5f      	ldr	r3, [pc, #380]	; (8011b84 <tcp_output_segment+0x1a4>)
 8011a08:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011a0c:	4960      	ldr	r1, [pc, #384]	; (8011b90 <tcp_output_segment+0x1b0>)
 8011a0e:	485f      	ldr	r0, [pc, #380]	; (8011b8c <tcp_output_segment+0x1ac>)
 8011a10:	f005 ff74 	bl	80178fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d106      	bne.n	8011a28 <tcp_output_segment+0x48>
 8011a1a:	4b5a      	ldr	r3, [pc, #360]	; (8011b84 <tcp_output_segment+0x1a4>)
 8011a1c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011a20:	495c      	ldr	r1, [pc, #368]	; (8011b94 <tcp_output_segment+0x1b4>)
 8011a22:	485a      	ldr	r0, [pc, #360]	; (8011b8c <tcp_output_segment+0x1ac>)
 8011a24:	f005 ff6a 	bl	80178fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011a28:	68f8      	ldr	r0, [r7, #12]
 8011a2a:	f7ff ffb9 	bl	80119a0 <tcp_output_segment_busy>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d001      	beq.n	8011a38 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011a34:	2300      	movs	r3, #0
 8011a36:	e0a0      	b.n	8011b7a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	68dc      	ldr	r4, [r3, #12]
 8011a40:	4610      	mov	r0, r2
 8011a42:	f7f8 fe6e 	bl	800a722 <lwip_htonl>
 8011a46:	4603      	mov	r3, r0
 8011a48:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	68dc      	ldr	r4, [r3, #12]
 8011a52:	4610      	mov	r0, r2
 8011a54:	f7f8 fe50 	bl	800a6f8 <lwip_htons>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a60:	68ba      	ldr	r2, [r7, #8]
 8011a62:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a64:	441a      	add	r2, r3
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	3314      	adds	r3, #20
 8011a70:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	7a9b      	ldrb	r3, [r3, #10]
 8011a76:	f003 0301 	and.w	r3, r3, #1
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d015      	beq.n	8011aaa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	3304      	adds	r3, #4
 8011a82:	461a      	mov	r2, r3
 8011a84:	6879      	ldr	r1, [r7, #4]
 8011a86:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011a8a:	f7fc fa33 	bl	800def4 <tcp_eff_send_mss_netif>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011a92:	8b7b      	ldrh	r3, [r7, #26]
 8011a94:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7f8 fe42 	bl	800a722 <lwip_htonl>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	da02      	bge.n	8011aba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d10c      	bne.n	8011adc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011ac2:	4b35      	ldr	r3, [pc, #212]	; (8011b98 <tcp_output_segment+0x1b8>)
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	68db      	ldr	r3, [r3, #12]
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7f8 fe26 	bl	800a722 <lwip_htonl>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	1ad3      	subs	r3, r2, r3
 8011aea:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	8959      	ldrh	r1, [r3, #10]
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	8b3a      	ldrh	r2, [r7, #24]
 8011af8:	1a8a      	subs	r2, r1, r2
 8011afa:	b292      	uxth	r2, r2
 8011afc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	8919      	ldrh	r1, [r3, #8]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	8b3a      	ldrh	r2, [r7, #24]
 8011b0a:	1a8a      	subs	r2, r1, r2
 8011b0c:	b292      	uxth	r2, r2
 8011b0e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	68d2      	ldr	r2, [r2, #12]
 8011b18:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	68db      	ldr	r3, [r3, #12]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	741a      	strb	r2, [r3, #16]
 8011b22:	2200      	movs	r2, #0
 8011b24:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	f103 0214 	add.w	r2, r3, #20
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	7a9b      	ldrb	r3, [r3, #10]
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	f003 0304 	and.w	r3, r3, #4
 8011b38:	4413      	add	r3, r2
 8011b3a:	69fa      	ldr	r2, [r7, #28]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d006      	beq.n	8011b4e <tcp_output_segment+0x16e>
 8011b40:	4b10      	ldr	r3, [pc, #64]	; (8011b84 <tcp_output_segment+0x1a4>)
 8011b42:	f240 621c 	movw	r2, #1564	; 0x61c
 8011b46:	4915      	ldr	r1, [pc, #84]	; (8011b9c <tcp_output_segment+0x1bc>)
 8011b48:	4810      	ldr	r0, [pc, #64]	; (8011b8c <tcp_output_segment+0x1ac>)
 8011b4a:	f005 fed7 	bl	80178fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	6858      	ldr	r0, [r3, #4]
 8011b52:	68b9      	ldr	r1, [r7, #8]
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	1d1c      	adds	r4, r3, #4
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	7add      	ldrb	r5, [r3, #11]
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	7a9b      	ldrb	r3, [r3, #10]
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	9202      	str	r2, [sp, #8]
 8011b64:	2206      	movs	r2, #6
 8011b66:	9201      	str	r2, [sp, #4]
 8011b68:	9300      	str	r3, [sp, #0]
 8011b6a:	462b      	mov	r3, r5
 8011b6c:	4622      	mov	r2, r4
 8011b6e:	f004 fc3f 	bl	80163f0 <ip4_output_if>
 8011b72:	4603      	mov	r3, r0
 8011b74:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3720      	adds	r7, #32
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bdb0      	pop	{r4, r5, r7, pc}
 8011b82:	bf00      	nop
 8011b84:	0801af38 	.word	0x0801af38
 8011b88:	0801b4fc 	.word	0x0801b4fc
 8011b8c:	0801af8c 	.word	0x0801af8c
 8011b90:	0801b51c 	.word	0x0801b51c
 8011b94:	0801b53c 	.word	0x0801b53c
 8011b98:	2000f4e0 	.word	0x2000f4e0
 8011b9c:	0801b560 	.word	0x0801b560

08011ba0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011ba0:	b5b0      	push	{r4, r5, r7, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d106      	bne.n	8011bbc <tcp_rexmit_rto_prepare+0x1c>
 8011bae:	4b31      	ldr	r3, [pc, #196]	; (8011c74 <tcp_rexmit_rto_prepare+0xd4>)
 8011bb0:	f240 6263 	movw	r2, #1635	; 0x663
 8011bb4:	4930      	ldr	r1, [pc, #192]	; (8011c78 <tcp_rexmit_rto_prepare+0xd8>)
 8011bb6:	4831      	ldr	r0, [pc, #196]	; (8011c7c <tcp_rexmit_rto_prepare+0xdc>)
 8011bb8:	f005 fea0 	bl	80178fc <iprintf>

  if (pcb->unacked == NULL) {
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d102      	bne.n	8011bca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011bc4:	f06f 0305 	mvn.w	r3, #5
 8011bc8:	e050      	b.n	8011c6c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bce:	60fb      	str	r3, [r7, #12]
 8011bd0:	e00b      	b.n	8011bea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	f7ff fee4 	bl	80119a0 <tcp_output_segment_busy>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d002      	beq.n	8011be4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011bde:	f06f 0305 	mvn.w	r3, #5
 8011be2:	e043      	b.n	8011c6c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	60fb      	str	r3, [r7, #12]
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d1ef      	bne.n	8011bd2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011bf2:	68f8      	ldr	r0, [r7, #12]
 8011bf4:	f7ff fed4 	bl	80119a0 <tcp_output_segment_busy>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011bfe:	f06f 0305 	mvn.w	r3, #5
 8011c02:	e033      	b.n	8011c6c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2200      	movs	r2, #0
 8011c18:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	8b5b      	ldrh	r3, [r3, #26]
 8011c1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7f8 fd77 	bl	800a722 <lwip_htonl>
 8011c34:	4604      	mov	r4, r0
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	891b      	ldrh	r3, [r3, #8]
 8011c3a:	461d      	mov	r5, r3
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	68db      	ldr	r3, [r3, #12]
 8011c40:	899b      	ldrh	r3, [r3, #12]
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7f8 fd57 	bl	800a6f8 <lwip_htons>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	f003 0303 	and.w	r3, r3, #3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d001      	beq.n	8011c5a <tcp_rexmit_rto_prepare+0xba>
 8011c56:	2301      	movs	r3, #1
 8011c58:	e000      	b.n	8011c5c <tcp_rexmit_rto_prepare+0xbc>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	442b      	add	r3, r5
 8011c5e:	18e2      	adds	r2, r4, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2200      	movs	r2, #0
 8011c68:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bdb0      	pop	{r4, r5, r7, pc}
 8011c74:	0801af38 	.word	0x0801af38
 8011c78:	0801b574 	.word	0x0801b574
 8011c7c:	0801af8c 	.word	0x0801af8c

08011c80 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d106      	bne.n	8011c9c <tcp_rexmit_rto_commit+0x1c>
 8011c8e:	4b0d      	ldr	r3, [pc, #52]	; (8011cc4 <tcp_rexmit_rto_commit+0x44>)
 8011c90:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011c94:	490c      	ldr	r1, [pc, #48]	; (8011cc8 <tcp_rexmit_rto_commit+0x48>)
 8011c96:	480d      	ldr	r0, [pc, #52]	; (8011ccc <tcp_rexmit_rto_commit+0x4c>)
 8011c98:	f005 fe30 	bl	80178fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ca2:	2bff      	cmp	r3, #255	; 0xff
 8011ca4:	d007      	beq.n	8011cb6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cac:	3301      	adds	r3, #1
 8011cae:	b2da      	uxtb	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7ff fc7a 	bl	80115b0 <tcp_output>
}
 8011cbc:	bf00      	nop
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	0801af38 	.word	0x0801af38
 8011cc8:	0801b598 	.word	0x0801b598
 8011ccc:	0801af8c 	.word	0x0801af8c

08011cd0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <tcp_rexmit_rto+0x1c>
 8011cde:	4b0a      	ldr	r3, [pc, #40]	; (8011d08 <tcp_rexmit_rto+0x38>)
 8011ce0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011ce4:	4909      	ldr	r1, [pc, #36]	; (8011d0c <tcp_rexmit_rto+0x3c>)
 8011ce6:	480a      	ldr	r0, [pc, #40]	; (8011d10 <tcp_rexmit_rto+0x40>)
 8011ce8:	f005 fe08 	bl	80178fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f7ff ff57 	bl	8011ba0 <tcp_rexmit_rto_prepare>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d102      	bne.n	8011cfe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7ff ffc1 	bl	8011c80 <tcp_rexmit_rto_commit>
  }
}
 8011cfe:	bf00      	nop
 8011d00:	3708      	adds	r7, #8
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	0801af38 	.word	0x0801af38
 8011d0c:	0801b5bc 	.word	0x0801b5bc
 8011d10:	0801af8c 	.word	0x0801af8c

08011d14 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011d14:	b590      	push	{r4, r7, lr}
 8011d16:	b085      	sub	sp, #20
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d106      	bne.n	8011d30 <tcp_rexmit+0x1c>
 8011d22:	4b2f      	ldr	r3, [pc, #188]	; (8011de0 <tcp_rexmit+0xcc>)
 8011d24:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011d28:	492e      	ldr	r1, [pc, #184]	; (8011de4 <tcp_rexmit+0xd0>)
 8011d2a:	482f      	ldr	r0, [pc, #188]	; (8011de8 <tcp_rexmit+0xd4>)
 8011d2c:	f005 fde6 	bl	80178fc <iprintf>

  if (pcb->unacked == NULL) {
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d102      	bne.n	8011d3e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011d38:	f06f 0305 	mvn.w	r3, #5
 8011d3c:	e04c      	b.n	8011dd8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d42:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011d44:	68b8      	ldr	r0, [r7, #8]
 8011d46:	f7ff fe2b 	bl	80119a0 <tcp_output_segment_busy>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d002      	beq.n	8011d56 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011d50:	f06f 0305 	mvn.w	r3, #5
 8011d54:	e040      	b.n	8011dd8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	336c      	adds	r3, #108	; 0x6c
 8011d62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011d64:	e002      	b.n	8011d6c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d011      	beq.n	8011d98 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	68db      	ldr	r3, [r3, #12]
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7f8 fcd0 	bl	800a722 <lwip_htonl>
 8011d82:	4604      	mov	r4, r0
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7f8 fcc9 	bl	800a722 <lwip_htonl>
 8011d90:	4603      	mov	r3, r0
 8011d92:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	dbe6      	blt.n	8011d66 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	68ba      	ldr	r2, [r7, #8]
 8011da4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d103      	bne.n	8011db6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2200      	movs	r2, #0
 8011db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011dbc:	2bff      	cmp	r3, #255	; 0xff
 8011dbe:	d007      	beq.n	8011dd0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	b2da      	uxtb	r2, r3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3714      	adds	r7, #20
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd90      	pop	{r4, r7, pc}
 8011de0:	0801af38 	.word	0x0801af38
 8011de4:	0801b5d8 	.word	0x0801b5d8
 8011de8:	0801af8c 	.word	0x0801af8c

08011dec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d106      	bne.n	8011e08 <tcp_rexmit_fast+0x1c>
 8011dfa:	4b2e      	ldr	r3, [pc, #184]	; (8011eb4 <tcp_rexmit_fast+0xc8>)
 8011dfc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011e00:	492d      	ldr	r1, [pc, #180]	; (8011eb8 <tcp_rexmit_fast+0xcc>)
 8011e02:	482e      	ldr	r0, [pc, #184]	; (8011ebc <tcp_rexmit_fast+0xd0>)
 8011e04:	f005 fd7a 	bl	80178fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d04d      	beq.n	8011eac <tcp_rexmit_fast+0xc0>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	8b5b      	ldrh	r3, [r3, #26]
 8011e14:	f003 0304 	and.w	r3, r3, #4
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d147      	bne.n	8011eac <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f7ff ff79 	bl	8011d14 <tcp_rexmit>
 8011e22:	4603      	mov	r3, r0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d141      	bne.n	8011eac <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d207      	bcs.n	8011e48 <tcp_rexmit_fast+0x5c>
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e3e:	0fda      	lsrs	r2, r3, #31
 8011e40:	4413      	add	r3, r2
 8011e42:	105b      	asrs	r3, r3, #1
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	e006      	b.n	8011e56 <tcp_rexmit_fast+0x6a>
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e4e:	0fda      	lsrs	r2, r3, #31
 8011e50:	4413      	add	r3, r2
 8011e52:	105b      	asrs	r3, r3, #1
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	687a      	ldr	r2, [r7, #4]
 8011e58:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011e62:	461a      	mov	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d206      	bcs.n	8011e7c <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e72:	005b      	lsls	r3, r3, #1
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e86:	4619      	mov	r1, r3
 8011e88:	0049      	lsls	r1, r1, #1
 8011e8a:	440b      	add	r3, r1
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	4413      	add	r3, r2
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	8b5b      	ldrh	r3, [r3, #26]
 8011e9c:	f043 0304 	orr.w	r3, r3, #4
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011eac:	bf00      	nop
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	0801af38 	.word	0x0801af38
 8011eb8:	0801b5f0 	.word	0x0801b5f0
 8011ebc:	0801af8c 	.word	0x0801af8c

08011ec0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	607b      	str	r3, [r7, #4]
 8011eca:	460b      	mov	r3, r1
 8011ecc:	817b      	strh	r3, [r7, #10]
 8011ece:	4613      	mov	r3, r2
 8011ed0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011ed2:	897a      	ldrh	r2, [r7, #10]
 8011ed4:	893b      	ldrh	r3, [r7, #8]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	3314      	adds	r3, #20
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	2022      	movs	r0, #34	; 0x22
 8011ee6:	f7f9 fcdb 	bl	800b8a0 <pbuf_alloc>
 8011eea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d04e      	beq.n	8011f90 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	895b      	ldrh	r3, [r3, #10]
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	897b      	ldrh	r3, [r7, #10]
 8011efa:	3314      	adds	r3, #20
 8011efc:	429a      	cmp	r2, r3
 8011efe:	da06      	bge.n	8011f0e <tcp_output_alloc_header_common+0x4e>
 8011f00:	4b26      	ldr	r3, [pc, #152]	; (8011f9c <tcp_output_alloc_header_common+0xdc>)
 8011f02:	f240 7224 	movw	r2, #1828	; 0x724
 8011f06:	4926      	ldr	r1, [pc, #152]	; (8011fa0 <tcp_output_alloc_header_common+0xe0>)
 8011f08:	4826      	ldr	r0, [pc, #152]	; (8011fa4 <tcp_output_alloc_header_common+0xe4>)
 8011f0a:	f005 fcf7 	bl	80178fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011f14:	8c3b      	ldrh	r3, [r7, #32]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7f8 fbee 	bl	800a6f8 <lwip_htons>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	461a      	mov	r2, r3
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011f24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7f8 fbe6 	bl	800a6f8 <lwip_htons>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	461a      	mov	r2, r3
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f7f8 fbf1 	bl	800a722 <lwip_htonl>
 8011f40:	4602      	mov	r2, r0
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011f46:	897b      	ldrh	r3, [r7, #10]
 8011f48:	089b      	lsrs	r3, r3, #2
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	3305      	adds	r3, #5
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	031b      	lsls	r3, r3, #12
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7f8 fbca 	bl	800a6f8 <lwip_htons>
 8011f64:	4603      	mov	r3, r0
 8011f66:	461a      	mov	r2, r3
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011f6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7f8 fbc2 	bl	800a6f8 <lwip_htons>
 8011f74:	4603      	mov	r3, r0
 8011f76:	461a      	mov	r2, r3
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011f7c:	693b      	ldr	r3, [r7, #16]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	741a      	strb	r2, [r3, #16]
 8011f82:	2200      	movs	r2, #0
 8011f84:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	749a      	strb	r2, [r3, #18]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011f90:	697b      	ldr	r3, [r7, #20]
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3718      	adds	r7, #24
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	0801af38 	.word	0x0801af38
 8011fa0:	0801b610 	.word	0x0801b610
 8011fa4:	0801af8c 	.word	0x0801af8c

08011fa8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011fa8:	b5b0      	push	{r4, r5, r7, lr}
 8011faa:	b08a      	sub	sp, #40	; 0x28
 8011fac:	af04      	add	r7, sp, #16
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	607b      	str	r3, [r7, #4]
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	817b      	strh	r3, [r7, #10]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d106      	bne.n	8011fce <tcp_output_alloc_header+0x26>
 8011fc0:	4b15      	ldr	r3, [pc, #84]	; (8012018 <tcp_output_alloc_header+0x70>)
 8011fc2:	f240 7242 	movw	r2, #1858	; 0x742
 8011fc6:	4915      	ldr	r1, [pc, #84]	; (801201c <tcp_output_alloc_header+0x74>)
 8011fc8:	4815      	ldr	r0, [pc, #84]	; (8012020 <tcp_output_alloc_header+0x78>)
 8011fca:	f005 fc97 	bl	80178fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	8adb      	ldrh	r3, [r3, #22]
 8011fd6:	68fa      	ldr	r2, [r7, #12]
 8011fd8:	8b12      	ldrh	r2, [r2, #24]
 8011fda:	68f9      	ldr	r1, [r7, #12]
 8011fdc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011fde:	893d      	ldrh	r5, [r7, #8]
 8011fe0:	897c      	ldrh	r4, [r7, #10]
 8011fe2:	9103      	str	r1, [sp, #12]
 8011fe4:	2110      	movs	r1, #16
 8011fe6:	9102      	str	r1, [sp, #8]
 8011fe8:	9201      	str	r2, [sp, #4]
 8011fea:	9300      	str	r3, [sp, #0]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	462a      	mov	r2, r5
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	f7ff ff65 	bl	8011ec0 <tcp_output_alloc_header_common>
 8011ff6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d006      	beq.n	801200c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012002:	68fa      	ldr	r2, [r7, #12]
 8012004:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012006:	441a      	add	r2, r3
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801200c:	697b      	ldr	r3, [r7, #20]
}
 801200e:	4618      	mov	r0, r3
 8012010:	3718      	adds	r7, #24
 8012012:	46bd      	mov	sp, r7
 8012014:	bdb0      	pop	{r4, r5, r7, pc}
 8012016:	bf00      	nop
 8012018:	0801af38 	.word	0x0801af38
 801201c:	0801b640 	.word	0x0801b640
 8012020:	0801af8c 	.word	0x0801af8c

08012024 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b088      	sub	sp, #32
 8012028:	af00      	add	r7, sp, #0
 801202a:	60f8      	str	r0, [r7, #12]
 801202c:	60b9      	str	r1, [r7, #8]
 801202e:	4611      	mov	r1, r2
 8012030:	461a      	mov	r2, r3
 8012032:	460b      	mov	r3, r1
 8012034:	71fb      	strb	r3, [r7, #7]
 8012036:	4613      	mov	r3, r2
 8012038:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801203a:	2300      	movs	r3, #0
 801203c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d106      	bne.n	8012052 <tcp_output_fill_options+0x2e>
 8012044:	4b13      	ldr	r3, [pc, #76]	; (8012094 <tcp_output_fill_options+0x70>)
 8012046:	f240 7256 	movw	r2, #1878	; 0x756
 801204a:	4913      	ldr	r1, [pc, #76]	; (8012098 <tcp_output_fill_options+0x74>)
 801204c:	4813      	ldr	r0, [pc, #76]	; (801209c <tcp_output_fill_options+0x78>)
 801204e:	f005 fc55 	bl	80178fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012058:	69bb      	ldr	r3, [r7, #24]
 801205a:	3314      	adds	r3, #20
 801205c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801205e:	69bb      	ldr	r3, [r7, #24]
 8012060:	f103 0214 	add.w	r2, r3, #20
 8012064:	8bfb      	ldrh	r3, [r7, #30]
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	4619      	mov	r1, r3
 801206a:	79fb      	ldrb	r3, [r7, #7]
 801206c:	009b      	lsls	r3, r3, #2
 801206e:	f003 0304 	and.w	r3, r3, #4
 8012072:	440b      	add	r3, r1
 8012074:	4413      	add	r3, r2
 8012076:	697a      	ldr	r2, [r7, #20]
 8012078:	429a      	cmp	r2, r3
 801207a:	d006      	beq.n	801208a <tcp_output_fill_options+0x66>
 801207c:	4b05      	ldr	r3, [pc, #20]	; (8012094 <tcp_output_fill_options+0x70>)
 801207e:	f240 7275 	movw	r2, #1909	; 0x775
 8012082:	4907      	ldr	r1, [pc, #28]	; (80120a0 <tcp_output_fill_options+0x7c>)
 8012084:	4805      	ldr	r0, [pc, #20]	; (801209c <tcp_output_fill_options+0x78>)
 8012086:	f005 fc39 	bl	80178fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801208a:	bf00      	nop
 801208c:	3720      	adds	r7, #32
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	0801af38 	.word	0x0801af38
 8012098:	0801b668 	.word	0x0801b668
 801209c:	0801af8c 	.word	0x0801af8c
 80120a0:	0801b560 	.word	0x0801b560

080120a4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b08a      	sub	sp, #40	; 0x28
 80120a8:	af04      	add	r7, sp, #16
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	607a      	str	r2, [r7, #4]
 80120b0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d106      	bne.n	80120c6 <tcp_output_control_segment+0x22>
 80120b8:	4b1c      	ldr	r3, [pc, #112]	; (801212c <tcp_output_control_segment+0x88>)
 80120ba:	f240 7287 	movw	r2, #1927	; 0x787
 80120be:	491c      	ldr	r1, [pc, #112]	; (8012130 <tcp_output_control_segment+0x8c>)
 80120c0:	481c      	ldr	r0, [pc, #112]	; (8012134 <tcp_output_control_segment+0x90>)
 80120c2:	f005 fc1b 	bl	80178fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 80120c6:	683a      	ldr	r2, [r7, #0]
 80120c8:	6879      	ldr	r1, [r7, #4]
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f7fe fad6 	bl	801067c <tcp_route>
 80120d0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d102      	bne.n	80120de <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80120d8:	23fc      	movs	r3, #252	; 0xfc
 80120da:	75fb      	strb	r3, [r7, #23]
 80120dc:	e01c      	b.n	8012118 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d006      	beq.n	80120f2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	7adb      	ldrb	r3, [r3, #11]
 80120e8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	7a9b      	ldrb	r3, [r3, #10]
 80120ee:	757b      	strb	r3, [r7, #21]
 80120f0:	e003      	b.n	80120fa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80120f2:	23ff      	movs	r3, #255	; 0xff
 80120f4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80120f6:	2300      	movs	r3, #0
 80120f8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80120fa:	7dba      	ldrb	r2, [r7, #22]
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	9302      	str	r3, [sp, #8]
 8012100:	2306      	movs	r3, #6
 8012102:	9301      	str	r3, [sp, #4]
 8012104:	7d7b      	ldrb	r3, [r7, #21]
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	4613      	mov	r3, r2
 801210a:	683a      	ldr	r2, [r7, #0]
 801210c:	6879      	ldr	r1, [r7, #4]
 801210e:	68b8      	ldr	r0, [r7, #8]
 8012110:	f004 f96e 	bl	80163f0 <ip4_output_if>
 8012114:	4603      	mov	r3, r0
 8012116:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012118:	68b8      	ldr	r0, [r7, #8]
 801211a:	f7f9 fea1 	bl	800be60 <pbuf_free>
  return err;
 801211e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012122:	4618      	mov	r0, r3
 8012124:	3718      	adds	r7, #24
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	0801af38 	.word	0x0801af38
 8012130:	0801b690 	.word	0x0801b690
 8012134:	0801af8c 	.word	0x0801af8c

08012138 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012138:	b590      	push	{r4, r7, lr}
 801213a:	b08b      	sub	sp, #44	; 0x2c
 801213c:	af04      	add	r7, sp, #16
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
 8012144:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d106      	bne.n	801215a <tcp_rst+0x22>
 801214c:	4b1f      	ldr	r3, [pc, #124]	; (80121cc <tcp_rst+0x94>)
 801214e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012152:	491f      	ldr	r1, [pc, #124]	; (80121d0 <tcp_rst+0x98>)
 8012154:	481f      	ldr	r0, [pc, #124]	; (80121d4 <tcp_rst+0x9c>)
 8012156:	f005 fbd1 	bl	80178fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215c:	2b00      	cmp	r3, #0
 801215e:	d106      	bne.n	801216e <tcp_rst+0x36>
 8012160:	4b1a      	ldr	r3, [pc, #104]	; (80121cc <tcp_rst+0x94>)
 8012162:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012166:	491c      	ldr	r1, [pc, #112]	; (80121d8 <tcp_rst+0xa0>)
 8012168:	481a      	ldr	r0, [pc, #104]	; (80121d4 <tcp_rst+0x9c>)
 801216a:	f005 fbc7 	bl	80178fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801216e:	2300      	movs	r3, #0
 8012170:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012172:	f246 0308 	movw	r3, #24584	; 0x6008
 8012176:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012178:	7dfb      	ldrb	r3, [r7, #23]
 801217a:	b29c      	uxth	r4, r3
 801217c:	68b8      	ldr	r0, [r7, #8]
 801217e:	f7f8 fad0 	bl	800a722 <lwip_htonl>
 8012182:	4602      	mov	r2, r0
 8012184:	8abb      	ldrh	r3, [r7, #20]
 8012186:	9303      	str	r3, [sp, #12]
 8012188:	2314      	movs	r3, #20
 801218a:	9302      	str	r3, [sp, #8]
 801218c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801218e:	9301      	str	r3, [sp, #4]
 8012190:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	4613      	mov	r3, r2
 8012196:	2200      	movs	r2, #0
 8012198:	4621      	mov	r1, r4
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f7ff fe90 	bl	8011ec0 <tcp_output_alloc_header_common>
 80121a0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00c      	beq.n	80121c2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80121a8:	7dfb      	ldrb	r3, [r7, #23]
 80121aa:	2200      	movs	r2, #0
 80121ac:	6939      	ldr	r1, [r7, #16]
 80121ae:	68f8      	ldr	r0, [r7, #12]
 80121b0:	f7ff ff38 	bl	8012024 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80121b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b6:	683a      	ldr	r2, [r7, #0]
 80121b8:	6939      	ldr	r1, [r7, #16]
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f7ff ff72 	bl	80120a4 <tcp_output_control_segment>
 80121c0:	e000      	b.n	80121c4 <tcp_rst+0x8c>
    return;
 80121c2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80121c4:	371c      	adds	r7, #28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd90      	pop	{r4, r7, pc}
 80121ca:	bf00      	nop
 80121cc:	0801af38 	.word	0x0801af38
 80121d0:	0801b6bc 	.word	0x0801b6bc
 80121d4:	0801af8c 	.word	0x0801af8c
 80121d8:	0801b6d8 	.word	0x0801b6d8

080121dc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80121dc:	b590      	push	{r4, r7, lr}
 80121de:	b087      	sub	sp, #28
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80121e4:	2300      	movs	r3, #0
 80121e6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80121e8:	2300      	movs	r3, #0
 80121ea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d106      	bne.n	8012200 <tcp_send_empty_ack+0x24>
 80121f2:	4b28      	ldr	r3, [pc, #160]	; (8012294 <tcp_send_empty_ack+0xb8>)
 80121f4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80121f8:	4927      	ldr	r1, [pc, #156]	; (8012298 <tcp_send_empty_ack+0xbc>)
 80121fa:	4828      	ldr	r0, [pc, #160]	; (801229c <tcp_send_empty_ack+0xc0>)
 80121fc:	f005 fb7e 	bl	80178fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012200:	7dfb      	ldrb	r3, [r7, #23]
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	b2db      	uxtb	r3, r3
 8012206:	f003 0304 	and.w	r3, r3, #4
 801220a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801220c:	7d7b      	ldrb	r3, [r7, #21]
 801220e:	b29c      	uxth	r4, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012214:	4618      	mov	r0, r3
 8012216:	f7f8 fa84 	bl	800a722 <lwip_htonl>
 801221a:	4603      	mov	r3, r0
 801221c:	2200      	movs	r2, #0
 801221e:	4621      	mov	r1, r4
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ff fec1 	bl	8011fa8 <tcp_output_alloc_header>
 8012226:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d109      	bne.n	8012242 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	8b5b      	ldrh	r3, [r3, #26]
 8012232:	f043 0303 	orr.w	r3, r3, #3
 8012236:	b29a      	uxth	r2, r3
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801223c:	f06f 0301 	mvn.w	r3, #1
 8012240:	e023      	b.n	801228a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012242:	7dbb      	ldrb	r3, [r7, #22]
 8012244:	7dfa      	ldrb	r2, [r7, #23]
 8012246:	6939      	ldr	r1, [r7, #16]
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f7ff feeb 	bl	8012024 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	3304      	adds	r3, #4
 8012254:	6939      	ldr	r1, [r7, #16]
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f7ff ff24 	bl	80120a4 <tcp_output_control_segment>
 801225c:	4603      	mov	r3, r0
 801225e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d007      	beq.n	8012278 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	8b5b      	ldrh	r3, [r3, #26]
 801226c:	f043 0303 	orr.w	r3, r3, #3
 8012270:	b29a      	uxth	r2, r3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	835a      	strh	r2, [r3, #26]
 8012276:	e006      	b.n	8012286 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	8b5b      	ldrh	r3, [r3, #26]
 801227c:	f023 0303 	bic.w	r3, r3, #3
 8012280:	b29a      	uxth	r2, r3
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801228a:	4618      	mov	r0, r3
 801228c:	371c      	adds	r7, #28
 801228e:	46bd      	mov	sp, r7
 8012290:	bd90      	pop	{r4, r7, pc}
 8012292:	bf00      	nop
 8012294:	0801af38 	.word	0x0801af38
 8012298:	0801b6f4 	.word	0x0801b6f4
 801229c:	0801af8c 	.word	0x0801af8c

080122a0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80122a0:	b590      	push	{r4, r7, lr}
 80122a2:	b087      	sub	sp, #28
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80122a8:	2300      	movs	r3, #0
 80122aa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d106      	bne.n	80122c0 <tcp_keepalive+0x20>
 80122b2:	4b18      	ldr	r3, [pc, #96]	; (8012314 <tcp_keepalive+0x74>)
 80122b4:	f640 0224 	movw	r2, #2084	; 0x824
 80122b8:	4917      	ldr	r1, [pc, #92]	; (8012318 <tcp_keepalive+0x78>)
 80122ba:	4818      	ldr	r0, [pc, #96]	; (801231c <tcp_keepalive+0x7c>)
 80122bc:	f005 fb1e 	bl	80178fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80122c0:	7dfb      	ldrb	r3, [r7, #23]
 80122c2:	b29c      	uxth	r4, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122c8:	3b01      	subs	r3, #1
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7f8 fa29 	bl	800a722 <lwip_htonl>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2200      	movs	r2, #0
 80122d4:	4621      	mov	r1, r4
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7ff fe66 	bl	8011fa8 <tcp_output_alloc_header>
 80122dc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d102      	bne.n	80122ea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80122e4:	f04f 33ff 	mov.w	r3, #4294967295
 80122e8:	e010      	b.n	801230c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80122ea:	7dfb      	ldrb	r3, [r7, #23]
 80122ec:	2200      	movs	r2, #0
 80122ee:	6939      	ldr	r1, [r7, #16]
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f7ff fe97 	bl	8012024 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	3304      	adds	r3, #4
 80122fc:	6939      	ldr	r1, [r7, #16]
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7ff fed0 	bl	80120a4 <tcp_output_control_segment>
 8012304:	4603      	mov	r3, r0
 8012306:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801230c:	4618      	mov	r0, r3
 801230e:	371c      	adds	r7, #28
 8012310:	46bd      	mov	sp, r7
 8012312:	bd90      	pop	{r4, r7, pc}
 8012314:	0801af38 	.word	0x0801af38
 8012318:	0801b714 	.word	0x0801b714
 801231c:	0801af8c 	.word	0x0801af8c

08012320 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012320:	b590      	push	{r4, r7, lr}
 8012322:	b08b      	sub	sp, #44	; 0x2c
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012328:	2300      	movs	r3, #0
 801232a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d106      	bne.n	8012342 <tcp_zero_window_probe+0x22>
 8012334:	4b4c      	ldr	r3, [pc, #304]	; (8012468 <tcp_zero_window_probe+0x148>)
 8012336:	f640 024f 	movw	r2, #2127	; 0x84f
 801233a:	494c      	ldr	r1, [pc, #304]	; (801246c <tcp_zero_window_probe+0x14c>)
 801233c:	484c      	ldr	r0, [pc, #304]	; (8012470 <tcp_zero_window_probe+0x150>)
 801233e:	f005 fadd 	bl	80178fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012346:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012348:	6a3b      	ldr	r3, [r7, #32]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801234e:	2300      	movs	r3, #0
 8012350:	e086      	b.n	8012460 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012358:	2bff      	cmp	r3, #255	; 0xff
 801235a:	d007      	beq.n	801236c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012362:	3301      	adds	r3, #1
 8012364:	b2da      	uxtb	r2, r3
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801236c:	6a3b      	ldr	r3, [r7, #32]
 801236e:	68db      	ldr	r3, [r3, #12]
 8012370:	899b      	ldrh	r3, [r3, #12]
 8012372:	b29b      	uxth	r3, r3
 8012374:	4618      	mov	r0, r3
 8012376:	f7f8 f9bf 	bl	800a6f8 <lwip_htons>
 801237a:	4603      	mov	r3, r0
 801237c:	b2db      	uxtb	r3, r3
 801237e:	f003 0301 	and.w	r3, r3, #1
 8012382:	2b00      	cmp	r3, #0
 8012384:	d005      	beq.n	8012392 <tcp_zero_window_probe+0x72>
 8012386:	6a3b      	ldr	r3, [r7, #32]
 8012388:	891b      	ldrh	r3, [r3, #8]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d101      	bne.n	8012392 <tcp_zero_window_probe+0x72>
 801238e:	2301      	movs	r3, #1
 8012390:	e000      	b.n	8012394 <tcp_zero_window_probe+0x74>
 8012392:	2300      	movs	r3, #0
 8012394:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012396:	7ffb      	ldrb	r3, [r7, #31]
 8012398:	2b00      	cmp	r3, #0
 801239a:	bf0c      	ite	eq
 801239c:	2301      	moveq	r3, #1
 801239e:	2300      	movne	r3, #0
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80123a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123a8:	b299      	uxth	r1, r3
 80123aa:	6a3b      	ldr	r3, [r7, #32]
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	8bba      	ldrh	r2, [r7, #28]
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff fdf8 	bl	8011fa8 <tcp_output_alloc_header>
 80123b8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d102      	bne.n	80123c6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80123c0:	f04f 33ff 	mov.w	r3, #4294967295
 80123c4:	e04c      	b.n	8012460 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80123c6:	69bb      	ldr	r3, [r7, #24]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80123cc:	7ffb      	ldrb	r3, [r7, #31]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d011      	beq.n	80123f6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	899b      	ldrh	r3, [r3, #12]
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	b21b      	sxth	r3, r3
 80123da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80123de:	b21c      	sxth	r4, r3
 80123e0:	2011      	movs	r0, #17
 80123e2:	f7f8 f989 	bl	800a6f8 <lwip_htons>
 80123e6:	4603      	mov	r3, r0
 80123e8:	b21b      	sxth	r3, r3
 80123ea:	4323      	orrs	r3, r4
 80123ec:	b21b      	sxth	r3, r3
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	819a      	strh	r2, [r3, #12]
 80123f4:	e010      	b.n	8012418 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	3314      	adds	r3, #20
 80123fc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80123fe:	6a3b      	ldr	r3, [r7, #32]
 8012400:	6858      	ldr	r0, [r3, #4]
 8012402:	6a3b      	ldr	r3, [r7, #32]
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	891a      	ldrh	r2, [r3, #8]
 8012408:	6a3b      	ldr	r3, [r7, #32]
 801240a:	891b      	ldrh	r3, [r3, #8]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	b29b      	uxth	r3, r3
 8012410:	2201      	movs	r2, #1
 8012412:	6939      	ldr	r1, [r7, #16]
 8012414:	f7f9 ff2a 	bl	800c26c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012418:	6a3b      	ldr	r3, [r7, #32]
 801241a:	68db      	ldr	r3, [r3, #12]
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	4618      	mov	r0, r3
 8012420:	f7f8 f97f 	bl	800a722 <lwip_htonl>
 8012424:	4603      	mov	r3, r0
 8012426:	3301      	adds	r3, #1
 8012428:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	1ad3      	subs	r3, r2, r3
 8012432:	2b00      	cmp	r3, #0
 8012434:	da02      	bge.n	801243c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	68fa      	ldr	r2, [r7, #12]
 801243a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801243c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012440:	2200      	movs	r2, #0
 8012442:	69b9      	ldr	r1, [r7, #24]
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7ff fded 	bl	8012024 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	3304      	adds	r3, #4
 8012450:	69b9      	ldr	r1, [r7, #24]
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f7ff fe26 	bl	80120a4 <tcp_output_control_segment>
 8012458:	4603      	mov	r3, r0
 801245a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801245c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012460:	4618      	mov	r0, r3
 8012462:	372c      	adds	r7, #44	; 0x2c
 8012464:	46bd      	mov	sp, r7
 8012466:	bd90      	pop	{r4, r7, pc}
 8012468:	0801af38 	.word	0x0801af38
 801246c:	0801b730 	.word	0x0801b730
 8012470:	0801af8c 	.word	0x0801af8c

08012474 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801247c:	f7f9 ffe4 	bl	800c448 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012480:	4b0a      	ldr	r3, [pc, #40]	; (80124ac <tcpip_tcp_timer+0x38>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d103      	bne.n	8012490 <tcpip_tcp_timer+0x1c>
 8012488:	4b09      	ldr	r3, [pc, #36]	; (80124b0 <tcpip_tcp_timer+0x3c>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d005      	beq.n	801249c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012490:	2200      	movs	r2, #0
 8012492:	4908      	ldr	r1, [pc, #32]	; (80124b4 <tcpip_tcp_timer+0x40>)
 8012494:	20fa      	movs	r0, #250	; 0xfa
 8012496:	f000 f8f1 	bl	801267c <sys_timeout>
 801249a:	e002      	b.n	80124a2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801249c:	4b06      	ldr	r3, [pc, #24]	; (80124b8 <tcpip_tcp_timer+0x44>)
 801249e:	2200      	movs	r2, #0
 80124a0:	601a      	str	r2, [r3, #0]
  }
}
 80124a2:	bf00      	nop
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	2000f4dc 	.word	0x2000f4dc
 80124b0:	2000f4ec 	.word	0x2000f4ec
 80124b4:	08012475 	.word	0x08012475
 80124b8:	2000868c 	.word	0x2000868c

080124bc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80124c0:	4b0a      	ldr	r3, [pc, #40]	; (80124ec <tcp_timer_needed+0x30>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10f      	bne.n	80124e8 <tcp_timer_needed+0x2c>
 80124c8:	4b09      	ldr	r3, [pc, #36]	; (80124f0 <tcp_timer_needed+0x34>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d103      	bne.n	80124d8 <tcp_timer_needed+0x1c>
 80124d0:	4b08      	ldr	r3, [pc, #32]	; (80124f4 <tcp_timer_needed+0x38>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d007      	beq.n	80124e8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80124d8:	4b04      	ldr	r3, [pc, #16]	; (80124ec <tcp_timer_needed+0x30>)
 80124da:	2201      	movs	r2, #1
 80124dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80124de:	2200      	movs	r2, #0
 80124e0:	4905      	ldr	r1, [pc, #20]	; (80124f8 <tcp_timer_needed+0x3c>)
 80124e2:	20fa      	movs	r0, #250	; 0xfa
 80124e4:	f000 f8ca 	bl	801267c <sys_timeout>
  }
}
 80124e8:	bf00      	nop
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	2000868c 	.word	0x2000868c
 80124f0:	2000f4dc 	.word	0x2000f4dc
 80124f4:	2000f4ec 	.word	0x2000f4ec
 80124f8:	08012475 	.word	0x08012475

080124fc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012508:	200a      	movs	r0, #10
 801250a:	f7f8 fdab 	bl	800b064 <memp_malloc>
 801250e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d109      	bne.n	801252a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d151      	bne.n	80125c0 <sys_timeout_abs+0xc4>
 801251c:	4b2a      	ldr	r3, [pc, #168]	; (80125c8 <sys_timeout_abs+0xcc>)
 801251e:	22be      	movs	r2, #190	; 0xbe
 8012520:	492a      	ldr	r1, [pc, #168]	; (80125cc <sys_timeout_abs+0xd0>)
 8012522:	482b      	ldr	r0, [pc, #172]	; (80125d0 <sys_timeout_abs+0xd4>)
 8012524:	f005 f9ea 	bl	80178fc <iprintf>
    return;
 8012528:	e04a      	b.n	80125c0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	2200      	movs	r2, #0
 801252e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	68ba      	ldr	r2, [r7, #8]
 8012534:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012542:	4b24      	ldr	r3, [pc, #144]	; (80125d4 <sys_timeout_abs+0xd8>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d103      	bne.n	8012552 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801254a:	4a22      	ldr	r2, [pc, #136]	; (80125d4 <sys_timeout_abs+0xd8>)
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	6013      	str	r3, [r2, #0]
    return;
 8012550:	e037      	b.n	80125c2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	685a      	ldr	r2, [r3, #4]
 8012556:	4b1f      	ldr	r3, [pc, #124]	; (80125d4 <sys_timeout_abs+0xd8>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	1ad3      	subs	r3, r2, r3
 801255e:	0fdb      	lsrs	r3, r3, #31
 8012560:	f003 0301 	and.w	r3, r3, #1
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b00      	cmp	r3, #0
 8012568:	d007      	beq.n	801257a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801256a:	4b1a      	ldr	r3, [pc, #104]	; (80125d4 <sys_timeout_abs+0xd8>)
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012572:	4a18      	ldr	r2, [pc, #96]	; (80125d4 <sys_timeout_abs+0xd8>)
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	6013      	str	r3, [r2, #0]
 8012578:	e023      	b.n	80125c2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801257a:	4b16      	ldr	r3, [pc, #88]	; (80125d4 <sys_timeout_abs+0xd8>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	617b      	str	r3, [r7, #20]
 8012580:	e01a      	b.n	80125b8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d00b      	beq.n	80125a2 <sys_timeout_abs+0xa6>
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	685a      	ldr	r2, [r3, #4]
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	1ad3      	subs	r3, r2, r3
 8012596:	0fdb      	lsrs	r3, r3, #31
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	b2db      	uxtb	r3, r3
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d007      	beq.n	80125b2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	681a      	ldr	r2, [r3, #0]
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	693a      	ldr	r2, [r7, #16]
 80125ae:	601a      	str	r2, [r3, #0]
        break;
 80125b0:	e007      	b.n	80125c2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	617b      	str	r3, [r7, #20]
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1e1      	bne.n	8012582 <sys_timeout_abs+0x86>
 80125be:	e000      	b.n	80125c2 <sys_timeout_abs+0xc6>
    return;
 80125c0:	bf00      	nop
      }
    }
  }
}
 80125c2:	3718      	adds	r7, #24
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	0801b754 	.word	0x0801b754
 80125cc:	0801b788 	.word	0x0801b788
 80125d0:	0801b7c8 	.word	0x0801b7c8
 80125d4:	20008684 	.word	0x20008684

080125d8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b086      	sub	sp, #24
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	4798      	blx	r3

  now = sys_now();
 80125ea:	f7f2 fd21 	bl	8005030 <sys_now>
 80125ee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	681a      	ldr	r2, [r3, #0]
 80125f4:	4b0f      	ldr	r3, [pc, #60]	; (8012634 <lwip_cyclic_timer+0x5c>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4413      	add	r3, r2
 80125fa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80125fc:	68fa      	ldr	r2, [r7, #12]
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	1ad3      	subs	r3, r2, r3
 8012602:	0fdb      	lsrs	r3, r3, #31
 8012604:	f003 0301 	and.w	r3, r3, #1
 8012608:	b2db      	uxtb	r3, r3
 801260a:	2b00      	cmp	r3, #0
 801260c:	d009      	beq.n	8012622 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	4413      	add	r3, r2
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	4907      	ldr	r1, [pc, #28]	; (8012638 <lwip_cyclic_timer+0x60>)
 801261a:	4618      	mov	r0, r3
 801261c:	f7ff ff6e 	bl	80124fc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012620:	e004      	b.n	801262c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	4904      	ldr	r1, [pc, #16]	; (8012638 <lwip_cyclic_timer+0x60>)
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7ff ff68 	bl	80124fc <sys_timeout_abs>
}
 801262c:	bf00      	nop
 801262e:	3718      	adds	r7, #24
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	20008688 	.word	0x20008688
 8012638:	080125d9 	.word	0x080125d9

0801263c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012642:	2301      	movs	r3, #1
 8012644:	607b      	str	r3, [r7, #4]
 8012646:	e00e      	b.n	8012666 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012648:	4a0a      	ldr	r2, [pc, #40]	; (8012674 <sys_timeouts_init+0x38>)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	00db      	lsls	r3, r3, #3
 8012654:	4a07      	ldr	r2, [pc, #28]	; (8012674 <sys_timeouts_init+0x38>)
 8012656:	4413      	add	r3, r2
 8012658:	461a      	mov	r2, r3
 801265a:	4907      	ldr	r1, [pc, #28]	; (8012678 <sys_timeouts_init+0x3c>)
 801265c:	f000 f80e 	bl	801267c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	3301      	adds	r3, #1
 8012664:	607b      	str	r3, [r7, #4]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b04      	cmp	r3, #4
 801266a:	d9ed      	bls.n	8012648 <sys_timeouts_init+0xc>
  }
}
 801266c:	bf00      	nop
 801266e:	3708      	adds	r7, #8
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	0801c718 	.word	0x0801c718
 8012678:	080125d9 	.word	0x080125d9

0801267c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b086      	sub	sp, #24
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801268e:	d306      	bcc.n	801269e <sys_timeout+0x22>
 8012690:	4b0a      	ldr	r3, [pc, #40]	; (80126bc <sys_timeout+0x40>)
 8012692:	f240 1229 	movw	r2, #297	; 0x129
 8012696:	490a      	ldr	r1, [pc, #40]	; (80126c0 <sys_timeout+0x44>)
 8012698:	480a      	ldr	r0, [pc, #40]	; (80126c4 <sys_timeout+0x48>)
 801269a:	f005 f92f 	bl	80178fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801269e:	f7f2 fcc7 	bl	8005030 <sys_now>
 80126a2:	4602      	mov	r2, r0
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	4413      	add	r3, r2
 80126a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	68b9      	ldr	r1, [r7, #8]
 80126ae:	6978      	ldr	r0, [r7, #20]
 80126b0:	f7ff ff24 	bl	80124fc <sys_timeout_abs>
#endif
}
 80126b4:	bf00      	nop
 80126b6:	3718      	adds	r7, #24
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	0801b754 	.word	0x0801b754
 80126c0:	0801b7f0 	.word	0x0801b7f0
 80126c4:	0801b7c8 	.word	0x0801b7c8

080126c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80126ce:	f7f2 fcaf 	bl	8005030 <sys_now>
 80126d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80126d4:	4b17      	ldr	r3, [pc, #92]	; (8012734 <sys_check_timeouts+0x6c>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d022      	beq.n	8012726 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80126e0:	68bb      	ldr	r3, [r7, #8]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	0fdb      	lsrs	r3, r3, #31
 80126ea:	f003 0301 	and.w	r3, r3, #1
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d11a      	bne.n	801272a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4a0e      	ldr	r2, [pc, #56]	; (8012734 <sys_check_timeouts+0x6c>)
 80126fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	689b      	ldr	r3, [r3, #8]
 8012700:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	68db      	ldr	r3, [r3, #12]
 8012706:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	4a0a      	ldr	r2, [pc, #40]	; (8012738 <sys_check_timeouts+0x70>)
 801270e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012710:	68b9      	ldr	r1, [r7, #8]
 8012712:	200a      	movs	r0, #10
 8012714:	f7f8 fcf8 	bl	800b108 <memp_free>
    if (handler != NULL) {
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d0da      	beq.n	80126d4 <sys_check_timeouts+0xc>
      handler(arg);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6838      	ldr	r0, [r7, #0]
 8012722:	4798      	blx	r3
  do {
 8012724:	e7d6      	b.n	80126d4 <sys_check_timeouts+0xc>
      return;
 8012726:	bf00      	nop
 8012728:	e000      	b.n	801272c <sys_check_timeouts+0x64>
      return;
 801272a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801272c:	3710      	adds	r7, #16
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	20008684 	.word	0x20008684
 8012738:	20008688 	.word	0x20008688

0801273c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012742:	4b16      	ldr	r3, [pc, #88]	; (801279c <sys_timeouts_sleeptime+0x60>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d102      	bne.n	8012750 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801274a:	f04f 33ff 	mov.w	r3, #4294967295
 801274e:	e020      	b.n	8012792 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012750:	f7f2 fc6e 	bl	8005030 <sys_now>
 8012754:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012756:	4b11      	ldr	r3, [pc, #68]	; (801279c <sys_timeouts_sleeptime+0x60>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	685a      	ldr	r2, [r3, #4]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	0fdb      	lsrs	r3, r3, #31
 8012762:	f003 0301 	and.w	r3, r3, #1
 8012766:	b2db      	uxtb	r3, r3
 8012768:	2b00      	cmp	r3, #0
 801276a:	d001      	beq.n	8012770 <sys_timeouts_sleeptime+0x34>
    return 0;
 801276c:	2300      	movs	r3, #0
 801276e:	e010      	b.n	8012792 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012770:	4b0a      	ldr	r3, [pc, #40]	; (801279c <sys_timeouts_sleeptime+0x60>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	685a      	ldr	r2, [r3, #4]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	1ad3      	subs	r3, r2, r3
 801277a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	da06      	bge.n	8012790 <sys_timeouts_sleeptime+0x54>
 8012782:	4b07      	ldr	r3, [pc, #28]	; (80127a0 <sys_timeouts_sleeptime+0x64>)
 8012784:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012788:	4906      	ldr	r1, [pc, #24]	; (80127a4 <sys_timeouts_sleeptime+0x68>)
 801278a:	4807      	ldr	r0, [pc, #28]	; (80127a8 <sys_timeouts_sleeptime+0x6c>)
 801278c:	f005 f8b6 	bl	80178fc <iprintf>
    return ret;
 8012790:	683b      	ldr	r3, [r7, #0]
  }
}
 8012792:	4618      	mov	r0, r3
 8012794:	3708      	adds	r7, #8
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
 801279a:	bf00      	nop
 801279c:	20008684 	.word	0x20008684
 80127a0:	0801b754 	.word	0x0801b754
 80127a4:	0801b828 	.word	0x0801b828
 80127a8:	0801b7c8 	.word	0x0801b7c8

080127ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80127b0:	f005 f920 	bl	80179f4 <rand>
 80127b4:	4603      	mov	r3, r0
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80127bc:	b29b      	uxth	r3, r3
 80127be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80127c2:	b29a      	uxth	r2, r3
 80127c4:	4b01      	ldr	r3, [pc, #4]	; (80127cc <udp_init+0x20>)
 80127c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80127c8:	bf00      	nop
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	20000018 	.word	0x20000018

080127d0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80127d6:	2300      	movs	r3, #0
 80127d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80127da:	4b17      	ldr	r3, [pc, #92]	; (8012838 <udp_new_port+0x68>)
 80127dc:	881b      	ldrh	r3, [r3, #0]
 80127de:	1c5a      	adds	r2, r3, #1
 80127e0:	b291      	uxth	r1, r2
 80127e2:	4a15      	ldr	r2, [pc, #84]	; (8012838 <udp_new_port+0x68>)
 80127e4:	8011      	strh	r1, [r2, #0]
 80127e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d103      	bne.n	80127f6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80127ee:	4b12      	ldr	r3, [pc, #72]	; (8012838 <udp_new_port+0x68>)
 80127f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80127f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80127f6:	4b11      	ldr	r3, [pc, #68]	; (801283c <udp_new_port+0x6c>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	603b      	str	r3, [r7, #0]
 80127fc:	e011      	b.n	8012822 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	8a5a      	ldrh	r2, [r3, #18]
 8012802:	4b0d      	ldr	r3, [pc, #52]	; (8012838 <udp_new_port+0x68>)
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	429a      	cmp	r2, r3
 8012808:	d108      	bne.n	801281c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801280a:	88fb      	ldrh	r3, [r7, #6]
 801280c:	3301      	adds	r3, #1
 801280e:	80fb      	strh	r3, [r7, #6]
 8012810:	88fb      	ldrh	r3, [r7, #6]
 8012812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012816:	d3e0      	bcc.n	80127da <udp_new_port+0xa>
        return 0;
 8012818:	2300      	movs	r3, #0
 801281a:	e007      	b.n	801282c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	68db      	ldr	r3, [r3, #12]
 8012820:	603b      	str	r3, [r7, #0]
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d1ea      	bne.n	80127fe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012828:	4b03      	ldr	r3, [pc, #12]	; (8012838 <udp_new_port+0x68>)
 801282a:	881b      	ldrh	r3, [r3, #0]
}
 801282c:	4618      	mov	r0, r3
 801282e:	370c      	adds	r7, #12
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr
 8012838:	20000018 	.word	0x20000018
 801283c:	2000f4f4 	.word	0x2000f4f4

08012840 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	4613      	mov	r3, r2
 801284c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d105      	bne.n	8012860 <udp_input_local_match+0x20>
 8012854:	4b27      	ldr	r3, [pc, #156]	; (80128f4 <udp_input_local_match+0xb4>)
 8012856:	2287      	movs	r2, #135	; 0x87
 8012858:	4927      	ldr	r1, [pc, #156]	; (80128f8 <udp_input_local_match+0xb8>)
 801285a:	4828      	ldr	r0, [pc, #160]	; (80128fc <udp_input_local_match+0xbc>)
 801285c:	f005 f84e 	bl	80178fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d105      	bne.n	8012872 <udp_input_local_match+0x32>
 8012866:	4b23      	ldr	r3, [pc, #140]	; (80128f4 <udp_input_local_match+0xb4>)
 8012868:	2288      	movs	r2, #136	; 0x88
 801286a:	4925      	ldr	r1, [pc, #148]	; (8012900 <udp_input_local_match+0xc0>)
 801286c:	4823      	ldr	r0, [pc, #140]	; (80128fc <udp_input_local_match+0xbc>)
 801286e:	f005 f845 	bl	80178fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	7a1b      	ldrb	r3, [r3, #8]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d00b      	beq.n	8012892 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	7a1a      	ldrb	r2, [r3, #8]
 801287e:	4b21      	ldr	r3, [pc, #132]	; (8012904 <udp_input_local_match+0xc4>)
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012886:	3301      	adds	r3, #1
 8012888:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801288a:	429a      	cmp	r2, r3
 801288c:	d001      	beq.n	8012892 <udp_input_local_match+0x52>
    return 0;
 801288e:	2300      	movs	r3, #0
 8012890:	e02b      	b.n	80128ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012892:	79fb      	ldrb	r3, [r7, #7]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d018      	beq.n	80128ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d013      	beq.n	80128c6 <udp_input_local_match+0x86>
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d00f      	beq.n	80128c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80128a6:	4b17      	ldr	r3, [pc, #92]	; (8012904 <udp_input_local_match+0xc4>)
 80128a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80128aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ae:	d00a      	beq.n	80128c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	4b13      	ldr	r3, [pc, #76]	; (8012904 <udp_input_local_match+0xc4>)
 80128b6:	695b      	ldr	r3, [r3, #20]
 80128b8:	405a      	eors	r2, r3
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	3308      	adds	r3, #8
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d110      	bne.n	80128e8 <udp_input_local_match+0xa8>
          return 1;
 80128c6:	2301      	movs	r3, #1
 80128c8:	e00f      	b.n	80128ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d009      	beq.n	80128e4 <udp_input_local_match+0xa4>
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d005      	beq.n	80128e4 <udp_input_local_match+0xa4>
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	4b09      	ldr	r3, [pc, #36]	; (8012904 <udp_input_local_match+0xc4>)
 80128de:	695b      	ldr	r3, [r3, #20]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d101      	bne.n	80128e8 <udp_input_local_match+0xa8>
        return 1;
 80128e4:	2301      	movs	r3, #1
 80128e6:	e000      	b.n	80128ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80128e8:	2300      	movs	r3, #0
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3710      	adds	r7, #16
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	0801b83c 	.word	0x0801b83c
 80128f8:	0801b86c 	.word	0x0801b86c
 80128fc:	0801b890 	.word	0x0801b890
 8012900:	0801b8b8 	.word	0x0801b8b8
 8012904:	2000bda8 	.word	0x2000bda8

08012908 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012908:	b590      	push	{r4, r7, lr}
 801290a:	b08d      	sub	sp, #52	; 0x34
 801290c:	af02      	add	r7, sp, #8
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012912:	2300      	movs	r3, #0
 8012914:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d105      	bne.n	8012928 <udp_input+0x20>
 801291c:	4b7c      	ldr	r3, [pc, #496]	; (8012b10 <udp_input+0x208>)
 801291e:	22cf      	movs	r2, #207	; 0xcf
 8012920:	497c      	ldr	r1, [pc, #496]	; (8012b14 <udp_input+0x20c>)
 8012922:	487d      	ldr	r0, [pc, #500]	; (8012b18 <udp_input+0x210>)
 8012924:	f004 ffea 	bl	80178fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d105      	bne.n	801293a <udp_input+0x32>
 801292e:	4b78      	ldr	r3, [pc, #480]	; (8012b10 <udp_input+0x208>)
 8012930:	22d0      	movs	r2, #208	; 0xd0
 8012932:	497a      	ldr	r1, [pc, #488]	; (8012b1c <udp_input+0x214>)
 8012934:	4878      	ldr	r0, [pc, #480]	; (8012b18 <udp_input+0x210>)
 8012936:	f004 ffe1 	bl	80178fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	895b      	ldrh	r3, [r3, #10]
 801293e:	2b07      	cmp	r3, #7
 8012940:	d803      	bhi.n	801294a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f7f9 fa8c 	bl	800be60 <pbuf_free>
    goto end;
 8012948:	e0de      	b.n	8012b08 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012950:	4b73      	ldr	r3, [pc, #460]	; (8012b20 <udp_input+0x218>)
 8012952:	695a      	ldr	r2, [r3, #20]
 8012954:	4b72      	ldr	r3, [pc, #456]	; (8012b20 <udp_input+0x218>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4619      	mov	r1, r3
 801295a:	4610      	mov	r0, r2
 801295c:	f003 fe20 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 8012960:	4603      	mov	r3, r0
 8012962:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	881b      	ldrh	r3, [r3, #0]
 8012968:	b29b      	uxth	r3, r3
 801296a:	4618      	mov	r0, r3
 801296c:	f7f7 fec4 	bl	800a6f8 <lwip_htons>
 8012970:	4603      	mov	r3, r0
 8012972:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	885b      	ldrh	r3, [r3, #2]
 8012978:	b29b      	uxth	r3, r3
 801297a:	4618      	mov	r0, r3
 801297c:	f7f7 febc 	bl	800a6f8 <lwip_htons>
 8012980:	4603      	mov	r3, r0
 8012982:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012984:	2300      	movs	r3, #0
 8012986:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012988:	2300      	movs	r3, #0
 801298a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801298c:	2300      	movs	r3, #0
 801298e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012990:	4b64      	ldr	r3, [pc, #400]	; (8012b24 <udp_input+0x21c>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	627b      	str	r3, [r7, #36]	; 0x24
 8012996:	e054      	b.n	8012a42 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299a:	8a5b      	ldrh	r3, [r3, #18]
 801299c:	89fa      	ldrh	r2, [r7, #14]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d14a      	bne.n	8012a38 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80129a2:	7cfb      	ldrb	r3, [r7, #19]
 80129a4:	461a      	mov	r2, r3
 80129a6:	6839      	ldr	r1, [r7, #0]
 80129a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129aa:	f7ff ff49 	bl	8012840 <udp_input_local_match>
 80129ae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d041      	beq.n	8012a38 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80129b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b6:	7c1b      	ldrb	r3, [r3, #16]
 80129b8:	f003 0304 	and.w	r3, r3, #4
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d11d      	bne.n	80129fc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80129c0:	69fb      	ldr	r3, [r7, #28]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d102      	bne.n	80129cc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80129c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c8:	61fb      	str	r3, [r7, #28]
 80129ca:	e017      	b.n	80129fc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80129cc:	7cfb      	ldrb	r3, [r7, #19]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d014      	beq.n	80129fc <udp_input+0xf4>
 80129d2:	4b53      	ldr	r3, [pc, #332]	; (8012b20 <udp_input+0x218>)
 80129d4:	695b      	ldr	r3, [r3, #20]
 80129d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129da:	d10f      	bne.n	80129fc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80129dc:	69fb      	ldr	r3, [r7, #28]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	3304      	adds	r3, #4
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d008      	beq.n	80129fc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	3304      	adds	r3, #4
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d101      	bne.n	80129fc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fe:	8a9b      	ldrh	r3, [r3, #20]
 8012a00:	8a3a      	ldrh	r2, [r7, #16]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d118      	bne.n	8012a38 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d005      	beq.n	8012a1a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a10:	685a      	ldr	r2, [r3, #4]
 8012a12:	4b43      	ldr	r3, [pc, #268]	; (8012b20 <udp_input+0x218>)
 8012a14:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d10e      	bne.n	8012a38 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012a1a:	6a3b      	ldr	r3, [r7, #32]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d014      	beq.n	8012a4a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a22:	68da      	ldr	r2, [r3, #12]
 8012a24:	6a3b      	ldr	r3, [r7, #32]
 8012a26:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012a28:	4b3e      	ldr	r3, [pc, #248]	; (8012b24 <udp_input+0x21c>)
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012a30:	4a3c      	ldr	r2, [pc, #240]	; (8012b24 <udp_input+0x21c>)
 8012a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a34:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012a36:	e008      	b.n	8012a4a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	627b      	str	r3, [r7, #36]	; 0x24
 8012a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d1a7      	bne.n	8012998 <udp_input+0x90>
 8012a48:	e000      	b.n	8012a4c <udp_input+0x144>
        break;
 8012a4a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d002      	beq.n	8012a62 <udp_input+0x15a>
    for_us = 1;
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	76fb      	strb	r3, [r7, #27]
 8012a60:	e00a      	b.n	8012a78 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	3304      	adds	r3, #4
 8012a66:	681a      	ldr	r2, [r3, #0]
 8012a68:	4b2d      	ldr	r3, [pc, #180]	; (8012b20 <udp_input+0x218>)
 8012a6a:	695b      	ldr	r3, [r3, #20]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	bf0c      	ite	eq
 8012a70:	2301      	moveq	r3, #1
 8012a72:	2300      	movne	r3, #0
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012a78:	7efb      	ldrb	r3, [r7, #27]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d041      	beq.n	8012b02 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012a7e:	2108      	movs	r1, #8
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7f9 f967 	bl	800bd54 <pbuf_remove_header>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00a      	beq.n	8012aa2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012a8c:	4b20      	ldr	r3, [pc, #128]	; (8012b10 <udp_input+0x208>)
 8012a8e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012a92:	4925      	ldr	r1, [pc, #148]	; (8012b28 <udp_input+0x220>)
 8012a94:	4820      	ldr	r0, [pc, #128]	; (8012b18 <udp_input+0x210>)
 8012a96:	f004 ff31 	bl	80178fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7f9 f9e0 	bl	800be60 <pbuf_free>
      goto end;
 8012aa0:	e032      	b.n	8012b08 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d012      	beq.n	8012ace <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aaa:	699b      	ldr	r3, [r3, #24]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00a      	beq.n	8012ac6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab2:	699c      	ldr	r4, [r3, #24]
 8012ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab6:	69d8      	ldr	r0, [r3, #28]
 8012ab8:	8a3b      	ldrh	r3, [r7, #16]
 8012aba:	9300      	str	r3, [sp, #0]
 8012abc:	4b1b      	ldr	r3, [pc, #108]	; (8012b2c <udp_input+0x224>)
 8012abe:	687a      	ldr	r2, [r7, #4]
 8012ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ac2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012ac4:	e021      	b.n	8012b0a <udp_input+0x202>
        pbuf_free(p);
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7f9 f9ca 	bl	800be60 <pbuf_free>
        goto end;
 8012acc:	e01c      	b.n	8012b08 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012ace:	7cfb      	ldrb	r3, [r7, #19]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d112      	bne.n	8012afa <udp_input+0x1f2>
 8012ad4:	4b12      	ldr	r3, [pc, #72]	; (8012b20 <udp_input+0x218>)
 8012ad6:	695b      	ldr	r3, [r3, #20]
 8012ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012adc:	2be0      	cmp	r3, #224	; 0xe0
 8012ade:	d00c      	beq.n	8012afa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012ae0:	4b0f      	ldr	r3, [pc, #60]	; (8012b20 <udp_input+0x218>)
 8012ae2:	899b      	ldrh	r3, [r3, #12]
 8012ae4:	3308      	adds	r3, #8
 8012ae6:	b29b      	uxth	r3, r3
 8012ae8:	b21b      	sxth	r3, r3
 8012aea:	4619      	mov	r1, r3
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7f9 f9a4 	bl	800be3a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012af2:	2103      	movs	r1, #3
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f003 fa17 	bl	8015f28 <icmp_dest_unreach>
      pbuf_free(p);
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7f9 f9b0 	bl	800be60 <pbuf_free>
  return;
 8012b00:	e003      	b.n	8012b0a <udp_input+0x202>
    pbuf_free(p);
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f7f9 f9ac 	bl	800be60 <pbuf_free>
  return;
 8012b08:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012b0a:	372c      	adds	r7, #44	; 0x2c
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd90      	pop	{r4, r7, pc}
 8012b10:	0801b83c 	.word	0x0801b83c
 8012b14:	0801b8e0 	.word	0x0801b8e0
 8012b18:	0801b890 	.word	0x0801b890
 8012b1c:	0801b8f8 	.word	0x0801b8f8
 8012b20:	2000bda8 	.word	0x2000bda8
 8012b24:	2000f4f4 	.word	0x2000f4f4
 8012b28:	0801b914 	.word	0x0801b914
 8012b2c:	2000bdb8 	.word	0x2000bdb8

08012b30 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b088      	sub	sp, #32
 8012b34:	af02      	add	r7, sp, #8
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	607a      	str	r2, [r7, #4]
 8012b3c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d109      	bne.n	8012b58 <udp_sendto_if+0x28>
 8012b44:	4b2e      	ldr	r3, [pc, #184]	; (8012c00 <udp_sendto_if+0xd0>)
 8012b46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b4a:	492e      	ldr	r1, [pc, #184]	; (8012c04 <udp_sendto_if+0xd4>)
 8012b4c:	482e      	ldr	r0, [pc, #184]	; (8012c08 <udp_sendto_if+0xd8>)
 8012b4e:	f004 fed5 	bl	80178fc <iprintf>
 8012b52:	f06f 030f 	mvn.w	r3, #15
 8012b56:	e04f      	b.n	8012bf8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d109      	bne.n	8012b72 <udp_sendto_if+0x42>
 8012b5e:	4b28      	ldr	r3, [pc, #160]	; (8012c00 <udp_sendto_if+0xd0>)
 8012b60:	f240 2281 	movw	r2, #641	; 0x281
 8012b64:	4929      	ldr	r1, [pc, #164]	; (8012c0c <udp_sendto_if+0xdc>)
 8012b66:	4828      	ldr	r0, [pc, #160]	; (8012c08 <udp_sendto_if+0xd8>)
 8012b68:	f004 fec8 	bl	80178fc <iprintf>
 8012b6c:	f06f 030f 	mvn.w	r3, #15
 8012b70:	e042      	b.n	8012bf8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d109      	bne.n	8012b8c <udp_sendto_if+0x5c>
 8012b78:	4b21      	ldr	r3, [pc, #132]	; (8012c00 <udp_sendto_if+0xd0>)
 8012b7a:	f240 2282 	movw	r2, #642	; 0x282
 8012b7e:	4924      	ldr	r1, [pc, #144]	; (8012c10 <udp_sendto_if+0xe0>)
 8012b80:	4821      	ldr	r0, [pc, #132]	; (8012c08 <udp_sendto_if+0xd8>)
 8012b82:	f004 febb 	bl	80178fc <iprintf>
 8012b86:	f06f 030f 	mvn.w	r3, #15
 8012b8a:	e035      	b.n	8012bf8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012b8c:	6a3b      	ldr	r3, [r7, #32]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d109      	bne.n	8012ba6 <udp_sendto_if+0x76>
 8012b92:	4b1b      	ldr	r3, [pc, #108]	; (8012c00 <udp_sendto_if+0xd0>)
 8012b94:	f240 2283 	movw	r2, #643	; 0x283
 8012b98:	491e      	ldr	r1, [pc, #120]	; (8012c14 <udp_sendto_if+0xe4>)
 8012b9a:	481b      	ldr	r0, [pc, #108]	; (8012c08 <udp_sendto_if+0xd8>)
 8012b9c:	f004 feae 	bl	80178fc <iprintf>
 8012ba0:	f06f 030f 	mvn.w	r3, #15
 8012ba4:	e028      	b.n	8012bf8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d009      	beq.n	8012bc0 <udp_sendto_if+0x90>
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d005      	beq.n	8012bc0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012bbc:	2be0      	cmp	r3, #224	; 0xe0
 8012bbe:	d103      	bne.n	8012bc8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012bc0:	6a3b      	ldr	r3, [r7, #32]
 8012bc2:	3304      	adds	r3, #4
 8012bc4:	617b      	str	r3, [r7, #20]
 8012bc6:	e00b      	b.n	8012be0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	681a      	ldr	r2, [r3, #0]
 8012bcc:	6a3b      	ldr	r3, [r7, #32]
 8012bce:	3304      	adds	r3, #4
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d002      	beq.n	8012bdc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012bd6:	f06f 0303 	mvn.w	r3, #3
 8012bda:	e00d      	b.n	8012bf8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012be0:	887a      	ldrh	r2, [r7, #2]
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	9301      	str	r3, [sp, #4]
 8012be6:	6a3b      	ldr	r3, [r7, #32]
 8012be8:	9300      	str	r3, [sp, #0]
 8012bea:	4613      	mov	r3, r2
 8012bec:	687a      	ldr	r2, [r7, #4]
 8012bee:	68b9      	ldr	r1, [r7, #8]
 8012bf0:	68f8      	ldr	r0, [r7, #12]
 8012bf2:	f000 f811 	bl	8012c18 <udp_sendto_if_src>
 8012bf6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3718      	adds	r7, #24
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	0801b83c 	.word	0x0801b83c
 8012c04:	0801b9b0 	.word	0x0801b9b0
 8012c08:	0801b890 	.word	0x0801b890
 8012c0c:	0801b9cc 	.word	0x0801b9cc
 8012c10:	0801b9e8 	.word	0x0801b9e8
 8012c14:	0801ba08 	.word	0x0801ba08

08012c18 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b08c      	sub	sp, #48	; 0x30
 8012c1c:	af04      	add	r7, sp, #16
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	607a      	str	r2, [r7, #4]
 8012c24:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d109      	bne.n	8012c40 <udp_sendto_if_src+0x28>
 8012c2c:	4b65      	ldr	r3, [pc, #404]	; (8012dc4 <udp_sendto_if_src+0x1ac>)
 8012c2e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012c32:	4965      	ldr	r1, [pc, #404]	; (8012dc8 <udp_sendto_if_src+0x1b0>)
 8012c34:	4865      	ldr	r0, [pc, #404]	; (8012dcc <udp_sendto_if_src+0x1b4>)
 8012c36:	f004 fe61 	bl	80178fc <iprintf>
 8012c3a:	f06f 030f 	mvn.w	r3, #15
 8012c3e:	e0bc      	b.n	8012dba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d109      	bne.n	8012c5a <udp_sendto_if_src+0x42>
 8012c46:	4b5f      	ldr	r3, [pc, #380]	; (8012dc4 <udp_sendto_if_src+0x1ac>)
 8012c48:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012c4c:	4960      	ldr	r1, [pc, #384]	; (8012dd0 <udp_sendto_if_src+0x1b8>)
 8012c4e:	485f      	ldr	r0, [pc, #380]	; (8012dcc <udp_sendto_if_src+0x1b4>)
 8012c50:	f004 fe54 	bl	80178fc <iprintf>
 8012c54:	f06f 030f 	mvn.w	r3, #15
 8012c58:	e0af      	b.n	8012dba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d109      	bne.n	8012c74 <udp_sendto_if_src+0x5c>
 8012c60:	4b58      	ldr	r3, [pc, #352]	; (8012dc4 <udp_sendto_if_src+0x1ac>)
 8012c62:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012c66:	495b      	ldr	r1, [pc, #364]	; (8012dd4 <udp_sendto_if_src+0x1bc>)
 8012c68:	4858      	ldr	r0, [pc, #352]	; (8012dcc <udp_sendto_if_src+0x1b4>)
 8012c6a:	f004 fe47 	bl	80178fc <iprintf>
 8012c6e:	f06f 030f 	mvn.w	r3, #15
 8012c72:	e0a2      	b.n	8012dba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d109      	bne.n	8012c8e <udp_sendto_if_src+0x76>
 8012c7a:	4b52      	ldr	r3, [pc, #328]	; (8012dc4 <udp_sendto_if_src+0x1ac>)
 8012c7c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012c80:	4955      	ldr	r1, [pc, #340]	; (8012dd8 <udp_sendto_if_src+0x1c0>)
 8012c82:	4852      	ldr	r0, [pc, #328]	; (8012dcc <udp_sendto_if_src+0x1b4>)
 8012c84:	f004 fe3a 	bl	80178fc <iprintf>
 8012c88:	f06f 030f 	mvn.w	r3, #15
 8012c8c:	e095      	b.n	8012dba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d109      	bne.n	8012ca8 <udp_sendto_if_src+0x90>
 8012c94:	4b4b      	ldr	r3, [pc, #300]	; (8012dc4 <udp_sendto_if_src+0x1ac>)
 8012c96:	f240 22d5 	movw	r2, #725	; 0x2d5
 8012c9a:	4950      	ldr	r1, [pc, #320]	; (8012ddc <udp_sendto_if_src+0x1c4>)
 8012c9c:	484b      	ldr	r0, [pc, #300]	; (8012dcc <udp_sendto_if_src+0x1b4>)
 8012c9e:	f004 fe2d 	bl	80178fc <iprintf>
 8012ca2:	f06f 030f 	mvn.w	r3, #15
 8012ca6:	e088      	b.n	8012dba <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	8a5b      	ldrh	r3, [r3, #18]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d10f      	bne.n	8012cd0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012cb0:	68f9      	ldr	r1, [r7, #12]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	8a5b      	ldrh	r3, [r3, #18]
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	68f8      	ldr	r0, [r7, #12]
 8012cba:	f000 f893 	bl	8012de4 <udp_bind>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012cc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d002      	beq.n	8012cd0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012cca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012cce:	e074      	b.n	8012dba <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	891b      	ldrh	r3, [r3, #8]
 8012cd4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d902      	bls.n	8012ce2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ce0:	e06b      	b.n	8012dba <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012ce2:	2108      	movs	r1, #8
 8012ce4:	68b8      	ldr	r0, [r7, #8]
 8012ce6:	f7f9 f825 	bl	800bd34 <pbuf_add_header>
 8012cea:	4603      	mov	r3, r0
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d015      	beq.n	8012d1c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cf4:	2108      	movs	r1, #8
 8012cf6:	2022      	movs	r0, #34	; 0x22
 8012cf8:	f7f8 fdd2 	bl	800b8a0 <pbuf_alloc>
 8012cfc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d102      	bne.n	8012d0a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012d04:	f04f 33ff 	mov.w	r3, #4294967295
 8012d08:	e057      	b.n	8012dba <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	891b      	ldrh	r3, [r3, #8]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d006      	beq.n	8012d20 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012d12:	68b9      	ldr	r1, [r7, #8]
 8012d14:	69f8      	ldr	r0, [r7, #28]
 8012d16:	f7f9 f9c7 	bl	800c0a8 <pbuf_chain>
 8012d1a:	e001      	b.n	8012d20 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	895b      	ldrh	r3, [r3, #10]
 8012d24:	2b07      	cmp	r3, #7
 8012d26:	d806      	bhi.n	8012d36 <udp_sendto_if_src+0x11e>
 8012d28:	4b26      	ldr	r3, [pc, #152]	; (8012dc4 <udp_sendto_if_src+0x1ac>)
 8012d2a:	f240 320e 	movw	r2, #782	; 0x30e
 8012d2e:	492c      	ldr	r1, [pc, #176]	; (8012de0 <udp_sendto_if_src+0x1c8>)
 8012d30:	4826      	ldr	r0, [pc, #152]	; (8012dcc <udp_sendto_if_src+0x1b4>)
 8012d32:	f004 fde3 	bl	80178fc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	8a5b      	ldrh	r3, [r3, #18]
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7f7 fcd9 	bl	800a6f8 <lwip_htons>
 8012d46:	4603      	mov	r3, r0
 8012d48:	461a      	mov	r2, r3
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012d4e:	887b      	ldrh	r3, [r7, #2]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7f7 fcd1 	bl	800a6f8 <lwip_htons>
 8012d56:	4603      	mov	r3, r0
 8012d58:	461a      	mov	r2, r3
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	2200      	movs	r2, #0
 8012d62:	719a      	strb	r2, [r3, #6]
 8012d64:	2200      	movs	r2, #0
 8012d66:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	891b      	ldrh	r3, [r3, #8]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7f7 fcc3 	bl	800a6f8 <lwip_htons>
 8012d72:	4603      	mov	r3, r0
 8012d74:	461a      	mov	r2, r3
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012d7a:	2311      	movs	r3, #17
 8012d7c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	7adb      	ldrb	r3, [r3, #11]
 8012d82:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	7a9b      	ldrb	r3, [r3, #10]
 8012d88:	7cb9      	ldrb	r1, [r7, #18]
 8012d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d8c:	9202      	str	r2, [sp, #8]
 8012d8e:	7cfa      	ldrb	r2, [r7, #19]
 8012d90:	9201      	str	r2, [sp, #4]
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	460b      	mov	r3, r1
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d9a:	69f8      	ldr	r0, [r7, #28]
 8012d9c:	f003 fb52 	bl	8016444 <ip4_output_if_src>
 8012da0:	4603      	mov	r3, r0
 8012da2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012da4:	69fa      	ldr	r2, [r7, #28]
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d004      	beq.n	8012db6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012dac:	69f8      	ldr	r0, [r7, #28]
 8012dae:	f7f9 f857 	bl	800be60 <pbuf_free>
    q = NULL;
 8012db2:	2300      	movs	r3, #0
 8012db4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012db6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3720      	adds	r7, #32
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	0801b83c 	.word	0x0801b83c
 8012dc8:	0801ba28 	.word	0x0801ba28
 8012dcc:	0801b890 	.word	0x0801b890
 8012dd0:	0801ba48 	.word	0x0801ba48
 8012dd4:	0801ba68 	.word	0x0801ba68
 8012dd8:	0801ba8c 	.word	0x0801ba8c
 8012ddc:	0801bab0 	.word	0x0801bab0
 8012de0:	0801bad4 	.word	0x0801bad4

08012de4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b086      	sub	sp, #24
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	60f8      	str	r0, [r7, #12]
 8012dec:	60b9      	str	r1, [r7, #8]
 8012dee:	4613      	mov	r3, r2
 8012df0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d101      	bne.n	8012dfc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012df8:	4b39      	ldr	r3, [pc, #228]	; (8012ee0 <udp_bind+0xfc>)
 8012dfa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d109      	bne.n	8012e16 <udp_bind+0x32>
 8012e02:	4b38      	ldr	r3, [pc, #224]	; (8012ee4 <udp_bind+0x100>)
 8012e04:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012e08:	4937      	ldr	r1, [pc, #220]	; (8012ee8 <udp_bind+0x104>)
 8012e0a:	4838      	ldr	r0, [pc, #224]	; (8012eec <udp_bind+0x108>)
 8012e0c:	f004 fd76 	bl	80178fc <iprintf>
 8012e10:	f06f 030f 	mvn.w	r3, #15
 8012e14:	e060      	b.n	8012ed8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012e16:	2300      	movs	r3, #0
 8012e18:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e1a:	4b35      	ldr	r3, [pc, #212]	; (8012ef0 <udp_bind+0x10c>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	617b      	str	r3, [r7, #20]
 8012e20:	e009      	b.n	8012e36 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012e22:	68fa      	ldr	r2, [r7, #12]
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d102      	bne.n	8012e30 <udp_bind+0x4c>
      rebind = 1;
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	74fb      	strb	r3, [r7, #19]
      break;
 8012e2e:	e005      	b.n	8012e3c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	68db      	ldr	r3, [r3, #12]
 8012e34:	617b      	str	r3, [r7, #20]
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d1f2      	bne.n	8012e22 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012e3c:	88fb      	ldrh	r3, [r7, #6]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d109      	bne.n	8012e56 <udp_bind+0x72>
    port = udp_new_port();
 8012e42:	f7ff fcc5 	bl	80127d0 <udp_new_port>
 8012e46:	4603      	mov	r3, r0
 8012e48:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012e4a:	88fb      	ldrh	r3, [r7, #6]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d12c      	bne.n	8012eaa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012e50:	f06f 0307 	mvn.w	r3, #7
 8012e54:	e040      	b.n	8012ed8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e56:	4b26      	ldr	r3, [pc, #152]	; (8012ef0 <udp_bind+0x10c>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	617b      	str	r3, [r7, #20]
 8012e5c:	e022      	b.n	8012ea4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d01b      	beq.n	8012e9e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	8a5b      	ldrh	r3, [r3, #18]
 8012e6a:	88fa      	ldrh	r2, [r7, #6]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d116      	bne.n	8012e9e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	681a      	ldr	r2, [r3, #0]
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d00d      	beq.n	8012e98 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d00a      	beq.n	8012e98 <udp_bind+0xb4>
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d006      	beq.n	8012e98 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012e8a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d003      	beq.n	8012e98 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d102      	bne.n	8012e9e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012e98:	f06f 0307 	mvn.w	r3, #7
 8012e9c:	e01c      	b.n	8012ed8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	617b      	str	r3, [r7, #20]
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d1d9      	bne.n	8012e5e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d002      	beq.n	8012eb6 <udp_bind+0xd2>
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	e000      	b.n	8012eb8 <udp_bind+0xd4>
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	68fa      	ldr	r2, [r7, #12]
 8012eba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	88fa      	ldrh	r2, [r7, #6]
 8012ec0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012ec2:	7cfb      	ldrb	r3, [r7, #19]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012ec8:	4b09      	ldr	r3, [pc, #36]	; (8012ef0 <udp_bind+0x10c>)
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012ed0:	4a07      	ldr	r2, [pc, #28]	; (8012ef0 <udp_bind+0x10c>)
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012ed6:	2300      	movs	r3, #0
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3718      	adds	r7, #24
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	0801c740 	.word	0x0801c740
 8012ee4:	0801b83c 	.word	0x0801b83c
 8012ee8:	0801bb04 	.word	0x0801bb04
 8012eec:	0801b890 	.word	0x0801b890
 8012ef0:	2000f4f4 	.word	0x2000f4f4

08012ef4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b086      	sub	sp, #24
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	4613      	mov	r3, r2
 8012f00:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d109      	bne.n	8012f1c <udp_connect+0x28>
 8012f08:	4b2c      	ldr	r3, [pc, #176]	; (8012fbc <udp_connect+0xc8>)
 8012f0a:	f240 4235 	movw	r2, #1077	; 0x435
 8012f0e:	492c      	ldr	r1, [pc, #176]	; (8012fc0 <udp_connect+0xcc>)
 8012f10:	482c      	ldr	r0, [pc, #176]	; (8012fc4 <udp_connect+0xd0>)
 8012f12:	f004 fcf3 	bl	80178fc <iprintf>
 8012f16:	f06f 030f 	mvn.w	r3, #15
 8012f1a:	e04b      	b.n	8012fb4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d109      	bne.n	8012f36 <udp_connect+0x42>
 8012f22:	4b26      	ldr	r3, [pc, #152]	; (8012fbc <udp_connect+0xc8>)
 8012f24:	f240 4236 	movw	r2, #1078	; 0x436
 8012f28:	4927      	ldr	r1, [pc, #156]	; (8012fc8 <udp_connect+0xd4>)
 8012f2a:	4826      	ldr	r0, [pc, #152]	; (8012fc4 <udp_connect+0xd0>)
 8012f2c:	f004 fce6 	bl	80178fc <iprintf>
 8012f30:	f06f 030f 	mvn.w	r3, #15
 8012f34:	e03e      	b.n	8012fb4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	8a5b      	ldrh	r3, [r3, #18]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d10f      	bne.n	8012f5e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012f3e:	68f9      	ldr	r1, [r7, #12]
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	8a5b      	ldrh	r3, [r3, #18]
 8012f44:	461a      	mov	r2, r3
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f7ff ff4c 	bl	8012de4 <udp_bind>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012f50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d002      	beq.n	8012f5e <udp_connect+0x6a>
      return err;
 8012f58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f5c:	e02a      	b.n	8012fb4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d002      	beq.n	8012f6a <udp_connect+0x76>
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	e000      	b.n	8012f6c <udp_connect+0x78>
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	68fa      	ldr	r2, [r7, #12]
 8012f6e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	88fa      	ldrh	r2, [r7, #6]
 8012f74:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	7c1b      	ldrb	r3, [r3, #16]
 8012f7a:	f043 0304 	orr.w	r3, r3, #4
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012f84:	4b11      	ldr	r3, [pc, #68]	; (8012fcc <udp_connect+0xd8>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	617b      	str	r3, [r7, #20]
 8012f8a:	e008      	b.n	8012f9e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d101      	bne.n	8012f98 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012f94:	2300      	movs	r3, #0
 8012f96:	e00d      	b.n	8012fb4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	617b      	str	r3, [r7, #20]
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d1f3      	bne.n	8012f8c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012fa4:	4b09      	ldr	r3, [pc, #36]	; (8012fcc <udp_connect+0xd8>)
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012fac:	4a07      	ldr	r2, [pc, #28]	; (8012fcc <udp_connect+0xd8>)
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012fb2:	2300      	movs	r3, #0
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3718      	adds	r7, #24
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	0801b83c 	.word	0x0801b83c
 8012fc0:	0801bb1c 	.word	0x0801bb1c
 8012fc4:	0801b890 	.word	0x0801b890
 8012fc8:	0801bb38 	.word	0x0801bb38
 8012fcc:	2000f4f4 	.word	0x2000f4f4

08012fd0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b084      	sub	sp, #16
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	60b9      	str	r1, [r7, #8]
 8012fda:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d107      	bne.n	8012ff2 <udp_recv+0x22>
 8012fe2:	4b08      	ldr	r3, [pc, #32]	; (8013004 <udp_recv+0x34>)
 8012fe4:	f240 428a 	movw	r2, #1162	; 0x48a
 8012fe8:	4907      	ldr	r1, [pc, #28]	; (8013008 <udp_recv+0x38>)
 8012fea:	4808      	ldr	r0, [pc, #32]	; (801300c <udp_recv+0x3c>)
 8012fec:	f004 fc86 	bl	80178fc <iprintf>
 8012ff0:	e005      	b.n	8012ffe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	68ba      	ldr	r2, [r7, #8]
 8012ff6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	61da      	str	r2, [r3, #28]
}
 8012ffe:	3710      	adds	r7, #16
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	0801b83c 	.word	0x0801b83c
 8013008:	0801bb70 	.word	0x0801bb70
 801300c:	0801b890 	.word	0x0801b890

08013010 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d107      	bne.n	801302e <udp_remove+0x1e>
 801301e:	4b19      	ldr	r3, [pc, #100]	; (8013084 <udp_remove+0x74>)
 8013020:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013024:	4918      	ldr	r1, [pc, #96]	; (8013088 <udp_remove+0x78>)
 8013026:	4819      	ldr	r0, [pc, #100]	; (801308c <udp_remove+0x7c>)
 8013028:	f004 fc68 	bl	80178fc <iprintf>
 801302c:	e026      	b.n	801307c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801302e:	4b18      	ldr	r3, [pc, #96]	; (8013090 <udp_remove+0x80>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	429a      	cmp	r2, r3
 8013036:	d105      	bne.n	8013044 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013038:	4b15      	ldr	r3, [pc, #84]	; (8013090 <udp_remove+0x80>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	68db      	ldr	r3, [r3, #12]
 801303e:	4a14      	ldr	r2, [pc, #80]	; (8013090 <udp_remove+0x80>)
 8013040:	6013      	str	r3, [r2, #0]
 8013042:	e017      	b.n	8013074 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013044:	4b12      	ldr	r3, [pc, #72]	; (8013090 <udp_remove+0x80>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	60fb      	str	r3, [r7, #12]
 801304a:	e010      	b.n	801306e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	68db      	ldr	r3, [r3, #12]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d009      	beq.n	8013068 <udp_remove+0x58>
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	687a      	ldr	r2, [r7, #4]
 801305a:	429a      	cmp	r2, r3
 801305c:	d104      	bne.n	8013068 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	68da      	ldr	r2, [r3, #12]
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	60da      	str	r2, [r3, #12]
        break;
 8013066:	e005      	b.n	8013074 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	60fb      	str	r3, [r7, #12]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d1eb      	bne.n	801304c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013074:	6879      	ldr	r1, [r7, #4]
 8013076:	2000      	movs	r0, #0
 8013078:	f7f8 f846 	bl	800b108 <memp_free>
}
 801307c:	3710      	adds	r7, #16
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	0801b83c 	.word	0x0801b83c
 8013088:	0801bb88 	.word	0x0801bb88
 801308c:	0801b890 	.word	0x0801b890
 8013090:	2000f4f4 	.word	0x2000f4f4

08013094 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801309a:	2000      	movs	r0, #0
 801309c:	f7f7 ffe2 	bl	800b064 <memp_malloc>
 80130a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d007      	beq.n	80130b8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80130a8:	2220      	movs	r2, #32
 80130aa:	2100      	movs	r1, #0
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f004 fc1c 	bl	80178ea <memset>
    pcb->ttl = UDP_TTL;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	22ff      	movs	r2, #255	; 0xff
 80130b6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80130b8:	687b      	ldr	r3, [r7, #4]
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3708      	adds	r7, #8
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}

080130c2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80130c2:	b580      	push	{r7, lr}
 80130c4:	b084      	sub	sp, #16
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	4603      	mov	r3, r0
 80130ca:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80130cc:	f7ff ffe2 	bl	8013094 <udp_new>
 80130d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80130d2:	68fb      	ldr	r3, [r7, #12]
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3710      	adds	r7, #16
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80130dc:	b480      	push	{r7}
 80130de:	b085      	sub	sp, #20
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d01e      	beq.n	801312a <udp_netif_ip_addr_changed+0x4e>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d01a      	beq.n	801312a <udp_netif_ip_addr_changed+0x4e>
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d017      	beq.n	801312a <udp_netif_ip_addr_changed+0x4e>
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d013      	beq.n	801312a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013102:	4b0d      	ldr	r3, [pc, #52]	; (8013138 <udp_netif_ip_addr_changed+0x5c>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	60fb      	str	r3, [r7, #12]
 8013108:	e00c      	b.n	8013124 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	429a      	cmp	r2, r3
 8013114:	d103      	bne.n	801311e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	60fb      	str	r3, [r7, #12]
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d1ef      	bne.n	801310a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801312a:	bf00      	nop
 801312c:	3714      	adds	r7, #20
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	2000f4f4 	.word	0x2000f4f4

0801313c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013140:	4b20      	ldr	r3, [pc, #128]	; (80131c4 <dhcp_inc_pcb_refcount+0x88>)
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d133      	bne.n	80131b0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013148:	4b1f      	ldr	r3, [pc, #124]	; (80131c8 <dhcp_inc_pcb_refcount+0x8c>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d005      	beq.n	801315c <dhcp_inc_pcb_refcount+0x20>
 8013150:	4b1e      	ldr	r3, [pc, #120]	; (80131cc <dhcp_inc_pcb_refcount+0x90>)
 8013152:	22e5      	movs	r2, #229	; 0xe5
 8013154:	491e      	ldr	r1, [pc, #120]	; (80131d0 <dhcp_inc_pcb_refcount+0x94>)
 8013156:	481f      	ldr	r0, [pc, #124]	; (80131d4 <dhcp_inc_pcb_refcount+0x98>)
 8013158:	f004 fbd0 	bl	80178fc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801315c:	f7ff ff9a 	bl	8013094 <udp_new>
 8013160:	4602      	mov	r2, r0
 8013162:	4b19      	ldr	r3, [pc, #100]	; (80131c8 <dhcp_inc_pcb_refcount+0x8c>)
 8013164:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8013166:	4b18      	ldr	r3, [pc, #96]	; (80131c8 <dhcp_inc_pcb_refcount+0x8c>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d102      	bne.n	8013174 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801316e:	f04f 33ff 	mov.w	r3, #4294967295
 8013172:	e024      	b.n	80131be <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013174:	4b14      	ldr	r3, [pc, #80]	; (80131c8 <dhcp_inc_pcb_refcount+0x8c>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	7a5a      	ldrb	r2, [r3, #9]
 801317a:	4b13      	ldr	r3, [pc, #76]	; (80131c8 <dhcp_inc_pcb_refcount+0x8c>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	f042 0220 	orr.w	r2, r2, #32
 8013182:	b2d2      	uxtb	r2, r2
 8013184:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013186:	4b10      	ldr	r3, [pc, #64]	; (80131c8 <dhcp_inc_pcb_refcount+0x8c>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	2244      	movs	r2, #68	; 0x44
 801318c:	4912      	ldr	r1, [pc, #72]	; (80131d8 <dhcp_inc_pcb_refcount+0x9c>)
 801318e:	4618      	mov	r0, r3
 8013190:	f7ff fe28 	bl	8012de4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013194:	4b0c      	ldr	r3, [pc, #48]	; (80131c8 <dhcp_inc_pcb_refcount+0x8c>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	2243      	movs	r2, #67	; 0x43
 801319a:	490f      	ldr	r1, [pc, #60]	; (80131d8 <dhcp_inc_pcb_refcount+0x9c>)
 801319c:	4618      	mov	r0, r3
 801319e:	f7ff fea9 	bl	8012ef4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80131a2:	4b09      	ldr	r3, [pc, #36]	; (80131c8 <dhcp_inc_pcb_refcount+0x8c>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	2200      	movs	r2, #0
 80131a8:	490c      	ldr	r1, [pc, #48]	; (80131dc <dhcp_inc_pcb_refcount+0xa0>)
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff ff10 	bl	8012fd0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80131b0:	4b04      	ldr	r3, [pc, #16]	; (80131c4 <dhcp_inc_pcb_refcount+0x88>)
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	3301      	adds	r3, #1
 80131b6:	b2da      	uxtb	r2, r3
 80131b8:	4b02      	ldr	r3, [pc, #8]	; (80131c4 <dhcp_inc_pcb_refcount+0x88>)
 80131ba:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80131bc:	2300      	movs	r3, #0
}
 80131be:	4618      	mov	r0, r3
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	20008694 	.word	0x20008694
 80131c8:	20008690 	.word	0x20008690
 80131cc:	0801bba0 	.word	0x0801bba0
 80131d0:	0801bbd8 	.word	0x0801bbd8
 80131d4:	0801bc00 	.word	0x0801bc00
 80131d8:	0801c740 	.word	0x0801c740
 80131dc:	08014a95 	.word	0x08014a95

080131e0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80131e4:	4b0e      	ldr	r3, [pc, #56]	; (8013220 <dhcp_dec_pcb_refcount+0x40>)
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d105      	bne.n	80131f8 <dhcp_dec_pcb_refcount+0x18>
 80131ec:	4b0d      	ldr	r3, [pc, #52]	; (8013224 <dhcp_dec_pcb_refcount+0x44>)
 80131ee:	22ff      	movs	r2, #255	; 0xff
 80131f0:	490d      	ldr	r1, [pc, #52]	; (8013228 <dhcp_dec_pcb_refcount+0x48>)
 80131f2:	480e      	ldr	r0, [pc, #56]	; (801322c <dhcp_dec_pcb_refcount+0x4c>)
 80131f4:	f004 fb82 	bl	80178fc <iprintf>
  dhcp_pcb_refcount--;
 80131f8:	4b09      	ldr	r3, [pc, #36]	; (8013220 <dhcp_dec_pcb_refcount+0x40>)
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	3b01      	subs	r3, #1
 80131fe:	b2da      	uxtb	r2, r3
 8013200:	4b07      	ldr	r3, [pc, #28]	; (8013220 <dhcp_dec_pcb_refcount+0x40>)
 8013202:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013204:	4b06      	ldr	r3, [pc, #24]	; (8013220 <dhcp_dec_pcb_refcount+0x40>)
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d107      	bne.n	801321c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801320c:	4b08      	ldr	r3, [pc, #32]	; (8013230 <dhcp_dec_pcb_refcount+0x50>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4618      	mov	r0, r3
 8013212:	f7ff fefd 	bl	8013010 <udp_remove>
    dhcp_pcb = NULL;
 8013216:	4b06      	ldr	r3, [pc, #24]	; (8013230 <dhcp_dec_pcb_refcount+0x50>)
 8013218:	2200      	movs	r2, #0
 801321a:	601a      	str	r2, [r3, #0]
  }
}
 801321c:	bf00      	nop
 801321e:	bd80      	pop	{r7, pc}
 8013220:	20008694 	.word	0x20008694
 8013224:	0801bba0 	.word	0x0801bba0
 8013228:	0801bc28 	.word	0x0801bc28
 801322c:	0801bc00 	.word	0x0801bc00
 8013230:	20008690 	.word	0x20008690

08013234 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013240:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013242:	210c      	movs	r1, #12
 8013244:	68f8      	ldr	r0, [r7, #12]
 8013246:	f001 f867 	bl	8014318 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801324a:	4b06      	ldr	r3, [pc, #24]	; (8013264 <dhcp_handle_nak+0x30>)
 801324c:	4a05      	ldr	r2, [pc, #20]	; (8013264 <dhcp_handle_nak+0x30>)
 801324e:	4905      	ldr	r1, [pc, #20]	; (8013264 <dhcp_handle_nak+0x30>)
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f7f8 f8fb 	bl	800b44c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f000 fc5a 	bl	8013b10 <dhcp_discover>
}
 801325c:	bf00      	nop
 801325e:	3710      	adds	r7, #16
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	0801c740 	.word	0x0801c740

08013268 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013274:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013276:	2108      	movs	r1, #8
 8013278:	68f8      	ldr	r0, [r7, #12]
 801327a:	f001 f84d 	bl	8014318 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	331c      	adds	r3, #28
 8013282:	2200      	movs	r2, #0
 8013284:	4619      	mov	r1, r3
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f002 fb4c 	bl	8015924 <etharp_query>
 801328c:	4603      	mov	r3, r0
 801328e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	799b      	ldrb	r3, [r3, #6]
 8013294:	2bff      	cmp	r3, #255	; 0xff
 8013296:	d005      	beq.n	80132a4 <dhcp_check+0x3c>
    dhcp->tries++;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	799b      	ldrb	r3, [r3, #6]
 801329c:	3301      	adds	r3, #1
 801329e:	b2da      	uxtb	r2, r3
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80132a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80132a8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80132aa:	893b      	ldrh	r3, [r7, #8]
 80132ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80132b0:	4a06      	ldr	r2, [pc, #24]	; (80132cc <dhcp_check+0x64>)
 80132b2:	fb82 1203 	smull	r1, r2, r2, r3
 80132b6:	1152      	asrs	r2, r2, #5
 80132b8:	17db      	asrs	r3, r3, #31
 80132ba:	1ad3      	subs	r3, r2, r3
 80132bc:	b29a      	uxth	r2, r3
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80132c2:	bf00      	nop
 80132c4:	3710      	adds	r7, #16
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	10624dd3 	.word	0x10624dd3

080132d0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80132e0:	4b0c      	ldr	r3, [pc, #48]	; (8013314 <dhcp_handle_offer+0x44>)
 80132e2:	789b      	ldrb	r3, [r3, #2]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d011      	beq.n	801330c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2200      	movs	r2, #0
 80132ec:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80132ee:	4b0a      	ldr	r3, [pc, #40]	; (8013318 <dhcp_handle_offer+0x48>)
 80132f0:	689b      	ldr	r3, [r3, #8]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7f7 fa15 	bl	800a722 <lwip_htonl>
 80132f8:	4602      	mov	r2, r0
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	691a      	ldr	r2, [r3, #16]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 f808 	bl	801331c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801330c:	bf00      	nop
 801330e:	3710      	adds	r7, #16
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	2000f4f8 	.word	0x2000f4f8
 8013318:	2000f500 	.word	0x2000f500

0801331c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801331c:	b5b0      	push	{r4, r5, r7, lr}
 801331e:	b08a      	sub	sp, #40	; 0x28
 8013320:	af02      	add	r7, sp, #8
 8013322:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d109      	bne.n	801333e <dhcp_select+0x22>
 801332a:	4b71      	ldr	r3, [pc, #452]	; (80134f0 <dhcp_select+0x1d4>)
 801332c:	f240 1277 	movw	r2, #375	; 0x177
 8013330:	4970      	ldr	r1, [pc, #448]	; (80134f4 <dhcp_select+0x1d8>)
 8013332:	4871      	ldr	r0, [pc, #452]	; (80134f8 <dhcp_select+0x1dc>)
 8013334:	f004 fae2 	bl	80178fc <iprintf>
 8013338:	f06f 030f 	mvn.w	r3, #15
 801333c:	e0d3      	b.n	80134e6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013342:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d109      	bne.n	801335e <dhcp_select+0x42>
 801334a:	4b69      	ldr	r3, [pc, #420]	; (80134f0 <dhcp_select+0x1d4>)
 801334c:	f240 1279 	movw	r2, #377	; 0x179
 8013350:	496a      	ldr	r1, [pc, #424]	; (80134fc <dhcp_select+0x1e0>)
 8013352:	4869      	ldr	r0, [pc, #420]	; (80134f8 <dhcp_select+0x1dc>)
 8013354:	f004 fad2 	bl	80178fc <iprintf>
 8013358:	f06f 0305 	mvn.w	r3, #5
 801335c:	e0c3      	b.n	80134e6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801335e:	2101      	movs	r1, #1
 8013360:	69b8      	ldr	r0, [r7, #24]
 8013362:	f000 ffd9 	bl	8014318 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013366:	f107 030c 	add.w	r3, r7, #12
 801336a:	2203      	movs	r2, #3
 801336c:	69b9      	ldr	r1, [r7, #24]
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f001 fc5c 	bl	8014c2c <dhcp_create_msg>
 8013374:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2b00      	cmp	r3, #0
 801337a:	f000 8085 	beq.w	8013488 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013384:	89b8      	ldrh	r0, [r7, #12]
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801338c:	2302      	movs	r3, #2
 801338e:	2239      	movs	r2, #57	; 0x39
 8013390:	f000 ffdc 	bl	801434c <dhcp_option>
 8013394:	4603      	mov	r3, r0
 8013396:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013398:	89b8      	ldrh	r0, [r7, #12]
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133a4:	461a      	mov	r2, r3
 80133a6:	f001 f82b 	bl	8014400 <dhcp_option_short>
 80133aa:	4603      	mov	r3, r0
 80133ac:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80133ae:	89b8      	ldrh	r0, [r7, #12]
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133b6:	2304      	movs	r3, #4
 80133b8:	2232      	movs	r2, #50	; 0x32
 80133ba:	f000 ffc7 	bl	801434c <dhcp_option>
 80133be:	4603      	mov	r3, r0
 80133c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80133c2:	89bc      	ldrh	r4, [r7, #12]
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	69db      	ldr	r3, [r3, #28]
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7f7 f9a7 	bl	800a722 <lwip_htonl>
 80133d4:	4603      	mov	r3, r0
 80133d6:	461a      	mov	r2, r3
 80133d8:	4629      	mov	r1, r5
 80133da:	4620      	mov	r0, r4
 80133dc:	f001 f842 	bl	8014464 <dhcp_option_long>
 80133e0:	4603      	mov	r3, r0
 80133e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80133e4:	89b8      	ldrh	r0, [r7, #12]
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133ec:	2304      	movs	r3, #4
 80133ee:	2236      	movs	r2, #54	; 0x36
 80133f0:	f000 ffac 	bl	801434c <dhcp_option>
 80133f4:	4603      	mov	r3, r0
 80133f6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80133f8:	89bc      	ldrh	r4, [r7, #12]
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013400:	69bb      	ldr	r3, [r7, #24]
 8013402:	699b      	ldr	r3, [r3, #24]
 8013404:	4618      	mov	r0, r3
 8013406:	f7f7 f98c 	bl	800a722 <lwip_htonl>
 801340a:	4603      	mov	r3, r0
 801340c:	461a      	mov	r2, r3
 801340e:	4629      	mov	r1, r5
 8013410:	4620      	mov	r0, r4
 8013412:	f001 f827 	bl	8014464 <dhcp_option_long>
 8013416:	4603      	mov	r3, r0
 8013418:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801341a:	89b8      	ldrh	r0, [r7, #12]
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013422:	2303      	movs	r3, #3
 8013424:	2237      	movs	r2, #55	; 0x37
 8013426:	f000 ff91 	bl	801434c <dhcp_option>
 801342a:	4603      	mov	r3, r0
 801342c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801342e:	2300      	movs	r3, #0
 8013430:	77bb      	strb	r3, [r7, #30]
 8013432:	e00e      	b.n	8013452 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013434:	89b8      	ldrh	r0, [r7, #12]
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801343c:	7fbb      	ldrb	r3, [r7, #30]
 801343e:	4a30      	ldr	r2, [pc, #192]	; (8013500 <dhcp_select+0x1e4>)
 8013440:	5cd3      	ldrb	r3, [r2, r3]
 8013442:	461a      	mov	r2, r3
 8013444:	f000 ffb6 	bl	80143b4 <dhcp_option_byte>
 8013448:	4603      	mov	r3, r0
 801344a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801344c:	7fbb      	ldrb	r3, [r7, #30]
 801344e:	3301      	adds	r3, #1
 8013450:	77bb      	strb	r3, [r7, #30]
 8013452:	7fbb      	ldrb	r3, [r7, #30]
 8013454:	2b02      	cmp	r3, #2
 8013456:	d9ed      	bls.n	8013434 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013458:	89b8      	ldrh	r0, [r7, #12]
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	33f0      	adds	r3, #240	; 0xf0
 801345e:	697a      	ldr	r2, [r7, #20]
 8013460:	4619      	mov	r1, r3
 8013462:	f001 fcb9 	bl	8014dd8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013466:	4b27      	ldr	r3, [pc, #156]	; (8013504 <dhcp_select+0x1e8>)
 8013468:	6818      	ldr	r0, [r3, #0]
 801346a:	4b27      	ldr	r3, [pc, #156]	; (8013508 <dhcp_select+0x1ec>)
 801346c:	9301      	str	r3, [sp, #4]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	9300      	str	r3, [sp, #0]
 8013472:	2343      	movs	r3, #67	; 0x43
 8013474:	4a25      	ldr	r2, [pc, #148]	; (801350c <dhcp_select+0x1f0>)
 8013476:	6979      	ldr	r1, [r7, #20]
 8013478:	f7ff fbce 	bl	8012c18 <udp_sendto_if_src>
 801347c:	4603      	mov	r3, r0
 801347e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013480:	6978      	ldr	r0, [r7, #20]
 8013482:	f7f8 fced 	bl	800be60 <pbuf_free>
 8013486:	e001      	b.n	801348c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013488:	23ff      	movs	r3, #255	; 0xff
 801348a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	799b      	ldrb	r3, [r3, #6]
 8013490:	2bff      	cmp	r3, #255	; 0xff
 8013492:	d005      	beq.n	80134a0 <dhcp_select+0x184>
    dhcp->tries++;
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	799b      	ldrb	r3, [r3, #6]
 8013498:	3301      	adds	r3, #1
 801349a:	b2da      	uxtb	r2, r3
 801349c:	69bb      	ldr	r3, [r7, #24]
 801349e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	799b      	ldrb	r3, [r3, #6]
 80134a4:	2b05      	cmp	r3, #5
 80134a6:	d80d      	bhi.n	80134c4 <dhcp_select+0x1a8>
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	799b      	ldrb	r3, [r3, #6]
 80134ac:	461a      	mov	r2, r3
 80134ae:	2301      	movs	r3, #1
 80134b0:	4093      	lsls	r3, r2
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	461a      	mov	r2, r3
 80134b6:	0152      	lsls	r2, r2, #5
 80134b8:	1ad2      	subs	r2, r2, r3
 80134ba:	0092      	lsls	r2, r2, #2
 80134bc:	4413      	add	r3, r2
 80134be:	00db      	lsls	r3, r3, #3
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	e001      	b.n	80134c8 <dhcp_select+0x1ac>
 80134c4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80134c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80134ca:	89fb      	ldrh	r3, [r7, #14]
 80134cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80134d0:	4a0f      	ldr	r2, [pc, #60]	; (8013510 <dhcp_select+0x1f4>)
 80134d2:	fb82 1203 	smull	r1, r2, r2, r3
 80134d6:	1152      	asrs	r2, r2, #5
 80134d8:	17db      	asrs	r3, r3, #31
 80134da:	1ad3      	subs	r3, r2, r3
 80134dc:	b29a      	uxth	r2, r3
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80134e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3720      	adds	r7, #32
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bdb0      	pop	{r4, r5, r7, pc}
 80134ee:	bf00      	nop
 80134f0:	0801bba0 	.word	0x0801bba0
 80134f4:	0801bc4c 	.word	0x0801bc4c
 80134f8:	0801bc00 	.word	0x0801bc00
 80134fc:	0801bc68 	.word	0x0801bc68
 8013500:	2000001c 	.word	0x2000001c
 8013504:	20008690 	.word	0x20008690
 8013508:	0801c740 	.word	0x0801c740
 801350c:	0801c744 	.word	0x0801c744
 8013510:	10624dd3 	.word	0x10624dd3

08013514 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801351a:	4b27      	ldr	r3, [pc, #156]	; (80135b8 <dhcp_coarse_tmr+0xa4>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	607b      	str	r3, [r7, #4]
 8013520:	e042      	b.n	80135a8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013526:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d039      	beq.n	80135a2 <dhcp_coarse_tmr+0x8e>
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	795b      	ldrb	r3, [r3, #5]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d035      	beq.n	80135a2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	8a9b      	ldrh	r3, [r3, #20]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d012      	beq.n	8013564 <dhcp_coarse_tmr+0x50>
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	8a5b      	ldrh	r3, [r3, #18]
 8013542:	3301      	adds	r3, #1
 8013544:	b29a      	uxth	r2, r3
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	825a      	strh	r2, [r3, #18]
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	8a5a      	ldrh	r2, [r3, #18]
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	8a9b      	ldrh	r3, [r3, #20]
 8013552:	429a      	cmp	r2, r3
 8013554:	d106      	bne.n	8013564 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f000 fe44 	bl	80141e4 <dhcp_release_and_stop>
        dhcp_start(netif);
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f000 f969 	bl	8013834 <dhcp_start>
 8013562:	e01e      	b.n	80135a2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	8a1b      	ldrh	r3, [r3, #16]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00b      	beq.n	8013584 <dhcp_coarse_tmr+0x70>
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	8a1b      	ldrh	r3, [r3, #16]
 8013570:	1e5a      	subs	r2, r3, #1
 8013572:	b291      	uxth	r1, r2
 8013574:	683a      	ldr	r2, [r7, #0]
 8013576:	8211      	strh	r1, [r2, #16]
 8013578:	2b01      	cmp	r3, #1
 801357a:	d103      	bne.n	8013584 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f000 f8c6 	bl	801370e <dhcp_t2_timeout>
 8013582:	e00e      	b.n	80135a2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	89db      	ldrh	r3, [r3, #14]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00a      	beq.n	80135a2 <dhcp_coarse_tmr+0x8e>
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	89db      	ldrh	r3, [r3, #14]
 8013590:	1e5a      	subs	r2, r3, #1
 8013592:	b291      	uxth	r1, r2
 8013594:	683a      	ldr	r2, [r7, #0]
 8013596:	81d1      	strh	r1, [r2, #14]
 8013598:	2b01      	cmp	r3, #1
 801359a:	d102      	bne.n	80135a2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 f888 	bl	80136b2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	607b      	str	r3, [r7, #4]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d1b9      	bne.n	8013522 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80135ae:	bf00      	nop
 80135b0:	3708      	adds	r7, #8
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	2000f4cc 	.word	0x2000f4cc

080135bc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b082      	sub	sp, #8
 80135c0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80135c2:	4b16      	ldr	r3, [pc, #88]	; (801361c <dhcp_fine_tmr+0x60>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	607b      	str	r3, [r7, #4]
 80135c8:	e020      	b.n	801360c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ce:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d017      	beq.n	8013606 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	891b      	ldrh	r3, [r3, #8]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d906      	bls.n	80135ec <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	891b      	ldrh	r3, [r3, #8]
 80135e2:	3b01      	subs	r3, #1
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	811a      	strh	r2, [r3, #8]
 80135ea:	e00c      	b.n	8013606 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	891b      	ldrh	r3, [r3, #8]
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	d108      	bne.n	8013606 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	891b      	ldrh	r3, [r3, #8]
 80135f8:	3b01      	subs	r3, #1
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f000 f80d 	bl	8013620 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	607b      	str	r3, [r7, #4]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d1db      	bne.n	80135ca <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013612:	bf00      	nop
 8013614:	3708      	adds	r7, #8
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}
 801361a:	bf00      	nop
 801361c:	2000f4cc 	.word	0x2000f4cc

08013620 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801362c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	795b      	ldrb	r3, [r3, #5]
 8013632:	2b0c      	cmp	r3, #12
 8013634:	d003      	beq.n	801363e <dhcp_timeout+0x1e>
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	795b      	ldrb	r3, [r3, #5]
 801363a:	2b06      	cmp	r3, #6
 801363c:	d103      	bne.n	8013646 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f000 fa66 	bl	8013b10 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013644:	e031      	b.n	80136aa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	795b      	ldrb	r3, [r3, #5]
 801364a:	2b01      	cmp	r3, #1
 801364c:	d10e      	bne.n	801366c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	799b      	ldrb	r3, [r3, #6]
 8013652:	2b05      	cmp	r3, #5
 8013654:	d803      	bhi.n	801365e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff fe60 	bl	801331c <dhcp_select>
}
 801365c:	e025      	b.n	80136aa <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f000 fdc0 	bl	80141e4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 f8e5 	bl	8013834 <dhcp_start>
}
 801366a:	e01e      	b.n	80136aa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	795b      	ldrb	r3, [r3, #5]
 8013670:	2b08      	cmp	r3, #8
 8013672:	d10b      	bne.n	801368c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	799b      	ldrb	r3, [r3, #6]
 8013678:	2b01      	cmp	r3, #1
 801367a:	d803      	bhi.n	8013684 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f7ff fdf3 	bl	8013268 <dhcp_check>
}
 8013682:	e012      	b.n	80136aa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f000 fae5 	bl	8013c54 <dhcp_bind>
}
 801368a:	e00e      	b.n	80136aa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	795b      	ldrb	r3, [r3, #5]
 8013690:	2b03      	cmp	r3, #3
 8013692:	d10a      	bne.n	80136aa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	799b      	ldrb	r3, [r3, #6]
 8013698:	2b01      	cmp	r3, #1
 801369a:	d803      	bhi.n	80136a4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 fceb 	bl	8014078 <dhcp_reboot>
}
 80136a2:	e002      	b.n	80136aa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80136a4:	6878      	ldr	r0, [r7, #4]
 80136a6:	f000 fa33 	bl	8013b10 <dhcp_discover>
}
 80136aa:	bf00      	nop
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b084      	sub	sp, #16
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	795b      	ldrb	r3, [r3, #5]
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	d007      	beq.n	80136d8 <dhcp_t1_timeout+0x26>
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	795b      	ldrb	r3, [r3, #5]
 80136cc:	2b0a      	cmp	r3, #10
 80136ce:	d003      	beq.n	80136d8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80136d4:	2b05      	cmp	r3, #5
 80136d6:	d116      	bne.n	8013706 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f000 fb95 	bl	8013e08 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	899b      	ldrh	r3, [r3, #12]
 80136e2:	461a      	mov	r2, r3
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	8a5b      	ldrh	r3, [r3, #18]
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	2b01      	cmp	r3, #1
 80136ec:	dd0b      	ble.n	8013706 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	899b      	ldrh	r3, [r3, #12]
 80136f2:	461a      	mov	r2, r3
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	8a5b      	ldrh	r3, [r3, #18]
 80136f8:	1ad3      	subs	r3, r2, r3
 80136fa:	0fda      	lsrs	r2, r3, #31
 80136fc:	4413      	add	r3, r2
 80136fe:	105b      	asrs	r3, r3, #1
 8013700:	b29a      	uxth	r2, r3
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013706:	bf00      	nop
 8013708:	3710      	adds	r7, #16
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801370e:	b580      	push	{r7, lr}
 8013710:	b084      	sub	sp, #16
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801371a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	795b      	ldrb	r3, [r3, #5]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d00b      	beq.n	801373c <dhcp_t2_timeout+0x2e>
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	795b      	ldrb	r3, [r3, #5]
 8013728:	2b0a      	cmp	r3, #10
 801372a:	d007      	beq.n	801373c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013730:	2b05      	cmp	r3, #5
 8013732:	d003      	beq.n	801373c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	795b      	ldrb	r3, [r3, #5]
 8013738:	2b04      	cmp	r3, #4
 801373a:	d116      	bne.n	801376a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f000 fbff 	bl	8013f40 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	8a9b      	ldrh	r3, [r3, #20]
 8013746:	461a      	mov	r2, r3
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	8a5b      	ldrh	r3, [r3, #18]
 801374c:	1ad3      	subs	r3, r2, r3
 801374e:	2b01      	cmp	r3, #1
 8013750:	dd0b      	ble.n	801376a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	8a9b      	ldrh	r3, [r3, #20]
 8013756:	461a      	mov	r2, r3
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	8a5b      	ldrh	r3, [r3, #18]
 801375c:	1ad3      	subs	r3, r2, r3
 801375e:	0fda      	lsrs	r2, r3, #31
 8013760:	4413      	add	r3, r2
 8013762:	105b      	asrs	r3, r3, #1
 8013764:	b29a      	uxth	r2, r3
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801376a:	bf00      	nop
 801376c:	3710      	adds	r7, #16
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
	...

08013774 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b084      	sub	sp, #16
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013782:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	2200      	movs	r2, #0
 8013788:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2200      	movs	r2, #0
 801378e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013790:	4b26      	ldr	r3, [pc, #152]	; (801382c <dhcp_handle_ack+0xb8>)
 8013792:	78db      	ldrb	r3, [r3, #3]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d003      	beq.n	80137a0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013798:	4b25      	ldr	r3, [pc, #148]	; (8013830 <dhcp_handle_ack+0xbc>)
 801379a:	68da      	ldr	r2, [r3, #12]
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80137a0:	4b22      	ldr	r3, [pc, #136]	; (801382c <dhcp_handle_ack+0xb8>)
 80137a2:	791b      	ldrb	r3, [r3, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d004      	beq.n	80137b2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80137a8:	4b21      	ldr	r3, [pc, #132]	; (8013830 <dhcp_handle_ack+0xbc>)
 80137aa:	691a      	ldr	r2, [r3, #16]
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80137b0:	e004      	b.n	80137bc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137b6:	085a      	lsrs	r2, r3, #1
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80137bc:	4b1b      	ldr	r3, [pc, #108]	; (801382c <dhcp_handle_ack+0xb8>)
 80137be:	795b      	ldrb	r3, [r3, #5]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d004      	beq.n	80137ce <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80137c4:	4b1a      	ldr	r3, [pc, #104]	; (8013830 <dhcp_handle_ack+0xbc>)
 80137c6:	695a      	ldr	r2, [r3, #20]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	631a      	str	r2, [r3, #48]	; 0x30
 80137cc:	e007      	b.n	80137de <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137d2:	4613      	mov	r3, r2
 80137d4:	00db      	lsls	r3, r3, #3
 80137d6:	1a9b      	subs	r3, r3, r2
 80137d8:	08da      	lsrs	r2, r3, #3
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	691a      	ldr	r2, [r3, #16]
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80137e6:	4b11      	ldr	r3, [pc, #68]	; (801382c <dhcp_handle_ack+0xb8>)
 80137e8:	799b      	ldrb	r3, [r3, #6]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d00b      	beq.n	8013806 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80137ee:	4b10      	ldr	r3, [pc, #64]	; (8013830 <dhcp_handle_ack+0xbc>)
 80137f0:	699b      	ldr	r3, [r3, #24]
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7f6 ff95 	bl	800a722 <lwip_htonl>
 80137f8:	4602      	mov	r2, r0
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2201      	movs	r2, #1
 8013802:	71da      	strb	r2, [r3, #7]
 8013804:	e002      	b.n	801380c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2200      	movs	r2, #0
 801380a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801380c:	4b07      	ldr	r3, [pc, #28]	; (801382c <dhcp_handle_ack+0xb8>)
 801380e:	79db      	ldrb	r3, [r3, #7]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d007      	beq.n	8013824 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013814:	4b06      	ldr	r3, [pc, #24]	; (8013830 <dhcp_handle_ack+0xbc>)
 8013816:	69db      	ldr	r3, [r3, #28]
 8013818:	4618      	mov	r0, r3
 801381a:	f7f6 ff82 	bl	800a722 <lwip_htonl>
 801381e:	4602      	mov	r2, r0
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013824:	bf00      	nop
 8013826:	3710      	adds	r7, #16
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	2000f4f8 	.word	0x2000f4f8
 8013830:	2000f500 	.word	0x2000f500

08013834 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b084      	sub	sp, #16
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d109      	bne.n	8013856 <dhcp_start+0x22>
 8013842:	4b37      	ldr	r3, [pc, #220]	; (8013920 <dhcp_start+0xec>)
 8013844:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013848:	4936      	ldr	r1, [pc, #216]	; (8013924 <dhcp_start+0xf0>)
 801384a:	4837      	ldr	r0, [pc, #220]	; (8013928 <dhcp_start+0xf4>)
 801384c:	f004 f856 	bl	80178fc <iprintf>
 8013850:	f06f 030f 	mvn.w	r3, #15
 8013854:	e060      	b.n	8013918 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801385c:	f003 0301 	and.w	r3, r3, #1
 8013860:	2b00      	cmp	r3, #0
 8013862:	d109      	bne.n	8013878 <dhcp_start+0x44>
 8013864:	4b2e      	ldr	r3, [pc, #184]	; (8013920 <dhcp_start+0xec>)
 8013866:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801386a:	4930      	ldr	r1, [pc, #192]	; (801392c <dhcp_start+0xf8>)
 801386c:	482e      	ldr	r0, [pc, #184]	; (8013928 <dhcp_start+0xf4>)
 801386e:	f004 f845 	bl	80178fc <iprintf>
 8013872:	f06f 030f 	mvn.w	r3, #15
 8013876:	e04f      	b.n	8013918 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801387c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013882:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013886:	d202      	bcs.n	801388e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013888:	f04f 33ff 	mov.w	r3, #4294967295
 801388c:	e044      	b.n	8013918 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d10d      	bne.n	80138b0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013894:	2034      	movs	r0, #52	; 0x34
 8013896:	f7f7 fa63 	bl	800ad60 <mem_malloc>
 801389a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d102      	bne.n	80138a8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80138a2:	f04f 33ff 	mov.w	r3, #4294967295
 80138a6:	e037      	b.n	8013918 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	68fa      	ldr	r2, [r7, #12]
 80138ac:	625a      	str	r2, [r3, #36]	; 0x24
 80138ae:	e005      	b.n	80138bc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	791b      	ldrb	r3, [r3, #4]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d001      	beq.n	80138bc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80138b8:	f7ff fc92 	bl	80131e0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80138bc:	2234      	movs	r2, #52	; 0x34
 80138be:	2100      	movs	r1, #0
 80138c0:	68f8      	ldr	r0, [r7, #12]
 80138c2:	f004 f812 	bl	80178ea <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80138c6:	f7ff fc39 	bl	801313c <dhcp_inc_pcb_refcount>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d002      	beq.n	80138d6 <dhcp_start+0xa2>
    return ERR_MEM;
 80138d0:	f04f 33ff 	mov.w	r3, #4294967295
 80138d4:	e020      	b.n	8013918 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2201      	movs	r2, #1
 80138da:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138e2:	f003 0304 	and.w	r3, r3, #4
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d105      	bne.n	80138f6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80138ea:	2102      	movs	r1, #2
 80138ec:	68f8      	ldr	r0, [r7, #12]
 80138ee:	f000 fd13 	bl	8014318 <dhcp_set_state>
    return ERR_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	e010      	b.n	8013918 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f000 f90a 	bl	8013b10 <dhcp_discover>
 80138fc:	4603      	mov	r3, r0
 80138fe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013900:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d005      	beq.n	8013914 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f000 fc6b 	bl	80141e4 <dhcp_release_and_stop>
    return ERR_MEM;
 801390e:	f04f 33ff 	mov.w	r3, #4294967295
 8013912:	e001      	b.n	8013918 <dhcp_start+0xe4>
  }
  return result;
 8013914:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013918:	4618      	mov	r0, r3
 801391a:	3710      	adds	r7, #16
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}
 8013920:	0801bba0 	.word	0x0801bba0
 8013924:	0801bc84 	.word	0x0801bc84
 8013928:	0801bc00 	.word	0x0801bc00
 801392c:	0801bcc8 	.word	0x0801bcc8

08013930 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b084      	sub	sp, #16
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d037      	beq.n	80139b4 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	795b      	ldrb	r3, [r3, #5]
 8013948:	2b0a      	cmp	r3, #10
 801394a:	d820      	bhi.n	801398e <dhcp_network_changed+0x5e>
 801394c:	a201      	add	r2, pc, #4	; (adr r2, 8013954 <dhcp_network_changed+0x24>)
 801394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013952:	bf00      	nop
 8013954:	080139b9 	.word	0x080139b9
 8013958:	0801398f 	.word	0x0801398f
 801395c:	0801398f 	.word	0x0801398f
 8013960:	08013981 	.word	0x08013981
 8013964:	08013981 	.word	0x08013981
 8013968:	08013981 	.word	0x08013981
 801396c:	0801398f 	.word	0x0801398f
 8013970:	0801398f 	.word	0x0801398f
 8013974:	0801398f 	.word	0x0801398f
 8013978:	0801398f 	.word	0x0801398f
 801397c:	08013981 	.word	0x08013981
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2200      	movs	r2, #0
 8013984:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f000 fb76 	bl	8014078 <dhcp_reboot>
      break;
 801398c:	e015      	b.n	80139ba <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	795b      	ldrb	r3, [r3, #5]
 8013992:	2b0c      	cmp	r3, #12
 8013994:	d906      	bls.n	80139a4 <dhcp_network_changed+0x74>
 8013996:	4b0a      	ldr	r3, [pc, #40]	; (80139c0 <dhcp_network_changed+0x90>)
 8013998:	f240 326d 	movw	r2, #877	; 0x36d
 801399c:	4909      	ldr	r1, [pc, #36]	; (80139c4 <dhcp_network_changed+0x94>)
 801399e:	480a      	ldr	r0, [pc, #40]	; (80139c8 <dhcp_network_changed+0x98>)
 80139a0:	f003 ffac 	bl	80178fc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2200      	movs	r2, #0
 80139a8:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f000 f8b0 	bl	8013b10 <dhcp_discover>
      break;
 80139b0:	bf00      	nop
 80139b2:	e002      	b.n	80139ba <dhcp_network_changed+0x8a>
    return;
 80139b4:	bf00      	nop
 80139b6:	e000      	b.n	80139ba <dhcp_network_changed+0x8a>
      break;
 80139b8:	bf00      	nop
  }
}
 80139ba:	3710      	adds	r7, #16
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	0801bba0 	.word	0x0801bba0
 80139c4:	0801bcec 	.word	0x0801bcec
 80139c8:	0801bc00 	.word	0x0801bc00

080139cc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b084      	sub	sp, #16
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d107      	bne.n	80139ec <dhcp_arp_reply+0x20>
 80139dc:	4b0e      	ldr	r3, [pc, #56]	; (8013a18 <dhcp_arp_reply+0x4c>)
 80139de:	f240 328b 	movw	r2, #907	; 0x38b
 80139e2:	490e      	ldr	r1, [pc, #56]	; (8013a1c <dhcp_arp_reply+0x50>)
 80139e4:	480e      	ldr	r0, [pc, #56]	; (8013a20 <dhcp_arp_reply+0x54>)
 80139e6:	f003 ff89 	bl	80178fc <iprintf>
 80139ea:	e012      	b.n	8013a12 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d00c      	beq.n	8013a12 <dhcp_arp_reply+0x46>
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	795b      	ldrb	r3, [r3, #5]
 80139fc:	2b08      	cmp	r3, #8
 80139fe:	d108      	bne.n	8013a12 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	69db      	ldr	r3, [r3, #28]
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d102      	bne.n	8013a12 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f000 f809 	bl	8013a24 <dhcp_decline>
    }
  }
}
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	0801bba0 	.word	0x0801bba0
 8013a1c:	0801bc84 	.word	0x0801bc84
 8013a20:	0801bc00 	.word	0x0801bc00

08013a24 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013a24:	b5b0      	push	{r4, r5, r7, lr}
 8013a26:	b08a      	sub	sp, #40	; 0x28
 8013a28:	af02      	add	r7, sp, #8
 8013a2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a30:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013a32:	210c      	movs	r1, #12
 8013a34:	69b8      	ldr	r0, [r7, #24]
 8013a36:	f000 fc6f 	bl	8014318 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013a3a:	f107 030c 	add.w	r3, r7, #12
 8013a3e:	2204      	movs	r2, #4
 8013a40:	69b9      	ldr	r1, [r7, #24]
 8013a42:	6878      	ldr	r0, [r7, #4]
 8013a44:	f001 f8f2 	bl	8014c2c <dhcp_create_msg>
 8013a48:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d035      	beq.n	8013abc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013a56:	89b8      	ldrh	r0, [r7, #12]
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a5e:	2304      	movs	r3, #4
 8013a60:	2232      	movs	r2, #50	; 0x32
 8013a62:	f000 fc73 	bl	801434c <dhcp_option>
 8013a66:	4603      	mov	r3, r0
 8013a68:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013a6a:	89bc      	ldrh	r4, [r7, #12]
 8013a6c:	693b      	ldr	r3, [r7, #16]
 8013a6e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013a72:	69bb      	ldr	r3, [r7, #24]
 8013a74:	69db      	ldr	r3, [r3, #28]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7f6 fe53 	bl	800a722 <lwip_htonl>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	461a      	mov	r2, r3
 8013a80:	4629      	mov	r1, r5
 8013a82:	4620      	mov	r0, r4
 8013a84:	f000 fcee 	bl	8014464 <dhcp_option_long>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013a8c:	89b8      	ldrh	r0, [r7, #12]
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	33f0      	adds	r3, #240	; 0xf0
 8013a92:	697a      	ldr	r2, [r7, #20]
 8013a94:	4619      	mov	r1, r3
 8013a96:	f001 f99f 	bl	8014dd8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013a9a:	4b19      	ldr	r3, [pc, #100]	; (8013b00 <dhcp_decline+0xdc>)
 8013a9c:	6818      	ldr	r0, [r3, #0]
 8013a9e:	4b19      	ldr	r3, [pc, #100]	; (8013b04 <dhcp_decline+0xe0>)
 8013aa0:	9301      	str	r3, [sp, #4]
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	9300      	str	r3, [sp, #0]
 8013aa6:	2343      	movs	r3, #67	; 0x43
 8013aa8:	4a17      	ldr	r2, [pc, #92]	; (8013b08 <dhcp_decline+0xe4>)
 8013aaa:	6979      	ldr	r1, [r7, #20]
 8013aac:	f7ff f8b4 	bl	8012c18 <udp_sendto_if_src>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013ab4:	6978      	ldr	r0, [r7, #20]
 8013ab6:	f7f8 f9d3 	bl	800be60 <pbuf_free>
 8013aba:	e001      	b.n	8013ac0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013abc:	23ff      	movs	r3, #255	; 0xff
 8013abe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	799b      	ldrb	r3, [r3, #6]
 8013ac4:	2bff      	cmp	r3, #255	; 0xff
 8013ac6:	d005      	beq.n	8013ad4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	799b      	ldrb	r3, [r3, #6]
 8013acc:	3301      	adds	r3, #1
 8013ace:	b2da      	uxtb	r2, r3
 8013ad0:	69bb      	ldr	r3, [r7, #24]
 8013ad2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013ad4:	f242 7310 	movw	r3, #10000	; 0x2710
 8013ad8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013ada:	89fb      	ldrh	r3, [r7, #14]
 8013adc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ae0:	4a0a      	ldr	r2, [pc, #40]	; (8013b0c <dhcp_decline+0xe8>)
 8013ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8013ae6:	1152      	asrs	r2, r2, #5
 8013ae8:	17db      	asrs	r3, r3, #31
 8013aea:	1ad3      	subs	r3, r2, r3
 8013aec:	b29a      	uxth	r2, r3
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3720      	adds	r7, #32
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bdb0      	pop	{r4, r5, r7, pc}
 8013afe:	bf00      	nop
 8013b00:	20008690 	.word	0x20008690
 8013b04:	0801c740 	.word	0x0801c740
 8013b08:	0801c744 	.word	0x0801c744
 8013b0c:	10624dd3 	.word	0x10624dd3

08013b10 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b08a      	sub	sp, #40	; 0x28
 8013b14:	af02      	add	r7, sp, #8
 8013b16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b1c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	2200      	movs	r2, #0
 8013b26:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013b28:	2106      	movs	r1, #6
 8013b2a:	69b8      	ldr	r0, [r7, #24]
 8013b2c:	f000 fbf4 	bl	8014318 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013b30:	f107 0308 	add.w	r3, r7, #8
 8013b34:	2201      	movs	r2, #1
 8013b36:	69b9      	ldr	r1, [r7, #24]
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f001 f877 	bl	8014c2c <dhcp_create_msg>
 8013b3e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d04b      	beq.n	8013bde <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013b4c:	8938      	ldrh	r0, [r7, #8]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b54:	2302      	movs	r3, #2
 8013b56:	2239      	movs	r2, #57	; 0x39
 8013b58:	f000 fbf8 	bl	801434c <dhcp_option>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013b60:	8938      	ldrh	r0, [r7, #8]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	f000 fc47 	bl	8014400 <dhcp_option_short>
 8013b72:	4603      	mov	r3, r0
 8013b74:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013b76:	8938      	ldrh	r0, [r7, #8]
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b7e:	2303      	movs	r3, #3
 8013b80:	2237      	movs	r2, #55	; 0x37
 8013b82:	f000 fbe3 	bl	801434c <dhcp_option>
 8013b86:	4603      	mov	r3, r0
 8013b88:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	77fb      	strb	r3, [r7, #31]
 8013b8e:	e00e      	b.n	8013bae <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013b90:	8938      	ldrh	r0, [r7, #8]
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b98:	7ffb      	ldrb	r3, [r7, #31]
 8013b9a:	4a29      	ldr	r2, [pc, #164]	; (8013c40 <dhcp_discover+0x130>)
 8013b9c:	5cd3      	ldrb	r3, [r2, r3]
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	f000 fc08 	bl	80143b4 <dhcp_option_byte>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013ba8:	7ffb      	ldrb	r3, [r7, #31]
 8013baa:	3301      	adds	r3, #1
 8013bac:	77fb      	strb	r3, [r7, #31]
 8013bae:	7ffb      	ldrb	r3, [r7, #31]
 8013bb0:	2b02      	cmp	r3, #2
 8013bb2:	d9ed      	bls.n	8013b90 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013bb4:	8938      	ldrh	r0, [r7, #8]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	33f0      	adds	r3, #240	; 0xf0
 8013bba:	693a      	ldr	r2, [r7, #16]
 8013bbc:	4619      	mov	r1, r3
 8013bbe:	f001 f90b 	bl	8014dd8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013bc2:	4b20      	ldr	r3, [pc, #128]	; (8013c44 <dhcp_discover+0x134>)
 8013bc4:	6818      	ldr	r0, [r3, #0]
 8013bc6:	4b20      	ldr	r3, [pc, #128]	; (8013c48 <dhcp_discover+0x138>)
 8013bc8:	9301      	str	r3, [sp, #4]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	2343      	movs	r3, #67	; 0x43
 8013bd0:	4a1e      	ldr	r2, [pc, #120]	; (8013c4c <dhcp_discover+0x13c>)
 8013bd2:	6939      	ldr	r1, [r7, #16]
 8013bd4:	f7ff f820 	bl	8012c18 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013bd8:	6938      	ldr	r0, [r7, #16]
 8013bda:	f7f8 f941 	bl	800be60 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	799b      	ldrb	r3, [r3, #6]
 8013be2:	2bff      	cmp	r3, #255	; 0xff
 8013be4:	d005      	beq.n	8013bf2 <dhcp_discover+0xe2>
    dhcp->tries++;
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	799b      	ldrb	r3, [r3, #6]
 8013bea:	3301      	adds	r3, #1
 8013bec:	b2da      	uxtb	r2, r3
 8013bee:	69bb      	ldr	r3, [r7, #24]
 8013bf0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	799b      	ldrb	r3, [r3, #6]
 8013bf6:	2b05      	cmp	r3, #5
 8013bf8:	d80d      	bhi.n	8013c16 <dhcp_discover+0x106>
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	799b      	ldrb	r3, [r3, #6]
 8013bfe:	461a      	mov	r2, r3
 8013c00:	2301      	movs	r3, #1
 8013c02:	4093      	lsls	r3, r2
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	461a      	mov	r2, r3
 8013c08:	0152      	lsls	r2, r2, #5
 8013c0a:	1ad2      	subs	r2, r2, r3
 8013c0c:	0092      	lsls	r2, r2, #2
 8013c0e:	4413      	add	r3, r2
 8013c10:	00db      	lsls	r3, r3, #3
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	e001      	b.n	8013c1a <dhcp_discover+0x10a>
 8013c16:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013c1a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013c1c:	897b      	ldrh	r3, [r7, #10]
 8013c1e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013c22:	4a0b      	ldr	r2, [pc, #44]	; (8013c50 <dhcp_discover+0x140>)
 8013c24:	fb82 1203 	smull	r1, r2, r2, r3
 8013c28:	1152      	asrs	r2, r2, #5
 8013c2a:	17db      	asrs	r3, r3, #31
 8013c2c:	1ad3      	subs	r3, r2, r3
 8013c2e:	b29a      	uxth	r2, r3
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3720      	adds	r7, #32
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	2000001c 	.word	0x2000001c
 8013c44:	20008690 	.word	0x20008690
 8013c48:	0801c740 	.word	0x0801c740
 8013c4c:	0801c744 	.word	0x0801c744
 8013c50:	10624dd3 	.word	0x10624dd3

08013c54 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b088      	sub	sp, #32
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d107      	bne.n	8013c72 <dhcp_bind+0x1e>
 8013c62:	4b64      	ldr	r3, [pc, #400]	; (8013df4 <dhcp_bind+0x1a0>)
 8013c64:	f240 4215 	movw	r2, #1045	; 0x415
 8013c68:	4963      	ldr	r1, [pc, #396]	; (8013df8 <dhcp_bind+0x1a4>)
 8013c6a:	4864      	ldr	r0, [pc, #400]	; (8013dfc <dhcp_bind+0x1a8>)
 8013c6c:	f003 fe46 	bl	80178fc <iprintf>
 8013c70:	e0bc      	b.n	8013dec <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c76:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013c78:	69bb      	ldr	r3, [r7, #24]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d107      	bne.n	8013c8e <dhcp_bind+0x3a>
 8013c7e:	4b5d      	ldr	r3, [pc, #372]	; (8013df4 <dhcp_bind+0x1a0>)
 8013c80:	f240 4217 	movw	r2, #1047	; 0x417
 8013c84:	495e      	ldr	r1, [pc, #376]	; (8013e00 <dhcp_bind+0x1ac>)
 8013c86:	485d      	ldr	r0, [pc, #372]	; (8013dfc <dhcp_bind+0x1a8>)
 8013c88:	f003 fe38 	bl	80178fc <iprintf>
 8013c8c:	e0ae      	b.n	8013dec <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013c8e:	69bb      	ldr	r3, [r7, #24]
 8013c90:	2200      	movs	r2, #0
 8013c92:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013c94:	69bb      	ldr	r3, [r7, #24]
 8013c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c9c:	d019      	beq.n	8013cd2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ca2:	331e      	adds	r3, #30
 8013ca4:	4a57      	ldr	r2, [pc, #348]	; (8013e04 <dhcp_bind+0x1b0>)
 8013ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8013caa:	095b      	lsrs	r3, r3, #5
 8013cac:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013cb4:	d302      	bcc.n	8013cbc <dhcp_bind+0x68>
      timeout = 0xffff;
 8013cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cba:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013cbc:	69fb      	ldr	r3, [r7, #28]
 8013cbe:	b29a      	uxth	r2, r3
 8013cc0:	69bb      	ldr	r3, [r7, #24]
 8013cc2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013cc4:	69bb      	ldr	r3, [r7, #24]
 8013cc6:	8a9b      	ldrh	r3, [r3, #20]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d102      	bne.n	8013cd2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013ccc:	69bb      	ldr	r3, [r7, #24]
 8013cce:	2201      	movs	r2, #1
 8013cd0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013cd2:	69bb      	ldr	r3, [r7, #24]
 8013cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cda:	d01d      	beq.n	8013d18 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013cdc:	69bb      	ldr	r3, [r7, #24]
 8013cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ce0:	331e      	adds	r3, #30
 8013ce2:	4a48      	ldr	r2, [pc, #288]	; (8013e04 <dhcp_bind+0x1b0>)
 8013ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8013ce8:	095b      	lsrs	r3, r3, #5
 8013cea:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013cec:	69fb      	ldr	r3, [r7, #28]
 8013cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013cf2:	d302      	bcc.n	8013cfa <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cf8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013cfa:	69fb      	ldr	r3, [r7, #28]
 8013cfc:	b29a      	uxth	r2, r3
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013d02:	69bb      	ldr	r3, [r7, #24]
 8013d04:	895b      	ldrh	r3, [r3, #10]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d102      	bne.n	8013d10 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013d0a:	69bb      	ldr	r3, [r7, #24]
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013d10:	69bb      	ldr	r3, [r7, #24]
 8013d12:	895a      	ldrh	r2, [r3, #10]
 8013d14:	69bb      	ldr	r3, [r7, #24]
 8013d16:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013d18:	69bb      	ldr	r3, [r7, #24]
 8013d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d20:	d01d      	beq.n	8013d5e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013d22:	69bb      	ldr	r3, [r7, #24]
 8013d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d26:	331e      	adds	r3, #30
 8013d28:	4a36      	ldr	r2, [pc, #216]	; (8013e04 <dhcp_bind+0x1b0>)
 8013d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8013d2e:	095b      	lsrs	r3, r3, #5
 8013d30:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d38:	d302      	bcc.n	8013d40 <dhcp_bind+0xec>
      timeout = 0xffff;
 8013d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d3e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013d40:	69fb      	ldr	r3, [r7, #28]
 8013d42:	b29a      	uxth	r2, r3
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	899b      	ldrh	r3, [r3, #12]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d102      	bne.n	8013d56 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013d50:	69bb      	ldr	r3, [r7, #24]
 8013d52:	2201      	movs	r2, #1
 8013d54:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013d56:	69bb      	ldr	r3, [r7, #24]
 8013d58:	899a      	ldrh	r2, [r3, #12]
 8013d5a:	69bb      	ldr	r3, [r7, #24]
 8013d5c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	895a      	ldrh	r2, [r3, #10]
 8013d62:	69bb      	ldr	r3, [r7, #24]
 8013d64:	899b      	ldrh	r3, [r3, #12]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d306      	bcc.n	8013d78 <dhcp_bind+0x124>
 8013d6a:	69bb      	ldr	r3, [r7, #24]
 8013d6c:	899b      	ldrh	r3, [r3, #12]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d002      	beq.n	8013d78 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013d72:	69bb      	ldr	r3, [r7, #24]
 8013d74:	2200      	movs	r2, #0
 8013d76:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013d78:	69bb      	ldr	r3, [r7, #24]
 8013d7a:	79db      	ldrb	r3, [r3, #7]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d003      	beq.n	8013d88 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013d80:	69bb      	ldr	r3, [r7, #24]
 8013d82:	6a1b      	ldr	r3, [r3, #32]
 8013d84:	613b      	str	r3, [r7, #16]
 8013d86:	e014      	b.n	8013db2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013d88:	69bb      	ldr	r3, [r7, #24]
 8013d8a:	331c      	adds	r3, #28
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	db02      	blt.n	8013d9e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013d98:	23ff      	movs	r3, #255	; 0xff
 8013d9a:	613b      	str	r3, [r7, #16]
 8013d9c:	e009      	b.n	8013db2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013d9e:	7dfb      	ldrb	r3, [r7, #23]
 8013da0:	2bbf      	cmp	r3, #191	; 0xbf
 8013da2:	d903      	bls.n	8013dac <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013da4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013da8:	613b      	str	r3, [r7, #16]
 8013daa:	e002      	b.n	8013db2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013db0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8013db2:	69bb      	ldr	r3, [r7, #24]
 8013db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013db6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d108      	bne.n	8013dd0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	69da      	ldr	r2, [r3, #28]
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	4013      	ands	r3, r2
 8013dc6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013dce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013dd0:	210a      	movs	r1, #10
 8013dd2:	69b8      	ldr	r0, [r7, #24]
 8013dd4:	f000 faa0 	bl	8014318 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	f103 011c 	add.w	r1, r3, #28
 8013dde:	f107 030c 	add.w	r3, r7, #12
 8013de2:	f107 0210 	add.w	r2, r7, #16
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f7f7 fb30 	bl	800b44c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013dec:	3720      	adds	r7, #32
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	0801bba0 	.word	0x0801bba0
 8013df8:	0801bd00 	.word	0x0801bd00
 8013dfc:	0801bc00 	.word	0x0801bc00
 8013e00:	0801bd1c 	.word	0x0801bd1c
 8013e04:	88888889 	.word	0x88888889

08013e08 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b08a      	sub	sp, #40	; 0x28
 8013e0c:	af02      	add	r7, sp, #8
 8013e0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e14:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013e16:	2105      	movs	r1, #5
 8013e18:	69b8      	ldr	r0, [r7, #24]
 8013e1a:	f000 fa7d 	bl	8014318 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013e1e:	f107 030c 	add.w	r3, r7, #12
 8013e22:	2203      	movs	r2, #3
 8013e24:	69b9      	ldr	r1, [r7, #24]
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 ff00 	bl	8014c2c <dhcp_create_msg>
 8013e2c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d04e      	beq.n	8013ed2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	685b      	ldr	r3, [r3, #4]
 8013e38:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013e3a:	89b8      	ldrh	r0, [r7, #12]
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e42:	2302      	movs	r3, #2
 8013e44:	2239      	movs	r2, #57	; 0x39
 8013e46:	f000 fa81 	bl	801434c <dhcp_option>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013e4e:	89b8      	ldrh	r0, [r7, #12]
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	f000 fad0 	bl	8014400 <dhcp_option_short>
 8013e60:	4603      	mov	r3, r0
 8013e62:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013e64:	89b8      	ldrh	r0, [r7, #12]
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e6c:	2303      	movs	r3, #3
 8013e6e:	2237      	movs	r2, #55	; 0x37
 8013e70:	f000 fa6c 	bl	801434c <dhcp_option>
 8013e74:	4603      	mov	r3, r0
 8013e76:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e78:	2300      	movs	r3, #0
 8013e7a:	77bb      	strb	r3, [r7, #30]
 8013e7c:	e00e      	b.n	8013e9c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013e7e:	89b8      	ldrh	r0, [r7, #12]
 8013e80:	693b      	ldr	r3, [r7, #16]
 8013e82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e86:	7fbb      	ldrb	r3, [r7, #30]
 8013e88:	4a2a      	ldr	r2, [pc, #168]	; (8013f34 <dhcp_renew+0x12c>)
 8013e8a:	5cd3      	ldrb	r3, [r2, r3]
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	f000 fa91 	bl	80143b4 <dhcp_option_byte>
 8013e92:	4603      	mov	r3, r0
 8013e94:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e96:	7fbb      	ldrb	r3, [r7, #30]
 8013e98:	3301      	adds	r3, #1
 8013e9a:	77bb      	strb	r3, [r7, #30]
 8013e9c:	7fbb      	ldrb	r3, [r7, #30]
 8013e9e:	2b02      	cmp	r3, #2
 8013ea0:	d9ed      	bls.n	8013e7e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013ea2:	89b8      	ldrh	r0, [r7, #12]
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	33f0      	adds	r3, #240	; 0xf0
 8013ea8:	697a      	ldr	r2, [r7, #20]
 8013eaa:	4619      	mov	r1, r3
 8013eac:	f000 ff94 	bl	8014dd8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013eb0:	4b21      	ldr	r3, [pc, #132]	; (8013f38 <dhcp_renew+0x130>)
 8013eb2:	6818      	ldr	r0, [r3, #0]
 8013eb4:	69bb      	ldr	r3, [r7, #24]
 8013eb6:	f103 0218 	add.w	r2, r3, #24
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	9300      	str	r3, [sp, #0]
 8013ebe:	2343      	movs	r3, #67	; 0x43
 8013ec0:	6979      	ldr	r1, [r7, #20]
 8013ec2:	f7fe fe35 	bl	8012b30 <udp_sendto_if>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013eca:	6978      	ldr	r0, [r7, #20]
 8013ecc:	f7f7 ffc8 	bl	800be60 <pbuf_free>
 8013ed0:	e001      	b.n	8013ed6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013ed2:	23ff      	movs	r3, #255	; 0xff
 8013ed4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013ed6:	69bb      	ldr	r3, [r7, #24]
 8013ed8:	799b      	ldrb	r3, [r3, #6]
 8013eda:	2bff      	cmp	r3, #255	; 0xff
 8013edc:	d005      	beq.n	8013eea <dhcp_renew+0xe2>
    dhcp->tries++;
 8013ede:	69bb      	ldr	r3, [r7, #24]
 8013ee0:	799b      	ldrb	r3, [r3, #6]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	b2da      	uxtb	r2, r3
 8013ee6:	69bb      	ldr	r3, [r7, #24]
 8013ee8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8013eea:	69bb      	ldr	r3, [r7, #24]
 8013eec:	799b      	ldrb	r3, [r3, #6]
 8013eee:	2b09      	cmp	r3, #9
 8013ef0:	d80a      	bhi.n	8013f08 <dhcp_renew+0x100>
 8013ef2:	69bb      	ldr	r3, [r7, #24]
 8013ef4:	799b      	ldrb	r3, [r3, #6]
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	461a      	mov	r2, r3
 8013efa:	0152      	lsls	r2, r2, #5
 8013efc:	1ad2      	subs	r2, r2, r3
 8013efe:	0092      	lsls	r2, r2, #2
 8013f00:	4413      	add	r3, r2
 8013f02:	011b      	lsls	r3, r3, #4
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	e001      	b.n	8013f0c <dhcp_renew+0x104>
 8013f08:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013f0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013f0e:	89fb      	ldrh	r3, [r7, #14]
 8013f10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013f14:	4a09      	ldr	r2, [pc, #36]	; (8013f3c <dhcp_renew+0x134>)
 8013f16:	fb82 1203 	smull	r1, r2, r2, r3
 8013f1a:	1152      	asrs	r2, r2, #5
 8013f1c:	17db      	asrs	r3, r3, #31
 8013f1e:	1ad3      	subs	r3, r2, r3
 8013f20:	b29a      	uxth	r2, r3
 8013f22:	69bb      	ldr	r3, [r7, #24]
 8013f24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013f26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3720      	adds	r7, #32
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	bf00      	nop
 8013f34:	2000001c 	.word	0x2000001c
 8013f38:	20008690 	.word	0x20008690
 8013f3c:	10624dd3 	.word	0x10624dd3

08013f40 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b08a      	sub	sp, #40	; 0x28
 8013f44:	af02      	add	r7, sp, #8
 8013f46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f4c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013f4e:	2104      	movs	r1, #4
 8013f50:	69b8      	ldr	r0, [r7, #24]
 8013f52:	f000 f9e1 	bl	8014318 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013f56:	f107 030c 	add.w	r3, r7, #12
 8013f5a:	2203      	movs	r2, #3
 8013f5c:	69b9      	ldr	r1, [r7, #24]
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f000 fe64 	bl	8014c2c <dhcp_create_msg>
 8013f64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013f66:	697b      	ldr	r3, [r7, #20]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d04c      	beq.n	8014006 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013f72:	89b8      	ldrh	r0, [r7, #12]
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f7a:	2302      	movs	r3, #2
 8013f7c:	2239      	movs	r2, #57	; 0x39
 8013f7e:	f000 f9e5 	bl	801434c <dhcp_option>
 8013f82:	4603      	mov	r3, r0
 8013f84:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013f86:	89b8      	ldrh	r0, [r7, #12]
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013f92:	461a      	mov	r2, r3
 8013f94:	f000 fa34 	bl	8014400 <dhcp_option_short>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013f9c:	89b8      	ldrh	r0, [r7, #12]
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013fa4:	2303      	movs	r3, #3
 8013fa6:	2237      	movs	r2, #55	; 0x37
 8013fa8:	f000 f9d0 	bl	801434c <dhcp_option>
 8013fac:	4603      	mov	r3, r0
 8013fae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	77bb      	strb	r3, [r7, #30]
 8013fb4:	e00e      	b.n	8013fd4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013fb6:	89b8      	ldrh	r0, [r7, #12]
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013fbe:	7fbb      	ldrb	r3, [r7, #30]
 8013fc0:	4a29      	ldr	r2, [pc, #164]	; (8014068 <dhcp_rebind+0x128>)
 8013fc2:	5cd3      	ldrb	r3, [r2, r3]
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	f000 f9f5 	bl	80143b4 <dhcp_option_byte>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013fce:	7fbb      	ldrb	r3, [r7, #30]
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	77bb      	strb	r3, [r7, #30]
 8013fd4:	7fbb      	ldrb	r3, [r7, #30]
 8013fd6:	2b02      	cmp	r3, #2
 8013fd8:	d9ed      	bls.n	8013fb6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013fda:	89b8      	ldrh	r0, [r7, #12]
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	33f0      	adds	r3, #240	; 0xf0
 8013fe0:	697a      	ldr	r2, [r7, #20]
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	f000 fef8 	bl	8014dd8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013fe8:	4b20      	ldr	r3, [pc, #128]	; (801406c <dhcp_rebind+0x12c>)
 8013fea:	6818      	ldr	r0, [r3, #0]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	9300      	str	r3, [sp, #0]
 8013ff0:	2343      	movs	r3, #67	; 0x43
 8013ff2:	4a1f      	ldr	r2, [pc, #124]	; (8014070 <dhcp_rebind+0x130>)
 8013ff4:	6979      	ldr	r1, [r7, #20]
 8013ff6:	f7fe fd9b 	bl	8012b30 <udp_sendto_if>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013ffe:	6978      	ldr	r0, [r7, #20]
 8014000:	f7f7 ff2e 	bl	800be60 <pbuf_free>
 8014004:	e001      	b.n	801400a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014006:	23ff      	movs	r3, #255	; 0xff
 8014008:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801400a:	69bb      	ldr	r3, [r7, #24]
 801400c:	799b      	ldrb	r3, [r3, #6]
 801400e:	2bff      	cmp	r3, #255	; 0xff
 8014010:	d005      	beq.n	801401e <dhcp_rebind+0xde>
    dhcp->tries++;
 8014012:	69bb      	ldr	r3, [r7, #24]
 8014014:	799b      	ldrb	r3, [r3, #6]
 8014016:	3301      	adds	r3, #1
 8014018:	b2da      	uxtb	r2, r3
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801401e:	69bb      	ldr	r3, [r7, #24]
 8014020:	799b      	ldrb	r3, [r3, #6]
 8014022:	2b09      	cmp	r3, #9
 8014024:	d80a      	bhi.n	801403c <dhcp_rebind+0xfc>
 8014026:	69bb      	ldr	r3, [r7, #24]
 8014028:	799b      	ldrb	r3, [r3, #6]
 801402a:	b29b      	uxth	r3, r3
 801402c:	461a      	mov	r2, r3
 801402e:	0152      	lsls	r2, r2, #5
 8014030:	1ad2      	subs	r2, r2, r3
 8014032:	0092      	lsls	r2, r2, #2
 8014034:	4413      	add	r3, r2
 8014036:	00db      	lsls	r3, r3, #3
 8014038:	b29b      	uxth	r3, r3
 801403a:	e001      	b.n	8014040 <dhcp_rebind+0x100>
 801403c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014040:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014042:	89fb      	ldrh	r3, [r7, #14]
 8014044:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014048:	4a0a      	ldr	r2, [pc, #40]	; (8014074 <dhcp_rebind+0x134>)
 801404a:	fb82 1203 	smull	r1, r2, r2, r3
 801404e:	1152      	asrs	r2, r2, #5
 8014050:	17db      	asrs	r3, r3, #31
 8014052:	1ad3      	subs	r3, r2, r3
 8014054:	b29a      	uxth	r2, r3
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801405a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801405e:	4618      	mov	r0, r3
 8014060:	3720      	adds	r7, #32
 8014062:	46bd      	mov	sp, r7
 8014064:	bd80      	pop	{r7, pc}
 8014066:	bf00      	nop
 8014068:	2000001c 	.word	0x2000001c
 801406c:	20008690 	.word	0x20008690
 8014070:	0801c744 	.word	0x0801c744
 8014074:	10624dd3 	.word	0x10624dd3

08014078 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014078:	b5b0      	push	{r4, r5, r7, lr}
 801407a:	b08a      	sub	sp, #40	; 0x28
 801407c:	af02      	add	r7, sp, #8
 801407e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014084:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014086:	2103      	movs	r1, #3
 8014088:	69b8      	ldr	r0, [r7, #24]
 801408a:	f000 f945 	bl	8014318 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801408e:	f107 030c 	add.w	r3, r7, #12
 8014092:	2203      	movs	r2, #3
 8014094:	69b9      	ldr	r1, [r7, #24]
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f000 fdc8 	bl	8014c2c <dhcp_create_msg>
 801409c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d066      	beq.n	8014172 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80140aa:	89b8      	ldrh	r0, [r7, #12]
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140b2:	2302      	movs	r3, #2
 80140b4:	2239      	movs	r2, #57	; 0x39
 80140b6:	f000 f949 	bl	801434c <dhcp_option>
 80140ba:	4603      	mov	r3, r0
 80140bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80140be:	89b8      	ldrh	r0, [r7, #12]
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	33f0      	adds	r3, #240	; 0xf0
 80140c4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80140c8:	4619      	mov	r1, r3
 80140ca:	f000 f999 	bl	8014400 <dhcp_option_short>
 80140ce:	4603      	mov	r3, r0
 80140d0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80140d2:	89b8      	ldrh	r0, [r7, #12]
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140da:	2304      	movs	r3, #4
 80140dc:	2232      	movs	r2, #50	; 0x32
 80140de:	f000 f935 	bl	801434c <dhcp_option>
 80140e2:	4603      	mov	r3, r0
 80140e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80140e6:	89bc      	ldrh	r4, [r7, #12]
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	69db      	ldr	r3, [r3, #28]
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7f6 fb15 	bl	800a722 <lwip_htonl>
 80140f8:	4603      	mov	r3, r0
 80140fa:	461a      	mov	r2, r3
 80140fc:	4629      	mov	r1, r5
 80140fe:	4620      	mov	r0, r4
 8014100:	f000 f9b0 	bl	8014464 <dhcp_option_long>
 8014104:	4603      	mov	r3, r0
 8014106:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014108:	89b8      	ldrh	r0, [r7, #12]
 801410a:	693b      	ldr	r3, [r7, #16]
 801410c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014110:	2303      	movs	r3, #3
 8014112:	2237      	movs	r2, #55	; 0x37
 8014114:	f000 f91a 	bl	801434c <dhcp_option>
 8014118:	4603      	mov	r3, r0
 801411a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801411c:	2300      	movs	r3, #0
 801411e:	77bb      	strb	r3, [r7, #30]
 8014120:	e00e      	b.n	8014140 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014122:	89b8      	ldrh	r0, [r7, #12]
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801412a:	7fbb      	ldrb	r3, [r7, #30]
 801412c:	4a29      	ldr	r2, [pc, #164]	; (80141d4 <dhcp_reboot+0x15c>)
 801412e:	5cd3      	ldrb	r3, [r2, r3]
 8014130:	461a      	mov	r2, r3
 8014132:	f000 f93f 	bl	80143b4 <dhcp_option_byte>
 8014136:	4603      	mov	r3, r0
 8014138:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801413a:	7fbb      	ldrb	r3, [r7, #30]
 801413c:	3301      	adds	r3, #1
 801413e:	77bb      	strb	r3, [r7, #30]
 8014140:	7fbb      	ldrb	r3, [r7, #30]
 8014142:	2b02      	cmp	r3, #2
 8014144:	d9ed      	bls.n	8014122 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014146:	89b8      	ldrh	r0, [r7, #12]
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	33f0      	adds	r3, #240	; 0xf0
 801414c:	697a      	ldr	r2, [r7, #20]
 801414e:	4619      	mov	r1, r3
 8014150:	f000 fe42 	bl	8014dd8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014154:	4b20      	ldr	r3, [pc, #128]	; (80141d8 <dhcp_reboot+0x160>)
 8014156:	6818      	ldr	r0, [r3, #0]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	2343      	movs	r3, #67	; 0x43
 801415e:	4a1f      	ldr	r2, [pc, #124]	; (80141dc <dhcp_reboot+0x164>)
 8014160:	6979      	ldr	r1, [r7, #20]
 8014162:	f7fe fce5 	bl	8012b30 <udp_sendto_if>
 8014166:	4603      	mov	r3, r0
 8014168:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801416a:	6978      	ldr	r0, [r7, #20]
 801416c:	f7f7 fe78 	bl	800be60 <pbuf_free>
 8014170:	e001      	b.n	8014176 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014172:	23ff      	movs	r3, #255	; 0xff
 8014174:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014176:	69bb      	ldr	r3, [r7, #24]
 8014178:	799b      	ldrb	r3, [r3, #6]
 801417a:	2bff      	cmp	r3, #255	; 0xff
 801417c:	d005      	beq.n	801418a <dhcp_reboot+0x112>
    dhcp->tries++;
 801417e:	69bb      	ldr	r3, [r7, #24]
 8014180:	799b      	ldrb	r3, [r3, #6]
 8014182:	3301      	adds	r3, #1
 8014184:	b2da      	uxtb	r2, r3
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	799b      	ldrb	r3, [r3, #6]
 801418e:	2b09      	cmp	r3, #9
 8014190:	d80a      	bhi.n	80141a8 <dhcp_reboot+0x130>
 8014192:	69bb      	ldr	r3, [r7, #24]
 8014194:	799b      	ldrb	r3, [r3, #6]
 8014196:	b29b      	uxth	r3, r3
 8014198:	461a      	mov	r2, r3
 801419a:	0152      	lsls	r2, r2, #5
 801419c:	1ad2      	subs	r2, r2, r3
 801419e:	0092      	lsls	r2, r2, #2
 80141a0:	4413      	add	r3, r2
 80141a2:	00db      	lsls	r3, r3, #3
 80141a4:	b29b      	uxth	r3, r3
 80141a6:	e001      	b.n	80141ac <dhcp_reboot+0x134>
 80141a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80141ac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80141ae:	89fb      	ldrh	r3, [r7, #14]
 80141b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80141b4:	4a0a      	ldr	r2, [pc, #40]	; (80141e0 <dhcp_reboot+0x168>)
 80141b6:	fb82 1203 	smull	r1, r2, r2, r3
 80141ba:	1152      	asrs	r2, r2, #5
 80141bc:	17db      	asrs	r3, r3, #31
 80141be:	1ad3      	subs	r3, r2, r3
 80141c0:	b29a      	uxth	r2, r3
 80141c2:	69bb      	ldr	r3, [r7, #24]
 80141c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80141c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	3720      	adds	r7, #32
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bdb0      	pop	{r4, r5, r7, pc}
 80141d2:	bf00      	nop
 80141d4:	2000001c 	.word	0x2000001c
 80141d8:	20008690 	.word	0x20008690
 80141dc:	0801c744 	.word	0x0801c744
 80141e0:	10624dd3 	.word	0x10624dd3

080141e4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80141e4:	b5b0      	push	{r4, r5, r7, lr}
 80141e6:	b08a      	sub	sp, #40	; 0x28
 80141e8:	af02      	add	r7, sp, #8
 80141ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80141f2:	69fb      	ldr	r3, [r7, #28]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	f000 8084 	beq.w	8014302 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	795b      	ldrb	r3, [r3, #5]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	f000 8081 	beq.w	8014306 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014204:	69fb      	ldr	r3, [r7, #28]
 8014206:	699b      	ldr	r3, [r3, #24]
 8014208:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	2200      	movs	r2, #0
 801420e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	2200      	movs	r2, #0
 8014214:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	2200      	movs	r2, #0
 801421a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	2200      	movs	r2, #0
 8014220:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	2200      	movs	r2, #0
 8014226:	631a      	str	r2, [r3, #48]	; 0x30
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801422c:	69fb      	ldr	r3, [r7, #28]
 801422e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014230:	69fb      	ldr	r3, [r7, #28]
 8014232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014234:	69fb      	ldr	r3, [r7, #28]
 8014236:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014238:	69fb      	ldr	r3, [r7, #28]
 801423a:	2200      	movs	r2, #0
 801423c:	829a      	strh	r2, [r3, #20]
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	8a9a      	ldrh	r2, [r3, #20]
 8014242:	69fb      	ldr	r3, [r7, #28]
 8014244:	825a      	strh	r2, [r3, #18]
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	8a5a      	ldrh	r2, [r3, #18]
 801424a:	69fb      	ldr	r3, [r7, #28]
 801424c:	821a      	strh	r2, [r3, #16]
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	8a1a      	ldrh	r2, [r3, #16]
 8014252:	69fb      	ldr	r3, [r7, #28]
 8014254:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 fdec 	bl	8014e34 <dhcp_supplied_address>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	d03b      	beq.n	80142da <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014262:	f107 030e 	add.w	r3, r7, #14
 8014266:	2207      	movs	r2, #7
 8014268:	69f9      	ldr	r1, [r7, #28]
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f000 fcde 	bl	8014c2c <dhcp_create_msg>
 8014270:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014272:	69bb      	ldr	r3, [r7, #24]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d030      	beq.n	80142da <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	685b      	ldr	r3, [r3, #4]
 801427c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801427e:	89f8      	ldrh	r0, [r7, #14]
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014286:	2304      	movs	r3, #4
 8014288:	2236      	movs	r2, #54	; 0x36
 801428a:	f000 f85f 	bl	801434c <dhcp_option>
 801428e:	4603      	mov	r3, r0
 8014290:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014292:	89fc      	ldrh	r4, [r7, #14]
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801429a:	693b      	ldr	r3, [r7, #16]
 801429c:	4618      	mov	r0, r3
 801429e:	f7f6 fa40 	bl	800a722 <lwip_htonl>
 80142a2:	4603      	mov	r3, r0
 80142a4:	461a      	mov	r2, r3
 80142a6:	4629      	mov	r1, r5
 80142a8:	4620      	mov	r0, r4
 80142aa:	f000 f8db 	bl	8014464 <dhcp_option_long>
 80142ae:	4603      	mov	r3, r0
 80142b0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80142b2:	89f8      	ldrh	r0, [r7, #14]
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	33f0      	adds	r3, #240	; 0xf0
 80142b8:	69ba      	ldr	r2, [r7, #24]
 80142ba:	4619      	mov	r1, r3
 80142bc:	f000 fd8c 	bl	8014dd8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80142c0:	4b13      	ldr	r3, [pc, #76]	; (8014310 <dhcp_release_and_stop+0x12c>)
 80142c2:	6818      	ldr	r0, [r3, #0]
 80142c4:	f107 0210 	add.w	r2, r7, #16
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	9300      	str	r3, [sp, #0]
 80142cc:	2343      	movs	r3, #67	; 0x43
 80142ce:	69b9      	ldr	r1, [r7, #24]
 80142d0:	f7fe fc2e 	bl	8012b30 <udp_sendto_if>
      pbuf_free(p_out);
 80142d4:	69b8      	ldr	r0, [r7, #24]
 80142d6:	f7f7 fdc3 	bl	800be60 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80142da:	4b0e      	ldr	r3, [pc, #56]	; (8014314 <dhcp_release_and_stop+0x130>)
 80142dc:	4a0d      	ldr	r2, [pc, #52]	; (8014314 <dhcp_release_and_stop+0x130>)
 80142de:	490d      	ldr	r1, [pc, #52]	; (8014314 <dhcp_release_and_stop+0x130>)
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f7f7 f8b3 	bl	800b44c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80142e6:	2100      	movs	r1, #0
 80142e8:	69f8      	ldr	r0, [r7, #28]
 80142ea:	f000 f815 	bl	8014318 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	791b      	ldrb	r3, [r3, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d008      	beq.n	8014308 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80142f6:	f7fe ff73 	bl	80131e0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80142fa:	69fb      	ldr	r3, [r7, #28]
 80142fc:	2200      	movs	r2, #0
 80142fe:	711a      	strb	r2, [r3, #4]
 8014300:	e002      	b.n	8014308 <dhcp_release_and_stop+0x124>
    return;
 8014302:	bf00      	nop
 8014304:	e000      	b.n	8014308 <dhcp_release_and_stop+0x124>
    return;
 8014306:	bf00      	nop
  }
}
 8014308:	3720      	adds	r7, #32
 801430a:	46bd      	mov	sp, r7
 801430c:	bdb0      	pop	{r4, r5, r7, pc}
 801430e:	bf00      	nop
 8014310:	20008690 	.word	0x20008690
 8014314:	0801c740 	.word	0x0801c740

08014318 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014318:	b480      	push	{r7}
 801431a:	b083      	sub	sp, #12
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	460b      	mov	r3, r1
 8014322:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	795b      	ldrb	r3, [r3, #5]
 8014328:	78fa      	ldrb	r2, [r7, #3]
 801432a:	429a      	cmp	r2, r3
 801432c:	d008      	beq.n	8014340 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	78fa      	ldrb	r2, [r7, #3]
 8014332:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	2200      	movs	r2, #0
 8014338:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2200      	movs	r2, #0
 801433e:	811a      	strh	r2, [r3, #8]
  }
}
 8014340:	bf00      	nop
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b082      	sub	sp, #8
 8014350:	af00      	add	r7, sp, #0
 8014352:	6039      	str	r1, [r7, #0]
 8014354:	4611      	mov	r1, r2
 8014356:	461a      	mov	r2, r3
 8014358:	4603      	mov	r3, r0
 801435a:	80fb      	strh	r3, [r7, #6]
 801435c:	460b      	mov	r3, r1
 801435e:	717b      	strb	r3, [r7, #5]
 8014360:	4613      	mov	r3, r2
 8014362:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014364:	88fa      	ldrh	r2, [r7, #6]
 8014366:	793b      	ldrb	r3, [r7, #4]
 8014368:	4413      	add	r3, r2
 801436a:	3302      	adds	r3, #2
 801436c:	2b44      	cmp	r3, #68	; 0x44
 801436e:	d906      	bls.n	801437e <dhcp_option+0x32>
 8014370:	4b0d      	ldr	r3, [pc, #52]	; (80143a8 <dhcp_option+0x5c>)
 8014372:	f240 529a 	movw	r2, #1434	; 0x59a
 8014376:	490d      	ldr	r1, [pc, #52]	; (80143ac <dhcp_option+0x60>)
 8014378:	480d      	ldr	r0, [pc, #52]	; (80143b0 <dhcp_option+0x64>)
 801437a:	f003 fabf 	bl	80178fc <iprintf>
  options[options_out_len++] = option_type;
 801437e:	88fb      	ldrh	r3, [r7, #6]
 8014380:	1c5a      	adds	r2, r3, #1
 8014382:	80fa      	strh	r2, [r7, #6]
 8014384:	461a      	mov	r2, r3
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	4413      	add	r3, r2
 801438a:	797a      	ldrb	r2, [r7, #5]
 801438c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801438e:	88fb      	ldrh	r3, [r7, #6]
 8014390:	1c5a      	adds	r2, r3, #1
 8014392:	80fa      	strh	r2, [r7, #6]
 8014394:	461a      	mov	r2, r3
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	4413      	add	r3, r2
 801439a:	793a      	ldrb	r2, [r7, #4]
 801439c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801439e:	88fb      	ldrh	r3, [r7, #6]
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	0801bba0 	.word	0x0801bba0
 80143ac:	0801bd34 	.word	0x0801bd34
 80143b0:	0801bc00 	.word	0x0801bc00

080143b4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b082      	sub	sp, #8
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	4603      	mov	r3, r0
 80143bc:	6039      	str	r1, [r7, #0]
 80143be:	80fb      	strh	r3, [r7, #6]
 80143c0:	4613      	mov	r3, r2
 80143c2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80143c4:	88fb      	ldrh	r3, [r7, #6]
 80143c6:	2b43      	cmp	r3, #67	; 0x43
 80143c8:	d906      	bls.n	80143d8 <dhcp_option_byte+0x24>
 80143ca:	4b0a      	ldr	r3, [pc, #40]	; (80143f4 <dhcp_option_byte+0x40>)
 80143cc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80143d0:	4909      	ldr	r1, [pc, #36]	; (80143f8 <dhcp_option_byte+0x44>)
 80143d2:	480a      	ldr	r0, [pc, #40]	; (80143fc <dhcp_option_byte+0x48>)
 80143d4:	f003 fa92 	bl	80178fc <iprintf>
  options[options_out_len++] = value;
 80143d8:	88fb      	ldrh	r3, [r7, #6]
 80143da:	1c5a      	adds	r2, r3, #1
 80143dc:	80fa      	strh	r2, [r7, #6]
 80143de:	461a      	mov	r2, r3
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	4413      	add	r3, r2
 80143e4:	797a      	ldrb	r2, [r7, #5]
 80143e6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80143e8:	88fb      	ldrh	r3, [r7, #6]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3708      	adds	r7, #8
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	bf00      	nop
 80143f4:	0801bba0 	.word	0x0801bba0
 80143f8:	0801bd78 	.word	0x0801bd78
 80143fc:	0801bc00 	.word	0x0801bc00

08014400 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	4603      	mov	r3, r0
 8014408:	6039      	str	r1, [r7, #0]
 801440a:	80fb      	strh	r3, [r7, #6]
 801440c:	4613      	mov	r3, r2
 801440e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014410:	88fb      	ldrh	r3, [r7, #6]
 8014412:	3302      	adds	r3, #2
 8014414:	2b44      	cmp	r3, #68	; 0x44
 8014416:	d906      	bls.n	8014426 <dhcp_option_short+0x26>
 8014418:	4b0f      	ldr	r3, [pc, #60]	; (8014458 <dhcp_option_short+0x58>)
 801441a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801441e:	490f      	ldr	r1, [pc, #60]	; (801445c <dhcp_option_short+0x5c>)
 8014420:	480f      	ldr	r0, [pc, #60]	; (8014460 <dhcp_option_short+0x60>)
 8014422:	f003 fa6b 	bl	80178fc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014426:	88bb      	ldrh	r3, [r7, #4]
 8014428:	0a1b      	lsrs	r3, r3, #8
 801442a:	b29a      	uxth	r2, r3
 801442c:	88fb      	ldrh	r3, [r7, #6]
 801442e:	1c59      	adds	r1, r3, #1
 8014430:	80f9      	strh	r1, [r7, #6]
 8014432:	4619      	mov	r1, r3
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	440b      	add	r3, r1
 8014438:	b2d2      	uxtb	r2, r2
 801443a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801443c:	88fb      	ldrh	r3, [r7, #6]
 801443e:	1c5a      	adds	r2, r3, #1
 8014440:	80fa      	strh	r2, [r7, #6]
 8014442:	461a      	mov	r2, r3
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	4413      	add	r3, r2
 8014448:	88ba      	ldrh	r2, [r7, #4]
 801444a:	b2d2      	uxtb	r2, r2
 801444c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801444e:	88fb      	ldrh	r3, [r7, #6]
}
 8014450:	4618      	mov	r0, r3
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	0801bba0 	.word	0x0801bba0
 801445c:	0801bdb0 	.word	0x0801bdb0
 8014460:	0801bc00 	.word	0x0801bc00

08014464 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b084      	sub	sp, #16
 8014468:	af00      	add	r7, sp, #0
 801446a:	4603      	mov	r3, r0
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	607a      	str	r2, [r7, #4]
 8014470:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014472:	89fb      	ldrh	r3, [r7, #14]
 8014474:	3304      	adds	r3, #4
 8014476:	2b44      	cmp	r3, #68	; 0x44
 8014478:	d906      	bls.n	8014488 <dhcp_option_long+0x24>
 801447a:	4b19      	ldr	r3, [pc, #100]	; (80144e0 <dhcp_option_long+0x7c>)
 801447c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014480:	4918      	ldr	r1, [pc, #96]	; (80144e4 <dhcp_option_long+0x80>)
 8014482:	4819      	ldr	r0, [pc, #100]	; (80144e8 <dhcp_option_long+0x84>)
 8014484:	f003 fa3a 	bl	80178fc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	0e1a      	lsrs	r2, r3, #24
 801448c:	89fb      	ldrh	r3, [r7, #14]
 801448e:	1c59      	adds	r1, r3, #1
 8014490:	81f9      	strh	r1, [r7, #14]
 8014492:	4619      	mov	r1, r3
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	440b      	add	r3, r1
 8014498:	b2d2      	uxtb	r2, r2
 801449a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	0c1a      	lsrs	r2, r3, #16
 80144a0:	89fb      	ldrh	r3, [r7, #14]
 80144a2:	1c59      	adds	r1, r3, #1
 80144a4:	81f9      	strh	r1, [r7, #14]
 80144a6:	4619      	mov	r1, r3
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	440b      	add	r3, r1
 80144ac:	b2d2      	uxtb	r2, r2
 80144ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	0a1a      	lsrs	r2, r3, #8
 80144b4:	89fb      	ldrh	r3, [r7, #14]
 80144b6:	1c59      	adds	r1, r3, #1
 80144b8:	81f9      	strh	r1, [r7, #14]
 80144ba:	4619      	mov	r1, r3
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	440b      	add	r3, r1
 80144c0:	b2d2      	uxtb	r2, r2
 80144c2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80144c4:	89fb      	ldrh	r3, [r7, #14]
 80144c6:	1c5a      	adds	r2, r3, #1
 80144c8:	81fa      	strh	r2, [r7, #14]
 80144ca:	461a      	mov	r2, r3
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	4413      	add	r3, r2
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	b2d2      	uxtb	r2, r2
 80144d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80144d6:	89fb      	ldrh	r3, [r7, #14]
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3710      	adds	r7, #16
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	0801bba0 	.word	0x0801bba0
 80144e4:	0801bdec 	.word	0x0801bdec
 80144e8:	0801bc00 	.word	0x0801bc00

080144ec <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b090      	sub	sp, #64	; 0x40
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80144f6:	2300      	movs	r3, #0
 80144f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80144fa:	2300      	movs	r3, #0
 80144fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80144fe:	2208      	movs	r2, #8
 8014500:	2100      	movs	r1, #0
 8014502:	48be      	ldr	r0, [pc, #760]	; (80147fc <dhcp_parse_reply+0x310>)
 8014504:	f003 f9f1 	bl	80178ea <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	895b      	ldrh	r3, [r3, #10]
 801450c:	2b2b      	cmp	r3, #43	; 0x2b
 801450e:	d802      	bhi.n	8014516 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014510:	f06f 0301 	mvn.w	r3, #1
 8014514:	e2a8      	b.n	8014a68 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801451c:	23f0      	movs	r3, #240	; 0xf0
 801451e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	891b      	ldrh	r3, [r3, #8]
 8014524:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801452a:	e00c      	b.n	8014546 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801452e:	895b      	ldrh	r3, [r3, #10]
 8014530:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014532:	1ad3      	subs	r3, r2, r3
 8014534:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014538:	895b      	ldrh	r3, [r3, #10]
 801453a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801453c:	1ad3      	subs	r3, r2, r3
 801453e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014548:	2b00      	cmp	r3, #0
 801454a:	d004      	beq.n	8014556 <dhcp_parse_reply+0x6a>
 801454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454e:	895b      	ldrh	r3, [r3, #10]
 8014550:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014552:	429a      	cmp	r2, r3
 8014554:	d2ea      	bcs.n	801452c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014558:	2b00      	cmp	r3, #0
 801455a:	d102      	bne.n	8014562 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801455c:	f06f 0301 	mvn.w	r3, #1
 8014560:	e282      	b.n	8014a68 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014562:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014564:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014566:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014568:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014570:	e23a      	b.n	80149e8 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014572:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014576:	4413      	add	r3, r2
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801457c:	2300      	movs	r3, #0
 801457e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014582:	f04f 33ff 	mov.w	r3, #4294967295
 8014586:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014588:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801458a:	3302      	adds	r3, #2
 801458c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801458e:	8bfa      	ldrh	r2, [r7, #30]
 8014590:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014592:	429a      	cmp	r2, r3
 8014594:	d202      	bcs.n	801459c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014596:	f06f 0301 	mvn.w	r3, #1
 801459a:	e265      	b.n	8014a68 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801459c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801459e:	3301      	adds	r3, #1
 80145a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145a2:	8952      	ldrh	r2, [r2, #10]
 80145a4:	4293      	cmp	r3, r2
 80145a6:	da07      	bge.n	80145b8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80145a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80145aa:	3301      	adds	r3, #1
 80145ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80145ae:	4413      	add	r3, r2
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80145b6:	e00b      	b.n	80145d0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80145b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d004      	beq.n	80145ca <dhcp_parse_reply+0xde>
 80145c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	e000      	b.n	80145cc <dhcp_parse_reply+0xe0>
 80145ca:	2300      	movs	r3, #0
 80145cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80145d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80145d8:	7dfb      	ldrb	r3, [r7, #23]
 80145da:	2b3b      	cmp	r3, #59	; 0x3b
 80145dc:	f200 812d 	bhi.w	801483a <dhcp_parse_reply+0x34e>
 80145e0:	a201      	add	r2, pc, #4	; (adr r2, 80145e8 <dhcp_parse_reply+0xfc>)
 80145e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145e6:	bf00      	nop
 80145e8:	080146d9 	.word	0x080146d9
 80145ec:	080146e9 	.word	0x080146e9
 80145f0:	0801483b 	.word	0x0801483b
 80145f4:	0801470b 	.word	0x0801470b
 80145f8:	0801483b 	.word	0x0801483b
 80145fc:	0801483b 	.word	0x0801483b
 8014600:	0801483b 	.word	0x0801483b
 8014604:	0801483b 	.word	0x0801483b
 8014608:	0801483b 	.word	0x0801483b
 801460c:	0801483b 	.word	0x0801483b
 8014610:	0801483b 	.word	0x0801483b
 8014614:	0801483b 	.word	0x0801483b
 8014618:	0801483b 	.word	0x0801483b
 801461c:	0801483b 	.word	0x0801483b
 8014620:	0801483b 	.word	0x0801483b
 8014624:	0801483b 	.word	0x0801483b
 8014628:	0801483b 	.word	0x0801483b
 801462c:	0801483b 	.word	0x0801483b
 8014630:	0801483b 	.word	0x0801483b
 8014634:	0801483b 	.word	0x0801483b
 8014638:	0801483b 	.word	0x0801483b
 801463c:	0801483b 	.word	0x0801483b
 8014640:	0801483b 	.word	0x0801483b
 8014644:	0801483b 	.word	0x0801483b
 8014648:	0801483b 	.word	0x0801483b
 801464c:	0801483b 	.word	0x0801483b
 8014650:	0801483b 	.word	0x0801483b
 8014654:	0801483b 	.word	0x0801483b
 8014658:	0801483b 	.word	0x0801483b
 801465c:	0801483b 	.word	0x0801483b
 8014660:	0801483b 	.word	0x0801483b
 8014664:	0801483b 	.word	0x0801483b
 8014668:	0801483b 	.word	0x0801483b
 801466c:	0801483b 	.word	0x0801483b
 8014670:	0801483b 	.word	0x0801483b
 8014674:	0801483b 	.word	0x0801483b
 8014678:	0801483b 	.word	0x0801483b
 801467c:	0801483b 	.word	0x0801483b
 8014680:	0801483b 	.word	0x0801483b
 8014684:	0801483b 	.word	0x0801483b
 8014688:	0801483b 	.word	0x0801483b
 801468c:	0801483b 	.word	0x0801483b
 8014690:	0801483b 	.word	0x0801483b
 8014694:	0801483b 	.word	0x0801483b
 8014698:	0801483b 	.word	0x0801483b
 801469c:	0801483b 	.word	0x0801483b
 80146a0:	0801483b 	.word	0x0801483b
 80146a4:	0801483b 	.word	0x0801483b
 80146a8:	0801483b 	.word	0x0801483b
 80146ac:	0801483b 	.word	0x0801483b
 80146b0:	0801483b 	.word	0x0801483b
 80146b4:	08014737 	.word	0x08014737
 80146b8:	08014759 	.word	0x08014759
 80146bc:	08014795 	.word	0x08014795
 80146c0:	080147b7 	.word	0x080147b7
 80146c4:	0801483b 	.word	0x0801483b
 80146c8:	0801483b 	.word	0x0801483b
 80146cc:	0801483b 	.word	0x0801483b
 80146d0:	080147d9 	.word	0x080147d9
 80146d4:	08014819 	.word	0x08014819
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80146d8:	2300      	movs	r3, #0
 80146da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80146de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80146e6:	e0ac      	b.n	8014842 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80146e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146ec:	2b04      	cmp	r3, #4
 80146ee:	d009      	beq.n	8014704 <dhcp_parse_reply+0x218>
 80146f0:	4b43      	ldr	r3, [pc, #268]	; (8014800 <dhcp_parse_reply+0x314>)
 80146f2:	f240 622e 	movw	r2, #1582	; 0x62e
 80146f6:	4943      	ldr	r1, [pc, #268]	; (8014804 <dhcp_parse_reply+0x318>)
 80146f8:	4843      	ldr	r0, [pc, #268]	; (8014808 <dhcp_parse_reply+0x31c>)
 80146fa:	f003 f8ff 	bl	80178fc <iprintf>
 80146fe:	f06f 0305 	mvn.w	r3, #5
 8014702:	e1b1      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014704:	2306      	movs	r3, #6
 8014706:	623b      	str	r3, [r7, #32]
        break;
 8014708:	e09b      	b.n	8014842 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801470a:	2304      	movs	r3, #4
 801470c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014710:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014718:	429a      	cmp	r2, r3
 801471a:	d209      	bcs.n	8014730 <dhcp_parse_reply+0x244>
 801471c:	4b38      	ldr	r3, [pc, #224]	; (8014800 <dhcp_parse_reply+0x314>)
 801471e:	f240 6233 	movw	r2, #1587	; 0x633
 8014722:	493a      	ldr	r1, [pc, #232]	; (801480c <dhcp_parse_reply+0x320>)
 8014724:	4838      	ldr	r0, [pc, #224]	; (8014808 <dhcp_parse_reply+0x31c>)
 8014726:	f003 f8e9 	bl	80178fc <iprintf>
 801472a:	f06f 0305 	mvn.w	r3, #5
 801472e:	e19b      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014730:	2307      	movs	r3, #7
 8014732:	623b      	str	r3, [r7, #32]
        break;
 8014734:	e085      	b.n	8014842 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801473a:	2b04      	cmp	r3, #4
 801473c:	d009      	beq.n	8014752 <dhcp_parse_reply+0x266>
 801473e:	4b30      	ldr	r3, [pc, #192]	; (8014800 <dhcp_parse_reply+0x314>)
 8014740:	f240 6241 	movw	r2, #1601	; 0x641
 8014744:	492f      	ldr	r1, [pc, #188]	; (8014804 <dhcp_parse_reply+0x318>)
 8014746:	4830      	ldr	r0, [pc, #192]	; (8014808 <dhcp_parse_reply+0x31c>)
 8014748:	f003 f8d8 	bl	80178fc <iprintf>
 801474c:	f06f 0305 	mvn.w	r3, #5
 8014750:	e18a      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014752:	2303      	movs	r3, #3
 8014754:	623b      	str	r3, [r7, #32]
        break;
 8014756:	e074      	b.n	8014842 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801475c:	2b01      	cmp	r3, #1
 801475e:	d009      	beq.n	8014774 <dhcp_parse_reply+0x288>
 8014760:	4b27      	ldr	r3, [pc, #156]	; (8014800 <dhcp_parse_reply+0x314>)
 8014762:	f240 624f 	movw	r2, #1615	; 0x64f
 8014766:	492a      	ldr	r1, [pc, #168]	; (8014810 <dhcp_parse_reply+0x324>)
 8014768:	4827      	ldr	r0, [pc, #156]	; (8014808 <dhcp_parse_reply+0x31c>)
 801476a:	f003 f8c7 	bl	80178fc <iprintf>
 801476e:	f06f 0305 	mvn.w	r3, #5
 8014772:	e179      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014774:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014776:	2bf0      	cmp	r3, #240	; 0xf0
 8014778:	d009      	beq.n	801478e <dhcp_parse_reply+0x2a2>
 801477a:	4b21      	ldr	r3, [pc, #132]	; (8014800 <dhcp_parse_reply+0x314>)
 801477c:	f240 6251 	movw	r2, #1617	; 0x651
 8014780:	4924      	ldr	r1, [pc, #144]	; (8014814 <dhcp_parse_reply+0x328>)
 8014782:	4821      	ldr	r0, [pc, #132]	; (8014808 <dhcp_parse_reply+0x31c>)
 8014784:	f003 f8ba 	bl	80178fc <iprintf>
 8014788:	f06f 0305 	mvn.w	r3, #5
 801478c:	e16c      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801478e:	2300      	movs	r3, #0
 8014790:	623b      	str	r3, [r7, #32]
        break;
 8014792:	e056      	b.n	8014842 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014798:	2b01      	cmp	r3, #1
 801479a:	d009      	beq.n	80147b0 <dhcp_parse_reply+0x2c4>
 801479c:	4b18      	ldr	r3, [pc, #96]	; (8014800 <dhcp_parse_reply+0x314>)
 801479e:	f240 6255 	movw	r2, #1621	; 0x655
 80147a2:	491b      	ldr	r1, [pc, #108]	; (8014810 <dhcp_parse_reply+0x324>)
 80147a4:	4818      	ldr	r0, [pc, #96]	; (8014808 <dhcp_parse_reply+0x31c>)
 80147a6:	f003 f8a9 	bl	80178fc <iprintf>
 80147aa:	f06f 0305 	mvn.w	r3, #5
 80147ae:	e15b      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80147b0:	2301      	movs	r3, #1
 80147b2:	623b      	str	r3, [r7, #32]
        break;
 80147b4:	e045      	b.n	8014842 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80147b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147ba:	2b04      	cmp	r3, #4
 80147bc:	d009      	beq.n	80147d2 <dhcp_parse_reply+0x2e6>
 80147be:	4b10      	ldr	r3, [pc, #64]	; (8014800 <dhcp_parse_reply+0x314>)
 80147c0:	f240 6259 	movw	r2, #1625	; 0x659
 80147c4:	490f      	ldr	r1, [pc, #60]	; (8014804 <dhcp_parse_reply+0x318>)
 80147c6:	4810      	ldr	r0, [pc, #64]	; (8014808 <dhcp_parse_reply+0x31c>)
 80147c8:	f003 f898 	bl	80178fc <iprintf>
 80147cc:	f06f 0305 	mvn.w	r3, #5
 80147d0:	e14a      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80147d2:	2302      	movs	r3, #2
 80147d4:	623b      	str	r3, [r7, #32]
        break;
 80147d6:	e034      	b.n	8014842 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80147d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147dc:	2b04      	cmp	r3, #4
 80147de:	d009      	beq.n	80147f4 <dhcp_parse_reply+0x308>
 80147e0:	4b07      	ldr	r3, [pc, #28]	; (8014800 <dhcp_parse_reply+0x314>)
 80147e2:	f240 625d 	movw	r2, #1629	; 0x65d
 80147e6:	4907      	ldr	r1, [pc, #28]	; (8014804 <dhcp_parse_reply+0x318>)
 80147e8:	4807      	ldr	r0, [pc, #28]	; (8014808 <dhcp_parse_reply+0x31c>)
 80147ea:	f003 f887 	bl	80178fc <iprintf>
 80147ee:	f06f 0305 	mvn.w	r3, #5
 80147f2:	e139      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80147f4:	2304      	movs	r3, #4
 80147f6:	623b      	str	r3, [r7, #32]
        break;
 80147f8:	e023      	b.n	8014842 <dhcp_parse_reply+0x356>
 80147fa:	bf00      	nop
 80147fc:	2000f4f8 	.word	0x2000f4f8
 8014800:	0801bba0 	.word	0x0801bba0
 8014804:	0801be28 	.word	0x0801be28
 8014808:	0801bc00 	.word	0x0801bc00
 801480c:	0801be34 	.word	0x0801be34
 8014810:	0801be48 	.word	0x0801be48
 8014814:	0801be54 	.word	0x0801be54
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801481c:	2b04      	cmp	r3, #4
 801481e:	d009      	beq.n	8014834 <dhcp_parse_reply+0x348>
 8014820:	4b93      	ldr	r3, [pc, #588]	; (8014a70 <dhcp_parse_reply+0x584>)
 8014822:	f240 6261 	movw	r2, #1633	; 0x661
 8014826:	4993      	ldr	r1, [pc, #588]	; (8014a74 <dhcp_parse_reply+0x588>)
 8014828:	4893      	ldr	r0, [pc, #588]	; (8014a78 <dhcp_parse_reply+0x58c>)
 801482a:	f003 f867 	bl	80178fc <iprintf>
 801482e:	f06f 0305 	mvn.w	r3, #5
 8014832:	e119      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014834:	2305      	movs	r3, #5
 8014836:	623b      	str	r3, [r7, #32]
        break;
 8014838:	e003      	b.n	8014842 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801483a:	2300      	movs	r3, #0
 801483c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014840:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014842:	7dfb      	ldrb	r3, [r7, #23]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d103      	bne.n	8014850 <dhcp_parse_reply+0x364>
      offset++;
 8014848:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801484a:	3301      	adds	r3, #1
 801484c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801484e:	e0a1      	b.n	8014994 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014850:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014856:	4413      	add	r3, r2
 8014858:	3302      	adds	r3, #2
 801485a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801485e:	db02      	blt.n	8014866 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8014860:	f06f 0301 	mvn.w	r3, #1
 8014864:	e100      	b.n	8014a68 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801486a:	b29a      	uxth	r2, r3
 801486c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801486e:	4413      	add	r3, r2
 8014870:	b29b      	uxth	r3, r3
 8014872:	3302      	adds	r3, #2
 8014874:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801487a:	2b00      	cmp	r3, #0
 801487c:	f000 808a 	beq.w	8014994 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014880:	2300      	movs	r3, #0
 8014882:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014884:	6a3b      	ldr	r3, [r7, #32]
 8014886:	2b00      	cmp	r3, #0
 8014888:	db02      	blt.n	8014890 <dhcp_parse_reply+0x3a4>
 801488a:	6a3b      	ldr	r3, [r7, #32]
 801488c:	2b07      	cmp	r3, #7
 801488e:	dd06      	ble.n	801489e <dhcp_parse_reply+0x3b2>
 8014890:	4b77      	ldr	r3, [pc, #476]	; (8014a70 <dhcp_parse_reply+0x584>)
 8014892:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014896:	4979      	ldr	r1, [pc, #484]	; (8014a7c <dhcp_parse_reply+0x590>)
 8014898:	4877      	ldr	r0, [pc, #476]	; (8014a78 <dhcp_parse_reply+0x58c>)
 801489a:	f003 f82f 	bl	80178fc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801489e:	4a78      	ldr	r2, [pc, #480]	; (8014a80 <dhcp_parse_reply+0x594>)
 80148a0:	6a3b      	ldr	r3, [r7, #32]
 80148a2:	4413      	add	r3, r2
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d174      	bne.n	8014994 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80148aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80148ae:	2b04      	cmp	r3, #4
 80148b0:	bf28      	it	cs
 80148b2:	2304      	movcs	r3, #4
 80148b4:	b2db      	uxtb	r3, r3
 80148b6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80148b8:	8bfb      	ldrh	r3, [r7, #30]
 80148ba:	8aba      	ldrh	r2, [r7, #20]
 80148bc:	f107 0108 	add.w	r1, r7, #8
 80148c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148c2:	f7f7 fcd3 	bl	800c26c <pbuf_copy_partial>
 80148c6:	4603      	mov	r3, r0
 80148c8:	461a      	mov	r2, r3
 80148ca:	8abb      	ldrh	r3, [r7, #20]
 80148cc:	4293      	cmp	r3, r2
 80148ce:	d002      	beq.n	80148d6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80148d0:	f06f 0301 	mvn.w	r3, #1
 80148d4:	e0c8      	b.n	8014a68 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80148d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80148da:	2b04      	cmp	r3, #4
 80148dc:	d933      	bls.n	8014946 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80148de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80148e2:	f003 0303 	and.w	r3, r3, #3
 80148e6:	b2db      	uxtb	r3, r3
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d009      	beq.n	8014900 <dhcp_parse_reply+0x414>
 80148ec:	4b60      	ldr	r3, [pc, #384]	; (8014a70 <dhcp_parse_reply+0x584>)
 80148ee:	f240 6281 	movw	r2, #1665	; 0x681
 80148f2:	4964      	ldr	r1, [pc, #400]	; (8014a84 <dhcp_parse_reply+0x598>)
 80148f4:	4860      	ldr	r0, [pc, #384]	; (8014a78 <dhcp_parse_reply+0x58c>)
 80148f6:	f003 f801 	bl	80178fc <iprintf>
 80148fa:	f06f 0305 	mvn.w	r3, #5
 80148fe:	e0b3      	b.n	8014a68 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014900:	4a5f      	ldr	r2, [pc, #380]	; (8014a80 <dhcp_parse_reply+0x594>)
 8014902:	6a3b      	ldr	r3, [r7, #32]
 8014904:	4413      	add	r3, r2
 8014906:	2201      	movs	r2, #1
 8014908:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	4618      	mov	r0, r3
 801490e:	f7f5 ff08 	bl	800a722 <lwip_htonl>
 8014912:	4601      	mov	r1, r0
 8014914:	4a5c      	ldr	r2, [pc, #368]	; (8014a88 <dhcp_parse_reply+0x59c>)
 8014916:	6a3b      	ldr	r3, [r7, #32]
 8014918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801491c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014920:	3b04      	subs	r3, #4
 8014922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014926:	8bfb      	ldrh	r3, [r7, #30]
 8014928:	3304      	adds	r3, #4
 801492a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801492c:	8a7a      	ldrh	r2, [r7, #18]
 801492e:	8bfb      	ldrh	r3, [r7, #30]
 8014930:	429a      	cmp	r2, r3
 8014932:	d202      	bcs.n	801493a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014934:	f06f 0301 	mvn.w	r3, #1
 8014938:	e096      	b.n	8014a68 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801493a:	8a7b      	ldrh	r3, [r7, #18]
 801493c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801493e:	6a3b      	ldr	r3, [r7, #32]
 8014940:	3301      	adds	r3, #1
 8014942:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014944:	e79e      	b.n	8014884 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014946:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801494a:	2b04      	cmp	r3, #4
 801494c:	d106      	bne.n	801495c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	4618      	mov	r0, r3
 8014952:	f7f5 fee6 	bl	800a722 <lwip_htonl>
 8014956:	4603      	mov	r3, r0
 8014958:	60bb      	str	r3, [r7, #8]
 801495a:	e011      	b.n	8014980 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801495c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014960:	2b01      	cmp	r3, #1
 8014962:	d009      	beq.n	8014978 <dhcp_parse_reply+0x48c>
 8014964:	4b42      	ldr	r3, [pc, #264]	; (8014a70 <dhcp_parse_reply+0x584>)
 8014966:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801496a:	4948      	ldr	r1, [pc, #288]	; (8014a8c <dhcp_parse_reply+0x5a0>)
 801496c:	4842      	ldr	r0, [pc, #264]	; (8014a78 <dhcp_parse_reply+0x58c>)
 801496e:	f002 ffc5 	bl	80178fc <iprintf>
 8014972:	f06f 0305 	mvn.w	r3, #5
 8014976:	e077      	b.n	8014a68 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014978:	f107 0308 	add.w	r3, r7, #8
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014980:	4a3f      	ldr	r2, [pc, #252]	; (8014a80 <dhcp_parse_reply+0x594>)
 8014982:	6a3b      	ldr	r3, [r7, #32]
 8014984:	4413      	add	r3, r2
 8014986:	2201      	movs	r2, #1
 8014988:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801498a:	68ba      	ldr	r2, [r7, #8]
 801498c:	493e      	ldr	r1, [pc, #248]	; (8014a88 <dhcp_parse_reply+0x59c>)
 801498e:	6a3b      	ldr	r3, [r7, #32]
 8014990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014996:	895b      	ldrh	r3, [r3, #10]
 8014998:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801499a:	429a      	cmp	r2, r3
 801499c:	d324      	bcc.n	80149e8 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149a0:	895b      	ldrh	r3, [r3, #10]
 80149a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80149a4:	1ad3      	subs	r3, r2, r3
 80149a6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80149a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149aa:	895b      	ldrh	r3, [r3, #10]
 80149ac:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80149ae:	1ad3      	subs	r3, r2, r3
 80149b0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80149b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80149b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80149b6:	429a      	cmp	r2, r3
 80149b8:	d213      	bcs.n	80149e2 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80149ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80149c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d109      	bne.n	80149da <dhcp_parse_reply+0x4ee>
 80149c6:	4b2a      	ldr	r3, [pc, #168]	; (8014a70 <dhcp_parse_reply+0x584>)
 80149c8:	f240 629d 	movw	r2, #1693	; 0x69d
 80149cc:	4930      	ldr	r1, [pc, #192]	; (8014a90 <dhcp_parse_reply+0x5a4>)
 80149ce:	482a      	ldr	r0, [pc, #168]	; (8014a78 <dhcp_parse_reply+0x58c>)
 80149d0:	f002 ff94 	bl	80178fc <iprintf>
 80149d4:	f06f 0305 	mvn.w	r3, #5
 80149d8:	e046      	b.n	8014a68 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80149da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80149e0:	e002      	b.n	80149e8 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80149e2:	f06f 0301 	mvn.w	r3, #1
 80149e6:	e03f      	b.n	8014a68 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80149e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d00a      	beq.n	8014a04 <dhcp_parse_reply+0x518>
 80149ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80149f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d206      	bcs.n	8014a04 <dhcp_parse_reply+0x518>
 80149f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80149f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149fa:	4413      	add	r3, r2
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	2bff      	cmp	r3, #255	; 0xff
 8014a00:	f47f adb7 	bne.w	8014572 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014a04:	4b1e      	ldr	r3, [pc, #120]	; (8014a80 <dhcp_parse_reply+0x594>)
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d018      	beq.n	8014a3e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014a0c:	4b1e      	ldr	r3, [pc, #120]	; (8014a88 <dhcp_parse_reply+0x59c>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014a12:	4b1b      	ldr	r3, [pc, #108]	; (8014a80 <dhcp_parse_reply+0x594>)
 8014a14:	2200      	movs	r2, #0
 8014a16:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d102      	bne.n	8014a24 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a22:	e00c      	b.n	8014a3e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	2b02      	cmp	r3, #2
 8014a28:	d102      	bne.n	8014a30 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a2e:	e006      	b.n	8014a3e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2b03      	cmp	r3, #3
 8014a34:	d103      	bne.n	8014a3e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014a36:	2301      	movs	r3, #1
 8014a38:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d006      	beq.n	8014a52 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014a44:	2300      	movs	r3, #0
 8014a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014a48:	236c      	movs	r3, #108	; 0x6c
 8014a4a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014a4c:	23ec      	movs	r3, #236	; 0xec
 8014a4e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014a50:	e569      	b.n	8014526 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d006      	beq.n	8014a66 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014a5c:	232c      	movs	r3, #44	; 0x2c
 8014a5e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014a60:	236c      	movs	r3, #108	; 0x6c
 8014a62:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014a64:	e55f      	b.n	8014526 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014a66:	2300      	movs	r3, #0
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3740      	adds	r7, #64	; 0x40
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	0801bba0 	.word	0x0801bba0
 8014a74:	0801be28 	.word	0x0801be28
 8014a78:	0801bc00 	.word	0x0801bc00
 8014a7c:	0801be6c 	.word	0x0801be6c
 8014a80:	2000f4f8 	.word	0x2000f4f8
 8014a84:	0801be80 	.word	0x0801be80
 8014a88:	2000f500 	.word	0x2000f500
 8014a8c:	0801be98 	.word	0x0801be98
 8014a90:	0801beac 	.word	0x0801beac

08014a94 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b08a      	sub	sp, #40	; 0x28
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	607a      	str	r2, [r7, #4]
 8014aa0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014aa2:	4b5f      	ldr	r3, [pc, #380]	; (8014c20 <dhcp_recv+0x18c>)
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014aa8:	6a3b      	ldr	r3, [r7, #32]
 8014aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aac:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	f000 809d 	beq.w	8014bf6 <dhcp_recv+0x162>
 8014abc:	69fb      	ldr	r3, [r7, #28]
 8014abe:	791b      	ldrb	r3, [r3, #4]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	f000 8098 	beq.w	8014bf6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	895b      	ldrh	r3, [r3, #10]
 8014aca:	2b2b      	cmp	r3, #43	; 0x2b
 8014acc:	f240 8095 	bls.w	8014bfa <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014ad0:	69bb      	ldr	r3, [r7, #24]
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	2b02      	cmp	r3, #2
 8014ad6:	f040 8092 	bne.w	8014bfe <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014ada:	2300      	movs	r3, #0
 8014adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ae0:	e012      	b.n	8014b08 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ae6:	6a3a      	ldr	r2, [r7, #32]
 8014ae8:	4413      	add	r3, r2
 8014aea:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014af2:	69b9      	ldr	r1, [r7, #24]
 8014af4:	440b      	add	r3, r1
 8014af6:	7f1b      	ldrb	r3, [r3, #28]
 8014af8:	429a      	cmp	r2, r3
 8014afa:	f040 8082 	bne.w	8014c02 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b02:	3301      	adds	r3, #1
 8014b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b08:	6a3b      	ldr	r3, [r7, #32]
 8014b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d203      	bcs.n	8014b1e <dhcp_recv+0x8a>
 8014b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b1a:	2b05      	cmp	r3, #5
 8014b1c:	d9e1      	bls.n	8014ae2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014b1e:	69bb      	ldr	r3, [r7, #24]
 8014b20:	685b      	ldr	r3, [r3, #4]
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7f5 fdfd 	bl	800a722 <lwip_htonl>
 8014b28:	4602      	mov	r2, r0
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d169      	bne.n	8014c06 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014b32:	69f9      	ldr	r1, [r7, #28]
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f7ff fcd9 	bl	80144ec <dhcp_parse_reply>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d164      	bne.n	8014c0a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014b40:	4b38      	ldr	r3, [pc, #224]	; (8014c24 <dhcp_recv+0x190>)
 8014b42:	785b      	ldrb	r3, [r3, #1]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d062      	beq.n	8014c0e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	685b      	ldr	r3, [r3, #4]
 8014b4c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014b4e:	4b36      	ldr	r3, [pc, #216]	; (8014c28 <dhcp_recv+0x194>)
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014b54:	7cfb      	ldrb	r3, [r7, #19]
 8014b56:	2b05      	cmp	r3, #5
 8014b58:	d12a      	bne.n	8014bb0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014b5a:	69fb      	ldr	r3, [r7, #28]
 8014b5c:	795b      	ldrb	r3, [r3, #5]
 8014b5e:	2b01      	cmp	r3, #1
 8014b60:	d112      	bne.n	8014b88 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014b62:	6979      	ldr	r1, [r7, #20]
 8014b64:	6a38      	ldr	r0, [r7, #32]
 8014b66:	f7fe fe05 	bl	8013774 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014b6a:	6a3b      	ldr	r3, [r7, #32]
 8014b6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014b70:	f003 0308 	and.w	r3, r3, #8
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d003      	beq.n	8014b80 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014b78:	6a38      	ldr	r0, [r7, #32]
 8014b7a:	f7fe fb75 	bl	8013268 <dhcp_check>
 8014b7e:	e047      	b.n	8014c10 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014b80:	6a38      	ldr	r0, [r7, #32]
 8014b82:	f7ff f867 	bl	8013c54 <dhcp_bind>
 8014b86:	e043      	b.n	8014c10 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	795b      	ldrb	r3, [r3, #5]
 8014b8c:	2b03      	cmp	r3, #3
 8014b8e:	d007      	beq.n	8014ba0 <dhcp_recv+0x10c>
 8014b90:	69fb      	ldr	r3, [r7, #28]
 8014b92:	795b      	ldrb	r3, [r3, #5]
 8014b94:	2b04      	cmp	r3, #4
 8014b96:	d003      	beq.n	8014ba0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014b9c:	2b05      	cmp	r3, #5
 8014b9e:	d137      	bne.n	8014c10 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8014ba0:	6979      	ldr	r1, [r7, #20]
 8014ba2:	6a38      	ldr	r0, [r7, #32]
 8014ba4:	f7fe fde6 	bl	8013774 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014ba8:	6a38      	ldr	r0, [r7, #32]
 8014baa:	f7ff f853 	bl	8013c54 <dhcp_bind>
 8014bae:	e02f      	b.n	8014c10 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014bb0:	7cfb      	ldrb	r3, [r7, #19]
 8014bb2:	2b06      	cmp	r3, #6
 8014bb4:	d113      	bne.n	8014bde <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014bb6:	69fb      	ldr	r3, [r7, #28]
 8014bb8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014bba:	2b03      	cmp	r3, #3
 8014bbc:	d00b      	beq.n	8014bd6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	795b      	ldrb	r3, [r3, #5]
 8014bc2:	2b01      	cmp	r3, #1
 8014bc4:	d007      	beq.n	8014bd6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014bca:	2b04      	cmp	r3, #4
 8014bcc:	d003      	beq.n	8014bd6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014bce:	69fb      	ldr	r3, [r7, #28]
 8014bd0:	795b      	ldrb	r3, [r3, #5]
 8014bd2:	2b05      	cmp	r3, #5
 8014bd4:	d103      	bne.n	8014bde <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014bd6:	6a38      	ldr	r0, [r7, #32]
 8014bd8:	f7fe fb2c 	bl	8013234 <dhcp_handle_nak>
 8014bdc:	e018      	b.n	8014c10 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014bde:	7cfb      	ldrb	r3, [r7, #19]
 8014be0:	2b02      	cmp	r3, #2
 8014be2:	d108      	bne.n	8014bf6 <dhcp_recv+0x162>
 8014be4:	69fb      	ldr	r3, [r7, #28]
 8014be6:	795b      	ldrb	r3, [r3, #5]
 8014be8:	2b06      	cmp	r3, #6
 8014bea:	d104      	bne.n	8014bf6 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014bec:	6979      	ldr	r1, [r7, #20]
 8014bee:	6a38      	ldr	r0, [r7, #32]
 8014bf0:	f7fe fb6e 	bl	80132d0 <dhcp_handle_offer>
 8014bf4:	e00c      	b.n	8014c10 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8014bf6:	bf00      	nop
 8014bf8:	e00a      	b.n	8014c10 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014bfa:	bf00      	nop
 8014bfc:	e008      	b.n	8014c10 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014bfe:	bf00      	nop
 8014c00:	e006      	b.n	8014c10 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8014c02:	bf00      	nop
 8014c04:	e004      	b.n	8014c10 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014c06:	bf00      	nop
 8014c08:	e002      	b.n	8014c10 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014c0a:	bf00      	nop
 8014c0c:	e000      	b.n	8014c10 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014c0e:	bf00      	nop
  pbuf_free(p);
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7f7 f925 	bl	800be60 <pbuf_free>
}
 8014c16:	bf00      	nop
 8014c18:	3728      	adds	r7, #40	; 0x28
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	2000bda8 	.word	0x2000bda8
 8014c24:	2000f4f8 	.word	0x2000f4f8
 8014c28:	2000f500 	.word	0x2000f500

08014c2c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b088      	sub	sp, #32
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	60f8      	str	r0, [r7, #12]
 8014c34:	60b9      	str	r1, [r7, #8]
 8014c36:	603b      	str	r3, [r7, #0]
 8014c38:	4613      	mov	r3, r2
 8014c3a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d108      	bne.n	8014c54 <dhcp_create_msg+0x28>
 8014c42:	4b5f      	ldr	r3, [pc, #380]	; (8014dc0 <dhcp_create_msg+0x194>)
 8014c44:	f240 7269 	movw	r2, #1897	; 0x769
 8014c48:	495e      	ldr	r1, [pc, #376]	; (8014dc4 <dhcp_create_msg+0x198>)
 8014c4a:	485f      	ldr	r0, [pc, #380]	; (8014dc8 <dhcp_create_msg+0x19c>)
 8014c4c:	f002 fe56 	bl	80178fc <iprintf>
 8014c50:	2300      	movs	r3, #0
 8014c52:	e0b1      	b.n	8014db8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d108      	bne.n	8014c6c <dhcp_create_msg+0x40>
 8014c5a:	4b59      	ldr	r3, [pc, #356]	; (8014dc0 <dhcp_create_msg+0x194>)
 8014c5c:	f240 726a 	movw	r2, #1898	; 0x76a
 8014c60:	495a      	ldr	r1, [pc, #360]	; (8014dcc <dhcp_create_msg+0x1a0>)
 8014c62:	4859      	ldr	r0, [pc, #356]	; (8014dc8 <dhcp_create_msg+0x19c>)
 8014c64:	f002 fe4a 	bl	80178fc <iprintf>
 8014c68:	2300      	movs	r3, #0
 8014c6a:	e0a5      	b.n	8014db8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014c6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c70:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014c74:	2036      	movs	r0, #54	; 0x36
 8014c76:	f7f6 fe13 	bl	800b8a0 <pbuf_alloc>
 8014c7a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014c7c:	69bb      	ldr	r3, [r7, #24]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d101      	bne.n	8014c86 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014c82:	2300      	movs	r3, #0
 8014c84:	e098      	b.n	8014db8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	895b      	ldrh	r3, [r3, #10]
 8014c8a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014c8e:	d206      	bcs.n	8014c9e <dhcp_create_msg+0x72>
 8014c90:	4b4b      	ldr	r3, [pc, #300]	; (8014dc0 <dhcp_create_msg+0x194>)
 8014c92:	f240 7272 	movw	r2, #1906	; 0x772
 8014c96:	494e      	ldr	r1, [pc, #312]	; (8014dd0 <dhcp_create_msg+0x1a4>)
 8014c98:	484b      	ldr	r0, [pc, #300]	; (8014dc8 <dhcp_create_msg+0x19c>)
 8014c9a:	f002 fe2f 	bl	80178fc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014c9e:	79fb      	ldrb	r3, [r7, #7]
 8014ca0:	2b03      	cmp	r3, #3
 8014ca2:	d103      	bne.n	8014cac <dhcp_create_msg+0x80>
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	795b      	ldrb	r3, [r3, #5]
 8014ca8:	2b03      	cmp	r3, #3
 8014caa:	d10d      	bne.n	8014cc8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	799b      	ldrb	r3, [r3, #6]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d105      	bne.n	8014cc0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014cb4:	f002 fe9e 	bl	80179f4 <rand>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	461a      	mov	r2, r3
 8014cbc:	4b45      	ldr	r3, [pc, #276]	; (8014dd4 <dhcp_create_msg+0x1a8>)
 8014cbe:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014cc0:	4b44      	ldr	r3, [pc, #272]	; (8014dd4 <dhcp_create_msg+0x1a8>)
 8014cc2:	681a      	ldr	r2, [r3, #0]
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	685b      	ldr	r3, [r3, #4]
 8014ccc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014cce:	f44f 729a 	mov.w	r2, #308	; 0x134
 8014cd2:	2100      	movs	r1, #0
 8014cd4:	6978      	ldr	r0, [r7, #20]
 8014cd6:	f002 fe08 	bl	80178ea <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	2201      	movs	r2, #1
 8014cde:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014ce0:	697b      	ldr	r3, [r7, #20]
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7f5 fd14 	bl	800a722 <lwip_htonl>
 8014cfa:	4602      	mov	r2, r0
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014d00:	79fb      	ldrb	r3, [r7, #7]
 8014d02:	2b08      	cmp	r3, #8
 8014d04:	d010      	beq.n	8014d28 <dhcp_create_msg+0xfc>
 8014d06:	79fb      	ldrb	r3, [r7, #7]
 8014d08:	2b04      	cmp	r3, #4
 8014d0a:	d00d      	beq.n	8014d28 <dhcp_create_msg+0xfc>
 8014d0c:	79fb      	ldrb	r3, [r7, #7]
 8014d0e:	2b07      	cmp	r3, #7
 8014d10:	d00a      	beq.n	8014d28 <dhcp_create_msg+0xfc>
 8014d12:	79fb      	ldrb	r3, [r7, #7]
 8014d14:	2b03      	cmp	r3, #3
 8014d16:	d10c      	bne.n	8014d32 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014d1c:	2b05      	cmp	r3, #5
 8014d1e:	d003      	beq.n	8014d28 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	795b      	ldrb	r3, [r3, #5]
 8014d24:	2b04      	cmp	r3, #4
 8014d26:	d104      	bne.n	8014d32 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	3304      	adds	r3, #4
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014d32:	2300      	movs	r3, #0
 8014d34:	83fb      	strh	r3, [r7, #30]
 8014d36:	e00c      	b.n	8014d52 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014d38:	8bfa      	ldrh	r2, [r7, #30]
 8014d3a:	8bfb      	ldrh	r3, [r7, #30]
 8014d3c:	68f9      	ldr	r1, [r7, #12]
 8014d3e:	440a      	add	r2, r1
 8014d40:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014d44:	697a      	ldr	r2, [r7, #20]
 8014d46:	4413      	add	r3, r2
 8014d48:	460a      	mov	r2, r1
 8014d4a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014d4c:	8bfb      	ldrh	r3, [r7, #30]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	83fb      	strh	r3, [r7, #30]
 8014d52:	8bfb      	ldrh	r3, [r7, #30]
 8014d54:	2b05      	cmp	r3, #5
 8014d56:	d9ef      	bls.n	8014d38 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014d60:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014d64:	2200      	movs	r2, #0
 8014d66:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8014d6a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8014d6e:	2200      	movs	r2, #0
 8014d70:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014d74:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014d78:	2200      	movs	r2, #0
 8014d7a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014d7e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d88:	2301      	movs	r3, #1
 8014d8a:	2235      	movs	r2, #53	; 0x35
 8014d8c:	2000      	movs	r0, #0
 8014d8e:	f7ff fadd 	bl	801434c <dhcp_option>
 8014d92:	4603      	mov	r3, r0
 8014d94:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d9c:	79fa      	ldrb	r2, [r7, #7]
 8014d9e:	8a7b      	ldrh	r3, [r7, #18]
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7ff fb07 	bl	80143b4 <dhcp_option_byte>
 8014da6:	4603      	mov	r3, r0
 8014da8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d002      	beq.n	8014db6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	8a7a      	ldrh	r2, [r7, #18]
 8014db4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8014db6:	69bb      	ldr	r3, [r7, #24]
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3720      	adds	r7, #32
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}
 8014dc0:	0801bba0 	.word	0x0801bba0
 8014dc4:	0801bec0 	.word	0x0801bec0
 8014dc8:	0801bc00 	.word	0x0801bc00
 8014dcc:	0801bee0 	.word	0x0801bee0
 8014dd0:	0801bf00 	.word	0x0801bf00
 8014dd4:	20008698 	.word	0x20008698

08014dd8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	4603      	mov	r3, r0
 8014de0:	60b9      	str	r1, [r7, #8]
 8014de2:	607a      	str	r2, [r7, #4]
 8014de4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8014de6:	89fb      	ldrh	r3, [r7, #14]
 8014de8:	1c5a      	adds	r2, r3, #1
 8014dea:	81fa      	strh	r2, [r7, #14]
 8014dec:	461a      	mov	r2, r3
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	4413      	add	r3, r2
 8014df2:	22ff      	movs	r2, #255	; 0xff
 8014df4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014df6:	e007      	b.n	8014e08 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014df8:	89fb      	ldrh	r3, [r7, #14]
 8014dfa:	1c5a      	adds	r2, r3, #1
 8014dfc:	81fa      	strh	r2, [r7, #14]
 8014dfe:	461a      	mov	r2, r3
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	4413      	add	r3, r2
 8014e04:	2200      	movs	r2, #0
 8014e06:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014e08:	89fb      	ldrh	r3, [r7, #14]
 8014e0a:	2b43      	cmp	r3, #67	; 0x43
 8014e0c:	d904      	bls.n	8014e18 <dhcp_option_trailer+0x40>
 8014e0e:	89fb      	ldrh	r3, [r7, #14]
 8014e10:	f003 0303 	and.w	r3, r3, #3
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d002      	beq.n	8014e1e <dhcp_option_trailer+0x46>
 8014e18:	89fb      	ldrh	r3, [r7, #14]
 8014e1a:	2b43      	cmp	r3, #67	; 0x43
 8014e1c:	d9ec      	bls.n	8014df8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014e1e:	89fb      	ldrh	r3, [r7, #14]
 8014e20:	33f0      	adds	r3, #240	; 0xf0
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	4619      	mov	r1, r3
 8014e26:	6878      	ldr	r0, [r7, #4]
 8014e28:	f7f6 fe94 	bl	800bb54 <pbuf_realloc>
}
 8014e2c:	bf00      	nop
 8014e2e:	3710      	adds	r7, #16
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014e34:	b480      	push	{r7}
 8014e36:	b085      	sub	sp, #20
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d017      	beq.n	8014e72 <dhcp_supplied_address+0x3e>
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d013      	beq.n	8014e72 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e4e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	795b      	ldrb	r3, [r3, #5]
 8014e54:	2b0a      	cmp	r3, #10
 8014e56:	d007      	beq.n	8014e68 <dhcp_supplied_address+0x34>
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	795b      	ldrb	r3, [r3, #5]
 8014e5c:	2b05      	cmp	r3, #5
 8014e5e:	d003      	beq.n	8014e68 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014e64:	2b04      	cmp	r3, #4
 8014e66:	d101      	bne.n	8014e6c <dhcp_supplied_address+0x38>
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e000      	b.n	8014e6e <dhcp_supplied_address+0x3a>
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	b2db      	uxtb	r3, r3
 8014e70:	e000      	b.n	8014e74 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014e72:	2300      	movs	r3, #0
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3714      	adds	r7, #20
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7e:	4770      	bx	lr

08014e80 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b082      	sub	sp, #8
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014e88:	4915      	ldr	r1, [pc, #84]	; (8014ee0 <etharp_free_entry+0x60>)
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	4613      	mov	r3, r2
 8014e8e:	005b      	lsls	r3, r3, #1
 8014e90:	4413      	add	r3, r2
 8014e92:	00db      	lsls	r3, r3, #3
 8014e94:	440b      	add	r3, r1
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d013      	beq.n	8014ec4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014e9c:	4910      	ldr	r1, [pc, #64]	; (8014ee0 <etharp_free_entry+0x60>)
 8014e9e:	687a      	ldr	r2, [r7, #4]
 8014ea0:	4613      	mov	r3, r2
 8014ea2:	005b      	lsls	r3, r3, #1
 8014ea4:	4413      	add	r3, r2
 8014ea6:	00db      	lsls	r3, r3, #3
 8014ea8:	440b      	add	r3, r1
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7f6 ffd7 	bl	800be60 <pbuf_free>
    arp_table[i].q = NULL;
 8014eb2:	490b      	ldr	r1, [pc, #44]	; (8014ee0 <etharp_free_entry+0x60>)
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	4613      	mov	r3, r2
 8014eb8:	005b      	lsls	r3, r3, #1
 8014eba:	4413      	add	r3, r2
 8014ebc:	00db      	lsls	r3, r3, #3
 8014ebe:	440b      	add	r3, r1
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014ec4:	4906      	ldr	r1, [pc, #24]	; (8014ee0 <etharp_free_entry+0x60>)
 8014ec6:	687a      	ldr	r2, [r7, #4]
 8014ec8:	4613      	mov	r3, r2
 8014eca:	005b      	lsls	r3, r3, #1
 8014ecc:	4413      	add	r3, r2
 8014ece:	00db      	lsls	r3, r3, #3
 8014ed0:	440b      	add	r3, r1
 8014ed2:	3314      	adds	r3, #20
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014ed8:	bf00      	nop
 8014eda:	3708      	adds	r7, #8
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	2000869c 	.word	0x2000869c

08014ee4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014eea:	2300      	movs	r3, #0
 8014eec:	607b      	str	r3, [r7, #4]
 8014eee:	e096      	b.n	801501e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014ef0:	494f      	ldr	r1, [pc, #316]	; (8015030 <etharp_tmr+0x14c>)
 8014ef2:	687a      	ldr	r2, [r7, #4]
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	4413      	add	r3, r2
 8014efa:	00db      	lsls	r3, r3, #3
 8014efc:	440b      	add	r3, r1
 8014efe:	3314      	adds	r3, #20
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014f04:	78fb      	ldrb	r3, [r7, #3]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	f000 8086 	beq.w	8015018 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014f0c:	4948      	ldr	r1, [pc, #288]	; (8015030 <etharp_tmr+0x14c>)
 8014f0e:	687a      	ldr	r2, [r7, #4]
 8014f10:	4613      	mov	r3, r2
 8014f12:	005b      	lsls	r3, r3, #1
 8014f14:	4413      	add	r3, r2
 8014f16:	00db      	lsls	r3, r3, #3
 8014f18:	440b      	add	r3, r1
 8014f1a:	3312      	adds	r3, #18
 8014f1c:	881b      	ldrh	r3, [r3, #0]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	b298      	uxth	r0, r3
 8014f22:	4943      	ldr	r1, [pc, #268]	; (8015030 <etharp_tmr+0x14c>)
 8014f24:	687a      	ldr	r2, [r7, #4]
 8014f26:	4613      	mov	r3, r2
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	4413      	add	r3, r2
 8014f2c:	00db      	lsls	r3, r3, #3
 8014f2e:	440b      	add	r3, r1
 8014f30:	3312      	adds	r3, #18
 8014f32:	4602      	mov	r2, r0
 8014f34:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014f36:	493e      	ldr	r1, [pc, #248]	; (8015030 <etharp_tmr+0x14c>)
 8014f38:	687a      	ldr	r2, [r7, #4]
 8014f3a:	4613      	mov	r3, r2
 8014f3c:	005b      	lsls	r3, r3, #1
 8014f3e:	4413      	add	r3, r2
 8014f40:	00db      	lsls	r3, r3, #3
 8014f42:	440b      	add	r3, r1
 8014f44:	3312      	adds	r3, #18
 8014f46:	881b      	ldrh	r3, [r3, #0]
 8014f48:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014f4c:	d215      	bcs.n	8014f7a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014f4e:	4938      	ldr	r1, [pc, #224]	; (8015030 <etharp_tmr+0x14c>)
 8014f50:	687a      	ldr	r2, [r7, #4]
 8014f52:	4613      	mov	r3, r2
 8014f54:	005b      	lsls	r3, r3, #1
 8014f56:	4413      	add	r3, r2
 8014f58:	00db      	lsls	r3, r3, #3
 8014f5a:	440b      	add	r3, r1
 8014f5c:	3314      	adds	r3, #20
 8014f5e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014f60:	2b01      	cmp	r3, #1
 8014f62:	d10e      	bne.n	8014f82 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014f64:	4932      	ldr	r1, [pc, #200]	; (8015030 <etharp_tmr+0x14c>)
 8014f66:	687a      	ldr	r2, [r7, #4]
 8014f68:	4613      	mov	r3, r2
 8014f6a:	005b      	lsls	r3, r3, #1
 8014f6c:	4413      	add	r3, r2
 8014f6e:	00db      	lsls	r3, r3, #3
 8014f70:	440b      	add	r3, r1
 8014f72:	3312      	adds	r3, #18
 8014f74:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014f76:	2b04      	cmp	r3, #4
 8014f78:	d903      	bls.n	8014f82 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f7ff ff80 	bl	8014e80 <etharp_free_entry>
 8014f80:	e04a      	b.n	8015018 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014f82:	492b      	ldr	r1, [pc, #172]	; (8015030 <etharp_tmr+0x14c>)
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	4613      	mov	r3, r2
 8014f88:	005b      	lsls	r3, r3, #1
 8014f8a:	4413      	add	r3, r2
 8014f8c:	00db      	lsls	r3, r3, #3
 8014f8e:	440b      	add	r3, r1
 8014f90:	3314      	adds	r3, #20
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	2b03      	cmp	r3, #3
 8014f96:	d10a      	bne.n	8014fae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014f98:	4925      	ldr	r1, [pc, #148]	; (8015030 <etharp_tmr+0x14c>)
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	4613      	mov	r3, r2
 8014f9e:	005b      	lsls	r3, r3, #1
 8014fa0:	4413      	add	r3, r2
 8014fa2:	00db      	lsls	r3, r3, #3
 8014fa4:	440b      	add	r3, r1
 8014fa6:	3314      	adds	r3, #20
 8014fa8:	2204      	movs	r2, #4
 8014faa:	701a      	strb	r2, [r3, #0]
 8014fac:	e034      	b.n	8015018 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014fae:	4920      	ldr	r1, [pc, #128]	; (8015030 <etharp_tmr+0x14c>)
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	4613      	mov	r3, r2
 8014fb4:	005b      	lsls	r3, r3, #1
 8014fb6:	4413      	add	r3, r2
 8014fb8:	00db      	lsls	r3, r3, #3
 8014fba:	440b      	add	r3, r1
 8014fbc:	3314      	adds	r3, #20
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	2b04      	cmp	r3, #4
 8014fc2:	d10a      	bne.n	8014fda <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014fc4:	491a      	ldr	r1, [pc, #104]	; (8015030 <etharp_tmr+0x14c>)
 8014fc6:	687a      	ldr	r2, [r7, #4]
 8014fc8:	4613      	mov	r3, r2
 8014fca:	005b      	lsls	r3, r3, #1
 8014fcc:	4413      	add	r3, r2
 8014fce:	00db      	lsls	r3, r3, #3
 8014fd0:	440b      	add	r3, r1
 8014fd2:	3314      	adds	r3, #20
 8014fd4:	2202      	movs	r2, #2
 8014fd6:	701a      	strb	r2, [r3, #0]
 8014fd8:	e01e      	b.n	8015018 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014fda:	4915      	ldr	r1, [pc, #84]	; (8015030 <etharp_tmr+0x14c>)
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	4613      	mov	r3, r2
 8014fe0:	005b      	lsls	r3, r3, #1
 8014fe2:	4413      	add	r3, r2
 8014fe4:	00db      	lsls	r3, r3, #3
 8014fe6:	440b      	add	r3, r1
 8014fe8:	3314      	adds	r3, #20
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	2b01      	cmp	r3, #1
 8014fee:	d113      	bne.n	8015018 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014ff0:	490f      	ldr	r1, [pc, #60]	; (8015030 <etharp_tmr+0x14c>)
 8014ff2:	687a      	ldr	r2, [r7, #4]
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	005b      	lsls	r3, r3, #1
 8014ff8:	4413      	add	r3, r2
 8014ffa:	00db      	lsls	r3, r3, #3
 8014ffc:	440b      	add	r3, r1
 8014ffe:	3308      	adds	r3, #8
 8015000:	6818      	ldr	r0, [r3, #0]
 8015002:	687a      	ldr	r2, [r7, #4]
 8015004:	4613      	mov	r3, r2
 8015006:	005b      	lsls	r3, r3, #1
 8015008:	4413      	add	r3, r2
 801500a:	00db      	lsls	r3, r3, #3
 801500c:	4a08      	ldr	r2, [pc, #32]	; (8015030 <etharp_tmr+0x14c>)
 801500e:	4413      	add	r3, r2
 8015010:	3304      	adds	r3, #4
 8015012:	4619      	mov	r1, r3
 8015014:	f000 fe72 	bl	8015cfc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	3301      	adds	r3, #1
 801501c:	607b      	str	r3, [r7, #4]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	2b09      	cmp	r3, #9
 8015022:	f77f af65 	ble.w	8014ef0 <etharp_tmr+0xc>
      }
    }
  }
}
 8015026:	bf00      	nop
 8015028:	3708      	adds	r7, #8
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	2000869c 	.word	0x2000869c

08015034 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b08a      	sub	sp, #40	; 0x28
 8015038:	af00      	add	r7, sp, #0
 801503a:	60f8      	str	r0, [r7, #12]
 801503c:	460b      	mov	r3, r1
 801503e:	607a      	str	r2, [r7, #4]
 8015040:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015042:	230a      	movs	r3, #10
 8015044:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015046:	230a      	movs	r3, #10
 8015048:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801504a:	230a      	movs	r3, #10
 801504c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801504e:	2300      	movs	r3, #0
 8015050:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015052:	230a      	movs	r3, #10
 8015054:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015056:	2300      	movs	r3, #0
 8015058:	83bb      	strh	r3, [r7, #28]
 801505a:	2300      	movs	r3, #0
 801505c:	837b      	strh	r3, [r7, #26]
 801505e:	2300      	movs	r3, #0
 8015060:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015062:	2300      	movs	r3, #0
 8015064:	843b      	strh	r3, [r7, #32]
 8015066:	e0ae      	b.n	80151c6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015068:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801506c:	49a6      	ldr	r1, [pc, #664]	; (8015308 <etharp_find_entry+0x2d4>)
 801506e:	4613      	mov	r3, r2
 8015070:	005b      	lsls	r3, r3, #1
 8015072:	4413      	add	r3, r2
 8015074:	00db      	lsls	r3, r3, #3
 8015076:	440b      	add	r3, r1
 8015078:	3314      	adds	r3, #20
 801507a:	781b      	ldrb	r3, [r3, #0]
 801507c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801507e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015082:	2b0a      	cmp	r3, #10
 8015084:	d105      	bne.n	8015092 <etharp_find_entry+0x5e>
 8015086:	7dfb      	ldrb	r3, [r7, #23]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d102      	bne.n	8015092 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801508c:	8c3b      	ldrh	r3, [r7, #32]
 801508e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015090:	e095      	b.n	80151be <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015092:	7dfb      	ldrb	r3, [r7, #23]
 8015094:	2b00      	cmp	r3, #0
 8015096:	f000 8092 	beq.w	80151be <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801509a:	7dfb      	ldrb	r3, [r7, #23]
 801509c:	2b01      	cmp	r3, #1
 801509e:	d009      	beq.n	80150b4 <etharp_find_entry+0x80>
 80150a0:	7dfb      	ldrb	r3, [r7, #23]
 80150a2:	2b01      	cmp	r3, #1
 80150a4:	d806      	bhi.n	80150b4 <etharp_find_entry+0x80>
 80150a6:	4b99      	ldr	r3, [pc, #612]	; (801530c <etharp_find_entry+0x2d8>)
 80150a8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80150ac:	4998      	ldr	r1, [pc, #608]	; (8015310 <etharp_find_entry+0x2dc>)
 80150ae:	4899      	ldr	r0, [pc, #612]	; (8015314 <etharp_find_entry+0x2e0>)
 80150b0:	f002 fc24 	bl	80178fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d020      	beq.n	80150fc <etharp_find_entry+0xc8>
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	6819      	ldr	r1, [r3, #0]
 80150be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150c2:	4891      	ldr	r0, [pc, #580]	; (8015308 <etharp_find_entry+0x2d4>)
 80150c4:	4613      	mov	r3, r2
 80150c6:	005b      	lsls	r3, r3, #1
 80150c8:	4413      	add	r3, r2
 80150ca:	00db      	lsls	r3, r3, #3
 80150cc:	4403      	add	r3, r0
 80150ce:	3304      	adds	r3, #4
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	4299      	cmp	r1, r3
 80150d4:	d112      	bne.n	80150fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d00c      	beq.n	80150f6 <etharp_find_entry+0xc2>
 80150dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150e0:	4989      	ldr	r1, [pc, #548]	; (8015308 <etharp_find_entry+0x2d4>)
 80150e2:	4613      	mov	r3, r2
 80150e4:	005b      	lsls	r3, r3, #1
 80150e6:	4413      	add	r3, r2
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	440b      	add	r3, r1
 80150ec:	3308      	adds	r3, #8
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	687a      	ldr	r2, [r7, #4]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d102      	bne.n	80150fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80150f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80150fa:	e100      	b.n	80152fe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80150fc:	7dfb      	ldrb	r3, [r7, #23]
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d140      	bne.n	8015184 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015102:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015106:	4980      	ldr	r1, [pc, #512]	; (8015308 <etharp_find_entry+0x2d4>)
 8015108:	4613      	mov	r3, r2
 801510a:	005b      	lsls	r3, r3, #1
 801510c:	4413      	add	r3, r2
 801510e:	00db      	lsls	r3, r3, #3
 8015110:	440b      	add	r3, r1
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d01a      	beq.n	801514e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015118:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801511c:	497a      	ldr	r1, [pc, #488]	; (8015308 <etharp_find_entry+0x2d4>)
 801511e:	4613      	mov	r3, r2
 8015120:	005b      	lsls	r3, r3, #1
 8015122:	4413      	add	r3, r2
 8015124:	00db      	lsls	r3, r3, #3
 8015126:	440b      	add	r3, r1
 8015128:	3312      	adds	r3, #18
 801512a:	881b      	ldrh	r3, [r3, #0]
 801512c:	8bba      	ldrh	r2, [r7, #28]
 801512e:	429a      	cmp	r2, r3
 8015130:	d845      	bhi.n	80151be <etharp_find_entry+0x18a>
            old_queue = i;
 8015132:	8c3b      	ldrh	r3, [r7, #32]
 8015134:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015136:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801513a:	4973      	ldr	r1, [pc, #460]	; (8015308 <etharp_find_entry+0x2d4>)
 801513c:	4613      	mov	r3, r2
 801513e:	005b      	lsls	r3, r3, #1
 8015140:	4413      	add	r3, r2
 8015142:	00db      	lsls	r3, r3, #3
 8015144:	440b      	add	r3, r1
 8015146:	3312      	adds	r3, #18
 8015148:	881b      	ldrh	r3, [r3, #0]
 801514a:	83bb      	strh	r3, [r7, #28]
 801514c:	e037      	b.n	80151be <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801514e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015152:	496d      	ldr	r1, [pc, #436]	; (8015308 <etharp_find_entry+0x2d4>)
 8015154:	4613      	mov	r3, r2
 8015156:	005b      	lsls	r3, r3, #1
 8015158:	4413      	add	r3, r2
 801515a:	00db      	lsls	r3, r3, #3
 801515c:	440b      	add	r3, r1
 801515e:	3312      	adds	r3, #18
 8015160:	881b      	ldrh	r3, [r3, #0]
 8015162:	8b7a      	ldrh	r2, [r7, #26]
 8015164:	429a      	cmp	r2, r3
 8015166:	d82a      	bhi.n	80151be <etharp_find_entry+0x18a>
            old_pending = i;
 8015168:	8c3b      	ldrh	r3, [r7, #32]
 801516a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801516c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015170:	4965      	ldr	r1, [pc, #404]	; (8015308 <etharp_find_entry+0x2d4>)
 8015172:	4613      	mov	r3, r2
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	4413      	add	r3, r2
 8015178:	00db      	lsls	r3, r3, #3
 801517a:	440b      	add	r3, r1
 801517c:	3312      	adds	r3, #18
 801517e:	881b      	ldrh	r3, [r3, #0]
 8015180:	837b      	strh	r3, [r7, #26]
 8015182:	e01c      	b.n	80151be <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015184:	7dfb      	ldrb	r3, [r7, #23]
 8015186:	2b01      	cmp	r3, #1
 8015188:	d919      	bls.n	80151be <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801518a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801518e:	495e      	ldr	r1, [pc, #376]	; (8015308 <etharp_find_entry+0x2d4>)
 8015190:	4613      	mov	r3, r2
 8015192:	005b      	lsls	r3, r3, #1
 8015194:	4413      	add	r3, r2
 8015196:	00db      	lsls	r3, r3, #3
 8015198:	440b      	add	r3, r1
 801519a:	3312      	adds	r3, #18
 801519c:	881b      	ldrh	r3, [r3, #0]
 801519e:	8b3a      	ldrh	r2, [r7, #24]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d80c      	bhi.n	80151be <etharp_find_entry+0x18a>
            old_stable = i;
 80151a4:	8c3b      	ldrh	r3, [r7, #32]
 80151a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80151a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151ac:	4956      	ldr	r1, [pc, #344]	; (8015308 <etharp_find_entry+0x2d4>)
 80151ae:	4613      	mov	r3, r2
 80151b0:	005b      	lsls	r3, r3, #1
 80151b2:	4413      	add	r3, r2
 80151b4:	00db      	lsls	r3, r3, #3
 80151b6:	440b      	add	r3, r1
 80151b8:	3312      	adds	r3, #18
 80151ba:	881b      	ldrh	r3, [r3, #0]
 80151bc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151be:	8c3b      	ldrh	r3, [r7, #32]
 80151c0:	3301      	adds	r3, #1
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	843b      	strh	r3, [r7, #32]
 80151c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80151ca:	2b09      	cmp	r3, #9
 80151cc:	f77f af4c 	ble.w	8015068 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80151d0:	7afb      	ldrb	r3, [r7, #11]
 80151d2:	f003 0302 	and.w	r3, r3, #2
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d108      	bne.n	80151ec <etharp_find_entry+0x1b8>
 80151da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80151de:	2b0a      	cmp	r3, #10
 80151e0:	d107      	bne.n	80151f2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80151e2:	7afb      	ldrb	r3, [r7, #11]
 80151e4:	f003 0301 	and.w	r3, r3, #1
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d102      	bne.n	80151f2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80151ec:	f04f 33ff 	mov.w	r3, #4294967295
 80151f0:	e085      	b.n	80152fe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80151f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80151f6:	2b09      	cmp	r3, #9
 80151f8:	dc02      	bgt.n	8015200 <etharp_find_entry+0x1cc>
    i = empty;
 80151fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151fc:	843b      	strh	r3, [r7, #32]
 80151fe:	e039      	b.n	8015274 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015200:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015204:	2b09      	cmp	r3, #9
 8015206:	dc14      	bgt.n	8015232 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801520a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801520c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015210:	493d      	ldr	r1, [pc, #244]	; (8015308 <etharp_find_entry+0x2d4>)
 8015212:	4613      	mov	r3, r2
 8015214:	005b      	lsls	r3, r3, #1
 8015216:	4413      	add	r3, r2
 8015218:	00db      	lsls	r3, r3, #3
 801521a:	440b      	add	r3, r1
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d018      	beq.n	8015254 <etharp_find_entry+0x220>
 8015222:	4b3a      	ldr	r3, [pc, #232]	; (801530c <etharp_find_entry+0x2d8>)
 8015224:	f240 126d 	movw	r2, #365	; 0x16d
 8015228:	493b      	ldr	r1, [pc, #236]	; (8015318 <etharp_find_entry+0x2e4>)
 801522a:	483a      	ldr	r0, [pc, #232]	; (8015314 <etharp_find_entry+0x2e0>)
 801522c:	f002 fb66 	bl	80178fc <iprintf>
 8015230:	e010      	b.n	8015254 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015232:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015236:	2b09      	cmp	r3, #9
 8015238:	dc02      	bgt.n	8015240 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801523a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801523c:	843b      	strh	r3, [r7, #32]
 801523e:	e009      	b.n	8015254 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015240:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015244:	2b09      	cmp	r3, #9
 8015246:	dc02      	bgt.n	801524e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015248:	8bfb      	ldrh	r3, [r7, #30]
 801524a:	843b      	strh	r3, [r7, #32]
 801524c:	e002      	b.n	8015254 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801524e:	f04f 33ff 	mov.w	r3, #4294967295
 8015252:	e054      	b.n	80152fe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015254:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015258:	2b09      	cmp	r3, #9
 801525a:	dd06      	ble.n	801526a <etharp_find_entry+0x236>
 801525c:	4b2b      	ldr	r3, [pc, #172]	; (801530c <etharp_find_entry+0x2d8>)
 801525e:	f240 127f 	movw	r2, #383	; 0x17f
 8015262:	492e      	ldr	r1, [pc, #184]	; (801531c <etharp_find_entry+0x2e8>)
 8015264:	482b      	ldr	r0, [pc, #172]	; (8015314 <etharp_find_entry+0x2e0>)
 8015266:	f002 fb49 	bl	80178fc <iprintf>
    etharp_free_entry(i);
 801526a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801526e:	4618      	mov	r0, r3
 8015270:	f7ff fe06 	bl	8014e80 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015274:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015278:	2b09      	cmp	r3, #9
 801527a:	dd06      	ble.n	801528a <etharp_find_entry+0x256>
 801527c:	4b23      	ldr	r3, [pc, #140]	; (801530c <etharp_find_entry+0x2d8>)
 801527e:	f240 1283 	movw	r2, #387	; 0x183
 8015282:	4926      	ldr	r1, [pc, #152]	; (801531c <etharp_find_entry+0x2e8>)
 8015284:	4823      	ldr	r0, [pc, #140]	; (8015314 <etharp_find_entry+0x2e0>)
 8015286:	f002 fb39 	bl	80178fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801528a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801528e:	491e      	ldr	r1, [pc, #120]	; (8015308 <etharp_find_entry+0x2d4>)
 8015290:	4613      	mov	r3, r2
 8015292:	005b      	lsls	r3, r3, #1
 8015294:	4413      	add	r3, r2
 8015296:	00db      	lsls	r3, r3, #3
 8015298:	440b      	add	r3, r1
 801529a:	3314      	adds	r3, #20
 801529c:	781b      	ldrb	r3, [r3, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d006      	beq.n	80152b0 <etharp_find_entry+0x27c>
 80152a2:	4b1a      	ldr	r3, [pc, #104]	; (801530c <etharp_find_entry+0x2d8>)
 80152a4:	f240 1285 	movw	r2, #389	; 0x185
 80152a8:	491d      	ldr	r1, [pc, #116]	; (8015320 <etharp_find_entry+0x2ec>)
 80152aa:	481a      	ldr	r0, [pc, #104]	; (8015314 <etharp_find_entry+0x2e0>)
 80152ac:	f002 fb26 	bl	80178fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d00b      	beq.n	80152ce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80152b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	6819      	ldr	r1, [r3, #0]
 80152be:	4812      	ldr	r0, [pc, #72]	; (8015308 <etharp_find_entry+0x2d4>)
 80152c0:	4613      	mov	r3, r2
 80152c2:	005b      	lsls	r3, r3, #1
 80152c4:	4413      	add	r3, r2
 80152c6:	00db      	lsls	r3, r3, #3
 80152c8:	4403      	add	r3, r0
 80152ca:	3304      	adds	r3, #4
 80152cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80152ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152d2:	490d      	ldr	r1, [pc, #52]	; (8015308 <etharp_find_entry+0x2d4>)
 80152d4:	4613      	mov	r3, r2
 80152d6:	005b      	lsls	r3, r3, #1
 80152d8:	4413      	add	r3, r2
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	440b      	add	r3, r1
 80152de:	3312      	adds	r3, #18
 80152e0:	2200      	movs	r2, #0
 80152e2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80152e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152e8:	4907      	ldr	r1, [pc, #28]	; (8015308 <etharp_find_entry+0x2d4>)
 80152ea:	4613      	mov	r3, r2
 80152ec:	005b      	lsls	r3, r3, #1
 80152ee:	4413      	add	r3, r2
 80152f0:	00db      	lsls	r3, r3, #3
 80152f2:	440b      	add	r3, r1
 80152f4:	3308      	adds	r3, #8
 80152f6:	687a      	ldr	r2, [r7, #4]
 80152f8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80152fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3728      	adds	r7, #40	; 0x28
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	2000869c 	.word	0x2000869c
 801530c:	0801bf40 	.word	0x0801bf40
 8015310:	0801bf78 	.word	0x0801bf78
 8015314:	0801bfb8 	.word	0x0801bfb8
 8015318:	0801bfe0 	.word	0x0801bfe0
 801531c:	0801bff8 	.word	0x0801bff8
 8015320:	0801c00c 	.word	0x0801c00c

08015324 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b088      	sub	sp, #32
 8015328:	af02      	add	r7, sp, #8
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
 8015330:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015338:	2b06      	cmp	r3, #6
 801533a:	d006      	beq.n	801534a <etharp_update_arp_entry+0x26>
 801533c:	4b48      	ldr	r3, [pc, #288]	; (8015460 <etharp_update_arp_entry+0x13c>)
 801533e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015342:	4948      	ldr	r1, [pc, #288]	; (8015464 <etharp_update_arp_entry+0x140>)
 8015344:	4848      	ldr	r0, [pc, #288]	; (8015468 <etharp_update_arp_entry+0x144>)
 8015346:	f002 fad9 	bl	80178fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d012      	beq.n	8015376 <etharp_update_arp_entry+0x52>
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d00e      	beq.n	8015376 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	68f9      	ldr	r1, [r7, #12]
 801535e:	4618      	mov	r0, r3
 8015360:	f001 f91e 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 8015364:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015366:	2b00      	cmp	r3, #0
 8015368:	d105      	bne.n	8015376 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015372:	2be0      	cmp	r3, #224	; 0xe0
 8015374:	d102      	bne.n	801537c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015376:	f06f 030f 	mvn.w	r3, #15
 801537a:	e06c      	b.n	8015456 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801537c:	78fb      	ldrb	r3, [r7, #3]
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	4619      	mov	r1, r3
 8015382:	68b8      	ldr	r0, [r7, #8]
 8015384:	f7ff fe56 	bl	8015034 <etharp_find_entry>
 8015388:	4603      	mov	r3, r0
 801538a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801538c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015390:	2b00      	cmp	r3, #0
 8015392:	da02      	bge.n	801539a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015394:	8afb      	ldrh	r3, [r7, #22]
 8015396:	b25b      	sxtb	r3, r3
 8015398:	e05d      	b.n	8015456 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801539a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801539e:	4933      	ldr	r1, [pc, #204]	; (801546c <etharp_update_arp_entry+0x148>)
 80153a0:	4613      	mov	r3, r2
 80153a2:	005b      	lsls	r3, r3, #1
 80153a4:	4413      	add	r3, r2
 80153a6:	00db      	lsls	r3, r3, #3
 80153a8:	440b      	add	r3, r1
 80153aa:	3314      	adds	r3, #20
 80153ac:	2202      	movs	r2, #2
 80153ae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80153b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153b4:	492d      	ldr	r1, [pc, #180]	; (801546c <etharp_update_arp_entry+0x148>)
 80153b6:	4613      	mov	r3, r2
 80153b8:	005b      	lsls	r3, r3, #1
 80153ba:	4413      	add	r3, r2
 80153bc:	00db      	lsls	r3, r3, #3
 80153be:	440b      	add	r3, r1
 80153c0:	3308      	adds	r3, #8
 80153c2:	68fa      	ldr	r2, [r7, #12]
 80153c4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80153c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153ca:	4613      	mov	r3, r2
 80153cc:	005b      	lsls	r3, r3, #1
 80153ce:	4413      	add	r3, r2
 80153d0:	00db      	lsls	r3, r3, #3
 80153d2:	3308      	adds	r3, #8
 80153d4:	4a25      	ldr	r2, [pc, #148]	; (801546c <etharp_update_arp_entry+0x148>)
 80153d6:	4413      	add	r3, r2
 80153d8:	3304      	adds	r3, #4
 80153da:	2206      	movs	r2, #6
 80153dc:	6879      	ldr	r1, [r7, #4]
 80153de:	4618      	mov	r0, r3
 80153e0:	f002 fa5f 	bl	80178a2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80153e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153e8:	4920      	ldr	r1, [pc, #128]	; (801546c <etharp_update_arp_entry+0x148>)
 80153ea:	4613      	mov	r3, r2
 80153ec:	005b      	lsls	r3, r3, #1
 80153ee:	4413      	add	r3, r2
 80153f0:	00db      	lsls	r3, r3, #3
 80153f2:	440b      	add	r3, r1
 80153f4:	3312      	adds	r3, #18
 80153f6:	2200      	movs	r2, #0
 80153f8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80153fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153fe:	491b      	ldr	r1, [pc, #108]	; (801546c <etharp_update_arp_entry+0x148>)
 8015400:	4613      	mov	r3, r2
 8015402:	005b      	lsls	r3, r3, #1
 8015404:	4413      	add	r3, r2
 8015406:	00db      	lsls	r3, r3, #3
 8015408:	440b      	add	r3, r1
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d021      	beq.n	8015454 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015410:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015414:	4915      	ldr	r1, [pc, #84]	; (801546c <etharp_update_arp_entry+0x148>)
 8015416:	4613      	mov	r3, r2
 8015418:	005b      	lsls	r3, r3, #1
 801541a:	4413      	add	r3, r2
 801541c:	00db      	lsls	r3, r3, #3
 801541e:	440b      	add	r3, r1
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015424:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015428:	4910      	ldr	r1, [pc, #64]	; (801546c <etharp_update_arp_entry+0x148>)
 801542a:	4613      	mov	r3, r2
 801542c:	005b      	lsls	r3, r3, #1
 801542e:	4413      	add	r3, r2
 8015430:	00db      	lsls	r3, r3, #3
 8015432:	440b      	add	r3, r1
 8015434:	2200      	movs	r2, #0
 8015436:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801543e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015442:	9300      	str	r3, [sp, #0]
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	6939      	ldr	r1, [r7, #16]
 8015448:	68f8      	ldr	r0, [r7, #12]
 801544a:	f001 ffad 	bl	80173a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801544e:	6938      	ldr	r0, [r7, #16]
 8015450:	f7f6 fd06 	bl	800be60 <pbuf_free>
  }
  return ERR_OK;
 8015454:	2300      	movs	r3, #0
}
 8015456:	4618      	mov	r0, r3
 8015458:	3718      	adds	r7, #24
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	0801bf40 	.word	0x0801bf40
 8015464:	0801c038 	.word	0x0801c038
 8015468:	0801bfb8 	.word	0x0801bfb8
 801546c:	2000869c 	.word	0x2000869c

08015470 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015478:	2300      	movs	r3, #0
 801547a:	60fb      	str	r3, [r7, #12]
 801547c:	e01e      	b.n	80154bc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801547e:	4913      	ldr	r1, [pc, #76]	; (80154cc <etharp_cleanup_netif+0x5c>)
 8015480:	68fa      	ldr	r2, [r7, #12]
 8015482:	4613      	mov	r3, r2
 8015484:	005b      	lsls	r3, r3, #1
 8015486:	4413      	add	r3, r2
 8015488:	00db      	lsls	r3, r3, #3
 801548a:	440b      	add	r3, r1
 801548c:	3314      	adds	r3, #20
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015492:	7afb      	ldrb	r3, [r7, #11]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d00e      	beq.n	80154b6 <etharp_cleanup_netif+0x46>
 8015498:	490c      	ldr	r1, [pc, #48]	; (80154cc <etharp_cleanup_netif+0x5c>)
 801549a:	68fa      	ldr	r2, [r7, #12]
 801549c:	4613      	mov	r3, r2
 801549e:	005b      	lsls	r3, r3, #1
 80154a0:	4413      	add	r3, r2
 80154a2:	00db      	lsls	r3, r3, #3
 80154a4:	440b      	add	r3, r1
 80154a6:	3308      	adds	r3, #8
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	687a      	ldr	r2, [r7, #4]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d102      	bne.n	80154b6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f7ff fce5 	bl	8014e80 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	3301      	adds	r3, #1
 80154ba:	60fb      	str	r3, [r7, #12]
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	2b09      	cmp	r3, #9
 80154c0:	dddd      	ble.n	801547e <etharp_cleanup_netif+0xe>
    }
  }
}
 80154c2:	bf00      	nop
 80154c4:	3710      	adds	r7, #16
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	2000869c 	.word	0x2000869c

080154d0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80154d0:	b5b0      	push	{r4, r5, r7, lr}
 80154d2:	b08a      	sub	sp, #40	; 0x28
 80154d4:	af04      	add	r7, sp, #16
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d107      	bne.n	80154f0 <etharp_input+0x20>
 80154e0:	4b3f      	ldr	r3, [pc, #252]	; (80155e0 <etharp_input+0x110>)
 80154e2:	f240 228a 	movw	r2, #650	; 0x28a
 80154e6:	493f      	ldr	r1, [pc, #252]	; (80155e4 <etharp_input+0x114>)
 80154e8:	483f      	ldr	r0, [pc, #252]	; (80155e8 <etharp_input+0x118>)
 80154ea:	f002 fa07 	bl	80178fc <iprintf>
 80154ee:	e074      	b.n	80155da <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	881b      	ldrh	r3, [r3, #0]
 80154fa:	b29b      	uxth	r3, r3
 80154fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015500:	d10c      	bne.n	801551c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015506:	2b06      	cmp	r3, #6
 8015508:	d108      	bne.n	801551c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801550e:	2b04      	cmp	r3, #4
 8015510:	d104      	bne.n	801551c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	885b      	ldrh	r3, [r3, #2]
 8015516:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015518:	2b08      	cmp	r3, #8
 801551a:	d003      	beq.n	8015524 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f7f6 fc9f 	bl	800be60 <pbuf_free>
    return;
 8015522:	e05a      	b.n	80155da <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	330e      	adds	r3, #14
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	3318      	adds	r3, #24
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	3304      	adds	r3, #4
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d102      	bne.n	8015544 <etharp_input+0x74>
    for_us = 0;
 801553e:	2300      	movs	r3, #0
 8015540:	75fb      	strb	r3, [r7, #23]
 8015542:	e009      	b.n	8015558 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015544:	68ba      	ldr	r2, [r7, #8]
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	3304      	adds	r3, #4
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	429a      	cmp	r2, r3
 801554e:	bf0c      	ite	eq
 8015550:	2301      	moveq	r3, #1
 8015552:	2300      	movne	r3, #0
 8015554:	b2db      	uxtb	r3, r3
 8015556:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	f103 0208 	add.w	r2, r3, #8
 801555e:	7dfb      	ldrb	r3, [r7, #23]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d001      	beq.n	8015568 <etharp_input+0x98>
 8015564:	2301      	movs	r3, #1
 8015566:	e000      	b.n	801556a <etharp_input+0x9a>
 8015568:	2302      	movs	r3, #2
 801556a:	f107 010c 	add.w	r1, r7, #12
 801556e:	6838      	ldr	r0, [r7, #0]
 8015570:	f7ff fed8 	bl	8015324 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	88db      	ldrh	r3, [r3, #6]
 8015578:	b29b      	uxth	r3, r3
 801557a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801557e:	d003      	beq.n	8015588 <etharp_input+0xb8>
 8015580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015584:	d01e      	beq.n	80155c4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015586:	e025      	b.n	80155d4 <etharp_input+0x104>
      if (for_us) {
 8015588:	7dfb      	ldrb	r3, [r7, #23]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d021      	beq.n	80155d2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801558e:	683b      	ldr	r3, [r7, #0]
 8015590:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80155a0:	683b      	ldr	r3, [r7, #0]
 80155a2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80155a4:	693a      	ldr	r2, [r7, #16]
 80155a6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80155a8:	2102      	movs	r1, #2
 80155aa:	9103      	str	r1, [sp, #12]
 80155ac:	f107 010c 	add.w	r1, r7, #12
 80155b0:	9102      	str	r1, [sp, #8]
 80155b2:	9201      	str	r2, [sp, #4]
 80155b4:	9300      	str	r3, [sp, #0]
 80155b6:	462b      	mov	r3, r5
 80155b8:	4622      	mov	r2, r4
 80155ba:	4601      	mov	r1, r0
 80155bc:	6838      	ldr	r0, [r7, #0]
 80155be:	f000 faef 	bl	8015ba0 <etharp_raw>
      break;
 80155c2:	e006      	b.n	80155d2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80155c4:	f107 030c 	add.w	r3, r7, #12
 80155c8:	4619      	mov	r1, r3
 80155ca:	6838      	ldr	r0, [r7, #0]
 80155cc:	f7fe f9fe 	bl	80139cc <dhcp_arp_reply>
      break;
 80155d0:	e000      	b.n	80155d4 <etharp_input+0x104>
      break;
 80155d2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80155d4:	6878      	ldr	r0, [r7, #4]
 80155d6:	f7f6 fc43 	bl	800be60 <pbuf_free>
}
 80155da:	3718      	adds	r7, #24
 80155dc:	46bd      	mov	sp, r7
 80155de:	bdb0      	pop	{r4, r5, r7, pc}
 80155e0:	0801bf40 	.word	0x0801bf40
 80155e4:	0801c090 	.word	0x0801c090
 80155e8:	0801bfb8 	.word	0x0801bfb8

080155ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b086      	sub	sp, #24
 80155f0:	af02      	add	r7, sp, #8
 80155f2:	60f8      	str	r0, [r7, #12]
 80155f4:	60b9      	str	r1, [r7, #8]
 80155f6:	4613      	mov	r3, r2
 80155f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80155fa:	79fa      	ldrb	r2, [r7, #7]
 80155fc:	4944      	ldr	r1, [pc, #272]	; (8015710 <etharp_output_to_arp_index+0x124>)
 80155fe:	4613      	mov	r3, r2
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	4413      	add	r3, r2
 8015604:	00db      	lsls	r3, r3, #3
 8015606:	440b      	add	r3, r1
 8015608:	3314      	adds	r3, #20
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	2b01      	cmp	r3, #1
 801560e:	d806      	bhi.n	801561e <etharp_output_to_arp_index+0x32>
 8015610:	4b40      	ldr	r3, [pc, #256]	; (8015714 <etharp_output_to_arp_index+0x128>)
 8015612:	f240 22ef 	movw	r2, #751	; 0x2ef
 8015616:	4940      	ldr	r1, [pc, #256]	; (8015718 <etharp_output_to_arp_index+0x12c>)
 8015618:	4840      	ldr	r0, [pc, #256]	; (801571c <etharp_output_to_arp_index+0x130>)
 801561a:	f002 f96f 	bl	80178fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801561e:	79fa      	ldrb	r2, [r7, #7]
 8015620:	493b      	ldr	r1, [pc, #236]	; (8015710 <etharp_output_to_arp_index+0x124>)
 8015622:	4613      	mov	r3, r2
 8015624:	005b      	lsls	r3, r3, #1
 8015626:	4413      	add	r3, r2
 8015628:	00db      	lsls	r3, r3, #3
 801562a:	440b      	add	r3, r1
 801562c:	3314      	adds	r3, #20
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	2b02      	cmp	r3, #2
 8015632:	d153      	bne.n	80156dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015634:	79fa      	ldrb	r2, [r7, #7]
 8015636:	4936      	ldr	r1, [pc, #216]	; (8015710 <etharp_output_to_arp_index+0x124>)
 8015638:	4613      	mov	r3, r2
 801563a:	005b      	lsls	r3, r3, #1
 801563c:	4413      	add	r3, r2
 801563e:	00db      	lsls	r3, r3, #3
 8015640:	440b      	add	r3, r1
 8015642:	3312      	adds	r3, #18
 8015644:	881b      	ldrh	r3, [r3, #0]
 8015646:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801564a:	d919      	bls.n	8015680 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801564c:	79fa      	ldrb	r2, [r7, #7]
 801564e:	4613      	mov	r3, r2
 8015650:	005b      	lsls	r3, r3, #1
 8015652:	4413      	add	r3, r2
 8015654:	00db      	lsls	r3, r3, #3
 8015656:	4a2e      	ldr	r2, [pc, #184]	; (8015710 <etharp_output_to_arp_index+0x124>)
 8015658:	4413      	add	r3, r2
 801565a:	3304      	adds	r3, #4
 801565c:	4619      	mov	r1, r3
 801565e:	68f8      	ldr	r0, [r7, #12]
 8015660:	f000 fb4c 	bl	8015cfc <etharp_request>
 8015664:	4603      	mov	r3, r0
 8015666:	2b00      	cmp	r3, #0
 8015668:	d138      	bne.n	80156dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801566a:	79fa      	ldrb	r2, [r7, #7]
 801566c:	4928      	ldr	r1, [pc, #160]	; (8015710 <etharp_output_to_arp_index+0x124>)
 801566e:	4613      	mov	r3, r2
 8015670:	005b      	lsls	r3, r3, #1
 8015672:	4413      	add	r3, r2
 8015674:	00db      	lsls	r3, r3, #3
 8015676:	440b      	add	r3, r1
 8015678:	3314      	adds	r3, #20
 801567a:	2203      	movs	r2, #3
 801567c:	701a      	strb	r2, [r3, #0]
 801567e:	e02d      	b.n	80156dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015680:	79fa      	ldrb	r2, [r7, #7]
 8015682:	4923      	ldr	r1, [pc, #140]	; (8015710 <etharp_output_to_arp_index+0x124>)
 8015684:	4613      	mov	r3, r2
 8015686:	005b      	lsls	r3, r3, #1
 8015688:	4413      	add	r3, r2
 801568a:	00db      	lsls	r3, r3, #3
 801568c:	440b      	add	r3, r1
 801568e:	3312      	adds	r3, #18
 8015690:	881b      	ldrh	r3, [r3, #0]
 8015692:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015696:	d321      	bcc.n	80156dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015698:	79fa      	ldrb	r2, [r7, #7]
 801569a:	4613      	mov	r3, r2
 801569c:	005b      	lsls	r3, r3, #1
 801569e:	4413      	add	r3, r2
 80156a0:	00db      	lsls	r3, r3, #3
 80156a2:	4a1b      	ldr	r2, [pc, #108]	; (8015710 <etharp_output_to_arp_index+0x124>)
 80156a4:	4413      	add	r3, r2
 80156a6:	1d19      	adds	r1, r3, #4
 80156a8:	79fa      	ldrb	r2, [r7, #7]
 80156aa:	4613      	mov	r3, r2
 80156ac:	005b      	lsls	r3, r3, #1
 80156ae:	4413      	add	r3, r2
 80156b0:	00db      	lsls	r3, r3, #3
 80156b2:	3308      	adds	r3, #8
 80156b4:	4a16      	ldr	r2, [pc, #88]	; (8015710 <etharp_output_to_arp_index+0x124>)
 80156b6:	4413      	add	r3, r2
 80156b8:	3304      	adds	r3, #4
 80156ba:	461a      	mov	r2, r3
 80156bc:	68f8      	ldr	r0, [r7, #12]
 80156be:	f000 fafb 	bl	8015cb8 <etharp_request_dst>
 80156c2:	4603      	mov	r3, r0
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d109      	bne.n	80156dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80156c8:	79fa      	ldrb	r2, [r7, #7]
 80156ca:	4911      	ldr	r1, [pc, #68]	; (8015710 <etharp_output_to_arp_index+0x124>)
 80156cc:	4613      	mov	r3, r2
 80156ce:	005b      	lsls	r3, r3, #1
 80156d0:	4413      	add	r3, r2
 80156d2:	00db      	lsls	r3, r3, #3
 80156d4:	440b      	add	r3, r1
 80156d6:	3314      	adds	r3, #20
 80156d8:	2203      	movs	r2, #3
 80156da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80156e2:	79fa      	ldrb	r2, [r7, #7]
 80156e4:	4613      	mov	r3, r2
 80156e6:	005b      	lsls	r3, r3, #1
 80156e8:	4413      	add	r3, r2
 80156ea:	00db      	lsls	r3, r3, #3
 80156ec:	3308      	adds	r3, #8
 80156ee:	4a08      	ldr	r2, [pc, #32]	; (8015710 <etharp_output_to_arp_index+0x124>)
 80156f0:	4413      	add	r3, r2
 80156f2:	1d1a      	adds	r2, r3, #4
 80156f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80156f8:	9300      	str	r3, [sp, #0]
 80156fa:	4613      	mov	r3, r2
 80156fc:	460a      	mov	r2, r1
 80156fe:	68b9      	ldr	r1, [r7, #8]
 8015700:	68f8      	ldr	r0, [r7, #12]
 8015702:	f001 fe51 	bl	80173a8 <ethernet_output>
 8015706:	4603      	mov	r3, r0
}
 8015708:	4618      	mov	r0, r3
 801570a:	3710      	adds	r7, #16
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	2000869c 	.word	0x2000869c
 8015714:	0801bf40 	.word	0x0801bf40
 8015718:	0801c0b0 	.word	0x0801c0b0
 801571c:	0801bfb8 	.word	0x0801bfb8

08015720 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b08a      	sub	sp, #40	; 0x28
 8015724:	af02      	add	r7, sp, #8
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d106      	bne.n	8015744 <etharp_output+0x24>
 8015736:	4b73      	ldr	r3, [pc, #460]	; (8015904 <etharp_output+0x1e4>)
 8015738:	f240 321e 	movw	r2, #798	; 0x31e
 801573c:	4972      	ldr	r1, [pc, #456]	; (8015908 <etharp_output+0x1e8>)
 801573e:	4873      	ldr	r0, [pc, #460]	; (801590c <etharp_output+0x1ec>)
 8015740:	f002 f8dc 	bl	80178fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d106      	bne.n	8015758 <etharp_output+0x38>
 801574a:	4b6e      	ldr	r3, [pc, #440]	; (8015904 <etharp_output+0x1e4>)
 801574c:	f240 321f 	movw	r2, #799	; 0x31f
 8015750:	496f      	ldr	r1, [pc, #444]	; (8015910 <etharp_output+0x1f0>)
 8015752:	486e      	ldr	r0, [pc, #440]	; (801590c <etharp_output+0x1ec>)
 8015754:	f002 f8d2 	bl	80178fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d106      	bne.n	801576c <etharp_output+0x4c>
 801575e:	4b69      	ldr	r3, [pc, #420]	; (8015904 <etharp_output+0x1e4>)
 8015760:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015764:	496b      	ldr	r1, [pc, #428]	; (8015914 <etharp_output+0x1f4>)
 8015766:	4869      	ldr	r0, [pc, #420]	; (801590c <etharp_output+0x1ec>)
 8015768:	f002 f8c8 	bl	80178fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	68f9      	ldr	r1, [r7, #12]
 8015772:	4618      	mov	r0, r3
 8015774:	f000 ff14 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 8015778:	4603      	mov	r3, r0
 801577a:	2b00      	cmp	r3, #0
 801577c:	d002      	beq.n	8015784 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801577e:	4b66      	ldr	r3, [pc, #408]	; (8015918 <etharp_output+0x1f8>)
 8015780:	61fb      	str	r3, [r7, #28]
 8015782:	e0af      	b.n	80158e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801578c:	2be0      	cmp	r3, #224	; 0xe0
 801578e:	d118      	bne.n	80157c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015790:	2301      	movs	r3, #1
 8015792:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015794:	2300      	movs	r3, #0
 8015796:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015798:	235e      	movs	r3, #94	; 0x5e
 801579a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	3301      	adds	r3, #1
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157a6:	b2db      	uxtb	r3, r3
 80157a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	3302      	adds	r3, #2
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	3303      	adds	r3, #3
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80157ba:	f107 0310 	add.w	r3, r7, #16
 80157be:	61fb      	str	r3, [r7, #28]
 80157c0:	e090      	b.n	80158e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681a      	ldr	r2, [r3, #0]
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	3304      	adds	r3, #4
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	405a      	eors	r2, r3
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	3308      	adds	r3, #8
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	4013      	ands	r3, r2
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d012      	beq.n	8015800 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80157e0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80157e4:	4293      	cmp	r3, r2
 80157e6:	d00b      	beq.n	8015800 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	330c      	adds	r3, #12
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d003      	beq.n	80157fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	330c      	adds	r3, #12
 80157f6:	61bb      	str	r3, [r7, #24]
 80157f8:	e002      	b.n	8015800 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80157fa:	f06f 0303 	mvn.w	r3, #3
 80157fe:	e07d      	b.n	80158fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015800:	4b46      	ldr	r3, [pc, #280]	; (801591c <etharp_output+0x1fc>)
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	4619      	mov	r1, r3
 8015806:	4a46      	ldr	r2, [pc, #280]	; (8015920 <etharp_output+0x200>)
 8015808:	460b      	mov	r3, r1
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	440b      	add	r3, r1
 801580e:	00db      	lsls	r3, r3, #3
 8015810:	4413      	add	r3, r2
 8015812:	3314      	adds	r3, #20
 8015814:	781b      	ldrb	r3, [r3, #0]
 8015816:	2b01      	cmp	r3, #1
 8015818:	d925      	bls.n	8015866 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801581a:	4b40      	ldr	r3, [pc, #256]	; (801591c <etharp_output+0x1fc>)
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	4619      	mov	r1, r3
 8015820:	4a3f      	ldr	r2, [pc, #252]	; (8015920 <etharp_output+0x200>)
 8015822:	460b      	mov	r3, r1
 8015824:	005b      	lsls	r3, r3, #1
 8015826:	440b      	add	r3, r1
 8015828:	00db      	lsls	r3, r3, #3
 801582a:	4413      	add	r3, r2
 801582c:	3308      	adds	r3, #8
 801582e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015830:	68fa      	ldr	r2, [r7, #12]
 8015832:	429a      	cmp	r2, r3
 8015834:	d117      	bne.n	8015866 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	681a      	ldr	r2, [r3, #0]
 801583a:	4b38      	ldr	r3, [pc, #224]	; (801591c <etharp_output+0x1fc>)
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	4618      	mov	r0, r3
 8015840:	4937      	ldr	r1, [pc, #220]	; (8015920 <etharp_output+0x200>)
 8015842:	4603      	mov	r3, r0
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	4403      	add	r3, r0
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	440b      	add	r3, r1
 801584c:	3304      	adds	r3, #4
 801584e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015850:	429a      	cmp	r2, r3
 8015852:	d108      	bne.n	8015866 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015854:	4b31      	ldr	r3, [pc, #196]	; (801591c <etharp_output+0x1fc>)
 8015856:	781b      	ldrb	r3, [r3, #0]
 8015858:	461a      	mov	r2, r3
 801585a:	68b9      	ldr	r1, [r7, #8]
 801585c:	68f8      	ldr	r0, [r7, #12]
 801585e:	f7ff fec5 	bl	80155ec <etharp_output_to_arp_index>
 8015862:	4603      	mov	r3, r0
 8015864:	e04a      	b.n	80158fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015866:	2300      	movs	r3, #0
 8015868:	75fb      	strb	r3, [r7, #23]
 801586a:	e031      	b.n	80158d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801586c:	7dfa      	ldrb	r2, [r7, #23]
 801586e:	492c      	ldr	r1, [pc, #176]	; (8015920 <etharp_output+0x200>)
 8015870:	4613      	mov	r3, r2
 8015872:	005b      	lsls	r3, r3, #1
 8015874:	4413      	add	r3, r2
 8015876:	00db      	lsls	r3, r3, #3
 8015878:	440b      	add	r3, r1
 801587a:	3314      	adds	r3, #20
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	2b01      	cmp	r3, #1
 8015880:	d923      	bls.n	80158ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015882:	7dfa      	ldrb	r2, [r7, #23]
 8015884:	4926      	ldr	r1, [pc, #152]	; (8015920 <etharp_output+0x200>)
 8015886:	4613      	mov	r3, r2
 8015888:	005b      	lsls	r3, r3, #1
 801588a:	4413      	add	r3, r2
 801588c:	00db      	lsls	r3, r3, #3
 801588e:	440b      	add	r3, r1
 8015890:	3308      	adds	r3, #8
 8015892:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015894:	68fa      	ldr	r2, [r7, #12]
 8015896:	429a      	cmp	r2, r3
 8015898:	d117      	bne.n	80158ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	6819      	ldr	r1, [r3, #0]
 801589e:	7dfa      	ldrb	r2, [r7, #23]
 80158a0:	481f      	ldr	r0, [pc, #124]	; (8015920 <etharp_output+0x200>)
 80158a2:	4613      	mov	r3, r2
 80158a4:	005b      	lsls	r3, r3, #1
 80158a6:	4413      	add	r3, r2
 80158a8:	00db      	lsls	r3, r3, #3
 80158aa:	4403      	add	r3, r0
 80158ac:	3304      	adds	r3, #4
 80158ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80158b0:	4299      	cmp	r1, r3
 80158b2:	d10a      	bne.n	80158ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80158b4:	4a19      	ldr	r2, [pc, #100]	; (801591c <etharp_output+0x1fc>)
 80158b6:	7dfb      	ldrb	r3, [r7, #23]
 80158b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80158ba:	7dfb      	ldrb	r3, [r7, #23]
 80158bc:	461a      	mov	r2, r3
 80158be:	68b9      	ldr	r1, [r7, #8]
 80158c0:	68f8      	ldr	r0, [r7, #12]
 80158c2:	f7ff fe93 	bl	80155ec <etharp_output_to_arp_index>
 80158c6:	4603      	mov	r3, r0
 80158c8:	e018      	b.n	80158fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80158ca:	7dfb      	ldrb	r3, [r7, #23]
 80158cc:	3301      	adds	r3, #1
 80158ce:	75fb      	strb	r3, [r7, #23]
 80158d0:	7dfb      	ldrb	r3, [r7, #23]
 80158d2:	2b09      	cmp	r3, #9
 80158d4:	d9ca      	bls.n	801586c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80158d6:	68ba      	ldr	r2, [r7, #8]
 80158d8:	69b9      	ldr	r1, [r7, #24]
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f000 f822 	bl	8015924 <etharp_query>
 80158e0:	4603      	mov	r3, r0
 80158e2:	e00b      	b.n	80158fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80158ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80158ee:	9300      	str	r3, [sp, #0]
 80158f0:	69fb      	ldr	r3, [r7, #28]
 80158f2:	68b9      	ldr	r1, [r7, #8]
 80158f4:	68f8      	ldr	r0, [r7, #12]
 80158f6:	f001 fd57 	bl	80173a8 <ethernet_output>
 80158fa:	4603      	mov	r3, r0
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3720      	adds	r7, #32
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}
 8015904:	0801bf40 	.word	0x0801bf40
 8015908:	0801c090 	.word	0x0801c090
 801590c:	0801bfb8 	.word	0x0801bfb8
 8015910:	0801c0e0 	.word	0x0801c0e0
 8015914:	0801c080 	.word	0x0801c080
 8015918:	0801c748 	.word	0x0801c748
 801591c:	2000878c 	.word	0x2000878c
 8015920:	2000869c 	.word	0x2000869c

08015924 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b08c      	sub	sp, #48	; 0x30
 8015928:	af02      	add	r7, sp, #8
 801592a:	60f8      	str	r0, [r7, #12]
 801592c:	60b9      	str	r1, [r7, #8]
 801592e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	332a      	adds	r3, #42	; 0x2a
 8015934:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015936:	23ff      	movs	r3, #255	; 0xff
 8015938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801593c:	2300      	movs	r3, #0
 801593e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	68f9      	ldr	r1, [r7, #12]
 8015946:	4618      	mov	r0, r3
 8015948:	f000 fe2a 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 801594c:	4603      	mov	r3, r0
 801594e:	2b00      	cmp	r3, #0
 8015950:	d10c      	bne.n	801596c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801595a:	2be0      	cmp	r3, #224	; 0xe0
 801595c:	d006      	beq.n	801596c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801595e:	68bb      	ldr	r3, [r7, #8]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d003      	beq.n	801596c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d102      	bne.n	8015972 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801596c:	f06f 030f 	mvn.w	r3, #15
 8015970:	e102      	b.n	8015b78 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015972:	68fa      	ldr	r2, [r7, #12]
 8015974:	2101      	movs	r1, #1
 8015976:	68b8      	ldr	r0, [r7, #8]
 8015978:	f7ff fb5c 	bl	8015034 <etharp_find_entry>
 801597c:	4603      	mov	r3, r0
 801597e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015980:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015984:	2b00      	cmp	r3, #0
 8015986:	da02      	bge.n	801598e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015988:	8a7b      	ldrh	r3, [r7, #18]
 801598a:	b25b      	sxtb	r3, r3
 801598c:	e0f4      	b.n	8015b78 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801598e:	8a7b      	ldrh	r3, [r7, #18]
 8015990:	2b7e      	cmp	r3, #126	; 0x7e
 8015992:	d906      	bls.n	80159a2 <etharp_query+0x7e>
 8015994:	4b7a      	ldr	r3, [pc, #488]	; (8015b80 <etharp_query+0x25c>)
 8015996:	f240 32c1 	movw	r2, #961	; 0x3c1
 801599a:	497a      	ldr	r1, [pc, #488]	; (8015b84 <etharp_query+0x260>)
 801599c:	487a      	ldr	r0, [pc, #488]	; (8015b88 <etharp_query+0x264>)
 801599e:	f001 ffad 	bl	80178fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80159a2:	8a7b      	ldrh	r3, [r7, #18]
 80159a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80159a6:	7c7a      	ldrb	r2, [r7, #17]
 80159a8:	4978      	ldr	r1, [pc, #480]	; (8015b8c <etharp_query+0x268>)
 80159aa:	4613      	mov	r3, r2
 80159ac:	005b      	lsls	r3, r3, #1
 80159ae:	4413      	add	r3, r2
 80159b0:	00db      	lsls	r3, r3, #3
 80159b2:	440b      	add	r3, r1
 80159b4:	3314      	adds	r3, #20
 80159b6:	781b      	ldrb	r3, [r3, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d115      	bne.n	80159e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80159bc:	2301      	movs	r3, #1
 80159be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80159c0:	7c7a      	ldrb	r2, [r7, #17]
 80159c2:	4972      	ldr	r1, [pc, #456]	; (8015b8c <etharp_query+0x268>)
 80159c4:	4613      	mov	r3, r2
 80159c6:	005b      	lsls	r3, r3, #1
 80159c8:	4413      	add	r3, r2
 80159ca:	00db      	lsls	r3, r3, #3
 80159cc:	440b      	add	r3, r1
 80159ce:	3314      	adds	r3, #20
 80159d0:	2201      	movs	r2, #1
 80159d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80159d4:	7c7a      	ldrb	r2, [r7, #17]
 80159d6:	496d      	ldr	r1, [pc, #436]	; (8015b8c <etharp_query+0x268>)
 80159d8:	4613      	mov	r3, r2
 80159da:	005b      	lsls	r3, r3, #1
 80159dc:	4413      	add	r3, r2
 80159de:	00db      	lsls	r3, r3, #3
 80159e0:	440b      	add	r3, r1
 80159e2:	3308      	adds	r3, #8
 80159e4:	68fa      	ldr	r2, [r7, #12]
 80159e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80159e8:	7c7a      	ldrb	r2, [r7, #17]
 80159ea:	4968      	ldr	r1, [pc, #416]	; (8015b8c <etharp_query+0x268>)
 80159ec:	4613      	mov	r3, r2
 80159ee:	005b      	lsls	r3, r3, #1
 80159f0:	4413      	add	r3, r2
 80159f2:	00db      	lsls	r3, r3, #3
 80159f4:	440b      	add	r3, r1
 80159f6:	3314      	adds	r3, #20
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	2b01      	cmp	r3, #1
 80159fc:	d011      	beq.n	8015a22 <etharp_query+0xfe>
 80159fe:	7c7a      	ldrb	r2, [r7, #17]
 8015a00:	4962      	ldr	r1, [pc, #392]	; (8015b8c <etharp_query+0x268>)
 8015a02:	4613      	mov	r3, r2
 8015a04:	005b      	lsls	r3, r3, #1
 8015a06:	4413      	add	r3, r2
 8015a08:	00db      	lsls	r3, r3, #3
 8015a0a:	440b      	add	r3, r1
 8015a0c:	3314      	adds	r3, #20
 8015a0e:	781b      	ldrb	r3, [r3, #0]
 8015a10:	2b01      	cmp	r3, #1
 8015a12:	d806      	bhi.n	8015a22 <etharp_query+0xfe>
 8015a14:	4b5a      	ldr	r3, [pc, #360]	; (8015b80 <etharp_query+0x25c>)
 8015a16:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015a1a:	495d      	ldr	r1, [pc, #372]	; (8015b90 <etharp_query+0x26c>)
 8015a1c:	485a      	ldr	r0, [pc, #360]	; (8015b88 <etharp_query+0x264>)
 8015a1e:	f001 ff6d 	bl	80178fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015a22:	6a3b      	ldr	r3, [r7, #32]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d102      	bne.n	8015a2e <etharp_query+0x10a>
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d10c      	bne.n	8015a48 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015a2e:	68b9      	ldr	r1, [r7, #8]
 8015a30:	68f8      	ldr	r0, [r7, #12]
 8015a32:	f000 f963 	bl	8015cfc <etharp_request>
 8015a36:	4603      	mov	r3, r0
 8015a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d102      	bne.n	8015a48 <etharp_query+0x124>
      return result;
 8015a42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015a46:	e097      	b.n	8015b78 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d106      	bne.n	8015a5c <etharp_query+0x138>
 8015a4e:	4b4c      	ldr	r3, [pc, #304]	; (8015b80 <etharp_query+0x25c>)
 8015a50:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015a54:	494f      	ldr	r1, [pc, #316]	; (8015b94 <etharp_query+0x270>)
 8015a56:	484c      	ldr	r0, [pc, #304]	; (8015b88 <etharp_query+0x264>)
 8015a58:	f001 ff50 	bl	80178fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015a5c:	7c7a      	ldrb	r2, [r7, #17]
 8015a5e:	494b      	ldr	r1, [pc, #300]	; (8015b8c <etharp_query+0x268>)
 8015a60:	4613      	mov	r3, r2
 8015a62:	005b      	lsls	r3, r3, #1
 8015a64:	4413      	add	r3, r2
 8015a66:	00db      	lsls	r3, r3, #3
 8015a68:	440b      	add	r3, r1
 8015a6a:	3314      	adds	r3, #20
 8015a6c:	781b      	ldrb	r3, [r3, #0]
 8015a6e:	2b01      	cmp	r3, #1
 8015a70:	d918      	bls.n	8015aa4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015a72:	4a49      	ldr	r2, [pc, #292]	; (8015b98 <etharp_query+0x274>)
 8015a74:	7c7b      	ldrb	r3, [r7, #17]
 8015a76:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015a78:	7c7a      	ldrb	r2, [r7, #17]
 8015a7a:	4613      	mov	r3, r2
 8015a7c:	005b      	lsls	r3, r3, #1
 8015a7e:	4413      	add	r3, r2
 8015a80:	00db      	lsls	r3, r3, #3
 8015a82:	3308      	adds	r3, #8
 8015a84:	4a41      	ldr	r2, [pc, #260]	; (8015b8c <etharp_query+0x268>)
 8015a86:	4413      	add	r3, r2
 8015a88:	1d1a      	adds	r2, r3, #4
 8015a8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a8e:	9300      	str	r3, [sp, #0]
 8015a90:	4613      	mov	r3, r2
 8015a92:	697a      	ldr	r2, [r7, #20]
 8015a94:	6879      	ldr	r1, [r7, #4]
 8015a96:	68f8      	ldr	r0, [r7, #12]
 8015a98:	f001 fc86 	bl	80173a8 <ethernet_output>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015aa2:	e067      	b.n	8015b74 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015aa4:	7c7a      	ldrb	r2, [r7, #17]
 8015aa6:	4939      	ldr	r1, [pc, #228]	; (8015b8c <etharp_query+0x268>)
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	005b      	lsls	r3, r3, #1
 8015aac:	4413      	add	r3, r2
 8015aae:	00db      	lsls	r3, r3, #3
 8015ab0:	440b      	add	r3, r1
 8015ab2:	3314      	adds	r3, #20
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	2b01      	cmp	r3, #1
 8015ab8:	d15c      	bne.n	8015b74 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015aba:	2300      	movs	r3, #0
 8015abc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ac2:	e01c      	b.n	8015afe <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015ac4:	69fb      	ldr	r3, [r7, #28]
 8015ac6:	895a      	ldrh	r2, [r3, #10]
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	891b      	ldrh	r3, [r3, #8]
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d10a      	bne.n	8015ae6 <etharp_query+0x1c2>
 8015ad0:	69fb      	ldr	r3, [r7, #28]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d006      	beq.n	8015ae6 <etharp_query+0x1c2>
 8015ad8:	4b29      	ldr	r3, [pc, #164]	; (8015b80 <etharp_query+0x25c>)
 8015ada:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015ade:	492f      	ldr	r1, [pc, #188]	; (8015b9c <etharp_query+0x278>)
 8015ae0:	4829      	ldr	r0, [pc, #164]	; (8015b88 <etharp_query+0x264>)
 8015ae2:	f001 ff0b 	bl	80178fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015ae6:	69fb      	ldr	r3, [r7, #28]
 8015ae8:	7b1b      	ldrb	r3, [r3, #12]
 8015aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d002      	beq.n	8015af8 <etharp_query+0x1d4>
        copy_needed = 1;
 8015af2:	2301      	movs	r3, #1
 8015af4:	61bb      	str	r3, [r7, #24]
        break;
 8015af6:	e005      	b.n	8015b04 <etharp_query+0x1e0>
      }
      p = p->next;
 8015af8:	69fb      	ldr	r3, [r7, #28]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015afe:	69fb      	ldr	r3, [r7, #28]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d1df      	bne.n	8015ac4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8015b04:	69bb      	ldr	r3, [r7, #24]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d007      	beq.n	8015b1a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015b10:	200e      	movs	r0, #14
 8015b12:	f7f6 fc1d 	bl	800c350 <pbuf_clone>
 8015b16:	61f8      	str	r0, [r7, #28]
 8015b18:	e004      	b.n	8015b24 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015b1e:	69f8      	ldr	r0, [r7, #28]
 8015b20:	f7f6 fa44 	bl	800bfac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015b24:	69fb      	ldr	r3, [r7, #28]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d021      	beq.n	8015b6e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015b2a:	7c7a      	ldrb	r2, [r7, #17]
 8015b2c:	4917      	ldr	r1, [pc, #92]	; (8015b8c <etharp_query+0x268>)
 8015b2e:	4613      	mov	r3, r2
 8015b30:	005b      	lsls	r3, r3, #1
 8015b32:	4413      	add	r3, r2
 8015b34:	00db      	lsls	r3, r3, #3
 8015b36:	440b      	add	r3, r1
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d00a      	beq.n	8015b54 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015b3e:	7c7a      	ldrb	r2, [r7, #17]
 8015b40:	4912      	ldr	r1, [pc, #72]	; (8015b8c <etharp_query+0x268>)
 8015b42:	4613      	mov	r3, r2
 8015b44:	005b      	lsls	r3, r3, #1
 8015b46:	4413      	add	r3, r2
 8015b48:	00db      	lsls	r3, r3, #3
 8015b4a:	440b      	add	r3, r1
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7f6 f986 	bl	800be60 <pbuf_free>
      }
      arp_table[i].q = p;
 8015b54:	7c7a      	ldrb	r2, [r7, #17]
 8015b56:	490d      	ldr	r1, [pc, #52]	; (8015b8c <etharp_query+0x268>)
 8015b58:	4613      	mov	r3, r2
 8015b5a:	005b      	lsls	r3, r3, #1
 8015b5c:	4413      	add	r3, r2
 8015b5e:	00db      	lsls	r3, r3, #3
 8015b60:	440b      	add	r3, r1
 8015b62:	69fa      	ldr	r2, [r7, #28]
 8015b64:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015b66:	2300      	movs	r3, #0
 8015b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b6c:	e002      	b.n	8015b74 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015b6e:	23ff      	movs	r3, #255	; 0xff
 8015b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3728      	adds	r7, #40	; 0x28
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	0801bf40 	.word	0x0801bf40
 8015b84:	0801c0ec 	.word	0x0801c0ec
 8015b88:	0801bfb8 	.word	0x0801bfb8
 8015b8c:	2000869c 	.word	0x2000869c
 8015b90:	0801c0fc 	.word	0x0801c0fc
 8015b94:	0801c0e0 	.word	0x0801c0e0
 8015b98:	2000878c 	.word	0x2000878c
 8015b9c:	0801c124 	.word	0x0801c124

08015ba0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b08a      	sub	sp, #40	; 0x28
 8015ba4:	af02      	add	r7, sp, #8
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	60b9      	str	r1, [r7, #8]
 8015baa:	607a      	str	r2, [r7, #4]
 8015bac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d106      	bne.n	8015bc6 <etharp_raw+0x26>
 8015bb8:	4b3a      	ldr	r3, [pc, #232]	; (8015ca4 <etharp_raw+0x104>)
 8015bba:	f240 4257 	movw	r2, #1111	; 0x457
 8015bbe:	493a      	ldr	r1, [pc, #232]	; (8015ca8 <etharp_raw+0x108>)
 8015bc0:	483a      	ldr	r0, [pc, #232]	; (8015cac <etharp_raw+0x10c>)
 8015bc2:	f001 fe9b 	bl	80178fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015bc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015bca:	211c      	movs	r1, #28
 8015bcc:	200e      	movs	r0, #14
 8015bce:	f7f5 fe67 	bl	800b8a0 <pbuf_alloc>
 8015bd2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015bd4:	69bb      	ldr	r3, [r7, #24]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d102      	bne.n	8015be0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015bda:	f04f 33ff 	mov.w	r3, #4294967295
 8015bde:	e05d      	b.n	8015c9c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015be0:	69bb      	ldr	r3, [r7, #24]
 8015be2:	895b      	ldrh	r3, [r3, #10]
 8015be4:	2b1b      	cmp	r3, #27
 8015be6:	d806      	bhi.n	8015bf6 <etharp_raw+0x56>
 8015be8:	4b2e      	ldr	r3, [pc, #184]	; (8015ca4 <etharp_raw+0x104>)
 8015bea:	f240 4263 	movw	r2, #1123	; 0x463
 8015bee:	4930      	ldr	r1, [pc, #192]	; (8015cb0 <etharp_raw+0x110>)
 8015bf0:	482e      	ldr	r0, [pc, #184]	; (8015cac <etharp_raw+0x10c>)
 8015bf2:	f001 fe83 	bl	80178fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015bf6:	69bb      	ldr	r3, [r7, #24]
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015bfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7f4 fd7a 	bl	800a6f8 <lwip_htons>
 8015c04:	4603      	mov	r3, r0
 8015c06:	461a      	mov	r2, r3
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c12:	2b06      	cmp	r3, #6
 8015c14:	d006      	beq.n	8015c24 <etharp_raw+0x84>
 8015c16:	4b23      	ldr	r3, [pc, #140]	; (8015ca4 <etharp_raw+0x104>)
 8015c18:	f240 426a 	movw	r2, #1130	; 0x46a
 8015c1c:	4925      	ldr	r1, [pc, #148]	; (8015cb4 <etharp_raw+0x114>)
 8015c1e:	4823      	ldr	r0, [pc, #140]	; (8015cac <etharp_raw+0x10c>)
 8015c20:	f001 fe6c 	bl	80178fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	3308      	adds	r3, #8
 8015c28:	2206      	movs	r2, #6
 8015c2a:	6839      	ldr	r1, [r7, #0]
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f001 fe38 	bl	80178a2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	3312      	adds	r3, #18
 8015c36:	2206      	movs	r2, #6
 8015c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f001 fe31 	bl	80178a2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	330e      	adds	r3, #14
 8015c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c46:	6812      	ldr	r2, [r2, #0]
 8015c48:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	3318      	adds	r3, #24
 8015c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c50:	6812      	ldr	r2, [r2, #0]
 8015c52:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	2200      	movs	r2, #0
 8015c58:	701a      	strb	r2, [r3, #0]
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	f042 0201 	orr.w	r2, r2, #1
 8015c60:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	2200      	movs	r2, #0
 8015c66:	f042 0208 	orr.w	r2, r2, #8
 8015c6a:	709a      	strb	r2, [r3, #2]
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	2206      	movs	r2, #6
 8015c74:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015c76:	697b      	ldr	r3, [r7, #20]
 8015c78:	2204      	movs	r2, #4
 8015c7a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015c7c:	f640 0306 	movw	r3, #2054	; 0x806
 8015c80:	9300      	str	r3, [sp, #0]
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	68ba      	ldr	r2, [r7, #8]
 8015c86:	69b9      	ldr	r1, [r7, #24]
 8015c88:	68f8      	ldr	r0, [r7, #12]
 8015c8a:	f001 fb8d 	bl	80173a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015c8e:	69b8      	ldr	r0, [r7, #24]
 8015c90:	f7f6 f8e6 	bl	800be60 <pbuf_free>
  p = NULL;
 8015c94:	2300      	movs	r3, #0
 8015c96:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015c98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3720      	adds	r7, #32
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}
 8015ca4:	0801bf40 	.word	0x0801bf40
 8015ca8:	0801c090 	.word	0x0801c090
 8015cac:	0801bfb8 	.word	0x0801bfb8
 8015cb0:	0801c140 	.word	0x0801c140
 8015cb4:	0801c174 	.word	0x0801c174

08015cb8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b088      	sub	sp, #32
 8015cbc:	af04      	add	r7, sp, #16
 8015cbe:	60f8      	str	r0, [r7, #12]
 8015cc0:	60b9      	str	r1, [r7, #8]
 8015cc2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015cd4:	2201      	movs	r2, #1
 8015cd6:	9203      	str	r2, [sp, #12]
 8015cd8:	68ba      	ldr	r2, [r7, #8]
 8015cda:	9202      	str	r2, [sp, #8]
 8015cdc:	4a06      	ldr	r2, [pc, #24]	; (8015cf8 <etharp_request_dst+0x40>)
 8015cde:	9201      	str	r2, [sp, #4]
 8015ce0:	9300      	str	r3, [sp, #0]
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	687a      	ldr	r2, [r7, #4]
 8015ce6:	68f8      	ldr	r0, [r7, #12]
 8015ce8:	f7ff ff5a 	bl	8015ba0 <etharp_raw>
 8015cec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3710      	adds	r7, #16
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}
 8015cf6:	bf00      	nop
 8015cf8:	0801c750 	.word	0x0801c750

08015cfc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b082      	sub	sp, #8
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
 8015d04:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015d06:	4a05      	ldr	r2, [pc, #20]	; (8015d1c <etharp_request+0x20>)
 8015d08:	6839      	ldr	r1, [r7, #0]
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f7ff ffd4 	bl	8015cb8 <etharp_request_dst>
 8015d10:	4603      	mov	r3, r0
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3708      	adds	r7, #8
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
 8015d1a:	bf00      	nop
 8015d1c:	0801c748 	.word	0x0801c748

08015d20 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b08e      	sub	sp, #56	; 0x38
 8015d24:	af04      	add	r7, sp, #16
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015d2a:	4b79      	ldr	r3, [pc, #484]	; (8015f10 <icmp_input+0x1f0>)
 8015d2c:	689b      	ldr	r3, [r3, #8]
 8015d2e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	f003 030f 	and.w	r3, r3, #15
 8015d38:	b2db      	uxtb	r3, r3
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015d40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d42:	2b13      	cmp	r3, #19
 8015d44:	f240 80cd 	bls.w	8015ee2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	895b      	ldrh	r3, [r3, #10]
 8015d4c:	2b03      	cmp	r3, #3
 8015d4e:	f240 80ca 	bls.w	8015ee6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015d5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	f000 80b7 	beq.w	8015ed4 <icmp_input+0x1b4>
 8015d66:	2b08      	cmp	r3, #8
 8015d68:	f040 80b7 	bne.w	8015eda <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015d6c:	4b69      	ldr	r3, [pc, #420]	; (8015f14 <icmp_input+0x1f4>)
 8015d6e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015d70:	4b67      	ldr	r3, [pc, #412]	; (8015f10 <icmp_input+0x1f0>)
 8015d72:	695b      	ldr	r3, [r3, #20]
 8015d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d78:	2be0      	cmp	r3, #224	; 0xe0
 8015d7a:	f000 80bb 	beq.w	8015ef4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015d7e:	4b64      	ldr	r3, [pc, #400]	; (8015f10 <icmp_input+0x1f0>)
 8015d80:	695a      	ldr	r2, [r3, #20]
 8015d82:	4b63      	ldr	r3, [pc, #396]	; (8015f10 <icmp_input+0x1f0>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	4619      	mov	r1, r3
 8015d88:	4610      	mov	r0, r2
 8015d8a:	f000 fc09 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	f040 80b1 	bne.w	8015ef8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	891b      	ldrh	r3, [r3, #8]
 8015d9a:	2b07      	cmp	r3, #7
 8015d9c:	f240 80a5 	bls.w	8015eea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015da2:	330e      	adds	r3, #14
 8015da4:	4619      	mov	r1, r3
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f7f5 ffc4 	bl	800bd34 <pbuf_add_header>
 8015dac:	4603      	mov	r3, r0
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d04b      	beq.n	8015e4a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	891a      	ldrh	r2, [r3, #8]
 8015db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015db8:	4413      	add	r3, r2
 8015dba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	891b      	ldrh	r3, [r3, #8]
 8015dc0:	8b7a      	ldrh	r2, [r7, #26]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	f0c0 809a 	bcc.w	8015efc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015dc8:	8b7b      	ldrh	r3, [r7, #26]
 8015dca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015dce:	4619      	mov	r1, r3
 8015dd0:	200e      	movs	r0, #14
 8015dd2:	f7f5 fd65 	bl	800b8a0 <pbuf_alloc>
 8015dd6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	f000 8090 	beq.w	8015f00 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	895b      	ldrh	r3, [r3, #10]
 8015de4:	461a      	mov	r2, r3
 8015de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015de8:	3308      	adds	r3, #8
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d203      	bcs.n	8015df6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015dee:	6978      	ldr	r0, [r7, #20]
 8015df0:	f7f6 f836 	bl	800be60 <pbuf_free>
          goto icmperr;
 8015df4:	e085      	b.n	8015f02 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f001 fd4f 	bl	80178a2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e06:	4619      	mov	r1, r3
 8015e08:	6978      	ldr	r0, [r7, #20]
 8015e0a:	f7f5 ffa3 	bl	800bd54 <pbuf_remove_header>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d009      	beq.n	8015e28 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015e14:	4b40      	ldr	r3, [pc, #256]	; (8015f18 <icmp_input+0x1f8>)
 8015e16:	22b6      	movs	r2, #182	; 0xb6
 8015e18:	4940      	ldr	r1, [pc, #256]	; (8015f1c <icmp_input+0x1fc>)
 8015e1a:	4841      	ldr	r0, [pc, #260]	; (8015f20 <icmp_input+0x200>)
 8015e1c:	f001 fd6e 	bl	80178fc <iprintf>
          pbuf_free(r);
 8015e20:	6978      	ldr	r0, [r7, #20]
 8015e22:	f7f6 f81d 	bl	800be60 <pbuf_free>
          goto icmperr;
 8015e26:	e06c      	b.n	8015f02 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015e28:	6879      	ldr	r1, [r7, #4]
 8015e2a:	6978      	ldr	r0, [r7, #20]
 8015e2c:	f7f6 f94c 	bl	800c0c8 <pbuf_copy>
 8015e30:	4603      	mov	r3, r0
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d003      	beq.n	8015e3e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015e36:	6978      	ldr	r0, [r7, #20]
 8015e38:	f7f6 f812 	bl	800be60 <pbuf_free>
          goto icmperr;
 8015e3c:	e061      	b.n	8015f02 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f7f6 f80e 	bl	800be60 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	607b      	str	r3, [r7, #4]
 8015e48:	e00f      	b.n	8015e6a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e4c:	330e      	adds	r3, #14
 8015e4e:	4619      	mov	r1, r3
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f7f5 ff7f 	bl	800bd54 <pbuf_remove_header>
 8015e56:	4603      	mov	r3, r0
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d006      	beq.n	8015e6a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015e5c:	4b2e      	ldr	r3, [pc, #184]	; (8015f18 <icmp_input+0x1f8>)
 8015e5e:	22c7      	movs	r2, #199	; 0xc7
 8015e60:	4930      	ldr	r1, [pc, #192]	; (8015f24 <icmp_input+0x204>)
 8015e62:	482f      	ldr	r0, [pc, #188]	; (8015f20 <icmp_input+0x200>)
 8015e64:	f001 fd4a 	bl	80178fc <iprintf>
          goto icmperr;
 8015e68:	e04b      	b.n	8015f02 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	685b      	ldr	r3, [r3, #4]
 8015e6e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015e70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e72:	4619      	mov	r1, r3
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f7f5 ff5d 	bl	800bd34 <pbuf_add_header>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d12b      	bne.n	8015ed8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	685b      	ldr	r3, [r3, #4]
 8015e84:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	681a      	ldr	r2, [r3, #0]
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015e8e:	4b20      	ldr	r3, [pc, #128]	; (8015f10 <icmp_input+0x1f0>)
 8015e90:	691a      	ldr	r2, [r3, #16]
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015e96:	693b      	ldr	r3, [r7, #16]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	709a      	strb	r2, [r3, #2]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	22ff      	movs	r2, #255	; 0xff
 8015eaa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	729a      	strb	r2, [r3, #10]
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	9302      	str	r3, [sp, #8]
 8015eba:	2301      	movs	r3, #1
 8015ebc:	9301      	str	r3, [sp, #4]
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	23ff      	movs	r3, #255	; 0xff
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	69f9      	ldr	r1, [r7, #28]
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f000 fa91 	bl	80163f0 <ip4_output_if>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015ed2:	e001      	b.n	8015ed8 <icmp_input+0x1b8>
      break;
 8015ed4:	bf00      	nop
 8015ed6:	e000      	b.n	8015eda <icmp_input+0x1ba>
      break;
 8015ed8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f7f5 ffc0 	bl	800be60 <pbuf_free>
  return;
 8015ee0:	e013      	b.n	8015f0a <icmp_input+0x1ea>
    goto lenerr;
 8015ee2:	bf00      	nop
 8015ee4:	e002      	b.n	8015eec <icmp_input+0x1cc>
    goto lenerr;
 8015ee6:	bf00      	nop
 8015ee8:	e000      	b.n	8015eec <icmp_input+0x1cc>
        goto lenerr;
 8015eea:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f7f5 ffb7 	bl	800be60 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015ef2:	e00a      	b.n	8015f0a <icmp_input+0x1ea>
        goto icmperr;
 8015ef4:	bf00      	nop
 8015ef6:	e004      	b.n	8015f02 <icmp_input+0x1e2>
        goto icmperr;
 8015ef8:	bf00      	nop
 8015efa:	e002      	b.n	8015f02 <icmp_input+0x1e2>
          goto icmperr;
 8015efc:	bf00      	nop
 8015efe:	e000      	b.n	8015f02 <icmp_input+0x1e2>
          goto icmperr;
 8015f00:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f7f5 ffac 	bl	800be60 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015f08:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015f0a:	3728      	adds	r7, #40	; 0x28
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}
 8015f10:	2000bda8 	.word	0x2000bda8
 8015f14:	2000bdbc 	.word	0x2000bdbc
 8015f18:	0801c1b8 	.word	0x0801c1b8
 8015f1c:	0801c1f0 	.word	0x0801c1f0
 8015f20:	0801c228 	.word	0x0801c228
 8015f24:	0801c250 	.word	0x0801c250

08015f28 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	460b      	mov	r3, r1
 8015f32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015f34:	78fb      	ldrb	r3, [r7, #3]
 8015f36:	461a      	mov	r2, r3
 8015f38:	2103      	movs	r1, #3
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f000 f814 	bl	8015f68 <icmp_send_response>
}
 8015f40:	bf00      	nop
 8015f42:	3708      	adds	r7, #8
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}

08015f48 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
 8015f50:	460b      	mov	r3, r1
 8015f52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015f54:	78fb      	ldrb	r3, [r7, #3]
 8015f56:	461a      	mov	r2, r3
 8015f58:	210b      	movs	r1, #11
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f000 f804 	bl	8015f68 <icmp_send_response>
}
 8015f60:	bf00      	nop
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08c      	sub	sp, #48	; 0x30
 8015f6c:	af04      	add	r7, sp, #16
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	460b      	mov	r3, r1
 8015f72:	70fb      	strb	r3, [r7, #3]
 8015f74:	4613      	mov	r3, r2
 8015f76:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015f78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f7c:	2124      	movs	r1, #36	; 0x24
 8015f7e:	2022      	movs	r0, #34	; 0x22
 8015f80:	f7f5 fc8e 	bl	800b8a0 <pbuf_alloc>
 8015f84:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015f86:	69fb      	ldr	r3, [r7, #28]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d04c      	beq.n	8016026 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	895b      	ldrh	r3, [r3, #10]
 8015f90:	2b23      	cmp	r3, #35	; 0x23
 8015f92:	d806      	bhi.n	8015fa2 <icmp_send_response+0x3a>
 8015f94:	4b26      	ldr	r3, [pc, #152]	; (8016030 <icmp_send_response+0xc8>)
 8015f96:	f240 1269 	movw	r2, #361	; 0x169
 8015f9a:	4926      	ldr	r1, [pc, #152]	; (8016034 <icmp_send_response+0xcc>)
 8015f9c:	4826      	ldr	r0, [pc, #152]	; (8016038 <icmp_send_response+0xd0>)
 8015f9e:	f001 fcad 	bl	80178fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015fa8:	69fb      	ldr	r3, [r7, #28]
 8015faa:	685b      	ldr	r3, [r3, #4]
 8015fac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015fae:	697b      	ldr	r3, [r7, #20]
 8015fb0:	78fa      	ldrb	r2, [r7, #3]
 8015fb2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	78ba      	ldrb	r2, [r7, #2]
 8015fb8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	711a      	strb	r2, [r3, #4]
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	719a      	strb	r2, [r3, #6]
 8015fca:	2200      	movs	r2, #0
 8015fcc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015fce:	69fb      	ldr	r3, [r7, #28]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	f103 0008 	add.w	r0, r3, #8
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	685b      	ldr	r3, [r3, #4]
 8015fda:	221c      	movs	r2, #28
 8015fdc:	4619      	mov	r1, r3
 8015fde:	f001 fc60 	bl	80178a2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015fe2:	69bb      	ldr	r3, [r7, #24]
 8015fe4:	68db      	ldr	r3, [r3, #12]
 8015fe6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015fe8:	f107 030c 	add.w	r3, r7, #12
 8015fec:	4618      	mov	r0, r3
 8015fee:	f000 f825 	bl	801603c <ip4_route>
 8015ff2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d011      	beq.n	801601e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015ffa:	697b      	ldr	r3, [r7, #20]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	709a      	strb	r2, [r3, #2]
 8016000:	2200      	movs	r2, #0
 8016002:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016004:	f107 020c 	add.w	r2, r7, #12
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	9302      	str	r3, [sp, #8]
 801600c:	2301      	movs	r3, #1
 801600e:	9301      	str	r3, [sp, #4]
 8016010:	2300      	movs	r3, #0
 8016012:	9300      	str	r3, [sp, #0]
 8016014:	23ff      	movs	r3, #255	; 0xff
 8016016:	2100      	movs	r1, #0
 8016018:	69f8      	ldr	r0, [r7, #28]
 801601a:	f000 f9e9 	bl	80163f0 <ip4_output_if>
  }
  pbuf_free(q);
 801601e:	69f8      	ldr	r0, [r7, #28]
 8016020:	f7f5 ff1e 	bl	800be60 <pbuf_free>
 8016024:	e000      	b.n	8016028 <icmp_send_response+0xc0>
    return;
 8016026:	bf00      	nop
}
 8016028:	3720      	adds	r7, #32
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	0801c1b8 	.word	0x0801c1b8
 8016034:	0801c284 	.word	0x0801c284
 8016038:	0801c228 	.word	0x0801c228

0801603c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801603c:	b480      	push	{r7}
 801603e:	b085      	sub	sp, #20
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016044:	4b33      	ldr	r3, [pc, #204]	; (8016114 <ip4_route+0xd8>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	60fb      	str	r3, [r7, #12]
 801604a:	e036      	b.n	80160ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016052:	f003 0301 	and.w	r3, r3, #1
 8016056:	b2db      	uxtb	r3, r3
 8016058:	2b00      	cmp	r3, #0
 801605a:	d02b      	beq.n	80160b4 <ip4_route+0x78>
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016062:	089b      	lsrs	r3, r3, #2
 8016064:	f003 0301 	and.w	r3, r3, #1
 8016068:	b2db      	uxtb	r3, r3
 801606a:	2b00      	cmp	r3, #0
 801606c:	d022      	beq.n	80160b4 <ip4_route+0x78>
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	3304      	adds	r3, #4
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d01d      	beq.n	80160b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	681a      	ldr	r2, [r3, #0]
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	3304      	adds	r3, #4
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	405a      	eors	r2, r3
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	3308      	adds	r3, #8
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	4013      	ands	r3, r2
 801608c:	2b00      	cmp	r3, #0
 801608e:	d101      	bne.n	8016094 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	e038      	b.n	8016106 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801609a:	f003 0302 	and.w	r3, r3, #2
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d108      	bne.n	80160b4 <ip4_route+0x78>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681a      	ldr	r2, [r3, #0]
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	330c      	adds	r3, #12
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d101      	bne.n	80160b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	e028      	b.n	8016106 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	60fb      	str	r3, [r7, #12]
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d1c5      	bne.n	801604c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80160c0:	4b15      	ldr	r3, [pc, #84]	; (8016118 <ip4_route+0xdc>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d01a      	beq.n	80160fe <ip4_route+0xc2>
 80160c8:	4b13      	ldr	r3, [pc, #76]	; (8016118 <ip4_route+0xdc>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80160d0:	f003 0301 	and.w	r3, r3, #1
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d012      	beq.n	80160fe <ip4_route+0xc2>
 80160d8:	4b0f      	ldr	r3, [pc, #60]	; (8016118 <ip4_route+0xdc>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80160e0:	f003 0304 	and.w	r3, r3, #4
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d00a      	beq.n	80160fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80160e8:	4b0b      	ldr	r3, [pc, #44]	; (8016118 <ip4_route+0xdc>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	3304      	adds	r3, #4
 80160ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d004      	beq.n	80160fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	b2db      	uxtb	r3, r3
 80160fa:	2b7f      	cmp	r3, #127	; 0x7f
 80160fc:	d101      	bne.n	8016102 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80160fe:	2300      	movs	r3, #0
 8016100:	e001      	b.n	8016106 <ip4_route+0xca>
  }

  return netif_default;
 8016102:	4b05      	ldr	r3, [pc, #20]	; (8016118 <ip4_route+0xdc>)
 8016104:	681b      	ldr	r3, [r3, #0]
}
 8016106:	4618      	mov	r0, r3
 8016108:	3714      	adds	r7, #20
 801610a:	46bd      	mov	sp, r7
 801610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016110:	4770      	bx	lr
 8016112:	bf00      	nop
 8016114:	2000f4cc 	.word	0x2000f4cc
 8016118:	2000f4d0 	.word	0x2000f4d0

0801611c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b082      	sub	sp, #8
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801612a:	f003 0301 	and.w	r3, r3, #1
 801612e:	b2db      	uxtb	r3, r3
 8016130:	2b00      	cmp	r3, #0
 8016132:	d016      	beq.n	8016162 <ip4_input_accept+0x46>
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	3304      	adds	r3, #4
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d011      	beq.n	8016162 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801613e:	4b0b      	ldr	r3, [pc, #44]	; (801616c <ip4_input_accept+0x50>)
 8016140:	695a      	ldr	r2, [r3, #20]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	3304      	adds	r3, #4
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	429a      	cmp	r2, r3
 801614a:	d008      	beq.n	801615e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801614c:	4b07      	ldr	r3, [pc, #28]	; (801616c <ip4_input_accept+0x50>)
 801614e:	695b      	ldr	r3, [r3, #20]
 8016150:	6879      	ldr	r1, [r7, #4]
 8016152:	4618      	mov	r0, r3
 8016154:	f000 fa24 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 8016158:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801615a:	2b00      	cmp	r3, #0
 801615c:	d001      	beq.n	8016162 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801615e:	2301      	movs	r3, #1
 8016160:	e000      	b.n	8016164 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016162:	2300      	movs	r3, #0
}
 8016164:	4618      	mov	r0, r3
 8016166:	3708      	adds	r7, #8
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}
 801616c:	2000bda8 	.word	0x2000bda8

08016170 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b088      	sub	sp, #32
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
 8016178:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801617a:	2301      	movs	r3, #1
 801617c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016184:	69fb      	ldr	r3, [r7, #28]
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	091b      	lsrs	r3, r3, #4
 801618a:	b2db      	uxtb	r3, r3
 801618c:	2b04      	cmp	r3, #4
 801618e:	d004      	beq.n	801619a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f7f5 fe65 	bl	800be60 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016196:	2300      	movs	r3, #0
 8016198:	e121      	b.n	80163de <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801619a:	69fb      	ldr	r3, [r7, #28]
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	f003 030f 	and.w	r3, r3, #15
 80161a2:	b2db      	uxtb	r3, r3
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80161aa:	69fb      	ldr	r3, [r7, #28]
 80161ac:	885b      	ldrh	r3, [r3, #2]
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7f4 faa1 	bl	800a6f8 <lwip_htons>
 80161b6:	4603      	mov	r3, r0
 80161b8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	891b      	ldrh	r3, [r3, #8]
 80161be:	8a3a      	ldrh	r2, [r7, #16]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	d204      	bcs.n	80161ce <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80161c4:	8a3b      	ldrh	r3, [r7, #16]
 80161c6:	4619      	mov	r1, r3
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f7f5 fcc3 	bl	800bb54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	895b      	ldrh	r3, [r3, #10]
 80161d2:	8a7a      	ldrh	r2, [r7, #18]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d807      	bhi.n	80161e8 <ip4_input+0x78>
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	891b      	ldrh	r3, [r3, #8]
 80161dc:	8a3a      	ldrh	r2, [r7, #16]
 80161de:	429a      	cmp	r2, r3
 80161e0:	d802      	bhi.n	80161e8 <ip4_input+0x78>
 80161e2:	8a7b      	ldrh	r3, [r7, #18]
 80161e4:	2b13      	cmp	r3, #19
 80161e6:	d804      	bhi.n	80161f2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f7f5 fe39 	bl	800be60 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80161ee:	2300      	movs	r3, #0
 80161f0:	e0f5      	b.n	80163de <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80161f2:	69fb      	ldr	r3, [r7, #28]
 80161f4:	691b      	ldr	r3, [r3, #16]
 80161f6:	4a7c      	ldr	r2, [pc, #496]	; (80163e8 <ip4_input+0x278>)
 80161f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80161fa:	69fb      	ldr	r3, [r7, #28]
 80161fc:	68db      	ldr	r3, [r3, #12]
 80161fe:	4a7a      	ldr	r2, [pc, #488]	; (80163e8 <ip4_input+0x278>)
 8016200:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016202:	4b79      	ldr	r3, [pc, #484]	; (80163e8 <ip4_input+0x278>)
 8016204:	695b      	ldr	r3, [r3, #20]
 8016206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801620a:	2be0      	cmp	r3, #224	; 0xe0
 801620c:	d112      	bne.n	8016234 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016214:	f003 0301 	and.w	r3, r3, #1
 8016218:	b2db      	uxtb	r3, r3
 801621a:	2b00      	cmp	r3, #0
 801621c:	d007      	beq.n	801622e <ip4_input+0xbe>
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	3304      	adds	r3, #4
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d002      	beq.n	801622e <ip4_input+0xbe>
      netif = inp;
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	61bb      	str	r3, [r7, #24]
 801622c:	e02a      	b.n	8016284 <ip4_input+0x114>
    } else {
      netif = NULL;
 801622e:	2300      	movs	r3, #0
 8016230:	61bb      	str	r3, [r7, #24]
 8016232:	e027      	b.n	8016284 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016234:	6838      	ldr	r0, [r7, #0]
 8016236:	f7ff ff71 	bl	801611c <ip4_input_accept>
 801623a:	4603      	mov	r3, r0
 801623c:	2b00      	cmp	r3, #0
 801623e:	d002      	beq.n	8016246 <ip4_input+0xd6>
      netif = inp;
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	61bb      	str	r3, [r7, #24]
 8016244:	e01e      	b.n	8016284 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016246:	2300      	movs	r3, #0
 8016248:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801624a:	4b67      	ldr	r3, [pc, #412]	; (80163e8 <ip4_input+0x278>)
 801624c:	695b      	ldr	r3, [r3, #20]
 801624e:	b2db      	uxtb	r3, r3
 8016250:	2b7f      	cmp	r3, #127	; 0x7f
 8016252:	d017      	beq.n	8016284 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016254:	4b65      	ldr	r3, [pc, #404]	; (80163ec <ip4_input+0x27c>)
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	61bb      	str	r3, [r7, #24]
 801625a:	e00e      	b.n	801627a <ip4_input+0x10a>
          if (netif == inp) {
 801625c:	69ba      	ldr	r2, [r7, #24]
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	429a      	cmp	r2, r3
 8016262:	d006      	beq.n	8016272 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016264:	69b8      	ldr	r0, [r7, #24]
 8016266:	f7ff ff59 	bl	801611c <ip4_input_accept>
 801626a:	4603      	mov	r3, r0
 801626c:	2b00      	cmp	r3, #0
 801626e:	d108      	bne.n	8016282 <ip4_input+0x112>
 8016270:	e000      	b.n	8016274 <ip4_input+0x104>
            continue;
 8016272:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016274:	69bb      	ldr	r3, [r7, #24]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	61bb      	str	r3, [r7, #24]
 801627a:	69bb      	ldr	r3, [r7, #24]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d1ed      	bne.n	801625c <ip4_input+0xec>
 8016280:	e000      	b.n	8016284 <ip4_input+0x114>
            break;
 8016282:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016284:	69bb      	ldr	r3, [r7, #24]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d111      	bne.n	80162ae <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801628a:	69fb      	ldr	r3, [r7, #28]
 801628c:	7a5b      	ldrb	r3, [r3, #9]
 801628e:	2b11      	cmp	r3, #17
 8016290:	d10d      	bne.n	80162ae <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016292:	8a7b      	ldrh	r3, [r7, #18]
 8016294:	69fa      	ldr	r2, [r7, #28]
 8016296:	4413      	add	r3, r2
 8016298:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	885b      	ldrh	r3, [r3, #2]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80162a4:	d103      	bne.n	80162ae <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80162a6:	683b      	ldr	r3, [r7, #0]
 80162a8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80162aa:	2300      	movs	r3, #0
 80162ac:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d017      	beq.n	80162e4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80162b4:	4b4c      	ldr	r3, [pc, #304]	; (80163e8 <ip4_input+0x278>)
 80162b6:	691b      	ldr	r3, [r3, #16]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d013      	beq.n	80162e4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80162bc:	4b4a      	ldr	r3, [pc, #296]	; (80163e8 <ip4_input+0x278>)
 80162be:	691b      	ldr	r3, [r3, #16]
 80162c0:	6839      	ldr	r1, [r7, #0]
 80162c2:	4618      	mov	r0, r3
 80162c4:	f000 f96c 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 80162c8:	4603      	mov	r3, r0
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d105      	bne.n	80162da <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80162ce:	4b46      	ldr	r3, [pc, #280]	; (80163e8 <ip4_input+0x278>)
 80162d0:	691b      	ldr	r3, [r3, #16]
 80162d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80162d6:	2be0      	cmp	r3, #224	; 0xe0
 80162d8:	d104      	bne.n	80162e4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7f5 fdc0 	bl	800be60 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80162e0:	2300      	movs	r3, #0
 80162e2:	e07c      	b.n	80163de <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80162e4:	69bb      	ldr	r3, [r7, #24]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d104      	bne.n	80162f4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f7f5 fdb8 	bl	800be60 <pbuf_free>
    return ERR_OK;
 80162f0:	2300      	movs	r3, #0
 80162f2:	e074      	b.n	80163de <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	88db      	ldrh	r3, [r3, #6]
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	461a      	mov	r2, r3
 80162fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016300:	4013      	ands	r3, r2
 8016302:	2b00      	cmp	r3, #0
 8016304:	d00b      	beq.n	801631e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f000 fc90 	bl	8016c2c <ip4_reass>
 801630c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d101      	bne.n	8016318 <ip4_input+0x1a8>
      return ERR_OK;
 8016314:	2300      	movs	r3, #0
 8016316:	e062      	b.n	80163de <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	685b      	ldr	r3, [r3, #4]
 801631c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801631e:	4a32      	ldr	r2, [pc, #200]	; (80163e8 <ip4_input+0x278>)
 8016320:	69bb      	ldr	r3, [r7, #24]
 8016322:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016324:	4a30      	ldr	r2, [pc, #192]	; (80163e8 <ip4_input+0x278>)
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801632a:	4a2f      	ldr	r2, [pc, #188]	; (80163e8 <ip4_input+0x278>)
 801632c:	69fb      	ldr	r3, [r7, #28]
 801632e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	781b      	ldrb	r3, [r3, #0]
 8016334:	f003 030f 	and.w	r3, r3, #15
 8016338:	b2db      	uxtb	r3, r3
 801633a:	009b      	lsls	r3, r3, #2
 801633c:	b2db      	uxtb	r3, r3
 801633e:	b29a      	uxth	r2, r3
 8016340:	4b29      	ldr	r3, [pc, #164]	; (80163e8 <ip4_input+0x278>)
 8016342:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016344:	8a7b      	ldrh	r3, [r7, #18]
 8016346:	4619      	mov	r1, r3
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	f7f5 fd03 	bl	800bd54 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801634e:	69fb      	ldr	r3, [r7, #28]
 8016350:	7a5b      	ldrb	r3, [r3, #9]
 8016352:	2b06      	cmp	r3, #6
 8016354:	d009      	beq.n	801636a <ip4_input+0x1fa>
 8016356:	2b11      	cmp	r3, #17
 8016358:	d002      	beq.n	8016360 <ip4_input+0x1f0>
 801635a:	2b01      	cmp	r3, #1
 801635c:	d00a      	beq.n	8016374 <ip4_input+0x204>
 801635e:	e00e      	b.n	801637e <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016360:	6839      	ldr	r1, [r7, #0]
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f7fc fad0 	bl	8012908 <udp_input>
        break;
 8016368:	e026      	b.n	80163b8 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801636a:	6839      	ldr	r1, [r7, #0]
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f7f7 fe7f 	bl	800e070 <tcp_input>
        break;
 8016372:	e021      	b.n	80163b8 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016374:	6839      	ldr	r1, [r7, #0]
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f7ff fcd2 	bl	8015d20 <icmp_input>
        break;
 801637c:	e01c      	b.n	80163b8 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801637e:	4b1a      	ldr	r3, [pc, #104]	; (80163e8 <ip4_input+0x278>)
 8016380:	695b      	ldr	r3, [r3, #20]
 8016382:	69b9      	ldr	r1, [r7, #24]
 8016384:	4618      	mov	r0, r3
 8016386:	f000 f90b 	bl	80165a0 <ip4_addr_isbroadcast_u32>
 801638a:	4603      	mov	r3, r0
 801638c:	2b00      	cmp	r3, #0
 801638e:	d10f      	bne.n	80163b0 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016390:	4b15      	ldr	r3, [pc, #84]	; (80163e8 <ip4_input+0x278>)
 8016392:	695b      	ldr	r3, [r3, #20]
 8016394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016398:	2be0      	cmp	r3, #224	; 0xe0
 801639a:	d009      	beq.n	80163b0 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801639c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80163a0:	4619      	mov	r1, r3
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f7f5 fd49 	bl	800be3a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80163a8:	2102      	movs	r1, #2
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f7ff fdbc 	bl	8015f28 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f7f5 fd55 	bl	800be60 <pbuf_free>
        break;
 80163b6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80163b8:	4b0b      	ldr	r3, [pc, #44]	; (80163e8 <ip4_input+0x278>)
 80163ba:	2200      	movs	r2, #0
 80163bc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80163be:	4b0a      	ldr	r3, [pc, #40]	; (80163e8 <ip4_input+0x278>)
 80163c0:	2200      	movs	r2, #0
 80163c2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80163c4:	4b08      	ldr	r3, [pc, #32]	; (80163e8 <ip4_input+0x278>)
 80163c6:	2200      	movs	r2, #0
 80163c8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80163ca:	4b07      	ldr	r3, [pc, #28]	; (80163e8 <ip4_input+0x278>)
 80163cc:	2200      	movs	r2, #0
 80163ce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80163d0:	4b05      	ldr	r3, [pc, #20]	; (80163e8 <ip4_input+0x278>)
 80163d2:	2200      	movs	r2, #0
 80163d4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80163d6:	4b04      	ldr	r3, [pc, #16]	; (80163e8 <ip4_input+0x278>)
 80163d8:	2200      	movs	r2, #0
 80163da:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80163dc:	2300      	movs	r3, #0
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3720      	adds	r7, #32
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	2000bda8 	.word	0x2000bda8
 80163ec:	2000f4cc 	.word	0x2000f4cc

080163f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b08a      	sub	sp, #40	; 0x28
 80163f4:	af04      	add	r7, sp, #16
 80163f6:	60f8      	str	r0, [r7, #12]
 80163f8:	60b9      	str	r1, [r7, #8]
 80163fa:	607a      	str	r2, [r7, #4]
 80163fc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80163fe:	68bb      	ldr	r3, [r7, #8]
 8016400:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d009      	beq.n	801641c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016408:	68bb      	ldr	r3, [r7, #8]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d003      	beq.n	8016416 <ip4_output_if+0x26>
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d102      	bne.n	801641c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016418:	3304      	adds	r3, #4
 801641a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801641c:	78fa      	ldrb	r2, [r7, #3]
 801641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016420:	9302      	str	r3, [sp, #8]
 8016422:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016426:	9301      	str	r3, [sp, #4]
 8016428:	f897 3020 	ldrb.w	r3, [r7, #32]
 801642c:	9300      	str	r3, [sp, #0]
 801642e:	4613      	mov	r3, r2
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	6979      	ldr	r1, [r7, #20]
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	f000 f805 	bl	8016444 <ip4_output_if_src>
 801643a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801643c:	4618      	mov	r0, r3
 801643e:	3718      	adds	r7, #24
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}

08016444 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b088      	sub	sp, #32
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
 8016450:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	7b9b      	ldrb	r3, [r3, #14]
 8016456:	2b01      	cmp	r3, #1
 8016458:	d006      	beq.n	8016468 <ip4_output_if_src+0x24>
 801645a:	4b4b      	ldr	r3, [pc, #300]	; (8016588 <ip4_output_if_src+0x144>)
 801645c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016460:	494a      	ldr	r1, [pc, #296]	; (801658c <ip4_output_if_src+0x148>)
 8016462:	484b      	ldr	r0, [pc, #300]	; (8016590 <ip4_output_if_src+0x14c>)
 8016464:	f001 fa4a 	bl	80178fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d060      	beq.n	8016530 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801646e:	2314      	movs	r3, #20
 8016470:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016472:	2114      	movs	r1, #20
 8016474:	68f8      	ldr	r0, [r7, #12]
 8016476:	f7f5 fc5d 	bl	800bd34 <pbuf_add_header>
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	d002      	beq.n	8016486 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016480:	f06f 0301 	mvn.w	r3, #1
 8016484:	e07c      	b.n	8016580 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	685b      	ldr	r3, [r3, #4]
 801648a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	895b      	ldrh	r3, [r3, #10]
 8016490:	2b13      	cmp	r3, #19
 8016492:	d806      	bhi.n	80164a2 <ip4_output_if_src+0x5e>
 8016494:	4b3c      	ldr	r3, [pc, #240]	; (8016588 <ip4_output_if_src+0x144>)
 8016496:	f240 3289 	movw	r2, #905	; 0x389
 801649a:	493e      	ldr	r1, [pc, #248]	; (8016594 <ip4_output_if_src+0x150>)
 801649c:	483c      	ldr	r0, [pc, #240]	; (8016590 <ip4_output_if_src+0x14c>)
 801649e:	f001 fa2d 	bl	80178fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80164a2:	69fb      	ldr	r3, [r7, #28]
 80164a4:	78fa      	ldrb	r2, [r7, #3]
 80164a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80164ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681a      	ldr	r2, [r3, #0]
 80164b4:	69fb      	ldr	r3, [r7, #28]
 80164b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80164b8:	8b7b      	ldrh	r3, [r7, #26]
 80164ba:	089b      	lsrs	r3, r3, #2
 80164bc:	b29b      	uxth	r3, r3
 80164be:	b2db      	uxtb	r3, r3
 80164c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164c4:	b2da      	uxtb	r2, r3
 80164c6:	69fb      	ldr	r3, [r7, #28]
 80164c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80164ca:	69fb      	ldr	r3, [r7, #28]
 80164cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80164d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	891b      	ldrh	r3, [r3, #8]
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7f4 f90e 	bl	800a6f8 <lwip_htons>
 80164dc:	4603      	mov	r3, r0
 80164de:	461a      	mov	r2, r3
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80164e4:	69fb      	ldr	r3, [r7, #28]
 80164e6:	2200      	movs	r2, #0
 80164e8:	719a      	strb	r2, [r3, #6]
 80164ea:	2200      	movs	r2, #0
 80164ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80164ee:	4b2a      	ldr	r3, [pc, #168]	; (8016598 <ip4_output_if_src+0x154>)
 80164f0:	881b      	ldrh	r3, [r3, #0]
 80164f2:	4618      	mov	r0, r3
 80164f4:	f7f4 f900 	bl	800a6f8 <lwip_htons>
 80164f8:	4603      	mov	r3, r0
 80164fa:	461a      	mov	r2, r3
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016500:	4b25      	ldr	r3, [pc, #148]	; (8016598 <ip4_output_if_src+0x154>)
 8016502:	881b      	ldrh	r3, [r3, #0]
 8016504:	3301      	adds	r3, #1
 8016506:	b29a      	uxth	r2, r3
 8016508:	4b23      	ldr	r3, [pc, #140]	; (8016598 <ip4_output_if_src+0x154>)
 801650a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801650c:	68bb      	ldr	r3, [r7, #8]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d104      	bne.n	801651c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016512:	4b22      	ldr	r3, [pc, #136]	; (801659c <ip4_output_if_src+0x158>)
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	69fb      	ldr	r3, [r7, #28]
 8016518:	60da      	str	r2, [r3, #12]
 801651a:	e003      	b.n	8016524 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	681a      	ldr	r2, [r3, #0]
 8016520:	69fb      	ldr	r3, [r7, #28]
 8016522:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016524:	69fb      	ldr	r3, [r7, #28]
 8016526:	2200      	movs	r2, #0
 8016528:	729a      	strb	r2, [r3, #10]
 801652a:	2200      	movs	r2, #0
 801652c:	72da      	strb	r2, [r3, #11]
 801652e:	e00f      	b.n	8016550 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	895b      	ldrh	r3, [r3, #10]
 8016534:	2b13      	cmp	r3, #19
 8016536:	d802      	bhi.n	801653e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016538:	f06f 0301 	mvn.w	r3, #1
 801653c:	e020      	b.n	8016580 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016544:	69fb      	ldr	r3, [r7, #28]
 8016546:	691b      	ldr	r3, [r3, #16]
 8016548:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801654a:	f107 0314 	add.w	r3, r7, #20
 801654e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016554:	2b00      	cmp	r3, #0
 8016556:	d00c      	beq.n	8016572 <ip4_output_if_src+0x12e>
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	891a      	ldrh	r2, [r3, #8]
 801655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016560:	429a      	cmp	r2, r3
 8016562:	d906      	bls.n	8016572 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016564:	687a      	ldr	r2, [r7, #4]
 8016566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016568:	68f8      	ldr	r0, [r7, #12]
 801656a:	f000 fd4b 	bl	8017004 <ip4_frag>
 801656e:	4603      	mov	r3, r0
 8016570:	e006      	b.n	8016580 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016574:	695b      	ldr	r3, [r3, #20]
 8016576:	687a      	ldr	r2, [r7, #4]
 8016578:	68f9      	ldr	r1, [r7, #12]
 801657a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801657c:	4798      	blx	r3
 801657e:	4603      	mov	r3, r0
}
 8016580:	4618      	mov	r0, r3
 8016582:	3720      	adds	r7, #32
 8016584:	46bd      	mov	sp, r7
 8016586:	bd80      	pop	{r7, pc}
 8016588:	0801c2b0 	.word	0x0801c2b0
 801658c:	0801c2e4 	.word	0x0801c2e4
 8016590:	0801c2f0 	.word	0x0801c2f0
 8016594:	0801c318 	.word	0x0801c318
 8016598:	2000878e 	.word	0x2000878e
 801659c:	0801c740 	.word	0x0801c740

080165a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80165a0:	b480      	push	{r7}
 80165a2:	b085      	sub	sp, #20
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165b4:	d002      	beq.n	80165bc <ip4_addr_isbroadcast_u32+0x1c>
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d101      	bne.n	80165c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80165bc:	2301      	movs	r3, #1
 80165be:	e02a      	b.n	8016616 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80165c0:	683b      	ldr	r3, [r7, #0]
 80165c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165c6:	f003 0302 	and.w	r3, r3, #2
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d101      	bne.n	80165d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80165ce:	2300      	movs	r3, #0
 80165d0:	e021      	b.n	8016616 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	3304      	adds	r3, #4
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	687a      	ldr	r2, [r7, #4]
 80165da:	429a      	cmp	r2, r3
 80165dc:	d101      	bne.n	80165e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80165de:	2300      	movs	r3, #0
 80165e0:	e019      	b.n	8016616 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80165e2:	68fa      	ldr	r2, [r7, #12]
 80165e4:	683b      	ldr	r3, [r7, #0]
 80165e6:	3304      	adds	r3, #4
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	405a      	eors	r2, r3
 80165ec:	683b      	ldr	r3, [r7, #0]
 80165ee:	3308      	adds	r3, #8
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	4013      	ands	r3, r2
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d10d      	bne.n	8016614 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	3308      	adds	r3, #8
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	43da      	mvns	r2, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016604:	683b      	ldr	r3, [r7, #0]
 8016606:	3308      	adds	r3, #8
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801660c:	429a      	cmp	r2, r3
 801660e:	d101      	bne.n	8016614 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016610:	2301      	movs	r3, #1
 8016612:	e000      	b.n	8016616 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016614:	2300      	movs	r3, #0
  }
}
 8016616:	4618      	mov	r0, r3
 8016618:	3714      	adds	r7, #20
 801661a:	46bd      	mov	sp, r7
 801661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016620:	4770      	bx	lr
	...

08016624 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801662a:	2300      	movs	r3, #0
 801662c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801662e:	4b12      	ldr	r3, [pc, #72]	; (8016678 <ip_reass_tmr+0x54>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016634:	e018      	b.n	8016668 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	7fdb      	ldrb	r3, [r3, #31]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d00b      	beq.n	8016656 <ip_reass_tmr+0x32>
      r->timer--;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	7fdb      	ldrb	r3, [r3, #31]
 8016642:	3b01      	subs	r3, #1
 8016644:	b2da      	uxtb	r2, r3
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	60fb      	str	r3, [r7, #12]
 8016654:	e008      	b.n	8016668 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016660:	68b9      	ldr	r1, [r7, #8]
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f000 f80a 	bl	801667c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d1e3      	bne.n	8016636 <ip_reass_tmr+0x12>
    }
  }
}
 801666e:	bf00      	nop
 8016670:	3710      	adds	r7, #16
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	20008790 	.word	0x20008790

0801667c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b088      	sub	sp, #32
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016686:	2300      	movs	r3, #0
 8016688:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801668a:	683a      	ldr	r2, [r7, #0]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	429a      	cmp	r2, r3
 8016690:	d105      	bne.n	801669e <ip_reass_free_complete_datagram+0x22>
 8016692:	4b45      	ldr	r3, [pc, #276]	; (80167a8 <ip_reass_free_complete_datagram+0x12c>)
 8016694:	22ab      	movs	r2, #171	; 0xab
 8016696:	4945      	ldr	r1, [pc, #276]	; (80167ac <ip_reass_free_complete_datagram+0x130>)
 8016698:	4845      	ldr	r0, [pc, #276]	; (80167b0 <ip_reass_free_complete_datagram+0x134>)
 801669a:	f001 f92f 	bl	80178fc <iprintf>
  if (prev != NULL) {
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d00a      	beq.n	80166ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	687a      	ldr	r2, [r7, #4]
 80166aa:	429a      	cmp	r2, r3
 80166ac:	d005      	beq.n	80166ba <ip_reass_free_complete_datagram+0x3e>
 80166ae:	4b3e      	ldr	r3, [pc, #248]	; (80167a8 <ip_reass_free_complete_datagram+0x12c>)
 80166b0:	22ad      	movs	r2, #173	; 0xad
 80166b2:	4940      	ldr	r1, [pc, #256]	; (80167b4 <ip_reass_free_complete_datagram+0x138>)
 80166b4:	483e      	ldr	r0, [pc, #248]	; (80167b0 <ip_reass_free_complete_datagram+0x134>)
 80166b6:	f001 f921 	bl	80178fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	685b      	ldr	r3, [r3, #4]
 80166be:	685b      	ldr	r3, [r3, #4]
 80166c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80166c2:	697b      	ldr	r3, [r7, #20]
 80166c4:	889b      	ldrh	r3, [r3, #4]
 80166c6:	b29b      	uxth	r3, r3
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d12a      	bne.n	8016722 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	685b      	ldr	r3, [r3, #4]
 80166d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80166da:	69bb      	ldr	r3, [r7, #24]
 80166dc:	6858      	ldr	r0, [r3, #4]
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	3308      	adds	r3, #8
 80166e2:	2214      	movs	r2, #20
 80166e4:	4619      	mov	r1, r3
 80166e6:	f001 f8dc 	bl	80178a2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80166ea:	2101      	movs	r1, #1
 80166ec:	69b8      	ldr	r0, [r7, #24]
 80166ee:	f7ff fc2b 	bl	8015f48 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80166f2:	69b8      	ldr	r0, [r7, #24]
 80166f4:	f7f5 fc42 	bl	800bf7c <pbuf_clen>
 80166f8:	4603      	mov	r3, r0
 80166fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80166fc:	8bfa      	ldrh	r2, [r7, #30]
 80166fe:	8a7b      	ldrh	r3, [r7, #18]
 8016700:	4413      	add	r3, r2
 8016702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016706:	db05      	blt.n	8016714 <ip_reass_free_complete_datagram+0x98>
 8016708:	4b27      	ldr	r3, [pc, #156]	; (80167a8 <ip_reass_free_complete_datagram+0x12c>)
 801670a:	22bc      	movs	r2, #188	; 0xbc
 801670c:	492a      	ldr	r1, [pc, #168]	; (80167b8 <ip_reass_free_complete_datagram+0x13c>)
 801670e:	4828      	ldr	r0, [pc, #160]	; (80167b0 <ip_reass_free_complete_datagram+0x134>)
 8016710:	f001 f8f4 	bl	80178fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016714:	8bfa      	ldrh	r2, [r7, #30]
 8016716:	8a7b      	ldrh	r3, [r7, #18]
 8016718:	4413      	add	r3, r2
 801671a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801671c:	69b8      	ldr	r0, [r7, #24]
 801671e:	f7f5 fb9f 	bl	800be60 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	685b      	ldr	r3, [r3, #4]
 8016726:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016728:	e01f      	b.n	801676a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016730:	69bb      	ldr	r3, [r7, #24]
 8016732:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016734:	697b      	ldr	r3, [r7, #20]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801673a:	68f8      	ldr	r0, [r7, #12]
 801673c:	f7f5 fc1e 	bl	800bf7c <pbuf_clen>
 8016740:	4603      	mov	r3, r0
 8016742:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016744:	8bfa      	ldrh	r2, [r7, #30]
 8016746:	8a7b      	ldrh	r3, [r7, #18]
 8016748:	4413      	add	r3, r2
 801674a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801674e:	db05      	blt.n	801675c <ip_reass_free_complete_datagram+0xe0>
 8016750:	4b15      	ldr	r3, [pc, #84]	; (80167a8 <ip_reass_free_complete_datagram+0x12c>)
 8016752:	22cc      	movs	r2, #204	; 0xcc
 8016754:	4918      	ldr	r1, [pc, #96]	; (80167b8 <ip_reass_free_complete_datagram+0x13c>)
 8016756:	4816      	ldr	r0, [pc, #88]	; (80167b0 <ip_reass_free_complete_datagram+0x134>)
 8016758:	f001 f8d0 	bl	80178fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801675c:	8bfa      	ldrh	r2, [r7, #30]
 801675e:	8a7b      	ldrh	r3, [r7, #18]
 8016760:	4413      	add	r3, r2
 8016762:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016764:	68f8      	ldr	r0, [r7, #12]
 8016766:	f7f5 fb7b 	bl	800be60 <pbuf_free>
  while (p != NULL) {
 801676a:	69bb      	ldr	r3, [r7, #24]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d1dc      	bne.n	801672a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016770:	6839      	ldr	r1, [r7, #0]
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f000 f8c2 	bl	80168fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016778:	4b10      	ldr	r3, [pc, #64]	; (80167bc <ip_reass_free_complete_datagram+0x140>)
 801677a:	881b      	ldrh	r3, [r3, #0]
 801677c:	8bfa      	ldrh	r2, [r7, #30]
 801677e:	429a      	cmp	r2, r3
 8016780:	d905      	bls.n	801678e <ip_reass_free_complete_datagram+0x112>
 8016782:	4b09      	ldr	r3, [pc, #36]	; (80167a8 <ip_reass_free_complete_datagram+0x12c>)
 8016784:	22d2      	movs	r2, #210	; 0xd2
 8016786:	490e      	ldr	r1, [pc, #56]	; (80167c0 <ip_reass_free_complete_datagram+0x144>)
 8016788:	4809      	ldr	r0, [pc, #36]	; (80167b0 <ip_reass_free_complete_datagram+0x134>)
 801678a:	f001 f8b7 	bl	80178fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801678e:	4b0b      	ldr	r3, [pc, #44]	; (80167bc <ip_reass_free_complete_datagram+0x140>)
 8016790:	881a      	ldrh	r2, [r3, #0]
 8016792:	8bfb      	ldrh	r3, [r7, #30]
 8016794:	1ad3      	subs	r3, r2, r3
 8016796:	b29a      	uxth	r2, r3
 8016798:	4b08      	ldr	r3, [pc, #32]	; (80167bc <ip_reass_free_complete_datagram+0x140>)
 801679a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801679c:	8bfb      	ldrh	r3, [r7, #30]
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3720      	adds	r7, #32
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}
 80167a6:	bf00      	nop
 80167a8:	0801c348 	.word	0x0801c348
 80167ac:	0801c384 	.word	0x0801c384
 80167b0:	0801c390 	.word	0x0801c390
 80167b4:	0801c3b8 	.word	0x0801c3b8
 80167b8:	0801c3cc 	.word	0x0801c3cc
 80167bc:	20008794 	.word	0x20008794
 80167c0:	0801c3ec 	.word	0x0801c3ec

080167c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b08a      	sub	sp, #40	; 0x28
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80167ce:	2300      	movs	r3, #0
 80167d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80167d2:	2300      	movs	r3, #0
 80167d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80167d6:	2300      	movs	r3, #0
 80167d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80167da:	2300      	movs	r3, #0
 80167dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80167de:	2300      	movs	r3, #0
 80167e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80167e2:	4b28      	ldr	r3, [pc, #160]	; (8016884 <ip_reass_remove_oldest_datagram+0xc0>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80167e8:	e030      	b.n	801684c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80167ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ec:	695a      	ldr	r2, [r3, #20]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	68db      	ldr	r3, [r3, #12]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d10c      	bne.n	8016810 <ip_reass_remove_oldest_datagram+0x4c>
 80167f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f8:	699a      	ldr	r2, [r3, #24]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	691b      	ldr	r3, [r3, #16]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d106      	bne.n	8016810 <ip_reass_remove_oldest_datagram+0x4c>
 8016802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016804:	899a      	ldrh	r2, [r3, #12]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	889b      	ldrh	r3, [r3, #4]
 801680a:	b29b      	uxth	r3, r3
 801680c:	429a      	cmp	r2, r3
 801680e:	d014      	beq.n	801683a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	3301      	adds	r3, #1
 8016814:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016816:	6a3b      	ldr	r3, [r7, #32]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d104      	bne.n	8016826 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	61bb      	str	r3, [r7, #24]
 8016824:	e009      	b.n	801683a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016828:	7fda      	ldrb	r2, [r3, #31]
 801682a:	6a3b      	ldr	r3, [r7, #32]
 801682c:	7fdb      	ldrb	r3, [r3, #31]
 801682e:	429a      	cmp	r2, r3
 8016830:	d803      	bhi.n	801683a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016834:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016836:	69fb      	ldr	r3, [r7, #28]
 8016838:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d001      	beq.n	8016846 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016844:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801684e:	2b00      	cmp	r3, #0
 8016850:	d1cb      	bne.n	80167ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016852:	6a3b      	ldr	r3, [r7, #32]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d008      	beq.n	801686a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016858:	69b9      	ldr	r1, [r7, #24]
 801685a:	6a38      	ldr	r0, [r7, #32]
 801685c:	f7ff ff0e 	bl	801667c <ip_reass_free_complete_datagram>
 8016860:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016862:	697a      	ldr	r2, [r7, #20]
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	4413      	add	r3, r2
 8016868:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801686a:	697a      	ldr	r2, [r7, #20]
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	429a      	cmp	r2, r3
 8016870:	da02      	bge.n	8016878 <ip_reass_remove_oldest_datagram+0xb4>
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	2b01      	cmp	r3, #1
 8016876:	dcac      	bgt.n	80167d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016878:	697b      	ldr	r3, [r7, #20]
}
 801687a:	4618      	mov	r0, r3
 801687c:	3728      	adds	r7, #40	; 0x28
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
 8016882:	bf00      	nop
 8016884:	20008790 	.word	0x20008790

08016888 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b084      	sub	sp, #16
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016892:	2004      	movs	r0, #4
 8016894:	f7f4 fbe6 	bl	800b064 <memp_malloc>
 8016898:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d110      	bne.n	80168c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80168a0:	6839      	ldr	r1, [r7, #0]
 80168a2:	6878      	ldr	r0, [r7, #4]
 80168a4:	f7ff ff8e 	bl	80167c4 <ip_reass_remove_oldest_datagram>
 80168a8:	4602      	mov	r2, r0
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	4293      	cmp	r3, r2
 80168ae:	dc03      	bgt.n	80168b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80168b0:	2004      	movs	r0, #4
 80168b2:	f7f4 fbd7 	bl	800b064 <memp_malloc>
 80168b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d101      	bne.n	80168c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80168be:	2300      	movs	r3, #0
 80168c0:	e016      	b.n	80168f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80168c2:	2220      	movs	r2, #32
 80168c4:	2100      	movs	r1, #0
 80168c6:	68f8      	ldr	r0, [r7, #12]
 80168c8:	f001 f80f 	bl	80178ea <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	220f      	movs	r2, #15
 80168d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80168d2:	4b09      	ldr	r3, [pc, #36]	; (80168f8 <ip_reass_enqueue_new_datagram+0x70>)
 80168d4:	681a      	ldr	r2, [r3, #0]
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80168da:	4a07      	ldr	r2, [pc, #28]	; (80168f8 <ip_reass_enqueue_new_datagram+0x70>)
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	3308      	adds	r3, #8
 80168e4:	2214      	movs	r2, #20
 80168e6:	6879      	ldr	r1, [r7, #4]
 80168e8:	4618      	mov	r0, r3
 80168ea:	f000 ffda 	bl	80178a2 <memcpy>
  return ipr;
 80168ee:	68fb      	ldr	r3, [r7, #12]
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3710      	adds	r7, #16
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	20008790 	.word	0x20008790

080168fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016906:	4b10      	ldr	r3, [pc, #64]	; (8016948 <ip_reass_dequeue_datagram+0x4c>)
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	687a      	ldr	r2, [r7, #4]
 801690c:	429a      	cmp	r2, r3
 801690e:	d104      	bne.n	801691a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	4a0c      	ldr	r2, [pc, #48]	; (8016948 <ip_reass_dequeue_datagram+0x4c>)
 8016916:	6013      	str	r3, [r2, #0]
 8016918:	e00d      	b.n	8016936 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d106      	bne.n	801692e <ip_reass_dequeue_datagram+0x32>
 8016920:	4b0a      	ldr	r3, [pc, #40]	; (801694c <ip_reass_dequeue_datagram+0x50>)
 8016922:	f240 1245 	movw	r2, #325	; 0x145
 8016926:	490a      	ldr	r1, [pc, #40]	; (8016950 <ip_reass_dequeue_datagram+0x54>)
 8016928:	480a      	ldr	r0, [pc, #40]	; (8016954 <ip_reass_dequeue_datagram+0x58>)
 801692a:	f000 ffe7 	bl	80178fc <iprintf>
    prev->next = ipr->next;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016936:	6879      	ldr	r1, [r7, #4]
 8016938:	2004      	movs	r0, #4
 801693a:	f7f4 fbe5 	bl	800b108 <memp_free>
}
 801693e:	bf00      	nop
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop
 8016948:	20008790 	.word	0x20008790
 801694c:	0801c348 	.word	0x0801c348
 8016950:	0801c410 	.word	0x0801c410
 8016954:	0801c390 	.word	0x0801c390

08016958 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b08c      	sub	sp, #48	; 0x30
 801695c:	af00      	add	r7, sp, #0
 801695e:	60f8      	str	r0, [r7, #12]
 8016960:	60b9      	str	r1, [r7, #8]
 8016962:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016964:	2300      	movs	r3, #0
 8016966:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016968:	2301      	movs	r3, #1
 801696a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801696c:	68bb      	ldr	r3, [r7, #8]
 801696e:	685b      	ldr	r3, [r3, #4]
 8016970:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016972:	69fb      	ldr	r3, [r7, #28]
 8016974:	885b      	ldrh	r3, [r3, #2]
 8016976:	b29b      	uxth	r3, r3
 8016978:	4618      	mov	r0, r3
 801697a:	f7f3 febd 	bl	800a6f8 <lwip_htons>
 801697e:	4603      	mov	r3, r0
 8016980:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	781b      	ldrb	r3, [r3, #0]
 8016986:	f003 030f 	and.w	r3, r3, #15
 801698a:	b2db      	uxtb	r3, r3
 801698c:	009b      	lsls	r3, r3, #2
 801698e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016990:	7e7b      	ldrb	r3, [r7, #25]
 8016992:	b29b      	uxth	r3, r3
 8016994:	8b7a      	ldrh	r2, [r7, #26]
 8016996:	429a      	cmp	r2, r3
 8016998:	d202      	bcs.n	80169a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801699a:	f04f 33ff 	mov.w	r3, #4294967295
 801699e:	e135      	b.n	8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80169a0:	7e7b      	ldrb	r3, [r7, #25]
 80169a2:	b29b      	uxth	r3, r3
 80169a4:	8b7a      	ldrh	r2, [r7, #26]
 80169a6:	1ad3      	subs	r3, r2, r3
 80169a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80169aa:	69fb      	ldr	r3, [r7, #28]
 80169ac:	88db      	ldrh	r3, [r3, #6]
 80169ae:	b29b      	uxth	r3, r3
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7f3 fea1 	bl	800a6f8 <lwip_htons>
 80169b6:	4603      	mov	r3, r0
 80169b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80169bc:	b29b      	uxth	r3, r3
 80169be:	00db      	lsls	r3, r3, #3
 80169c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80169c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ca:	2200      	movs	r2, #0
 80169cc:	701a      	strb	r2, [r3, #0]
 80169ce:	2200      	movs	r2, #0
 80169d0:	705a      	strb	r2, [r3, #1]
 80169d2:	2200      	movs	r2, #0
 80169d4:	709a      	strb	r2, [r3, #2]
 80169d6:	2200      	movs	r2, #0
 80169d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80169da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169dc:	8afa      	ldrh	r2, [r7, #22]
 80169de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80169e0:	8afa      	ldrh	r2, [r7, #22]
 80169e2:	8b7b      	ldrh	r3, [r7, #26]
 80169e4:	4413      	add	r3, r2
 80169e6:	b29a      	uxth	r2, r3
 80169e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80169ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ee:	88db      	ldrh	r3, [r3, #6]
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	8afa      	ldrh	r2, [r7, #22]
 80169f4:	429a      	cmp	r2, r3
 80169f6:	d902      	bls.n	80169fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169f8:	f04f 33ff 	mov.w	r3, #4294967295
 80169fc:	e106      	b.n	8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	685b      	ldr	r3, [r3, #4]
 8016a02:	627b      	str	r3, [r7, #36]	; 0x24
 8016a04:	e068      	b.n	8016ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a0e:	889b      	ldrh	r3, [r3, #4]
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	889b      	ldrh	r3, [r3, #4]
 8016a16:	b29b      	uxth	r3, r3
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d235      	bcs.n	8016a88 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a20:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d020      	beq.n	8016a6a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a2a:	889b      	ldrh	r3, [r3, #4]
 8016a2c:	b29a      	uxth	r2, r3
 8016a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a30:	88db      	ldrh	r3, [r3, #6]
 8016a32:	b29b      	uxth	r3, r3
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d307      	bcc.n	8016a48 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a3a:	88db      	ldrh	r3, [r3, #6]
 8016a3c:	b29a      	uxth	r2, r3
 8016a3e:	693b      	ldr	r3, [r7, #16]
 8016a40:	889b      	ldrh	r3, [r3, #4]
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d902      	bls.n	8016a4e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a48:	f04f 33ff 	mov.w	r3, #4294967295
 8016a4c:	e0de      	b.n	8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a50:	68ba      	ldr	r2, [r7, #8]
 8016a52:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a56:	88db      	ldrh	r3, [r3, #6]
 8016a58:	b29a      	uxth	r2, r3
 8016a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a5c:	889b      	ldrh	r3, [r3, #4]
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d03d      	beq.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016a64:	2300      	movs	r3, #0
 8016a66:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016a68:	e03a      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a6c:	88db      	ldrh	r3, [r3, #6]
 8016a6e:	b29a      	uxth	r2, r3
 8016a70:	693b      	ldr	r3, [r7, #16]
 8016a72:	889b      	ldrh	r3, [r3, #4]
 8016a74:	b29b      	uxth	r3, r3
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d902      	bls.n	8016a80 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a7e:	e0c5      	b.n	8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	68ba      	ldr	r2, [r7, #8]
 8016a84:	605a      	str	r2, [r3, #4]
      break;
 8016a86:	e02b      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a8a:	889b      	ldrh	r3, [r3, #4]
 8016a8c:	b29a      	uxth	r2, r3
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	889b      	ldrh	r3, [r3, #4]
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d102      	bne.n	8016a9e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a98:	f04f 33ff 	mov.w	r3, #4294967295
 8016a9c:	e0b6      	b.n	8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa0:	889b      	ldrh	r3, [r3, #4]
 8016aa2:	b29a      	uxth	r2, r3
 8016aa4:	693b      	ldr	r3, [r7, #16]
 8016aa6:	88db      	ldrh	r3, [r3, #6]
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d202      	bcs.n	8016ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016aae:	f04f 33ff 	mov.w	r3, #4294967295
 8016ab2:	e0ab      	b.n	8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d009      	beq.n	8016ace <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016abc:	88db      	ldrh	r3, [r3, #6]
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	693b      	ldr	r3, [r7, #16]
 8016ac2:	889b      	ldrh	r3, [r3, #4]
 8016ac4:	b29b      	uxth	r3, r3
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d001      	beq.n	8016ace <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016aca:	2300      	movs	r3, #0
 8016acc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016ace:	693b      	ldr	r3, [r7, #16]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d193      	bne.n	8016a06 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016ade:	e000      	b.n	8016ae2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016ae0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d12d      	bne.n	8016b44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d01c      	beq.n	8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016af0:	88db      	ldrh	r3, [r3, #6]
 8016af2:	b29a      	uxth	r2, r3
 8016af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af6:	889b      	ldrh	r3, [r3, #4]
 8016af8:	b29b      	uxth	r3, r3
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d906      	bls.n	8016b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016afe:	4b45      	ldr	r3, [pc, #276]	; (8016c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b00:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016b04:	4944      	ldr	r1, [pc, #272]	; (8016c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016b06:	4845      	ldr	r0, [pc, #276]	; (8016c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b08:	f000 fef8 	bl	80178fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b0e:	68ba      	ldr	r2, [r7, #8]
 8016b10:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b14:	88db      	ldrh	r3, [r3, #6]
 8016b16:	b29a      	uxth	r2, r3
 8016b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1a:	889b      	ldrh	r3, [r3, #4]
 8016b1c:	b29b      	uxth	r3, r3
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d010      	beq.n	8016b44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016b22:	2300      	movs	r3, #0
 8016b24:	623b      	str	r3, [r7, #32]
 8016b26:	e00d      	b.n	8016b44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d006      	beq.n	8016b3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016b30:	4b38      	ldr	r3, [pc, #224]	; (8016c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b32:	f240 12bf 	movw	r2, #447	; 0x1bf
 8016b36:	493a      	ldr	r1, [pc, #232]	; (8016c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016b38:	4838      	ldr	r0, [pc, #224]	; (8016c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b3a:	f000 fedf 	bl	80178fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	68ba      	ldr	r2, [r7, #8]
 8016b42:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d105      	bne.n	8016b56 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	7f9b      	ldrb	r3, [r3, #30]
 8016b4e:	f003 0301 	and.w	r3, r3, #1
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d059      	beq.n	8016c0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016b56:	6a3b      	ldr	r3, [r7, #32]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d04f      	beq.n	8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	685b      	ldr	r3, [r3, #4]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d006      	beq.n	8016b72 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	685b      	ldr	r3, [r3, #4]
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	889b      	ldrh	r3, [r3, #4]
 8016b6c:	b29b      	uxth	r3, r3
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d002      	beq.n	8016b78 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016b72:	2300      	movs	r3, #0
 8016b74:	623b      	str	r3, [r7, #32]
 8016b76:	e041      	b.n	8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016b82:	e012      	b.n	8016baa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b86:	685b      	ldr	r3, [r3, #4]
 8016b88:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b8c:	88db      	ldrh	r3, [r3, #6]
 8016b8e:	b29a      	uxth	r2, r3
 8016b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b92:	889b      	ldrh	r3, [r3, #4]
 8016b94:	b29b      	uxth	r3, r3
 8016b96:	429a      	cmp	r2, r3
 8016b98:	d002      	beq.n	8016ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	623b      	str	r3, [r7, #32]
            break;
 8016b9e:	e007      	b.n	8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d1e9      	bne.n	8016b84 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016bb0:	6a3b      	ldr	r3, [r7, #32]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d022      	beq.n	8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	685b      	ldr	r3, [r3, #4]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d106      	bne.n	8016bcc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016bbe:	4b15      	ldr	r3, [pc, #84]	; (8016c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bc0:	f240 12df 	movw	r2, #479	; 0x1df
 8016bc4:	4917      	ldr	r1, [pc, #92]	; (8016c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016bc6:	4815      	ldr	r0, [pc, #84]	; (8016c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016bc8:	f000 fe98 	bl	80178fc <iprintf>
          LWIP_ASSERT("sanity check",
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	685b      	ldr	r3, [r3, #4]
 8016bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d106      	bne.n	8016be6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016bd8:	4b0e      	ldr	r3, [pc, #56]	; (8016c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bda:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016bde:	4911      	ldr	r1, [pc, #68]	; (8016c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016be0:	480e      	ldr	r0, [pc, #56]	; (8016c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016be2:	f000 fe8b 	bl	80178fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d006      	beq.n	8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016bee:	4b09      	ldr	r3, [pc, #36]	; (8016c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bf0:	f240 12e3 	movw	r2, #483	; 0x1e3
 8016bf4:	490c      	ldr	r1, [pc, #48]	; (8016c28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016bf6:	4809      	ldr	r0, [pc, #36]	; (8016c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016bf8:	f000 fe80 	bl	80178fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016bfc:	6a3b      	ldr	r3, [r7, #32]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	bf14      	ite	ne
 8016c02:	2301      	movne	r3, #1
 8016c04:	2300      	moveq	r3, #0
 8016c06:	b2db      	uxtb	r3, r3
 8016c08:	e000      	b.n	8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016c0a:	2300      	movs	r3, #0
}
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	3730      	adds	r7, #48	; 0x30
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	0801c348 	.word	0x0801c348
 8016c18:	0801c42c 	.word	0x0801c42c
 8016c1c:	0801c390 	.word	0x0801c390
 8016c20:	0801c44c 	.word	0x0801c44c
 8016c24:	0801c484 	.word	0x0801c484
 8016c28:	0801c494 	.word	0x0801c494

08016c2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b08e      	sub	sp, #56	; 0x38
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c3c:	781b      	ldrb	r3, [r3, #0]
 8016c3e:	f003 030f 	and.w	r3, r3, #15
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	009b      	lsls	r3, r3, #2
 8016c46:	b2db      	uxtb	r3, r3
 8016c48:	2b14      	cmp	r3, #20
 8016c4a:	f040 8167 	bne.w	8016f1c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c50:	88db      	ldrh	r3, [r3, #6]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7f3 fd4f 	bl	800a6f8 <lwip_htons>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c60:	b29b      	uxth	r3, r3
 8016c62:	00db      	lsls	r3, r3, #3
 8016c64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c68:	885b      	ldrh	r3, [r3, #2]
 8016c6a:	b29b      	uxth	r3, r3
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	f7f3 fd43 	bl	800a6f8 <lwip_htons>
 8016c72:	4603      	mov	r3, r0
 8016c74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c78:	781b      	ldrb	r3, [r3, #0]
 8016c7a:	f003 030f 	and.w	r3, r3, #15
 8016c7e:	b2db      	uxtb	r3, r3
 8016c80:	009b      	lsls	r3, r3, #2
 8016c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	f0c0 8146 	bcc.w	8016f20 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c9c:	1ad3      	subs	r3, r2, r3
 8016c9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016ca0:	6878      	ldr	r0, [r7, #4]
 8016ca2:	f7f5 f96b 	bl	800bf7c <pbuf_clen>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016caa:	4ba3      	ldr	r3, [pc, #652]	; (8016f38 <ip4_reass+0x30c>)
 8016cac:	881b      	ldrh	r3, [r3, #0]
 8016cae:	461a      	mov	r2, r3
 8016cb0:	8c3b      	ldrh	r3, [r7, #32]
 8016cb2:	4413      	add	r3, r2
 8016cb4:	2b0a      	cmp	r3, #10
 8016cb6:	dd10      	ble.n	8016cda <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016cb8:	8c3b      	ldrh	r3, [r7, #32]
 8016cba:	4619      	mov	r1, r3
 8016cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cbe:	f7ff fd81 	bl	80167c4 <ip_reass_remove_oldest_datagram>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	f000 812d 	beq.w	8016f24 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016cca:	4b9b      	ldr	r3, [pc, #620]	; (8016f38 <ip4_reass+0x30c>)
 8016ccc:	881b      	ldrh	r3, [r3, #0]
 8016cce:	461a      	mov	r2, r3
 8016cd0:	8c3b      	ldrh	r3, [r7, #32]
 8016cd2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016cd4:	2b0a      	cmp	r3, #10
 8016cd6:	f300 8125 	bgt.w	8016f24 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016cda:	4b98      	ldr	r3, [pc, #608]	; (8016f3c <ip4_reass+0x310>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	633b      	str	r3, [r7, #48]	; 0x30
 8016ce0:	e015      	b.n	8016d0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce4:	695a      	ldr	r2, [r3, #20]
 8016ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce8:	68db      	ldr	r3, [r3, #12]
 8016cea:	429a      	cmp	r2, r3
 8016cec:	d10c      	bne.n	8016d08 <ip4_reass+0xdc>
 8016cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf0:	699a      	ldr	r2, [r3, #24]
 8016cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf4:	691b      	ldr	r3, [r3, #16]
 8016cf6:	429a      	cmp	r2, r3
 8016cf8:	d106      	bne.n	8016d08 <ip4_reass+0xdc>
 8016cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfc:	899a      	ldrh	r2, [r3, #12]
 8016cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d00:	889b      	ldrh	r3, [r3, #4]
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d006      	beq.n	8016d16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8016d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d1e6      	bne.n	8016ce2 <ip4_reass+0xb6>
 8016d14:	e000      	b.n	8016d18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016d16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d109      	bne.n	8016d32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016d1e:	8c3b      	ldrh	r3, [r7, #32]
 8016d20:	4619      	mov	r1, r3
 8016d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d24:	f7ff fdb0 	bl	8016888 <ip_reass_enqueue_new_datagram>
 8016d28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d11c      	bne.n	8016d6a <ip4_reass+0x13e>
      goto nullreturn;
 8016d30:	e0f9      	b.n	8016f26 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d34:	88db      	ldrh	r3, [r3, #6]
 8016d36:	b29b      	uxth	r3, r3
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7f3 fcdd 	bl	800a6f8 <lwip_htons>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d110      	bne.n	8016d6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d4a:	89db      	ldrh	r3, [r3, #14]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7f3 fcd3 	bl	800a6f8 <lwip_htons>
 8016d52:	4603      	mov	r3, r0
 8016d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d006      	beq.n	8016d6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d5e:	3308      	adds	r3, #8
 8016d60:	2214      	movs	r2, #20
 8016d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d64:	4618      	mov	r0, r3
 8016d66:	f000 fd9c 	bl	80178a2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6c:	88db      	ldrh	r3, [r3, #6]
 8016d6e:	b29b      	uxth	r3, r3
 8016d70:	f003 0320 	and.w	r3, r3, #32
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	bf0c      	ite	eq
 8016d78:	2301      	moveq	r3, #1
 8016d7a:	2300      	movne	r3, #0
 8016d7c:	b2db      	uxtb	r3, r3
 8016d7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016d80:	69fb      	ldr	r3, [r7, #28]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d00e      	beq.n	8016da4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016d86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d8a:	4413      	add	r3, r2
 8016d8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016d8e:	8b7a      	ldrh	r2, [r7, #26]
 8016d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d92:	429a      	cmp	r2, r3
 8016d94:	f0c0 80a0 	bcc.w	8016ed8 <ip4_reass+0x2ac>
 8016d98:	8b7b      	ldrh	r3, [r7, #26]
 8016d9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	f200 809a 	bhi.w	8016ed8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016da4:	69fa      	ldr	r2, [r7, #28]
 8016da6:	6879      	ldr	r1, [r7, #4]
 8016da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016daa:	f7ff fdd5 	bl	8016958 <ip_reass_chain_frag_into_datagram_and_validate>
 8016dae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016db0:	697b      	ldr	r3, [r7, #20]
 8016db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016db6:	f000 8091 	beq.w	8016edc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016dba:	4b5f      	ldr	r3, [pc, #380]	; (8016f38 <ip4_reass+0x30c>)
 8016dbc:	881a      	ldrh	r2, [r3, #0]
 8016dbe:	8c3b      	ldrh	r3, [r7, #32]
 8016dc0:	4413      	add	r3, r2
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	4b5c      	ldr	r3, [pc, #368]	; (8016f38 <ip4_reass+0x30c>)
 8016dc6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016dc8:	69fb      	ldr	r3, [r7, #28]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d00d      	beq.n	8016dea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016dce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016dd2:	4413      	add	r3, r2
 8016dd4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd8:	8a7a      	ldrh	r2, [r7, #18]
 8016dda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dde:	7f9b      	ldrb	r3, [r3, #30]
 8016de0:	f043 0301 	orr.w	r3, r3, #1
 8016de4:	b2da      	uxtb	r2, r3
 8016de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	d171      	bne.n	8016ed4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df2:	8b9b      	ldrh	r3, [r3, #28]
 8016df4:	3314      	adds	r3, #20
 8016df6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dfa:	685b      	ldr	r3, [r3, #4]
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e04:	685b      	ldr	r3, [r3, #4]
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e0c:	3308      	adds	r3, #8
 8016e0e:	2214      	movs	r2, #20
 8016e10:	4619      	mov	r1, r3
 8016e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e14:	f000 fd45 	bl	80178a2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016e18:	8a3b      	ldrh	r3, [r7, #16]
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	f7f3 fc6c 	bl	800a6f8 <lwip_htons>
 8016e20:	4603      	mov	r3, r0
 8016e22:	461a      	mov	r2, r3
 8016e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	719a      	strb	r2, [r3, #6]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e34:	2200      	movs	r2, #0
 8016e36:	729a      	strb	r2, [r3, #10]
 8016e38:	2200      	movs	r2, #0
 8016e3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016e42:	e00d      	b.n	8016e60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e46:	685b      	ldr	r3, [r3, #4]
 8016e48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016e4a:	2114      	movs	r1, #20
 8016e4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016e4e:	f7f4 ff81 	bl	800bd54 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016e52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f7f5 f8d1 	bl	800bffc <pbuf_cat>
      r = iprh->next_pbuf;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d1ee      	bne.n	8016e44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016e66:	4b35      	ldr	r3, [pc, #212]	; (8016f3c <ip4_reass+0x310>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d102      	bne.n	8016e76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016e70:	2300      	movs	r3, #0
 8016e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e74:	e010      	b.n	8016e98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e76:	4b31      	ldr	r3, [pc, #196]	; (8016f3c <ip4_reass+0x310>)
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e7c:	e007      	b.n	8016e8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e84:	429a      	cmp	r2, r3
 8016e86:	d006      	beq.n	8016e96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d1f4      	bne.n	8016e7e <ip4_reass+0x252>
 8016e94:	e000      	b.n	8016e98 <ip4_reass+0x26c>
          break;
 8016e96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e9c:	f7ff fd2e 	bl	80168fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7f5 f86b 	bl	800bf7c <pbuf_clen>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016eaa:	4b23      	ldr	r3, [pc, #140]	; (8016f38 <ip4_reass+0x30c>)
 8016eac:	881b      	ldrh	r3, [r3, #0]
 8016eae:	8c3a      	ldrh	r2, [r7, #32]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d906      	bls.n	8016ec2 <ip4_reass+0x296>
 8016eb4:	4b22      	ldr	r3, [pc, #136]	; (8016f40 <ip4_reass+0x314>)
 8016eb6:	f240 229b 	movw	r2, #667	; 0x29b
 8016eba:	4922      	ldr	r1, [pc, #136]	; (8016f44 <ip4_reass+0x318>)
 8016ebc:	4822      	ldr	r0, [pc, #136]	; (8016f48 <ip4_reass+0x31c>)
 8016ebe:	f000 fd1d 	bl	80178fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016ec2:	4b1d      	ldr	r3, [pc, #116]	; (8016f38 <ip4_reass+0x30c>)
 8016ec4:	881a      	ldrh	r2, [r3, #0]
 8016ec6:	8c3b      	ldrh	r3, [r7, #32]
 8016ec8:	1ad3      	subs	r3, r2, r3
 8016eca:	b29a      	uxth	r2, r3
 8016ecc:	4b1a      	ldr	r3, [pc, #104]	; (8016f38 <ip4_reass+0x30c>)
 8016ece:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	e02c      	b.n	8016f2e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	e02a      	b.n	8016f2e <ip4_reass+0x302>

nullreturn_ipr:
 8016ed8:	bf00      	nop
 8016eda:	e000      	b.n	8016ede <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016edc:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d106      	bne.n	8016ef2 <ip4_reass+0x2c6>
 8016ee4:	4b16      	ldr	r3, [pc, #88]	; (8016f40 <ip4_reass+0x314>)
 8016ee6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016eea:	4918      	ldr	r1, [pc, #96]	; (8016f4c <ip4_reass+0x320>)
 8016eec:	4816      	ldr	r0, [pc, #88]	; (8016f48 <ip4_reass+0x31c>)
 8016eee:	f000 fd05 	bl	80178fc <iprintf>
  if (ipr->p == NULL) {
 8016ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef4:	685b      	ldr	r3, [r3, #4]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d114      	bne.n	8016f24 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016efa:	4b10      	ldr	r3, [pc, #64]	; (8016f3c <ip4_reass+0x310>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d006      	beq.n	8016f12 <ip4_reass+0x2e6>
 8016f04:	4b0e      	ldr	r3, [pc, #56]	; (8016f40 <ip4_reass+0x314>)
 8016f06:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016f0a:	4911      	ldr	r1, [pc, #68]	; (8016f50 <ip4_reass+0x324>)
 8016f0c:	480e      	ldr	r0, [pc, #56]	; (8016f48 <ip4_reass+0x31c>)
 8016f0e:	f000 fcf5 	bl	80178fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016f12:	2100      	movs	r1, #0
 8016f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f16:	f7ff fcf1 	bl	80168fc <ip_reass_dequeue_datagram>
 8016f1a:	e004      	b.n	8016f26 <ip4_reass+0x2fa>
    goto nullreturn;
 8016f1c:	bf00      	nop
 8016f1e:	e002      	b.n	8016f26 <ip4_reass+0x2fa>
    goto nullreturn;
 8016f20:	bf00      	nop
 8016f22:	e000      	b.n	8016f26 <ip4_reass+0x2fa>
  }

nullreturn:
 8016f24:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016f26:	6878      	ldr	r0, [r7, #4]
 8016f28:	f7f4 ff9a 	bl	800be60 <pbuf_free>
  return NULL;
 8016f2c:	2300      	movs	r3, #0
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3738      	adds	r7, #56	; 0x38
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}
 8016f36:	bf00      	nop
 8016f38:	20008794 	.word	0x20008794
 8016f3c:	20008790 	.word	0x20008790
 8016f40:	0801c348 	.word	0x0801c348
 8016f44:	0801c4b8 	.word	0x0801c4b8
 8016f48:	0801c390 	.word	0x0801c390
 8016f4c:	0801c4d4 	.word	0x0801c4d4
 8016f50:	0801c4e0 	.word	0x0801c4e0

08016f54 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016f58:	2005      	movs	r0, #5
 8016f5a:	f7f4 f883 	bl	800b064 <memp_malloc>
 8016f5e:	4603      	mov	r3, r0
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	bd80      	pop	{r7, pc}

08016f64 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d106      	bne.n	8016f80 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016f72:	4b07      	ldr	r3, [pc, #28]	; (8016f90 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016f74:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016f78:	4906      	ldr	r1, [pc, #24]	; (8016f94 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016f7a:	4807      	ldr	r0, [pc, #28]	; (8016f98 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016f7c:	f000 fcbe 	bl	80178fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016f80:	6879      	ldr	r1, [r7, #4]
 8016f82:	2005      	movs	r0, #5
 8016f84:	f7f4 f8c0 	bl	800b108 <memp_free>
}
 8016f88:	bf00      	nop
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	0801c348 	.word	0x0801c348
 8016f94:	0801c500 	.word	0x0801c500
 8016f98:	0801c390 	.word	0x0801c390

08016f9c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b084      	sub	sp, #16
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d106      	bne.n	8016fbc <ipfrag_free_pbuf_custom+0x20>
 8016fae:	4b11      	ldr	r3, [pc, #68]	; (8016ff4 <ipfrag_free_pbuf_custom+0x58>)
 8016fb0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016fb4:	4910      	ldr	r1, [pc, #64]	; (8016ff8 <ipfrag_free_pbuf_custom+0x5c>)
 8016fb6:	4811      	ldr	r0, [pc, #68]	; (8016ffc <ipfrag_free_pbuf_custom+0x60>)
 8016fb8:	f000 fca0 	bl	80178fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016fbc:	68fa      	ldr	r2, [r7, #12]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d006      	beq.n	8016fd2 <ipfrag_free_pbuf_custom+0x36>
 8016fc4:	4b0b      	ldr	r3, [pc, #44]	; (8016ff4 <ipfrag_free_pbuf_custom+0x58>)
 8016fc6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016fca:	490d      	ldr	r1, [pc, #52]	; (8017000 <ipfrag_free_pbuf_custom+0x64>)
 8016fcc:	480b      	ldr	r0, [pc, #44]	; (8016ffc <ipfrag_free_pbuf_custom+0x60>)
 8016fce:	f000 fc95 	bl	80178fc <iprintf>
  if (pcr->original != NULL) {
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	695b      	ldr	r3, [r3, #20]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d004      	beq.n	8016fe4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	695b      	ldr	r3, [r3, #20]
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7f4 ff3e 	bl	800be60 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016fe4:	68f8      	ldr	r0, [r7, #12]
 8016fe6:	f7ff ffbd 	bl	8016f64 <ip_frag_free_pbuf_custom_ref>
}
 8016fea:	bf00      	nop
 8016fec:	3710      	adds	r7, #16
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	0801c348 	.word	0x0801c348
 8016ff8:	0801c50c 	.word	0x0801c50c
 8016ffc:	0801c390 	.word	0x0801c390
 8017000:	0801c518 	.word	0x0801c518

08017004 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b094      	sub	sp, #80	; 0x50
 8017008:	af02      	add	r7, sp, #8
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017010:	2300      	movs	r3, #0
 8017012:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017016:	68bb      	ldr	r3, [r7, #8]
 8017018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801701a:	3b14      	subs	r3, #20
 801701c:	2b00      	cmp	r3, #0
 801701e:	da00      	bge.n	8017022 <ip4_frag+0x1e>
 8017020:	3307      	adds	r3, #7
 8017022:	10db      	asrs	r3, r3, #3
 8017024:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017026:	2314      	movs	r3, #20
 8017028:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	685b      	ldr	r3, [r3, #4]
 801702e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017032:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	f003 030f 	and.w	r3, r3, #15
 801703c:	b2db      	uxtb	r3, r3
 801703e:	009b      	lsls	r3, r3, #2
 8017040:	b2db      	uxtb	r3, r3
 8017042:	2b14      	cmp	r3, #20
 8017044:	d002      	beq.n	801704c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017046:	f06f 0305 	mvn.w	r3, #5
 801704a:	e10f      	b.n	801726c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	895b      	ldrh	r3, [r3, #10]
 8017050:	2b13      	cmp	r3, #19
 8017052:	d809      	bhi.n	8017068 <ip4_frag+0x64>
 8017054:	4b87      	ldr	r3, [pc, #540]	; (8017274 <ip4_frag+0x270>)
 8017056:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801705a:	4987      	ldr	r1, [pc, #540]	; (8017278 <ip4_frag+0x274>)
 801705c:	4887      	ldr	r0, [pc, #540]	; (801727c <ip4_frag+0x278>)
 801705e:	f000 fc4d 	bl	80178fc <iprintf>
 8017062:	f06f 0305 	mvn.w	r3, #5
 8017066:	e101      	b.n	801726c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706a:	88db      	ldrh	r3, [r3, #6]
 801706c:	b29b      	uxth	r3, r3
 801706e:	4618      	mov	r0, r3
 8017070:	f7f3 fb42 	bl	800a6f8 <lwip_htons>
 8017074:	4603      	mov	r3, r0
 8017076:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017078:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801707a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801707e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017088:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	891b      	ldrh	r3, [r3, #8]
 801708e:	3b14      	subs	r3, #20
 8017090:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017094:	e0e0      	b.n	8017258 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017096:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017098:	00db      	lsls	r3, r3, #3
 801709a:	b29b      	uxth	r3, r3
 801709c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170a0:	4293      	cmp	r3, r2
 80170a2:	bf28      	it	cs
 80170a4:	4613      	movcs	r3, r2
 80170a6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80170a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80170ac:	2114      	movs	r1, #20
 80170ae:	200e      	movs	r0, #14
 80170b0:	f7f4 fbf6 	bl	800b8a0 <pbuf_alloc>
 80170b4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80170b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	f000 80d4 	beq.w	8017266 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80170be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c0:	895b      	ldrh	r3, [r3, #10]
 80170c2:	2b13      	cmp	r3, #19
 80170c4:	d806      	bhi.n	80170d4 <ip4_frag+0xd0>
 80170c6:	4b6b      	ldr	r3, [pc, #428]	; (8017274 <ip4_frag+0x270>)
 80170c8:	f240 3225 	movw	r2, #805	; 0x325
 80170cc:	496c      	ldr	r1, [pc, #432]	; (8017280 <ip4_frag+0x27c>)
 80170ce:	486b      	ldr	r0, [pc, #428]	; (801727c <ip4_frag+0x278>)
 80170d0:	f000 fc14 	bl	80178fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80170d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170d6:	685b      	ldr	r3, [r3, #4]
 80170d8:	2214      	movs	r2, #20
 80170da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80170dc:	4618      	mov	r0, r3
 80170de:	f000 fbe0 	bl	80178a2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80170e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e4:	685b      	ldr	r3, [r3, #4]
 80170e6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80170e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80170ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80170ee:	e064      	b.n	80171ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	895a      	ldrh	r2, [r3, #10]
 80170f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170f6:	1ad3      	subs	r3, r2, r3
 80170f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	895b      	ldrh	r3, [r3, #10]
 80170fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017100:	429a      	cmp	r2, r3
 8017102:	d906      	bls.n	8017112 <ip4_frag+0x10e>
 8017104:	4b5b      	ldr	r3, [pc, #364]	; (8017274 <ip4_frag+0x270>)
 8017106:	f240 322d 	movw	r2, #813	; 0x32d
 801710a:	495e      	ldr	r1, [pc, #376]	; (8017284 <ip4_frag+0x280>)
 801710c:	485b      	ldr	r0, [pc, #364]	; (801727c <ip4_frag+0x278>)
 801710e:	f000 fbf5 	bl	80178fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017112:	8bfa      	ldrh	r2, [r7, #30]
 8017114:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017118:	4293      	cmp	r3, r2
 801711a:	bf28      	it	cs
 801711c:	4613      	movcs	r3, r2
 801711e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017122:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017126:	2b00      	cmp	r3, #0
 8017128:	d105      	bne.n	8017136 <ip4_frag+0x132>
        poff = 0;
 801712a:	2300      	movs	r3, #0
 801712c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	60fb      	str	r3, [r7, #12]
        continue;
 8017134:	e041      	b.n	80171ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017136:	f7ff ff0d 	bl	8016f54 <ip_frag_alloc_pbuf_custom_ref>
 801713a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801713c:	69bb      	ldr	r3, [r7, #24]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d103      	bne.n	801714a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017144:	f7f4 fe8c 	bl	800be60 <pbuf_free>
        goto memerr;
 8017148:	e08e      	b.n	8017268 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801714a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017150:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017152:	4413      	add	r3, r2
 8017154:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017158:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801715c:	9201      	str	r2, [sp, #4]
 801715e:	9300      	str	r3, [sp, #0]
 8017160:	4603      	mov	r3, r0
 8017162:	2241      	movs	r2, #65	; 0x41
 8017164:	2000      	movs	r0, #0
 8017166:	f7f4 fcc1 	bl	800baec <pbuf_alloced_custom>
 801716a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801716c:	697b      	ldr	r3, [r7, #20]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d106      	bne.n	8017180 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017172:	69b8      	ldr	r0, [r7, #24]
 8017174:	f7ff fef6 	bl	8016f64 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801717a:	f7f4 fe71 	bl	800be60 <pbuf_free>
        goto memerr;
 801717e:	e073      	b.n	8017268 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8017180:	68f8      	ldr	r0, [r7, #12]
 8017182:	f7f4 ff13 	bl	800bfac <pbuf_ref>
      pcr->original = p;
 8017186:	69bb      	ldr	r3, [r7, #24]
 8017188:	68fa      	ldr	r2, [r7, #12]
 801718a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801718c:	69bb      	ldr	r3, [r7, #24]
 801718e:	4a3e      	ldr	r2, [pc, #248]	; (8017288 <ip4_frag+0x284>)
 8017190:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017192:	6979      	ldr	r1, [r7, #20]
 8017194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017196:	f7f4 ff31 	bl	800bffc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801719a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801719e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80171a2:	1ad3      	subs	r3, r2, r3
 80171a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80171a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d004      	beq.n	80171ba <ip4_frag+0x1b6>
        poff = 0;
 80171b0:	2300      	movs	r3, #0
 80171b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80171ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d196      	bne.n	80170f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80171c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80171c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80171c8:	4413      	add	r3, r2
 80171ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80171cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80171d0:	68bb      	ldr	r3, [r7, #8]
 80171d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171d4:	3b14      	subs	r3, #20
 80171d6:	429a      	cmp	r2, r3
 80171d8:	bfd4      	ite	le
 80171da:	2301      	movle	r3, #1
 80171dc:	2300      	movgt	r3, #0
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80171e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80171e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80171ec:	6a3b      	ldr	r3, [r7, #32]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d002      	beq.n	80171f8 <ip4_frag+0x1f4>
 80171f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d003      	beq.n	8017200 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80171f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80171fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017200:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017202:	4618      	mov	r0, r3
 8017204:	f7f3 fa78 	bl	800a6f8 <lwip_htons>
 8017208:	4603      	mov	r3, r0
 801720a:	461a      	mov	r2, r3
 801720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801720e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017210:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017212:	3314      	adds	r3, #20
 8017214:	b29b      	uxth	r3, r3
 8017216:	4618      	mov	r0, r3
 8017218:	f7f3 fa6e 	bl	800a6f8 <lwip_htons>
 801721c:	4603      	mov	r3, r0
 801721e:	461a      	mov	r2, r3
 8017220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017222:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017226:	2200      	movs	r2, #0
 8017228:	729a      	strb	r2, [r3, #10]
 801722a:	2200      	movs	r2, #0
 801722c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801722e:	68bb      	ldr	r3, [r7, #8]
 8017230:	695b      	ldr	r3, [r3, #20]
 8017232:	687a      	ldr	r2, [r7, #4]
 8017234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017236:	68b8      	ldr	r0, [r7, #8]
 8017238:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801723a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801723c:	f7f4 fe10 	bl	800be60 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017240:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017244:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017246:	1ad3      	subs	r3, r2, r3
 8017248:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801724c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017250:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017252:	4413      	add	r3, r2
 8017254:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017258:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801725c:	2b00      	cmp	r3, #0
 801725e:	f47f af1a 	bne.w	8017096 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017262:	2300      	movs	r3, #0
 8017264:	e002      	b.n	801726c <ip4_frag+0x268>
      goto memerr;
 8017266:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017268:	f04f 33ff 	mov.w	r3, #4294967295
}
 801726c:	4618      	mov	r0, r3
 801726e:	3748      	adds	r7, #72	; 0x48
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}
 8017274:	0801c348 	.word	0x0801c348
 8017278:	0801c524 	.word	0x0801c524
 801727c:	0801c390 	.word	0x0801c390
 8017280:	0801c540 	.word	0x0801c540
 8017284:	0801c560 	.word	0x0801c560
 8017288:	08016f9d 	.word	0x08016f9d

0801728c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017296:	230e      	movs	r3, #14
 8017298:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	895b      	ldrh	r3, [r3, #10]
 801729e:	2b0e      	cmp	r3, #14
 80172a0:	d96e      	bls.n	8017380 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	7bdb      	ldrb	r3, [r3, #15]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d106      	bne.n	80172b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80172b0:	3301      	adds	r3, #1
 80172b2:	b2da      	uxtb	r2, r3
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	685b      	ldr	r3, [r3, #4]
 80172bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	7b1a      	ldrb	r2, [r3, #12]
 80172c2:	7b5b      	ldrb	r3, [r3, #13]
 80172c4:	021b      	lsls	r3, r3, #8
 80172c6:	4313      	orrs	r3, r2
 80172c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80172ca:	693b      	ldr	r3, [r7, #16]
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	f003 0301 	and.w	r3, r3, #1
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d023      	beq.n	801731e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80172d6:	693b      	ldr	r3, [r7, #16]
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	2b01      	cmp	r3, #1
 80172dc:	d10f      	bne.n	80172fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80172de:	693b      	ldr	r3, [r7, #16]
 80172e0:	785b      	ldrb	r3, [r3, #1]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d11b      	bne.n	801731e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80172e6:	693b      	ldr	r3, [r7, #16]
 80172e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80172ea:	2b5e      	cmp	r3, #94	; 0x5e
 80172ec:	d117      	bne.n	801731e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	7b5b      	ldrb	r3, [r3, #13]
 80172f2:	f043 0310 	orr.w	r3, r3, #16
 80172f6:	b2da      	uxtb	r2, r3
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	735a      	strb	r2, [r3, #13]
 80172fc:	e00f      	b.n	801731e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	2206      	movs	r2, #6
 8017302:	4928      	ldr	r1, [pc, #160]	; (80173a4 <ethernet_input+0x118>)
 8017304:	4618      	mov	r0, r3
 8017306:	f000 fabd 	bl	8017884 <memcmp>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d106      	bne.n	801731e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	7b5b      	ldrb	r3, [r3, #13]
 8017314:	f043 0308 	orr.w	r3, r3, #8
 8017318:	b2da      	uxtb	r2, r3
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801731e:	89fb      	ldrh	r3, [r7, #14]
 8017320:	2b08      	cmp	r3, #8
 8017322:	d003      	beq.n	801732c <ethernet_input+0xa0>
 8017324:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017328:	d014      	beq.n	8017354 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801732a:	e032      	b.n	8017392 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017332:	f003 0308 	and.w	r3, r3, #8
 8017336:	2b00      	cmp	r3, #0
 8017338:	d024      	beq.n	8017384 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801733a:	8afb      	ldrh	r3, [r7, #22]
 801733c:	4619      	mov	r1, r3
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f7f4 fd08 	bl	800bd54 <pbuf_remove_header>
 8017344:	4603      	mov	r3, r0
 8017346:	2b00      	cmp	r3, #0
 8017348:	d11e      	bne.n	8017388 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801734a:	6839      	ldr	r1, [r7, #0]
 801734c:	6878      	ldr	r0, [r7, #4]
 801734e:	f7fe ff0f 	bl	8016170 <ip4_input>
      break;
 8017352:	e013      	b.n	801737c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801735a:	f003 0308 	and.w	r3, r3, #8
 801735e:	2b00      	cmp	r3, #0
 8017360:	d014      	beq.n	801738c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017362:	8afb      	ldrh	r3, [r7, #22]
 8017364:	4619      	mov	r1, r3
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f7f4 fcf4 	bl	800bd54 <pbuf_remove_header>
 801736c:	4603      	mov	r3, r0
 801736e:	2b00      	cmp	r3, #0
 8017370:	d10e      	bne.n	8017390 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017372:	6839      	ldr	r1, [r7, #0]
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7fe f8ab 	bl	80154d0 <etharp_input>
      break;
 801737a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801737c:	2300      	movs	r3, #0
 801737e:	e00c      	b.n	801739a <ethernet_input+0x10e>
    goto free_and_return;
 8017380:	bf00      	nop
 8017382:	e006      	b.n	8017392 <ethernet_input+0x106>
        goto free_and_return;
 8017384:	bf00      	nop
 8017386:	e004      	b.n	8017392 <ethernet_input+0x106>
        goto free_and_return;
 8017388:	bf00      	nop
 801738a:	e002      	b.n	8017392 <ethernet_input+0x106>
        goto free_and_return;
 801738c:	bf00      	nop
 801738e:	e000      	b.n	8017392 <ethernet_input+0x106>
        goto free_and_return;
 8017390:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f7f4 fd64 	bl	800be60 <pbuf_free>
  return ERR_OK;
 8017398:	2300      	movs	r3, #0
}
 801739a:	4618      	mov	r0, r3
 801739c:	3718      	adds	r7, #24
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	0801c748 	.word	0x0801c748

080173a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b086      	sub	sp, #24
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	607a      	str	r2, [r7, #4]
 80173b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80173b6:	8c3b      	ldrh	r3, [r7, #32]
 80173b8:	4618      	mov	r0, r3
 80173ba:	f7f3 f99d 	bl	800a6f8 <lwip_htons>
 80173be:	4603      	mov	r3, r0
 80173c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80173c2:	210e      	movs	r1, #14
 80173c4:	68b8      	ldr	r0, [r7, #8]
 80173c6:	f7f4 fcb5 	bl	800bd34 <pbuf_add_header>
 80173ca:	4603      	mov	r3, r0
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d125      	bne.n	801741c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	685b      	ldr	r3, [r3, #4]
 80173d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80173d6:	693b      	ldr	r3, [r7, #16]
 80173d8:	8afa      	ldrh	r2, [r7, #22]
 80173da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	2206      	movs	r2, #6
 80173e0:	6839      	ldr	r1, [r7, #0]
 80173e2:	4618      	mov	r0, r3
 80173e4:	f000 fa5d 	bl	80178a2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	3306      	adds	r3, #6
 80173ec:	2206      	movs	r2, #6
 80173ee:	6879      	ldr	r1, [r7, #4]
 80173f0:	4618      	mov	r0, r3
 80173f2:	f000 fa56 	bl	80178a2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80173fc:	2b06      	cmp	r3, #6
 80173fe:	d006      	beq.n	801740e <ethernet_output+0x66>
 8017400:	4b0a      	ldr	r3, [pc, #40]	; (801742c <ethernet_output+0x84>)
 8017402:	f240 1233 	movw	r2, #307	; 0x133
 8017406:	490a      	ldr	r1, [pc, #40]	; (8017430 <ethernet_output+0x88>)
 8017408:	480a      	ldr	r0, [pc, #40]	; (8017434 <ethernet_output+0x8c>)
 801740a:	f000 fa77 	bl	80178fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	699b      	ldr	r3, [r3, #24]
 8017412:	68b9      	ldr	r1, [r7, #8]
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	4798      	blx	r3
 8017418:	4603      	mov	r3, r0
 801741a:	e002      	b.n	8017422 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801741c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801741e:	f06f 0301 	mvn.w	r3, #1
}
 8017422:	4618      	mov	r0, r3
 8017424:	3718      	adds	r7, #24
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	0801c570 	.word	0x0801c570
 8017430:	0801c5a8 	.word	0x0801c5a8
 8017434:	0801c5dc 	.word	0x0801c5dc

08017438 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b086      	sub	sp, #24
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	60bb      	str	r3, [r7, #8]
 8017446:	2304      	movs	r3, #4
 8017448:	60fb      	str	r3, [r7, #12]
 801744a:	2300      	movs	r3, #0
 801744c:	613b      	str	r3, [r7, #16]
 801744e:	2300      	movs	r3, #0
 8017450:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017452:	f107 0308 	add.w	r3, r7, #8
 8017456:	2100      	movs	r1, #0
 8017458:	4618      	mov	r0, r3
 801745a:	f7ee f8bc 	bl	80055d6 <osMessageCreate>
 801745e:	4602      	mov	r2, r0
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d102      	bne.n	8017472 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801746c:	f04f 33ff 	mov.w	r3, #4294967295
 8017470:	e000      	b.n	8017474 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017472:	2300      	movs	r3, #0
}
 8017474:	4618      	mov	r0, r3
 8017476:	3718      	adds	r7, #24
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}

0801747c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b082      	sub	sp, #8
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	4618      	mov	r0, r3
 801748a:	f7ee f981 	bl	8005790 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	4618      	mov	r0, r3
 8017494:	f7ee f992 	bl	80057bc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017498:	bf00      	nop
 801749a:	3708      	adds	r7, #8
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}

080174a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b084      	sub	sp, #16
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
 80174a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	6839      	ldr	r1, [r7, #0]
 80174b0:	2200      	movs	r2, #0
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7ee f8b8 	bl	8005628 <osMessagePut>
 80174b8:	4603      	mov	r3, r0
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d102      	bne.n	80174c4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80174be:	2300      	movs	r3, #0
 80174c0:	73fb      	strb	r3, [r7, #15]
 80174c2:	e001      	b.n	80174c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80174c4:	23ff      	movs	r3, #255	; 0xff
 80174c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80174c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174cc:	4618      	mov	r0, r3
 80174ce:	3710      	adds	r7, #16
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}

080174d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b08c      	sub	sp, #48	; 0x30
 80174d8:	af00      	add	r7, sp, #0
 80174da:	61f8      	str	r0, [r7, #28]
 80174dc:	61b9      	str	r1, [r7, #24]
 80174de:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80174e0:	f7ed fea1 	bl	8005226 <osKernelSysTick>
 80174e4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80174e6:	697b      	ldr	r3, [r7, #20]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d017      	beq.n	801751c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80174ec:	69fb      	ldr	r3, [r7, #28]
 80174ee:	6819      	ldr	r1, [r3, #0]
 80174f0:	f107 0320 	add.w	r3, r7, #32
 80174f4:	697a      	ldr	r2, [r7, #20]
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7ee f8d6 	bl	80056a8 <osMessageGet>

    if(event.status == osEventMessage)
 80174fc:	6a3b      	ldr	r3, [r7, #32]
 80174fe:	2b10      	cmp	r3, #16
 8017500:	d109      	bne.n	8017516 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017504:	461a      	mov	r2, r3
 8017506:	69bb      	ldr	r3, [r7, #24]
 8017508:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801750a:	f7ed fe8c 	bl	8005226 <osKernelSysTick>
 801750e:	4602      	mov	r2, r0
 8017510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017512:	1ad3      	subs	r3, r2, r3
 8017514:	e019      	b.n	801754a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017516:	f04f 33ff 	mov.w	r3, #4294967295
 801751a:	e016      	b.n	801754a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	6819      	ldr	r1, [r3, #0]
 8017520:	463b      	mov	r3, r7
 8017522:	f04f 32ff 	mov.w	r2, #4294967295
 8017526:	4618      	mov	r0, r3
 8017528:	f7ee f8be 	bl	80056a8 <osMessageGet>
 801752c:	f107 0320 	add.w	r3, r7, #32
 8017530:	463a      	mov	r2, r7
 8017532:	ca07      	ldmia	r2, {r0, r1, r2}
 8017534:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801753a:	461a      	mov	r2, r3
 801753c:	69bb      	ldr	r3, [r7, #24]
 801753e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017540:	f7ed fe71 	bl	8005226 <osKernelSysTick>
 8017544:	4602      	mov	r2, r0
 8017546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017548:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801754a:	4618      	mov	r0, r3
 801754c:	3730      	adds	r7, #48	; 0x30
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}

08017552 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017552:	b580      	push	{r7, lr}
 8017554:	b086      	sub	sp, #24
 8017556:	af00      	add	r7, sp, #0
 8017558:	6078      	str	r0, [r7, #4]
 801755a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6819      	ldr	r1, [r3, #0]
 8017560:	f107 030c 	add.w	r3, r7, #12
 8017564:	2200      	movs	r2, #0
 8017566:	4618      	mov	r0, r3
 8017568:	f7ee f89e 	bl	80056a8 <osMessageGet>

  if(event.status == osEventMessage)
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	2b10      	cmp	r3, #16
 8017570:	d105      	bne.n	801757e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	461a      	mov	r2, r3
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801757a:	2300      	movs	r3, #0
 801757c:	e001      	b.n	8017582 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801757e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017582:	4618      	mov	r0, r3
 8017584:	3718      	adds	r7, #24
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}

0801758a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801758a:	b480      	push	{r7}
 801758c:	b083      	sub	sp, #12
 801758e:	af00      	add	r7, sp, #0
 8017590:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d101      	bne.n	801759e <sys_mbox_valid+0x14>
    return 0;
 801759a:	2300      	movs	r3, #0
 801759c:	e000      	b.n	80175a0 <sys_mbox_valid+0x16>
  else
    return 1;
 801759e:	2301      	movs	r3, #1
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	370c      	adds	r7, #12
 80175a4:	46bd      	mov	sp, r7
 80175a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175aa:	4770      	bx	lr

080175ac <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80175ac:	b480      	push	{r7}
 80175ae:	b083      	sub	sp, #12
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2200      	movs	r2, #0
 80175b8:	601a      	str	r2, [r3, #0]
}
 80175ba:	bf00      	nop
 80175bc:	370c      	adds	r7, #12
 80175be:	46bd      	mov	sp, r7
 80175c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c4:	4770      	bx	lr

080175c6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80175c6:	b580      	push	{r7, lr}
 80175c8:	b084      	sub	sp, #16
 80175ca:	af00      	add	r7, sp, #0
 80175cc:	6078      	str	r0, [r7, #4]
 80175ce:	460b      	mov	r3, r1
 80175d0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80175d2:	2300      	movs	r3, #0
 80175d4:	60bb      	str	r3, [r7, #8]
 80175d6:	2300      	movs	r3, #0
 80175d8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80175da:	f107 0308 	add.w	r3, r7, #8
 80175de:	2101      	movs	r1, #1
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7ed ff2d 	bl	8005440 <osSemaphoreCreate>
 80175e6:	4602      	mov	r2, r0
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d102      	bne.n	80175fa <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80175f4:	f04f 33ff 	mov.w	r3, #4294967295
 80175f8:	e009      	b.n	801760e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80175fa:	78fb      	ldrb	r3, [r7, #3]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d105      	bne.n	801760c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	2100      	movs	r1, #0
 8017606:	4618      	mov	r0, r3
 8017608:	f7ed ff4e 	bl	80054a8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801760c:	2300      	movs	r3, #0
}
 801760e:	4618      	mov	r0, r3
 8017610:	3710      	adds	r7, #16
 8017612:	46bd      	mov	sp, r7
 8017614:	bd80      	pop	{r7, pc}

08017616 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017616:	b580      	push	{r7, lr}
 8017618:	b084      	sub	sp, #16
 801761a:	af00      	add	r7, sp, #0
 801761c:	6078      	str	r0, [r7, #4]
 801761e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017620:	f7ed fe01 	bl	8005226 <osKernelSysTick>
 8017624:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017626:	683b      	ldr	r3, [r7, #0]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d011      	beq.n	8017650 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	6839      	ldr	r1, [r7, #0]
 8017632:	4618      	mov	r0, r3
 8017634:	f7ed ff38 	bl	80054a8 <osSemaphoreWait>
 8017638:	4603      	mov	r3, r0
 801763a:	2b00      	cmp	r3, #0
 801763c:	d105      	bne.n	801764a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801763e:	f7ed fdf2 	bl	8005226 <osKernelSysTick>
 8017642:	4602      	mov	r2, r0
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	1ad3      	subs	r3, r2, r3
 8017648:	e012      	b.n	8017670 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801764a:	f04f 33ff 	mov.w	r3, #4294967295
 801764e:	e00f      	b.n	8017670 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017650:	bf00      	nop
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	f04f 31ff 	mov.w	r1, #4294967295
 801765a:	4618      	mov	r0, r3
 801765c:	f7ed ff24 	bl	80054a8 <osSemaphoreWait>
 8017660:	4603      	mov	r3, r0
 8017662:	2b00      	cmp	r3, #0
 8017664:	d1f5      	bne.n	8017652 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017666:	f7ed fdde 	bl	8005226 <osKernelSysTick>
 801766a:	4602      	mov	r2, r0
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017670:	4618      	mov	r0, r3
 8017672:	3710      	adds	r7, #16
 8017674:	46bd      	mov	sp, r7
 8017676:	bd80      	pop	{r7, pc}

08017678 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b082      	sub	sp, #8
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	4618      	mov	r0, r3
 8017686:	f7ed ff5d 	bl	8005544 <osSemaphoreRelease>
}
 801768a:	bf00      	nop
 801768c:	3708      	adds	r7, #8
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}

08017692 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017692:	b580      	push	{r7, lr}
 8017694:	b082      	sub	sp, #8
 8017696:	af00      	add	r7, sp, #0
 8017698:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	4618      	mov	r0, r3
 80176a0:	f7ed ff86 	bl	80055b0 <osSemaphoreDelete>
}
 80176a4:	bf00      	nop
 80176a6:	3708      	adds	r7, #8
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80176ac:	b480      	push	{r7}
 80176ae:	b083      	sub	sp, #12
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d101      	bne.n	80176c0 <sys_sem_valid+0x14>
    return 0;
 80176bc:	2300      	movs	r3, #0
 80176be:	e000      	b.n	80176c2 <sys_sem_valid+0x16>
  else
    return 1;
 80176c0:	2301      	movs	r3, #1
}
 80176c2:	4618      	mov	r0, r3
 80176c4:	370c      	adds	r7, #12
 80176c6:	46bd      	mov	sp, r7
 80176c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176cc:	4770      	bx	lr

080176ce <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80176ce:	b480      	push	{r7}
 80176d0:	b083      	sub	sp, #12
 80176d2:	af00      	add	r7, sp, #0
 80176d4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2200      	movs	r2, #0
 80176da:	601a      	str	r2, [r3, #0]
}
 80176dc:	bf00      	nop
 80176de:	370c      	adds	r7, #12
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr

080176e8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80176ec:	4803      	ldr	r0, [pc, #12]	; (80176fc <sys_init+0x14>)
 80176ee:	f7ed fe0a 	bl	8005306 <osMutexCreate>
 80176f2:	4602      	mov	r2, r0
 80176f4:	4b02      	ldr	r3, [pc, #8]	; (8017700 <sys_init+0x18>)
 80176f6:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80176f8:	bf00      	nop
 80176fa:	bd80      	pop	{r7, pc}
 80176fc:	0801c758 	.word	0x0801c758
 8017700:	2000f524 	.word	0x2000f524

08017704 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017704:	b580      	push	{r7, lr}
 8017706:	b084      	sub	sp, #16
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801770c:	2300      	movs	r3, #0
 801770e:	60bb      	str	r3, [r7, #8]
 8017710:	2300      	movs	r3, #0
 8017712:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017714:	f107 0308 	add.w	r3, r7, #8
 8017718:	4618      	mov	r0, r3
 801771a:	f7ed fdf4 	bl	8005306 <osMutexCreate>
 801771e:	4602      	mov	r2, r0
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d102      	bne.n	8017732 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801772c:	f04f 33ff 	mov.w	r3, #4294967295
 8017730:	e000      	b.n	8017734 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017732:	2300      	movs	r3, #0
}
 8017734:	4618      	mov	r0, r3
 8017736:	3710      	adds	r7, #16
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	f04f 31ff 	mov.w	r1, #4294967295
 801774c:	4618      	mov	r0, r3
 801774e:	f7ed fdf3 	bl	8005338 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017752:	bf00      	nop
 8017754:	3708      	adds	r7, #8
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}

0801775a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801775a:	b580      	push	{r7, lr}
 801775c:	b082      	sub	sp, #8
 801775e:	af00      	add	r7, sp, #0
 8017760:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	4618      	mov	r0, r3
 8017768:	f7ed fe34 	bl	80053d4 <osMutexRelease>
}
 801776c:	bf00      	nop
 801776e:	3708      	adds	r7, #8
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}

08017774 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b08c      	sub	sp, #48	; 0x30
 8017778:	af00      	add	r7, sp, #0
 801777a:	60f8      	str	r0, [r7, #12]
 801777c:	60b9      	str	r1, [r7, #8]
 801777e:	607a      	str	r2, [r7, #4]
 8017780:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017782:	f107 0314 	add.w	r3, r7, #20
 8017786:	2200      	movs	r2, #0
 8017788:	601a      	str	r2, [r3, #0]
 801778a:	605a      	str	r2, [r3, #4]
 801778c:	609a      	str	r2, [r3, #8]
 801778e:	60da      	str	r2, [r3, #12]
 8017790:	611a      	str	r2, [r3, #16]
 8017792:	615a      	str	r2, [r3, #20]
 8017794:	619a      	str	r2, [r3, #24]
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	617b      	str	r3, [r7, #20]
 801779a:	68bb      	ldr	r3, [r7, #8]
 801779c:	61bb      	str	r3, [r7, #24]
 801779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177a0:	b21b      	sxth	r3, r3
 80177a2:	83bb      	strh	r3, [r7, #28]
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80177a8:	f107 0314 	add.w	r3, r7, #20
 80177ac:	6879      	ldr	r1, [r7, #4]
 80177ae:	4618      	mov	r0, r3
 80177b0:	f7ed fd49 	bl	8005246 <osThreadCreate>
 80177b4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80177b6:	4618      	mov	r0, r3
 80177b8:	3730      	adds	r7, #48	; 0x30
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}
	...

080177c0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80177c4:	4b04      	ldr	r3, [pc, #16]	; (80177d8 <sys_arch_protect+0x18>)
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	f04f 31ff 	mov.w	r1, #4294967295
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7ed fdb3 	bl	8005338 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80177d2:	2301      	movs	r3, #1
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	bd80      	pop	{r7, pc}
 80177d8:	2000f524 	.word	0x2000f524

080177dc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b082      	sub	sp, #8
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80177e4:	4b04      	ldr	r3, [pc, #16]	; (80177f8 <sys_arch_unprotect+0x1c>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7ed fdf3 	bl	80053d4 <osMutexRelease>
}
 80177ee:	bf00      	nop
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}
 80177f6:	bf00      	nop
 80177f8:	2000f524 	.word	0x2000f524

080177fc <__libc_init_array>:
 80177fc:	b570      	push	{r4, r5, r6, lr}
 80177fe:	4e0d      	ldr	r6, [pc, #52]	; (8017834 <__libc_init_array+0x38>)
 8017800:	4c0d      	ldr	r4, [pc, #52]	; (8017838 <__libc_init_array+0x3c>)
 8017802:	1ba4      	subs	r4, r4, r6
 8017804:	10a4      	asrs	r4, r4, #2
 8017806:	2500      	movs	r5, #0
 8017808:	42a5      	cmp	r5, r4
 801780a:	d109      	bne.n	8017820 <__libc_init_array+0x24>
 801780c:	4e0b      	ldr	r6, [pc, #44]	; (801783c <__libc_init_array+0x40>)
 801780e:	4c0c      	ldr	r4, [pc, #48]	; (8017840 <__libc_init_array+0x44>)
 8017810:	f001 f9f2 	bl	8018bf8 <_init>
 8017814:	1ba4      	subs	r4, r4, r6
 8017816:	10a4      	asrs	r4, r4, #2
 8017818:	2500      	movs	r5, #0
 801781a:	42a5      	cmp	r5, r4
 801781c:	d105      	bne.n	801782a <__libc_init_array+0x2e>
 801781e:	bd70      	pop	{r4, r5, r6, pc}
 8017820:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017824:	4798      	blx	r3
 8017826:	3501      	adds	r5, #1
 8017828:	e7ee      	b.n	8017808 <__libc_init_array+0xc>
 801782a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801782e:	4798      	blx	r3
 8017830:	3501      	adds	r5, #1
 8017832:	e7f2      	b.n	801781a <__libc_init_array+0x1e>
 8017834:	0801c90c 	.word	0x0801c90c
 8017838:	0801c90c 	.word	0x0801c90c
 801783c:	0801c90c 	.word	0x0801c90c
 8017840:	0801c910 	.word	0x0801c910

08017844 <__locale_ctype_ptr>:
 8017844:	4b04      	ldr	r3, [pc, #16]	; (8017858 <__locale_ctype_ptr+0x14>)
 8017846:	4a05      	ldr	r2, [pc, #20]	; (801785c <__locale_ctype_ptr+0x18>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	6a1b      	ldr	r3, [r3, #32]
 801784c:	2b00      	cmp	r3, #0
 801784e:	bf08      	it	eq
 8017850:	4613      	moveq	r3, r2
 8017852:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017856:	4770      	bx	lr
 8017858:	20000020 	.word	0x20000020
 801785c:	20000084 	.word	0x20000084

08017860 <__ascii_mbtowc>:
 8017860:	b082      	sub	sp, #8
 8017862:	b901      	cbnz	r1, 8017866 <__ascii_mbtowc+0x6>
 8017864:	a901      	add	r1, sp, #4
 8017866:	b142      	cbz	r2, 801787a <__ascii_mbtowc+0x1a>
 8017868:	b14b      	cbz	r3, 801787e <__ascii_mbtowc+0x1e>
 801786a:	7813      	ldrb	r3, [r2, #0]
 801786c:	600b      	str	r3, [r1, #0]
 801786e:	7812      	ldrb	r2, [r2, #0]
 8017870:	1c10      	adds	r0, r2, #0
 8017872:	bf18      	it	ne
 8017874:	2001      	movne	r0, #1
 8017876:	b002      	add	sp, #8
 8017878:	4770      	bx	lr
 801787a:	4610      	mov	r0, r2
 801787c:	e7fb      	b.n	8017876 <__ascii_mbtowc+0x16>
 801787e:	f06f 0001 	mvn.w	r0, #1
 8017882:	e7f8      	b.n	8017876 <__ascii_mbtowc+0x16>

08017884 <memcmp>:
 8017884:	b530      	push	{r4, r5, lr}
 8017886:	2400      	movs	r4, #0
 8017888:	42a2      	cmp	r2, r4
 801788a:	d101      	bne.n	8017890 <memcmp+0xc>
 801788c:	2000      	movs	r0, #0
 801788e:	e007      	b.n	80178a0 <memcmp+0x1c>
 8017890:	5d03      	ldrb	r3, [r0, r4]
 8017892:	3401      	adds	r4, #1
 8017894:	190d      	adds	r5, r1, r4
 8017896:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801789a:	42ab      	cmp	r3, r5
 801789c:	d0f4      	beq.n	8017888 <memcmp+0x4>
 801789e:	1b58      	subs	r0, r3, r5
 80178a0:	bd30      	pop	{r4, r5, pc}

080178a2 <memcpy>:
 80178a2:	b510      	push	{r4, lr}
 80178a4:	1e43      	subs	r3, r0, #1
 80178a6:	440a      	add	r2, r1
 80178a8:	4291      	cmp	r1, r2
 80178aa:	d100      	bne.n	80178ae <memcpy+0xc>
 80178ac:	bd10      	pop	{r4, pc}
 80178ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178b6:	e7f7      	b.n	80178a8 <memcpy+0x6>

080178b8 <memmove>:
 80178b8:	4288      	cmp	r0, r1
 80178ba:	b510      	push	{r4, lr}
 80178bc:	eb01 0302 	add.w	r3, r1, r2
 80178c0:	d807      	bhi.n	80178d2 <memmove+0x1a>
 80178c2:	1e42      	subs	r2, r0, #1
 80178c4:	4299      	cmp	r1, r3
 80178c6:	d00a      	beq.n	80178de <memmove+0x26>
 80178c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80178d0:	e7f8      	b.n	80178c4 <memmove+0xc>
 80178d2:	4283      	cmp	r3, r0
 80178d4:	d9f5      	bls.n	80178c2 <memmove+0xa>
 80178d6:	1881      	adds	r1, r0, r2
 80178d8:	1ad2      	subs	r2, r2, r3
 80178da:	42d3      	cmn	r3, r2
 80178dc:	d100      	bne.n	80178e0 <memmove+0x28>
 80178de:	bd10      	pop	{r4, pc}
 80178e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80178e8:	e7f7      	b.n	80178da <memmove+0x22>

080178ea <memset>:
 80178ea:	4402      	add	r2, r0
 80178ec:	4603      	mov	r3, r0
 80178ee:	4293      	cmp	r3, r2
 80178f0:	d100      	bne.n	80178f4 <memset+0xa>
 80178f2:	4770      	bx	lr
 80178f4:	f803 1b01 	strb.w	r1, [r3], #1
 80178f8:	e7f9      	b.n	80178ee <memset+0x4>
	...

080178fc <iprintf>:
 80178fc:	b40f      	push	{r0, r1, r2, r3}
 80178fe:	4b0a      	ldr	r3, [pc, #40]	; (8017928 <iprintf+0x2c>)
 8017900:	b513      	push	{r0, r1, r4, lr}
 8017902:	681c      	ldr	r4, [r3, #0]
 8017904:	b124      	cbz	r4, 8017910 <iprintf+0x14>
 8017906:	69a3      	ldr	r3, [r4, #24]
 8017908:	b913      	cbnz	r3, 8017910 <iprintf+0x14>
 801790a:	4620      	mov	r0, r4
 801790c:	f000 fad0 	bl	8017eb0 <__sinit>
 8017910:	ab05      	add	r3, sp, #20
 8017912:	9a04      	ldr	r2, [sp, #16]
 8017914:	68a1      	ldr	r1, [r4, #8]
 8017916:	9301      	str	r3, [sp, #4]
 8017918:	4620      	mov	r0, r4
 801791a:	f000 fde3 	bl	80184e4 <_vfiprintf_r>
 801791e:	b002      	add	sp, #8
 8017920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017924:	b004      	add	sp, #16
 8017926:	4770      	bx	lr
 8017928:	20000020 	.word	0x20000020

0801792c <_puts_r>:
 801792c:	b570      	push	{r4, r5, r6, lr}
 801792e:	460e      	mov	r6, r1
 8017930:	4605      	mov	r5, r0
 8017932:	b118      	cbz	r0, 801793c <_puts_r+0x10>
 8017934:	6983      	ldr	r3, [r0, #24]
 8017936:	b90b      	cbnz	r3, 801793c <_puts_r+0x10>
 8017938:	f000 faba 	bl	8017eb0 <__sinit>
 801793c:	69ab      	ldr	r3, [r5, #24]
 801793e:	68ac      	ldr	r4, [r5, #8]
 8017940:	b913      	cbnz	r3, 8017948 <_puts_r+0x1c>
 8017942:	4628      	mov	r0, r5
 8017944:	f000 fab4 	bl	8017eb0 <__sinit>
 8017948:	4b23      	ldr	r3, [pc, #140]	; (80179d8 <_puts_r+0xac>)
 801794a:	429c      	cmp	r4, r3
 801794c:	d117      	bne.n	801797e <_puts_r+0x52>
 801794e:	686c      	ldr	r4, [r5, #4]
 8017950:	89a3      	ldrh	r3, [r4, #12]
 8017952:	071b      	lsls	r3, r3, #28
 8017954:	d51d      	bpl.n	8017992 <_puts_r+0x66>
 8017956:	6923      	ldr	r3, [r4, #16]
 8017958:	b1db      	cbz	r3, 8017992 <_puts_r+0x66>
 801795a:	3e01      	subs	r6, #1
 801795c:	68a3      	ldr	r3, [r4, #8]
 801795e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017962:	3b01      	subs	r3, #1
 8017964:	60a3      	str	r3, [r4, #8]
 8017966:	b9e9      	cbnz	r1, 80179a4 <_puts_r+0x78>
 8017968:	2b00      	cmp	r3, #0
 801796a:	da2e      	bge.n	80179ca <_puts_r+0x9e>
 801796c:	4622      	mov	r2, r4
 801796e:	210a      	movs	r1, #10
 8017970:	4628      	mov	r0, r5
 8017972:	f000 f8df 	bl	8017b34 <__swbuf_r>
 8017976:	3001      	adds	r0, #1
 8017978:	d011      	beq.n	801799e <_puts_r+0x72>
 801797a:	200a      	movs	r0, #10
 801797c:	e011      	b.n	80179a2 <_puts_r+0x76>
 801797e:	4b17      	ldr	r3, [pc, #92]	; (80179dc <_puts_r+0xb0>)
 8017980:	429c      	cmp	r4, r3
 8017982:	d101      	bne.n	8017988 <_puts_r+0x5c>
 8017984:	68ac      	ldr	r4, [r5, #8]
 8017986:	e7e3      	b.n	8017950 <_puts_r+0x24>
 8017988:	4b15      	ldr	r3, [pc, #84]	; (80179e0 <_puts_r+0xb4>)
 801798a:	429c      	cmp	r4, r3
 801798c:	bf08      	it	eq
 801798e:	68ec      	ldreq	r4, [r5, #12]
 8017990:	e7de      	b.n	8017950 <_puts_r+0x24>
 8017992:	4621      	mov	r1, r4
 8017994:	4628      	mov	r0, r5
 8017996:	f000 f92d 	bl	8017bf4 <__swsetup_r>
 801799a:	2800      	cmp	r0, #0
 801799c:	d0dd      	beq.n	801795a <_puts_r+0x2e>
 801799e:	f04f 30ff 	mov.w	r0, #4294967295
 80179a2:	bd70      	pop	{r4, r5, r6, pc}
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	da04      	bge.n	80179b2 <_puts_r+0x86>
 80179a8:	69a2      	ldr	r2, [r4, #24]
 80179aa:	429a      	cmp	r2, r3
 80179ac:	dc06      	bgt.n	80179bc <_puts_r+0x90>
 80179ae:	290a      	cmp	r1, #10
 80179b0:	d004      	beq.n	80179bc <_puts_r+0x90>
 80179b2:	6823      	ldr	r3, [r4, #0]
 80179b4:	1c5a      	adds	r2, r3, #1
 80179b6:	6022      	str	r2, [r4, #0]
 80179b8:	7019      	strb	r1, [r3, #0]
 80179ba:	e7cf      	b.n	801795c <_puts_r+0x30>
 80179bc:	4622      	mov	r2, r4
 80179be:	4628      	mov	r0, r5
 80179c0:	f000 f8b8 	bl	8017b34 <__swbuf_r>
 80179c4:	3001      	adds	r0, #1
 80179c6:	d1c9      	bne.n	801795c <_puts_r+0x30>
 80179c8:	e7e9      	b.n	801799e <_puts_r+0x72>
 80179ca:	6823      	ldr	r3, [r4, #0]
 80179cc:	200a      	movs	r0, #10
 80179ce:	1c5a      	adds	r2, r3, #1
 80179d0:	6022      	str	r2, [r4, #0]
 80179d2:	7018      	strb	r0, [r3, #0]
 80179d4:	e7e5      	b.n	80179a2 <_puts_r+0x76>
 80179d6:	bf00      	nop
 80179d8:	0801c890 	.word	0x0801c890
 80179dc:	0801c8b0 	.word	0x0801c8b0
 80179e0:	0801c870 	.word	0x0801c870

080179e4 <puts>:
 80179e4:	4b02      	ldr	r3, [pc, #8]	; (80179f0 <puts+0xc>)
 80179e6:	4601      	mov	r1, r0
 80179e8:	6818      	ldr	r0, [r3, #0]
 80179ea:	f7ff bf9f 	b.w	801792c <_puts_r>
 80179ee:	bf00      	nop
 80179f0:	20000020 	.word	0x20000020

080179f4 <rand>:
 80179f4:	b538      	push	{r3, r4, r5, lr}
 80179f6:	4b13      	ldr	r3, [pc, #76]	; (8017a44 <rand+0x50>)
 80179f8:	681c      	ldr	r4, [r3, #0]
 80179fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80179fc:	b97b      	cbnz	r3, 8017a1e <rand+0x2a>
 80179fe:	2018      	movs	r0, #24
 8017a00:	f000 fb44 	bl	801808c <malloc>
 8017a04:	4a10      	ldr	r2, [pc, #64]	; (8017a48 <rand+0x54>)
 8017a06:	4b11      	ldr	r3, [pc, #68]	; (8017a4c <rand+0x58>)
 8017a08:	63a0      	str	r0, [r4, #56]	; 0x38
 8017a0a:	e9c0 2300 	strd	r2, r3, [r0]
 8017a0e:	4b10      	ldr	r3, [pc, #64]	; (8017a50 <rand+0x5c>)
 8017a10:	6083      	str	r3, [r0, #8]
 8017a12:	230b      	movs	r3, #11
 8017a14:	8183      	strh	r3, [r0, #12]
 8017a16:	2201      	movs	r2, #1
 8017a18:	2300      	movs	r3, #0
 8017a1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017a1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017a20:	480c      	ldr	r0, [pc, #48]	; (8017a54 <rand+0x60>)
 8017a22:	690a      	ldr	r2, [r1, #16]
 8017a24:	694b      	ldr	r3, [r1, #20]
 8017a26:	4c0c      	ldr	r4, [pc, #48]	; (8017a58 <rand+0x64>)
 8017a28:	4350      	muls	r0, r2
 8017a2a:	fb04 0003 	mla	r0, r4, r3, r0
 8017a2e:	fba2 2304 	umull	r2, r3, r2, r4
 8017a32:	4403      	add	r3, r0
 8017a34:	1c54      	adds	r4, r2, #1
 8017a36:	f143 0500 	adc.w	r5, r3, #0
 8017a3a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017a3e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017a42:	bd38      	pop	{r3, r4, r5, pc}
 8017a44:	20000020 	.word	0x20000020
 8017a48:	abcd330e 	.word	0xabcd330e
 8017a4c:	e66d1234 	.word	0xe66d1234
 8017a50:	0005deec 	.word	0x0005deec
 8017a54:	5851f42d 	.word	0x5851f42d
 8017a58:	4c957f2d 	.word	0x4c957f2d

08017a5c <siprintf>:
 8017a5c:	b40e      	push	{r1, r2, r3}
 8017a5e:	b500      	push	{lr}
 8017a60:	b09c      	sub	sp, #112	; 0x70
 8017a62:	ab1d      	add	r3, sp, #116	; 0x74
 8017a64:	9002      	str	r0, [sp, #8]
 8017a66:	9006      	str	r0, [sp, #24]
 8017a68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017a6c:	4809      	ldr	r0, [pc, #36]	; (8017a94 <siprintf+0x38>)
 8017a6e:	9107      	str	r1, [sp, #28]
 8017a70:	9104      	str	r1, [sp, #16]
 8017a72:	4909      	ldr	r1, [pc, #36]	; (8017a98 <siprintf+0x3c>)
 8017a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a78:	9105      	str	r1, [sp, #20]
 8017a7a:	6800      	ldr	r0, [r0, #0]
 8017a7c:	9301      	str	r3, [sp, #4]
 8017a7e:	a902      	add	r1, sp, #8
 8017a80:	f000 fc0e 	bl	80182a0 <_svfiprintf_r>
 8017a84:	9b02      	ldr	r3, [sp, #8]
 8017a86:	2200      	movs	r2, #0
 8017a88:	701a      	strb	r2, [r3, #0]
 8017a8a:	b01c      	add	sp, #112	; 0x70
 8017a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a90:	b003      	add	sp, #12
 8017a92:	4770      	bx	lr
 8017a94:	20000020 	.word	0x20000020
 8017a98:	ffff0208 	.word	0xffff0208

08017a9c <strcasecmp>:
 8017a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a9e:	4606      	mov	r6, r0
 8017aa0:	460f      	mov	r7, r1
 8017aa2:	f816 4b01 	ldrb.w	r4, [r6], #1
 8017aa6:	f7ff fecd 	bl	8017844 <__locale_ctype_ptr>
 8017aaa:	4420      	add	r0, r4
 8017aac:	f817 5b01 	ldrb.w	r5, [r7], #1
 8017ab0:	7843      	ldrb	r3, [r0, #1]
 8017ab2:	f003 0303 	and.w	r3, r3, #3
 8017ab6:	2b01      	cmp	r3, #1
 8017ab8:	bf08      	it	eq
 8017aba:	3420      	addeq	r4, #32
 8017abc:	f7ff fec2 	bl	8017844 <__locale_ctype_ptr>
 8017ac0:	4428      	add	r0, r5
 8017ac2:	7842      	ldrb	r2, [r0, #1]
 8017ac4:	f002 0203 	and.w	r2, r2, #3
 8017ac8:	2a01      	cmp	r2, #1
 8017aca:	bf08      	it	eq
 8017acc:	3520      	addeq	r5, #32
 8017ace:	1b60      	subs	r0, r4, r5
 8017ad0:	d101      	bne.n	8017ad6 <strcasecmp+0x3a>
 8017ad2:	2d00      	cmp	r5, #0
 8017ad4:	d1e5      	bne.n	8017aa2 <strcasecmp+0x6>
 8017ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ad8 <__strtok_r>:
 8017ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ada:	b918      	cbnz	r0, 8017ae4 <__strtok_r+0xc>
 8017adc:	6810      	ldr	r0, [r2, #0]
 8017ade:	b908      	cbnz	r0, 8017ae4 <__strtok_r+0xc>
 8017ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ae2:	4620      	mov	r0, r4
 8017ae4:	4604      	mov	r4, r0
 8017ae6:	460f      	mov	r7, r1
 8017ae8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017aec:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017af0:	b91e      	cbnz	r6, 8017afa <__strtok_r+0x22>
 8017af2:	b96d      	cbnz	r5, 8017b10 <__strtok_r+0x38>
 8017af4:	6015      	str	r5, [r2, #0]
 8017af6:	4628      	mov	r0, r5
 8017af8:	e7f2      	b.n	8017ae0 <__strtok_r+0x8>
 8017afa:	42b5      	cmp	r5, r6
 8017afc:	d1f6      	bne.n	8017aec <__strtok_r+0x14>
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d1ef      	bne.n	8017ae2 <__strtok_r+0xa>
 8017b02:	6014      	str	r4, [r2, #0]
 8017b04:	7003      	strb	r3, [r0, #0]
 8017b06:	e7eb      	b.n	8017ae0 <__strtok_r+0x8>
 8017b08:	462b      	mov	r3, r5
 8017b0a:	e00d      	b.n	8017b28 <__strtok_r+0x50>
 8017b0c:	b926      	cbnz	r6, 8017b18 <__strtok_r+0x40>
 8017b0e:	461c      	mov	r4, r3
 8017b10:	4623      	mov	r3, r4
 8017b12:	460f      	mov	r7, r1
 8017b14:	f813 5b01 	ldrb.w	r5, [r3], #1
 8017b18:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017b1c:	42b5      	cmp	r5, r6
 8017b1e:	d1f5      	bne.n	8017b0c <__strtok_r+0x34>
 8017b20:	2d00      	cmp	r5, #0
 8017b22:	d0f1      	beq.n	8017b08 <__strtok_r+0x30>
 8017b24:	2100      	movs	r1, #0
 8017b26:	7021      	strb	r1, [r4, #0]
 8017b28:	6013      	str	r3, [r2, #0]
 8017b2a:	e7d9      	b.n	8017ae0 <__strtok_r+0x8>

08017b2c <strtok_r>:
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	f7ff bfd3 	b.w	8017ad8 <__strtok_r>
	...

08017b34 <__swbuf_r>:
 8017b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b36:	460e      	mov	r6, r1
 8017b38:	4614      	mov	r4, r2
 8017b3a:	4605      	mov	r5, r0
 8017b3c:	b118      	cbz	r0, 8017b46 <__swbuf_r+0x12>
 8017b3e:	6983      	ldr	r3, [r0, #24]
 8017b40:	b90b      	cbnz	r3, 8017b46 <__swbuf_r+0x12>
 8017b42:	f000 f9b5 	bl	8017eb0 <__sinit>
 8017b46:	4b21      	ldr	r3, [pc, #132]	; (8017bcc <__swbuf_r+0x98>)
 8017b48:	429c      	cmp	r4, r3
 8017b4a:	d12a      	bne.n	8017ba2 <__swbuf_r+0x6e>
 8017b4c:	686c      	ldr	r4, [r5, #4]
 8017b4e:	69a3      	ldr	r3, [r4, #24]
 8017b50:	60a3      	str	r3, [r4, #8]
 8017b52:	89a3      	ldrh	r3, [r4, #12]
 8017b54:	071a      	lsls	r2, r3, #28
 8017b56:	d52e      	bpl.n	8017bb6 <__swbuf_r+0x82>
 8017b58:	6923      	ldr	r3, [r4, #16]
 8017b5a:	b363      	cbz	r3, 8017bb6 <__swbuf_r+0x82>
 8017b5c:	6923      	ldr	r3, [r4, #16]
 8017b5e:	6820      	ldr	r0, [r4, #0]
 8017b60:	1ac0      	subs	r0, r0, r3
 8017b62:	6963      	ldr	r3, [r4, #20]
 8017b64:	b2f6      	uxtb	r6, r6
 8017b66:	4283      	cmp	r3, r0
 8017b68:	4637      	mov	r7, r6
 8017b6a:	dc04      	bgt.n	8017b76 <__swbuf_r+0x42>
 8017b6c:	4621      	mov	r1, r4
 8017b6e:	4628      	mov	r0, r5
 8017b70:	f000 f934 	bl	8017ddc <_fflush_r>
 8017b74:	bb28      	cbnz	r0, 8017bc2 <__swbuf_r+0x8e>
 8017b76:	68a3      	ldr	r3, [r4, #8]
 8017b78:	3b01      	subs	r3, #1
 8017b7a:	60a3      	str	r3, [r4, #8]
 8017b7c:	6823      	ldr	r3, [r4, #0]
 8017b7e:	1c5a      	adds	r2, r3, #1
 8017b80:	6022      	str	r2, [r4, #0]
 8017b82:	701e      	strb	r6, [r3, #0]
 8017b84:	6963      	ldr	r3, [r4, #20]
 8017b86:	3001      	adds	r0, #1
 8017b88:	4283      	cmp	r3, r0
 8017b8a:	d004      	beq.n	8017b96 <__swbuf_r+0x62>
 8017b8c:	89a3      	ldrh	r3, [r4, #12]
 8017b8e:	07db      	lsls	r3, r3, #31
 8017b90:	d519      	bpl.n	8017bc6 <__swbuf_r+0x92>
 8017b92:	2e0a      	cmp	r6, #10
 8017b94:	d117      	bne.n	8017bc6 <__swbuf_r+0x92>
 8017b96:	4621      	mov	r1, r4
 8017b98:	4628      	mov	r0, r5
 8017b9a:	f000 f91f 	bl	8017ddc <_fflush_r>
 8017b9e:	b190      	cbz	r0, 8017bc6 <__swbuf_r+0x92>
 8017ba0:	e00f      	b.n	8017bc2 <__swbuf_r+0x8e>
 8017ba2:	4b0b      	ldr	r3, [pc, #44]	; (8017bd0 <__swbuf_r+0x9c>)
 8017ba4:	429c      	cmp	r4, r3
 8017ba6:	d101      	bne.n	8017bac <__swbuf_r+0x78>
 8017ba8:	68ac      	ldr	r4, [r5, #8]
 8017baa:	e7d0      	b.n	8017b4e <__swbuf_r+0x1a>
 8017bac:	4b09      	ldr	r3, [pc, #36]	; (8017bd4 <__swbuf_r+0xa0>)
 8017bae:	429c      	cmp	r4, r3
 8017bb0:	bf08      	it	eq
 8017bb2:	68ec      	ldreq	r4, [r5, #12]
 8017bb4:	e7cb      	b.n	8017b4e <__swbuf_r+0x1a>
 8017bb6:	4621      	mov	r1, r4
 8017bb8:	4628      	mov	r0, r5
 8017bba:	f000 f81b 	bl	8017bf4 <__swsetup_r>
 8017bbe:	2800      	cmp	r0, #0
 8017bc0:	d0cc      	beq.n	8017b5c <__swbuf_r+0x28>
 8017bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8017bc6:	4638      	mov	r0, r7
 8017bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bca:	bf00      	nop
 8017bcc:	0801c890 	.word	0x0801c890
 8017bd0:	0801c8b0 	.word	0x0801c8b0
 8017bd4:	0801c870 	.word	0x0801c870

08017bd8 <__ascii_wctomb>:
 8017bd8:	b149      	cbz	r1, 8017bee <__ascii_wctomb+0x16>
 8017bda:	2aff      	cmp	r2, #255	; 0xff
 8017bdc:	bf85      	ittet	hi
 8017bde:	238a      	movhi	r3, #138	; 0x8a
 8017be0:	6003      	strhi	r3, [r0, #0]
 8017be2:	700a      	strbls	r2, [r1, #0]
 8017be4:	f04f 30ff 	movhi.w	r0, #4294967295
 8017be8:	bf98      	it	ls
 8017bea:	2001      	movls	r0, #1
 8017bec:	4770      	bx	lr
 8017bee:	4608      	mov	r0, r1
 8017bf0:	4770      	bx	lr
	...

08017bf4 <__swsetup_r>:
 8017bf4:	4b32      	ldr	r3, [pc, #200]	; (8017cc0 <__swsetup_r+0xcc>)
 8017bf6:	b570      	push	{r4, r5, r6, lr}
 8017bf8:	681d      	ldr	r5, [r3, #0]
 8017bfa:	4606      	mov	r6, r0
 8017bfc:	460c      	mov	r4, r1
 8017bfe:	b125      	cbz	r5, 8017c0a <__swsetup_r+0x16>
 8017c00:	69ab      	ldr	r3, [r5, #24]
 8017c02:	b913      	cbnz	r3, 8017c0a <__swsetup_r+0x16>
 8017c04:	4628      	mov	r0, r5
 8017c06:	f000 f953 	bl	8017eb0 <__sinit>
 8017c0a:	4b2e      	ldr	r3, [pc, #184]	; (8017cc4 <__swsetup_r+0xd0>)
 8017c0c:	429c      	cmp	r4, r3
 8017c0e:	d10f      	bne.n	8017c30 <__swsetup_r+0x3c>
 8017c10:	686c      	ldr	r4, [r5, #4]
 8017c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c16:	b29a      	uxth	r2, r3
 8017c18:	0715      	lsls	r5, r2, #28
 8017c1a:	d42c      	bmi.n	8017c76 <__swsetup_r+0x82>
 8017c1c:	06d0      	lsls	r0, r2, #27
 8017c1e:	d411      	bmi.n	8017c44 <__swsetup_r+0x50>
 8017c20:	2209      	movs	r2, #9
 8017c22:	6032      	str	r2, [r6, #0]
 8017c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c28:	81a3      	strh	r3, [r4, #12]
 8017c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c2e:	e03e      	b.n	8017cae <__swsetup_r+0xba>
 8017c30:	4b25      	ldr	r3, [pc, #148]	; (8017cc8 <__swsetup_r+0xd4>)
 8017c32:	429c      	cmp	r4, r3
 8017c34:	d101      	bne.n	8017c3a <__swsetup_r+0x46>
 8017c36:	68ac      	ldr	r4, [r5, #8]
 8017c38:	e7eb      	b.n	8017c12 <__swsetup_r+0x1e>
 8017c3a:	4b24      	ldr	r3, [pc, #144]	; (8017ccc <__swsetup_r+0xd8>)
 8017c3c:	429c      	cmp	r4, r3
 8017c3e:	bf08      	it	eq
 8017c40:	68ec      	ldreq	r4, [r5, #12]
 8017c42:	e7e6      	b.n	8017c12 <__swsetup_r+0x1e>
 8017c44:	0751      	lsls	r1, r2, #29
 8017c46:	d512      	bpl.n	8017c6e <__swsetup_r+0x7a>
 8017c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c4a:	b141      	cbz	r1, 8017c5e <__swsetup_r+0x6a>
 8017c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c50:	4299      	cmp	r1, r3
 8017c52:	d002      	beq.n	8017c5a <__swsetup_r+0x66>
 8017c54:	4630      	mov	r0, r6
 8017c56:	f000 fa21 	bl	801809c <_free_r>
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8017c5e:	89a3      	ldrh	r3, [r4, #12]
 8017c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017c64:	81a3      	strh	r3, [r4, #12]
 8017c66:	2300      	movs	r3, #0
 8017c68:	6063      	str	r3, [r4, #4]
 8017c6a:	6923      	ldr	r3, [r4, #16]
 8017c6c:	6023      	str	r3, [r4, #0]
 8017c6e:	89a3      	ldrh	r3, [r4, #12]
 8017c70:	f043 0308 	orr.w	r3, r3, #8
 8017c74:	81a3      	strh	r3, [r4, #12]
 8017c76:	6923      	ldr	r3, [r4, #16]
 8017c78:	b94b      	cbnz	r3, 8017c8e <__swsetup_r+0x9a>
 8017c7a:	89a3      	ldrh	r3, [r4, #12]
 8017c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c84:	d003      	beq.n	8017c8e <__swsetup_r+0x9a>
 8017c86:	4621      	mov	r1, r4
 8017c88:	4630      	mov	r0, r6
 8017c8a:	f000 f9bf 	bl	801800c <__smakebuf_r>
 8017c8e:	89a2      	ldrh	r2, [r4, #12]
 8017c90:	f012 0301 	ands.w	r3, r2, #1
 8017c94:	d00c      	beq.n	8017cb0 <__swsetup_r+0xbc>
 8017c96:	2300      	movs	r3, #0
 8017c98:	60a3      	str	r3, [r4, #8]
 8017c9a:	6963      	ldr	r3, [r4, #20]
 8017c9c:	425b      	negs	r3, r3
 8017c9e:	61a3      	str	r3, [r4, #24]
 8017ca0:	6923      	ldr	r3, [r4, #16]
 8017ca2:	b953      	cbnz	r3, 8017cba <__swsetup_r+0xc6>
 8017ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ca8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017cac:	d1ba      	bne.n	8017c24 <__swsetup_r+0x30>
 8017cae:	bd70      	pop	{r4, r5, r6, pc}
 8017cb0:	0792      	lsls	r2, r2, #30
 8017cb2:	bf58      	it	pl
 8017cb4:	6963      	ldrpl	r3, [r4, #20]
 8017cb6:	60a3      	str	r3, [r4, #8]
 8017cb8:	e7f2      	b.n	8017ca0 <__swsetup_r+0xac>
 8017cba:	2000      	movs	r0, #0
 8017cbc:	e7f7      	b.n	8017cae <__swsetup_r+0xba>
 8017cbe:	bf00      	nop
 8017cc0:	20000020 	.word	0x20000020
 8017cc4:	0801c890 	.word	0x0801c890
 8017cc8:	0801c8b0 	.word	0x0801c8b0
 8017ccc:	0801c870 	.word	0x0801c870

08017cd0 <__sflush_r>:
 8017cd0:	898a      	ldrh	r2, [r1, #12]
 8017cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd6:	4605      	mov	r5, r0
 8017cd8:	0710      	lsls	r0, r2, #28
 8017cda:	460c      	mov	r4, r1
 8017cdc:	d458      	bmi.n	8017d90 <__sflush_r+0xc0>
 8017cde:	684b      	ldr	r3, [r1, #4]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	dc05      	bgt.n	8017cf0 <__sflush_r+0x20>
 8017ce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	dc02      	bgt.n	8017cf0 <__sflush_r+0x20>
 8017cea:	2000      	movs	r0, #0
 8017cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017cf2:	2e00      	cmp	r6, #0
 8017cf4:	d0f9      	beq.n	8017cea <__sflush_r+0x1a>
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017cfc:	682f      	ldr	r7, [r5, #0]
 8017cfe:	6a21      	ldr	r1, [r4, #32]
 8017d00:	602b      	str	r3, [r5, #0]
 8017d02:	d032      	beq.n	8017d6a <__sflush_r+0x9a>
 8017d04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d06:	89a3      	ldrh	r3, [r4, #12]
 8017d08:	075a      	lsls	r2, r3, #29
 8017d0a:	d505      	bpl.n	8017d18 <__sflush_r+0x48>
 8017d0c:	6863      	ldr	r3, [r4, #4]
 8017d0e:	1ac0      	subs	r0, r0, r3
 8017d10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d12:	b10b      	cbz	r3, 8017d18 <__sflush_r+0x48>
 8017d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d16:	1ac0      	subs	r0, r0, r3
 8017d18:	2300      	movs	r3, #0
 8017d1a:	4602      	mov	r2, r0
 8017d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d1e:	6a21      	ldr	r1, [r4, #32]
 8017d20:	4628      	mov	r0, r5
 8017d22:	47b0      	blx	r6
 8017d24:	1c43      	adds	r3, r0, #1
 8017d26:	89a3      	ldrh	r3, [r4, #12]
 8017d28:	d106      	bne.n	8017d38 <__sflush_r+0x68>
 8017d2a:	6829      	ldr	r1, [r5, #0]
 8017d2c:	291d      	cmp	r1, #29
 8017d2e:	d848      	bhi.n	8017dc2 <__sflush_r+0xf2>
 8017d30:	4a29      	ldr	r2, [pc, #164]	; (8017dd8 <__sflush_r+0x108>)
 8017d32:	40ca      	lsrs	r2, r1
 8017d34:	07d6      	lsls	r6, r2, #31
 8017d36:	d544      	bpl.n	8017dc2 <__sflush_r+0xf2>
 8017d38:	2200      	movs	r2, #0
 8017d3a:	6062      	str	r2, [r4, #4]
 8017d3c:	04d9      	lsls	r1, r3, #19
 8017d3e:	6922      	ldr	r2, [r4, #16]
 8017d40:	6022      	str	r2, [r4, #0]
 8017d42:	d504      	bpl.n	8017d4e <__sflush_r+0x7e>
 8017d44:	1c42      	adds	r2, r0, #1
 8017d46:	d101      	bne.n	8017d4c <__sflush_r+0x7c>
 8017d48:	682b      	ldr	r3, [r5, #0]
 8017d4a:	b903      	cbnz	r3, 8017d4e <__sflush_r+0x7e>
 8017d4c:	6560      	str	r0, [r4, #84]	; 0x54
 8017d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d50:	602f      	str	r7, [r5, #0]
 8017d52:	2900      	cmp	r1, #0
 8017d54:	d0c9      	beq.n	8017cea <__sflush_r+0x1a>
 8017d56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d5a:	4299      	cmp	r1, r3
 8017d5c:	d002      	beq.n	8017d64 <__sflush_r+0x94>
 8017d5e:	4628      	mov	r0, r5
 8017d60:	f000 f99c 	bl	801809c <_free_r>
 8017d64:	2000      	movs	r0, #0
 8017d66:	6360      	str	r0, [r4, #52]	; 0x34
 8017d68:	e7c0      	b.n	8017cec <__sflush_r+0x1c>
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	4628      	mov	r0, r5
 8017d6e:	47b0      	blx	r6
 8017d70:	1c41      	adds	r1, r0, #1
 8017d72:	d1c8      	bne.n	8017d06 <__sflush_r+0x36>
 8017d74:	682b      	ldr	r3, [r5, #0]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d0c5      	beq.n	8017d06 <__sflush_r+0x36>
 8017d7a:	2b1d      	cmp	r3, #29
 8017d7c:	d001      	beq.n	8017d82 <__sflush_r+0xb2>
 8017d7e:	2b16      	cmp	r3, #22
 8017d80:	d101      	bne.n	8017d86 <__sflush_r+0xb6>
 8017d82:	602f      	str	r7, [r5, #0]
 8017d84:	e7b1      	b.n	8017cea <__sflush_r+0x1a>
 8017d86:	89a3      	ldrh	r3, [r4, #12]
 8017d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d8c:	81a3      	strh	r3, [r4, #12]
 8017d8e:	e7ad      	b.n	8017cec <__sflush_r+0x1c>
 8017d90:	690f      	ldr	r7, [r1, #16]
 8017d92:	2f00      	cmp	r7, #0
 8017d94:	d0a9      	beq.n	8017cea <__sflush_r+0x1a>
 8017d96:	0793      	lsls	r3, r2, #30
 8017d98:	680e      	ldr	r6, [r1, #0]
 8017d9a:	bf08      	it	eq
 8017d9c:	694b      	ldreq	r3, [r1, #20]
 8017d9e:	600f      	str	r7, [r1, #0]
 8017da0:	bf18      	it	ne
 8017da2:	2300      	movne	r3, #0
 8017da4:	eba6 0807 	sub.w	r8, r6, r7
 8017da8:	608b      	str	r3, [r1, #8]
 8017daa:	f1b8 0f00 	cmp.w	r8, #0
 8017dae:	dd9c      	ble.n	8017cea <__sflush_r+0x1a>
 8017db0:	4643      	mov	r3, r8
 8017db2:	463a      	mov	r2, r7
 8017db4:	6a21      	ldr	r1, [r4, #32]
 8017db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017db8:	4628      	mov	r0, r5
 8017dba:	47b0      	blx	r6
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	dc06      	bgt.n	8017dce <__sflush_r+0xfe>
 8017dc0:	89a3      	ldrh	r3, [r4, #12]
 8017dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017dc6:	81a3      	strh	r3, [r4, #12]
 8017dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8017dcc:	e78e      	b.n	8017cec <__sflush_r+0x1c>
 8017dce:	4407      	add	r7, r0
 8017dd0:	eba8 0800 	sub.w	r8, r8, r0
 8017dd4:	e7e9      	b.n	8017daa <__sflush_r+0xda>
 8017dd6:	bf00      	nop
 8017dd8:	20400001 	.word	0x20400001

08017ddc <_fflush_r>:
 8017ddc:	b538      	push	{r3, r4, r5, lr}
 8017dde:	690b      	ldr	r3, [r1, #16]
 8017de0:	4605      	mov	r5, r0
 8017de2:	460c      	mov	r4, r1
 8017de4:	b1db      	cbz	r3, 8017e1e <_fflush_r+0x42>
 8017de6:	b118      	cbz	r0, 8017df0 <_fflush_r+0x14>
 8017de8:	6983      	ldr	r3, [r0, #24]
 8017dea:	b90b      	cbnz	r3, 8017df0 <_fflush_r+0x14>
 8017dec:	f000 f860 	bl	8017eb0 <__sinit>
 8017df0:	4b0c      	ldr	r3, [pc, #48]	; (8017e24 <_fflush_r+0x48>)
 8017df2:	429c      	cmp	r4, r3
 8017df4:	d109      	bne.n	8017e0a <_fflush_r+0x2e>
 8017df6:	686c      	ldr	r4, [r5, #4]
 8017df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dfc:	b17b      	cbz	r3, 8017e1e <_fflush_r+0x42>
 8017dfe:	4621      	mov	r1, r4
 8017e00:	4628      	mov	r0, r5
 8017e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e06:	f7ff bf63 	b.w	8017cd0 <__sflush_r>
 8017e0a:	4b07      	ldr	r3, [pc, #28]	; (8017e28 <_fflush_r+0x4c>)
 8017e0c:	429c      	cmp	r4, r3
 8017e0e:	d101      	bne.n	8017e14 <_fflush_r+0x38>
 8017e10:	68ac      	ldr	r4, [r5, #8]
 8017e12:	e7f1      	b.n	8017df8 <_fflush_r+0x1c>
 8017e14:	4b05      	ldr	r3, [pc, #20]	; (8017e2c <_fflush_r+0x50>)
 8017e16:	429c      	cmp	r4, r3
 8017e18:	bf08      	it	eq
 8017e1a:	68ec      	ldreq	r4, [r5, #12]
 8017e1c:	e7ec      	b.n	8017df8 <_fflush_r+0x1c>
 8017e1e:	2000      	movs	r0, #0
 8017e20:	bd38      	pop	{r3, r4, r5, pc}
 8017e22:	bf00      	nop
 8017e24:	0801c890 	.word	0x0801c890
 8017e28:	0801c8b0 	.word	0x0801c8b0
 8017e2c:	0801c870 	.word	0x0801c870

08017e30 <std>:
 8017e30:	2300      	movs	r3, #0
 8017e32:	b510      	push	{r4, lr}
 8017e34:	4604      	mov	r4, r0
 8017e36:	e9c0 3300 	strd	r3, r3, [r0]
 8017e3a:	6083      	str	r3, [r0, #8]
 8017e3c:	8181      	strh	r1, [r0, #12]
 8017e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8017e40:	81c2      	strh	r2, [r0, #14]
 8017e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017e46:	6183      	str	r3, [r0, #24]
 8017e48:	4619      	mov	r1, r3
 8017e4a:	2208      	movs	r2, #8
 8017e4c:	305c      	adds	r0, #92	; 0x5c
 8017e4e:	f7ff fd4c 	bl	80178ea <memset>
 8017e52:	4b05      	ldr	r3, [pc, #20]	; (8017e68 <std+0x38>)
 8017e54:	6263      	str	r3, [r4, #36]	; 0x24
 8017e56:	4b05      	ldr	r3, [pc, #20]	; (8017e6c <std+0x3c>)
 8017e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8017e5a:	4b05      	ldr	r3, [pc, #20]	; (8017e70 <std+0x40>)
 8017e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017e5e:	4b05      	ldr	r3, [pc, #20]	; (8017e74 <std+0x44>)
 8017e60:	6224      	str	r4, [r4, #32]
 8017e62:	6323      	str	r3, [r4, #48]	; 0x30
 8017e64:	bd10      	pop	{r4, pc}
 8017e66:	bf00      	nop
 8017e68:	08018a41 	.word	0x08018a41
 8017e6c:	08018a63 	.word	0x08018a63
 8017e70:	08018a9b 	.word	0x08018a9b
 8017e74:	08018abf 	.word	0x08018abf

08017e78 <_cleanup_r>:
 8017e78:	4901      	ldr	r1, [pc, #4]	; (8017e80 <_cleanup_r+0x8>)
 8017e7a:	f000 b885 	b.w	8017f88 <_fwalk_reent>
 8017e7e:	bf00      	nop
 8017e80:	08017ddd 	.word	0x08017ddd

08017e84 <__sfmoreglue>:
 8017e84:	b570      	push	{r4, r5, r6, lr}
 8017e86:	1e4a      	subs	r2, r1, #1
 8017e88:	2568      	movs	r5, #104	; 0x68
 8017e8a:	4355      	muls	r5, r2
 8017e8c:	460e      	mov	r6, r1
 8017e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017e92:	f000 f951 	bl	8018138 <_malloc_r>
 8017e96:	4604      	mov	r4, r0
 8017e98:	b140      	cbz	r0, 8017eac <__sfmoreglue+0x28>
 8017e9a:	2100      	movs	r1, #0
 8017e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8017ea0:	300c      	adds	r0, #12
 8017ea2:	60a0      	str	r0, [r4, #8]
 8017ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017ea8:	f7ff fd1f 	bl	80178ea <memset>
 8017eac:	4620      	mov	r0, r4
 8017eae:	bd70      	pop	{r4, r5, r6, pc}

08017eb0 <__sinit>:
 8017eb0:	6983      	ldr	r3, [r0, #24]
 8017eb2:	b510      	push	{r4, lr}
 8017eb4:	4604      	mov	r4, r0
 8017eb6:	bb33      	cbnz	r3, 8017f06 <__sinit+0x56>
 8017eb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017ebc:	6503      	str	r3, [r0, #80]	; 0x50
 8017ebe:	4b12      	ldr	r3, [pc, #72]	; (8017f08 <__sinit+0x58>)
 8017ec0:	4a12      	ldr	r2, [pc, #72]	; (8017f0c <__sinit+0x5c>)
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	6282      	str	r2, [r0, #40]	; 0x28
 8017ec6:	4298      	cmp	r0, r3
 8017ec8:	bf04      	itt	eq
 8017eca:	2301      	moveq	r3, #1
 8017ecc:	6183      	streq	r3, [r0, #24]
 8017ece:	f000 f81f 	bl	8017f10 <__sfp>
 8017ed2:	6060      	str	r0, [r4, #4]
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	f000 f81b 	bl	8017f10 <__sfp>
 8017eda:	60a0      	str	r0, [r4, #8]
 8017edc:	4620      	mov	r0, r4
 8017ede:	f000 f817 	bl	8017f10 <__sfp>
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	60e0      	str	r0, [r4, #12]
 8017ee6:	2104      	movs	r1, #4
 8017ee8:	6860      	ldr	r0, [r4, #4]
 8017eea:	f7ff ffa1 	bl	8017e30 <std>
 8017eee:	2201      	movs	r2, #1
 8017ef0:	2109      	movs	r1, #9
 8017ef2:	68a0      	ldr	r0, [r4, #8]
 8017ef4:	f7ff ff9c 	bl	8017e30 <std>
 8017ef8:	2202      	movs	r2, #2
 8017efa:	2112      	movs	r1, #18
 8017efc:	68e0      	ldr	r0, [r4, #12]
 8017efe:	f7ff ff97 	bl	8017e30 <std>
 8017f02:	2301      	movs	r3, #1
 8017f04:	61a3      	str	r3, [r4, #24]
 8017f06:	bd10      	pop	{r4, pc}
 8017f08:	0801c760 	.word	0x0801c760
 8017f0c:	08017e79 	.word	0x08017e79

08017f10 <__sfp>:
 8017f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f12:	4b1b      	ldr	r3, [pc, #108]	; (8017f80 <__sfp+0x70>)
 8017f14:	681e      	ldr	r6, [r3, #0]
 8017f16:	69b3      	ldr	r3, [r6, #24]
 8017f18:	4607      	mov	r7, r0
 8017f1a:	b913      	cbnz	r3, 8017f22 <__sfp+0x12>
 8017f1c:	4630      	mov	r0, r6
 8017f1e:	f7ff ffc7 	bl	8017eb0 <__sinit>
 8017f22:	3648      	adds	r6, #72	; 0x48
 8017f24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017f28:	3b01      	subs	r3, #1
 8017f2a:	d503      	bpl.n	8017f34 <__sfp+0x24>
 8017f2c:	6833      	ldr	r3, [r6, #0]
 8017f2e:	b133      	cbz	r3, 8017f3e <__sfp+0x2e>
 8017f30:	6836      	ldr	r6, [r6, #0]
 8017f32:	e7f7      	b.n	8017f24 <__sfp+0x14>
 8017f34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017f38:	b16d      	cbz	r5, 8017f56 <__sfp+0x46>
 8017f3a:	3468      	adds	r4, #104	; 0x68
 8017f3c:	e7f4      	b.n	8017f28 <__sfp+0x18>
 8017f3e:	2104      	movs	r1, #4
 8017f40:	4638      	mov	r0, r7
 8017f42:	f7ff ff9f 	bl	8017e84 <__sfmoreglue>
 8017f46:	6030      	str	r0, [r6, #0]
 8017f48:	2800      	cmp	r0, #0
 8017f4a:	d1f1      	bne.n	8017f30 <__sfp+0x20>
 8017f4c:	230c      	movs	r3, #12
 8017f4e:	603b      	str	r3, [r7, #0]
 8017f50:	4604      	mov	r4, r0
 8017f52:	4620      	mov	r0, r4
 8017f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f56:	4b0b      	ldr	r3, [pc, #44]	; (8017f84 <__sfp+0x74>)
 8017f58:	6665      	str	r5, [r4, #100]	; 0x64
 8017f5a:	e9c4 5500 	strd	r5, r5, [r4]
 8017f5e:	60a5      	str	r5, [r4, #8]
 8017f60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017f64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017f68:	2208      	movs	r2, #8
 8017f6a:	4629      	mov	r1, r5
 8017f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017f70:	f7ff fcbb 	bl	80178ea <memset>
 8017f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017f7c:	e7e9      	b.n	8017f52 <__sfp+0x42>
 8017f7e:	bf00      	nop
 8017f80:	0801c760 	.word	0x0801c760
 8017f84:	ffff0001 	.word	0xffff0001

08017f88 <_fwalk_reent>:
 8017f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f8c:	4680      	mov	r8, r0
 8017f8e:	4689      	mov	r9, r1
 8017f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017f94:	2600      	movs	r6, #0
 8017f96:	b914      	cbnz	r4, 8017f9e <_fwalk_reent+0x16>
 8017f98:	4630      	mov	r0, r6
 8017f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017fa2:	3f01      	subs	r7, #1
 8017fa4:	d501      	bpl.n	8017faa <_fwalk_reent+0x22>
 8017fa6:	6824      	ldr	r4, [r4, #0]
 8017fa8:	e7f5      	b.n	8017f96 <_fwalk_reent+0xe>
 8017faa:	89ab      	ldrh	r3, [r5, #12]
 8017fac:	2b01      	cmp	r3, #1
 8017fae:	d907      	bls.n	8017fc0 <_fwalk_reent+0x38>
 8017fb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017fb4:	3301      	adds	r3, #1
 8017fb6:	d003      	beq.n	8017fc0 <_fwalk_reent+0x38>
 8017fb8:	4629      	mov	r1, r5
 8017fba:	4640      	mov	r0, r8
 8017fbc:	47c8      	blx	r9
 8017fbe:	4306      	orrs	r6, r0
 8017fc0:	3568      	adds	r5, #104	; 0x68
 8017fc2:	e7ee      	b.n	8017fa2 <_fwalk_reent+0x1a>

08017fc4 <__swhatbuf_r>:
 8017fc4:	b570      	push	{r4, r5, r6, lr}
 8017fc6:	460e      	mov	r6, r1
 8017fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017fcc:	2900      	cmp	r1, #0
 8017fce:	b096      	sub	sp, #88	; 0x58
 8017fd0:	4614      	mov	r4, r2
 8017fd2:	461d      	mov	r5, r3
 8017fd4:	da07      	bge.n	8017fe6 <__swhatbuf_r+0x22>
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	602b      	str	r3, [r5, #0]
 8017fda:	89b3      	ldrh	r3, [r6, #12]
 8017fdc:	061a      	lsls	r2, r3, #24
 8017fde:	d410      	bmi.n	8018002 <__swhatbuf_r+0x3e>
 8017fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017fe4:	e00e      	b.n	8018004 <__swhatbuf_r+0x40>
 8017fe6:	466a      	mov	r2, sp
 8017fe8:	f000 fd90 	bl	8018b0c <_fstat_r>
 8017fec:	2800      	cmp	r0, #0
 8017fee:	dbf2      	blt.n	8017fd6 <__swhatbuf_r+0x12>
 8017ff0:	9a01      	ldr	r2, [sp, #4]
 8017ff2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017ff6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017ffa:	425a      	negs	r2, r3
 8017ffc:	415a      	adcs	r2, r3
 8017ffe:	602a      	str	r2, [r5, #0]
 8018000:	e7ee      	b.n	8017fe0 <__swhatbuf_r+0x1c>
 8018002:	2340      	movs	r3, #64	; 0x40
 8018004:	2000      	movs	r0, #0
 8018006:	6023      	str	r3, [r4, #0]
 8018008:	b016      	add	sp, #88	; 0x58
 801800a:	bd70      	pop	{r4, r5, r6, pc}

0801800c <__smakebuf_r>:
 801800c:	898b      	ldrh	r3, [r1, #12]
 801800e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018010:	079d      	lsls	r5, r3, #30
 8018012:	4606      	mov	r6, r0
 8018014:	460c      	mov	r4, r1
 8018016:	d507      	bpl.n	8018028 <__smakebuf_r+0x1c>
 8018018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801801c:	6023      	str	r3, [r4, #0]
 801801e:	6123      	str	r3, [r4, #16]
 8018020:	2301      	movs	r3, #1
 8018022:	6163      	str	r3, [r4, #20]
 8018024:	b002      	add	sp, #8
 8018026:	bd70      	pop	{r4, r5, r6, pc}
 8018028:	ab01      	add	r3, sp, #4
 801802a:	466a      	mov	r2, sp
 801802c:	f7ff ffca 	bl	8017fc4 <__swhatbuf_r>
 8018030:	9900      	ldr	r1, [sp, #0]
 8018032:	4605      	mov	r5, r0
 8018034:	4630      	mov	r0, r6
 8018036:	f000 f87f 	bl	8018138 <_malloc_r>
 801803a:	b948      	cbnz	r0, 8018050 <__smakebuf_r+0x44>
 801803c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018040:	059a      	lsls	r2, r3, #22
 8018042:	d4ef      	bmi.n	8018024 <__smakebuf_r+0x18>
 8018044:	f023 0303 	bic.w	r3, r3, #3
 8018048:	f043 0302 	orr.w	r3, r3, #2
 801804c:	81a3      	strh	r3, [r4, #12]
 801804e:	e7e3      	b.n	8018018 <__smakebuf_r+0xc>
 8018050:	4b0d      	ldr	r3, [pc, #52]	; (8018088 <__smakebuf_r+0x7c>)
 8018052:	62b3      	str	r3, [r6, #40]	; 0x28
 8018054:	89a3      	ldrh	r3, [r4, #12]
 8018056:	6020      	str	r0, [r4, #0]
 8018058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801805c:	81a3      	strh	r3, [r4, #12]
 801805e:	9b00      	ldr	r3, [sp, #0]
 8018060:	6163      	str	r3, [r4, #20]
 8018062:	9b01      	ldr	r3, [sp, #4]
 8018064:	6120      	str	r0, [r4, #16]
 8018066:	b15b      	cbz	r3, 8018080 <__smakebuf_r+0x74>
 8018068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801806c:	4630      	mov	r0, r6
 801806e:	f000 fd5f 	bl	8018b30 <_isatty_r>
 8018072:	b128      	cbz	r0, 8018080 <__smakebuf_r+0x74>
 8018074:	89a3      	ldrh	r3, [r4, #12]
 8018076:	f023 0303 	bic.w	r3, r3, #3
 801807a:	f043 0301 	orr.w	r3, r3, #1
 801807e:	81a3      	strh	r3, [r4, #12]
 8018080:	89a3      	ldrh	r3, [r4, #12]
 8018082:	431d      	orrs	r5, r3
 8018084:	81a5      	strh	r5, [r4, #12]
 8018086:	e7cd      	b.n	8018024 <__smakebuf_r+0x18>
 8018088:	08017e79 	.word	0x08017e79

0801808c <malloc>:
 801808c:	4b02      	ldr	r3, [pc, #8]	; (8018098 <malloc+0xc>)
 801808e:	4601      	mov	r1, r0
 8018090:	6818      	ldr	r0, [r3, #0]
 8018092:	f000 b851 	b.w	8018138 <_malloc_r>
 8018096:	bf00      	nop
 8018098:	20000020 	.word	0x20000020

0801809c <_free_r>:
 801809c:	b538      	push	{r3, r4, r5, lr}
 801809e:	4605      	mov	r5, r0
 80180a0:	2900      	cmp	r1, #0
 80180a2:	d045      	beq.n	8018130 <_free_r+0x94>
 80180a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180a8:	1f0c      	subs	r4, r1, #4
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	bfb8      	it	lt
 80180ae:	18e4      	addlt	r4, r4, r3
 80180b0:	f000 fd60 	bl	8018b74 <__malloc_lock>
 80180b4:	4a1f      	ldr	r2, [pc, #124]	; (8018134 <_free_r+0x98>)
 80180b6:	6813      	ldr	r3, [r2, #0]
 80180b8:	4610      	mov	r0, r2
 80180ba:	b933      	cbnz	r3, 80180ca <_free_r+0x2e>
 80180bc:	6063      	str	r3, [r4, #4]
 80180be:	6014      	str	r4, [r2, #0]
 80180c0:	4628      	mov	r0, r5
 80180c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80180c6:	f000 bd56 	b.w	8018b76 <__malloc_unlock>
 80180ca:	42a3      	cmp	r3, r4
 80180cc:	d90c      	bls.n	80180e8 <_free_r+0x4c>
 80180ce:	6821      	ldr	r1, [r4, #0]
 80180d0:	1862      	adds	r2, r4, r1
 80180d2:	4293      	cmp	r3, r2
 80180d4:	bf04      	itt	eq
 80180d6:	681a      	ldreq	r2, [r3, #0]
 80180d8:	685b      	ldreq	r3, [r3, #4]
 80180da:	6063      	str	r3, [r4, #4]
 80180dc:	bf04      	itt	eq
 80180de:	1852      	addeq	r2, r2, r1
 80180e0:	6022      	streq	r2, [r4, #0]
 80180e2:	6004      	str	r4, [r0, #0]
 80180e4:	e7ec      	b.n	80180c0 <_free_r+0x24>
 80180e6:	4613      	mov	r3, r2
 80180e8:	685a      	ldr	r2, [r3, #4]
 80180ea:	b10a      	cbz	r2, 80180f0 <_free_r+0x54>
 80180ec:	42a2      	cmp	r2, r4
 80180ee:	d9fa      	bls.n	80180e6 <_free_r+0x4a>
 80180f0:	6819      	ldr	r1, [r3, #0]
 80180f2:	1858      	adds	r0, r3, r1
 80180f4:	42a0      	cmp	r0, r4
 80180f6:	d10b      	bne.n	8018110 <_free_r+0x74>
 80180f8:	6820      	ldr	r0, [r4, #0]
 80180fa:	4401      	add	r1, r0
 80180fc:	1858      	adds	r0, r3, r1
 80180fe:	4282      	cmp	r2, r0
 8018100:	6019      	str	r1, [r3, #0]
 8018102:	d1dd      	bne.n	80180c0 <_free_r+0x24>
 8018104:	6810      	ldr	r0, [r2, #0]
 8018106:	6852      	ldr	r2, [r2, #4]
 8018108:	605a      	str	r2, [r3, #4]
 801810a:	4401      	add	r1, r0
 801810c:	6019      	str	r1, [r3, #0]
 801810e:	e7d7      	b.n	80180c0 <_free_r+0x24>
 8018110:	d902      	bls.n	8018118 <_free_r+0x7c>
 8018112:	230c      	movs	r3, #12
 8018114:	602b      	str	r3, [r5, #0]
 8018116:	e7d3      	b.n	80180c0 <_free_r+0x24>
 8018118:	6820      	ldr	r0, [r4, #0]
 801811a:	1821      	adds	r1, r4, r0
 801811c:	428a      	cmp	r2, r1
 801811e:	bf04      	itt	eq
 8018120:	6811      	ldreq	r1, [r2, #0]
 8018122:	6852      	ldreq	r2, [r2, #4]
 8018124:	6062      	str	r2, [r4, #4]
 8018126:	bf04      	itt	eq
 8018128:	1809      	addeq	r1, r1, r0
 801812a:	6021      	streq	r1, [r4, #0]
 801812c:	605c      	str	r4, [r3, #4]
 801812e:	e7c7      	b.n	80180c0 <_free_r+0x24>
 8018130:	bd38      	pop	{r3, r4, r5, pc}
 8018132:	bf00      	nop
 8018134:	20008798 	.word	0x20008798

08018138 <_malloc_r>:
 8018138:	b570      	push	{r4, r5, r6, lr}
 801813a:	1ccd      	adds	r5, r1, #3
 801813c:	f025 0503 	bic.w	r5, r5, #3
 8018140:	3508      	adds	r5, #8
 8018142:	2d0c      	cmp	r5, #12
 8018144:	bf38      	it	cc
 8018146:	250c      	movcc	r5, #12
 8018148:	2d00      	cmp	r5, #0
 801814a:	4606      	mov	r6, r0
 801814c:	db01      	blt.n	8018152 <_malloc_r+0x1a>
 801814e:	42a9      	cmp	r1, r5
 8018150:	d903      	bls.n	801815a <_malloc_r+0x22>
 8018152:	230c      	movs	r3, #12
 8018154:	6033      	str	r3, [r6, #0]
 8018156:	2000      	movs	r0, #0
 8018158:	bd70      	pop	{r4, r5, r6, pc}
 801815a:	f000 fd0b 	bl	8018b74 <__malloc_lock>
 801815e:	4a21      	ldr	r2, [pc, #132]	; (80181e4 <_malloc_r+0xac>)
 8018160:	6814      	ldr	r4, [r2, #0]
 8018162:	4621      	mov	r1, r4
 8018164:	b991      	cbnz	r1, 801818c <_malloc_r+0x54>
 8018166:	4c20      	ldr	r4, [pc, #128]	; (80181e8 <_malloc_r+0xb0>)
 8018168:	6823      	ldr	r3, [r4, #0]
 801816a:	b91b      	cbnz	r3, 8018174 <_malloc_r+0x3c>
 801816c:	4630      	mov	r0, r6
 801816e:	f000 fc57 	bl	8018a20 <_sbrk_r>
 8018172:	6020      	str	r0, [r4, #0]
 8018174:	4629      	mov	r1, r5
 8018176:	4630      	mov	r0, r6
 8018178:	f000 fc52 	bl	8018a20 <_sbrk_r>
 801817c:	1c43      	adds	r3, r0, #1
 801817e:	d124      	bne.n	80181ca <_malloc_r+0x92>
 8018180:	230c      	movs	r3, #12
 8018182:	6033      	str	r3, [r6, #0]
 8018184:	4630      	mov	r0, r6
 8018186:	f000 fcf6 	bl	8018b76 <__malloc_unlock>
 801818a:	e7e4      	b.n	8018156 <_malloc_r+0x1e>
 801818c:	680b      	ldr	r3, [r1, #0]
 801818e:	1b5b      	subs	r3, r3, r5
 8018190:	d418      	bmi.n	80181c4 <_malloc_r+0x8c>
 8018192:	2b0b      	cmp	r3, #11
 8018194:	d90f      	bls.n	80181b6 <_malloc_r+0x7e>
 8018196:	600b      	str	r3, [r1, #0]
 8018198:	50cd      	str	r5, [r1, r3]
 801819a:	18cc      	adds	r4, r1, r3
 801819c:	4630      	mov	r0, r6
 801819e:	f000 fcea 	bl	8018b76 <__malloc_unlock>
 80181a2:	f104 000b 	add.w	r0, r4, #11
 80181a6:	1d23      	adds	r3, r4, #4
 80181a8:	f020 0007 	bic.w	r0, r0, #7
 80181ac:	1ac3      	subs	r3, r0, r3
 80181ae:	d0d3      	beq.n	8018158 <_malloc_r+0x20>
 80181b0:	425a      	negs	r2, r3
 80181b2:	50e2      	str	r2, [r4, r3]
 80181b4:	e7d0      	b.n	8018158 <_malloc_r+0x20>
 80181b6:	428c      	cmp	r4, r1
 80181b8:	684b      	ldr	r3, [r1, #4]
 80181ba:	bf16      	itet	ne
 80181bc:	6063      	strne	r3, [r4, #4]
 80181be:	6013      	streq	r3, [r2, #0]
 80181c0:	460c      	movne	r4, r1
 80181c2:	e7eb      	b.n	801819c <_malloc_r+0x64>
 80181c4:	460c      	mov	r4, r1
 80181c6:	6849      	ldr	r1, [r1, #4]
 80181c8:	e7cc      	b.n	8018164 <_malloc_r+0x2c>
 80181ca:	1cc4      	adds	r4, r0, #3
 80181cc:	f024 0403 	bic.w	r4, r4, #3
 80181d0:	42a0      	cmp	r0, r4
 80181d2:	d005      	beq.n	80181e0 <_malloc_r+0xa8>
 80181d4:	1a21      	subs	r1, r4, r0
 80181d6:	4630      	mov	r0, r6
 80181d8:	f000 fc22 	bl	8018a20 <_sbrk_r>
 80181dc:	3001      	adds	r0, #1
 80181de:	d0cf      	beq.n	8018180 <_malloc_r+0x48>
 80181e0:	6025      	str	r5, [r4, #0]
 80181e2:	e7db      	b.n	801819c <_malloc_r+0x64>
 80181e4:	20008798 	.word	0x20008798
 80181e8:	2000879c 	.word	0x2000879c

080181ec <__ssputs_r>:
 80181ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181f0:	688e      	ldr	r6, [r1, #8]
 80181f2:	429e      	cmp	r6, r3
 80181f4:	4682      	mov	sl, r0
 80181f6:	460c      	mov	r4, r1
 80181f8:	4690      	mov	r8, r2
 80181fa:	4699      	mov	r9, r3
 80181fc:	d837      	bhi.n	801826e <__ssputs_r+0x82>
 80181fe:	898a      	ldrh	r2, [r1, #12]
 8018200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018204:	d031      	beq.n	801826a <__ssputs_r+0x7e>
 8018206:	6825      	ldr	r5, [r4, #0]
 8018208:	6909      	ldr	r1, [r1, #16]
 801820a:	1a6f      	subs	r7, r5, r1
 801820c:	6965      	ldr	r5, [r4, #20]
 801820e:	2302      	movs	r3, #2
 8018210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018214:	fb95 f5f3 	sdiv	r5, r5, r3
 8018218:	f109 0301 	add.w	r3, r9, #1
 801821c:	443b      	add	r3, r7
 801821e:	429d      	cmp	r5, r3
 8018220:	bf38      	it	cc
 8018222:	461d      	movcc	r5, r3
 8018224:	0553      	lsls	r3, r2, #21
 8018226:	d530      	bpl.n	801828a <__ssputs_r+0x9e>
 8018228:	4629      	mov	r1, r5
 801822a:	f7ff ff85 	bl	8018138 <_malloc_r>
 801822e:	4606      	mov	r6, r0
 8018230:	b950      	cbnz	r0, 8018248 <__ssputs_r+0x5c>
 8018232:	230c      	movs	r3, #12
 8018234:	f8ca 3000 	str.w	r3, [sl]
 8018238:	89a3      	ldrh	r3, [r4, #12]
 801823a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801823e:	81a3      	strh	r3, [r4, #12]
 8018240:	f04f 30ff 	mov.w	r0, #4294967295
 8018244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018248:	463a      	mov	r2, r7
 801824a:	6921      	ldr	r1, [r4, #16]
 801824c:	f7ff fb29 	bl	80178a2 <memcpy>
 8018250:	89a3      	ldrh	r3, [r4, #12]
 8018252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801825a:	81a3      	strh	r3, [r4, #12]
 801825c:	6126      	str	r6, [r4, #16]
 801825e:	6165      	str	r5, [r4, #20]
 8018260:	443e      	add	r6, r7
 8018262:	1bed      	subs	r5, r5, r7
 8018264:	6026      	str	r6, [r4, #0]
 8018266:	60a5      	str	r5, [r4, #8]
 8018268:	464e      	mov	r6, r9
 801826a:	454e      	cmp	r6, r9
 801826c:	d900      	bls.n	8018270 <__ssputs_r+0x84>
 801826e:	464e      	mov	r6, r9
 8018270:	4632      	mov	r2, r6
 8018272:	4641      	mov	r1, r8
 8018274:	6820      	ldr	r0, [r4, #0]
 8018276:	f7ff fb1f 	bl	80178b8 <memmove>
 801827a:	68a3      	ldr	r3, [r4, #8]
 801827c:	1b9b      	subs	r3, r3, r6
 801827e:	60a3      	str	r3, [r4, #8]
 8018280:	6823      	ldr	r3, [r4, #0]
 8018282:	441e      	add	r6, r3
 8018284:	6026      	str	r6, [r4, #0]
 8018286:	2000      	movs	r0, #0
 8018288:	e7dc      	b.n	8018244 <__ssputs_r+0x58>
 801828a:	462a      	mov	r2, r5
 801828c:	f000 fc74 	bl	8018b78 <_realloc_r>
 8018290:	4606      	mov	r6, r0
 8018292:	2800      	cmp	r0, #0
 8018294:	d1e2      	bne.n	801825c <__ssputs_r+0x70>
 8018296:	6921      	ldr	r1, [r4, #16]
 8018298:	4650      	mov	r0, sl
 801829a:	f7ff feff 	bl	801809c <_free_r>
 801829e:	e7c8      	b.n	8018232 <__ssputs_r+0x46>

080182a0 <_svfiprintf_r>:
 80182a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a4:	461d      	mov	r5, r3
 80182a6:	898b      	ldrh	r3, [r1, #12]
 80182a8:	061f      	lsls	r7, r3, #24
 80182aa:	b09d      	sub	sp, #116	; 0x74
 80182ac:	4680      	mov	r8, r0
 80182ae:	460c      	mov	r4, r1
 80182b0:	4616      	mov	r6, r2
 80182b2:	d50f      	bpl.n	80182d4 <_svfiprintf_r+0x34>
 80182b4:	690b      	ldr	r3, [r1, #16]
 80182b6:	b96b      	cbnz	r3, 80182d4 <_svfiprintf_r+0x34>
 80182b8:	2140      	movs	r1, #64	; 0x40
 80182ba:	f7ff ff3d 	bl	8018138 <_malloc_r>
 80182be:	6020      	str	r0, [r4, #0]
 80182c0:	6120      	str	r0, [r4, #16]
 80182c2:	b928      	cbnz	r0, 80182d0 <_svfiprintf_r+0x30>
 80182c4:	230c      	movs	r3, #12
 80182c6:	f8c8 3000 	str.w	r3, [r8]
 80182ca:	f04f 30ff 	mov.w	r0, #4294967295
 80182ce:	e0c8      	b.n	8018462 <_svfiprintf_r+0x1c2>
 80182d0:	2340      	movs	r3, #64	; 0x40
 80182d2:	6163      	str	r3, [r4, #20]
 80182d4:	2300      	movs	r3, #0
 80182d6:	9309      	str	r3, [sp, #36]	; 0x24
 80182d8:	2320      	movs	r3, #32
 80182da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182de:	2330      	movs	r3, #48	; 0x30
 80182e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80182e4:	9503      	str	r5, [sp, #12]
 80182e6:	f04f 0b01 	mov.w	fp, #1
 80182ea:	4637      	mov	r7, r6
 80182ec:	463d      	mov	r5, r7
 80182ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80182f2:	b10b      	cbz	r3, 80182f8 <_svfiprintf_r+0x58>
 80182f4:	2b25      	cmp	r3, #37	; 0x25
 80182f6:	d13e      	bne.n	8018376 <_svfiprintf_r+0xd6>
 80182f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80182fc:	d00b      	beq.n	8018316 <_svfiprintf_r+0x76>
 80182fe:	4653      	mov	r3, sl
 8018300:	4632      	mov	r2, r6
 8018302:	4621      	mov	r1, r4
 8018304:	4640      	mov	r0, r8
 8018306:	f7ff ff71 	bl	80181ec <__ssputs_r>
 801830a:	3001      	adds	r0, #1
 801830c:	f000 80a4 	beq.w	8018458 <_svfiprintf_r+0x1b8>
 8018310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018312:	4453      	add	r3, sl
 8018314:	9309      	str	r3, [sp, #36]	; 0x24
 8018316:	783b      	ldrb	r3, [r7, #0]
 8018318:	2b00      	cmp	r3, #0
 801831a:	f000 809d 	beq.w	8018458 <_svfiprintf_r+0x1b8>
 801831e:	2300      	movs	r3, #0
 8018320:	f04f 32ff 	mov.w	r2, #4294967295
 8018324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018328:	9304      	str	r3, [sp, #16]
 801832a:	9307      	str	r3, [sp, #28]
 801832c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018330:	931a      	str	r3, [sp, #104]	; 0x68
 8018332:	462f      	mov	r7, r5
 8018334:	2205      	movs	r2, #5
 8018336:	f817 1b01 	ldrb.w	r1, [r7], #1
 801833a:	4850      	ldr	r0, [pc, #320]	; (801847c <_svfiprintf_r+0x1dc>)
 801833c:	f7e7 ff60 	bl	8000200 <memchr>
 8018340:	9b04      	ldr	r3, [sp, #16]
 8018342:	b9d0      	cbnz	r0, 801837a <_svfiprintf_r+0xda>
 8018344:	06d9      	lsls	r1, r3, #27
 8018346:	bf44      	itt	mi
 8018348:	2220      	movmi	r2, #32
 801834a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801834e:	071a      	lsls	r2, r3, #28
 8018350:	bf44      	itt	mi
 8018352:	222b      	movmi	r2, #43	; 0x2b
 8018354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018358:	782a      	ldrb	r2, [r5, #0]
 801835a:	2a2a      	cmp	r2, #42	; 0x2a
 801835c:	d015      	beq.n	801838a <_svfiprintf_r+0xea>
 801835e:	9a07      	ldr	r2, [sp, #28]
 8018360:	462f      	mov	r7, r5
 8018362:	2000      	movs	r0, #0
 8018364:	250a      	movs	r5, #10
 8018366:	4639      	mov	r1, r7
 8018368:	f811 3b01 	ldrb.w	r3, [r1], #1
 801836c:	3b30      	subs	r3, #48	; 0x30
 801836e:	2b09      	cmp	r3, #9
 8018370:	d94d      	bls.n	801840e <_svfiprintf_r+0x16e>
 8018372:	b1b8      	cbz	r0, 80183a4 <_svfiprintf_r+0x104>
 8018374:	e00f      	b.n	8018396 <_svfiprintf_r+0xf6>
 8018376:	462f      	mov	r7, r5
 8018378:	e7b8      	b.n	80182ec <_svfiprintf_r+0x4c>
 801837a:	4a40      	ldr	r2, [pc, #256]	; (801847c <_svfiprintf_r+0x1dc>)
 801837c:	1a80      	subs	r0, r0, r2
 801837e:	fa0b f000 	lsl.w	r0, fp, r0
 8018382:	4318      	orrs	r0, r3
 8018384:	9004      	str	r0, [sp, #16]
 8018386:	463d      	mov	r5, r7
 8018388:	e7d3      	b.n	8018332 <_svfiprintf_r+0x92>
 801838a:	9a03      	ldr	r2, [sp, #12]
 801838c:	1d11      	adds	r1, r2, #4
 801838e:	6812      	ldr	r2, [r2, #0]
 8018390:	9103      	str	r1, [sp, #12]
 8018392:	2a00      	cmp	r2, #0
 8018394:	db01      	blt.n	801839a <_svfiprintf_r+0xfa>
 8018396:	9207      	str	r2, [sp, #28]
 8018398:	e004      	b.n	80183a4 <_svfiprintf_r+0x104>
 801839a:	4252      	negs	r2, r2
 801839c:	f043 0302 	orr.w	r3, r3, #2
 80183a0:	9207      	str	r2, [sp, #28]
 80183a2:	9304      	str	r3, [sp, #16]
 80183a4:	783b      	ldrb	r3, [r7, #0]
 80183a6:	2b2e      	cmp	r3, #46	; 0x2e
 80183a8:	d10c      	bne.n	80183c4 <_svfiprintf_r+0x124>
 80183aa:	787b      	ldrb	r3, [r7, #1]
 80183ac:	2b2a      	cmp	r3, #42	; 0x2a
 80183ae:	d133      	bne.n	8018418 <_svfiprintf_r+0x178>
 80183b0:	9b03      	ldr	r3, [sp, #12]
 80183b2:	1d1a      	adds	r2, r3, #4
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	9203      	str	r2, [sp, #12]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	bfb8      	it	lt
 80183bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80183c0:	3702      	adds	r7, #2
 80183c2:	9305      	str	r3, [sp, #20]
 80183c4:	4d2e      	ldr	r5, [pc, #184]	; (8018480 <_svfiprintf_r+0x1e0>)
 80183c6:	7839      	ldrb	r1, [r7, #0]
 80183c8:	2203      	movs	r2, #3
 80183ca:	4628      	mov	r0, r5
 80183cc:	f7e7 ff18 	bl	8000200 <memchr>
 80183d0:	b138      	cbz	r0, 80183e2 <_svfiprintf_r+0x142>
 80183d2:	2340      	movs	r3, #64	; 0x40
 80183d4:	1b40      	subs	r0, r0, r5
 80183d6:	fa03 f000 	lsl.w	r0, r3, r0
 80183da:	9b04      	ldr	r3, [sp, #16]
 80183dc:	4303      	orrs	r3, r0
 80183de:	3701      	adds	r7, #1
 80183e0:	9304      	str	r3, [sp, #16]
 80183e2:	7839      	ldrb	r1, [r7, #0]
 80183e4:	4827      	ldr	r0, [pc, #156]	; (8018484 <_svfiprintf_r+0x1e4>)
 80183e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80183ea:	2206      	movs	r2, #6
 80183ec:	1c7e      	adds	r6, r7, #1
 80183ee:	f7e7 ff07 	bl	8000200 <memchr>
 80183f2:	2800      	cmp	r0, #0
 80183f4:	d038      	beq.n	8018468 <_svfiprintf_r+0x1c8>
 80183f6:	4b24      	ldr	r3, [pc, #144]	; (8018488 <_svfiprintf_r+0x1e8>)
 80183f8:	bb13      	cbnz	r3, 8018440 <_svfiprintf_r+0x1a0>
 80183fa:	9b03      	ldr	r3, [sp, #12]
 80183fc:	3307      	adds	r3, #7
 80183fe:	f023 0307 	bic.w	r3, r3, #7
 8018402:	3308      	adds	r3, #8
 8018404:	9303      	str	r3, [sp, #12]
 8018406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018408:	444b      	add	r3, r9
 801840a:	9309      	str	r3, [sp, #36]	; 0x24
 801840c:	e76d      	b.n	80182ea <_svfiprintf_r+0x4a>
 801840e:	fb05 3202 	mla	r2, r5, r2, r3
 8018412:	2001      	movs	r0, #1
 8018414:	460f      	mov	r7, r1
 8018416:	e7a6      	b.n	8018366 <_svfiprintf_r+0xc6>
 8018418:	2300      	movs	r3, #0
 801841a:	3701      	adds	r7, #1
 801841c:	9305      	str	r3, [sp, #20]
 801841e:	4619      	mov	r1, r3
 8018420:	250a      	movs	r5, #10
 8018422:	4638      	mov	r0, r7
 8018424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018428:	3a30      	subs	r2, #48	; 0x30
 801842a:	2a09      	cmp	r2, #9
 801842c:	d903      	bls.n	8018436 <_svfiprintf_r+0x196>
 801842e:	2b00      	cmp	r3, #0
 8018430:	d0c8      	beq.n	80183c4 <_svfiprintf_r+0x124>
 8018432:	9105      	str	r1, [sp, #20]
 8018434:	e7c6      	b.n	80183c4 <_svfiprintf_r+0x124>
 8018436:	fb05 2101 	mla	r1, r5, r1, r2
 801843a:	2301      	movs	r3, #1
 801843c:	4607      	mov	r7, r0
 801843e:	e7f0      	b.n	8018422 <_svfiprintf_r+0x182>
 8018440:	ab03      	add	r3, sp, #12
 8018442:	9300      	str	r3, [sp, #0]
 8018444:	4622      	mov	r2, r4
 8018446:	4b11      	ldr	r3, [pc, #68]	; (801848c <_svfiprintf_r+0x1ec>)
 8018448:	a904      	add	r1, sp, #16
 801844a:	4640      	mov	r0, r8
 801844c:	f3af 8000 	nop.w
 8018450:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018454:	4681      	mov	r9, r0
 8018456:	d1d6      	bne.n	8018406 <_svfiprintf_r+0x166>
 8018458:	89a3      	ldrh	r3, [r4, #12]
 801845a:	065b      	lsls	r3, r3, #25
 801845c:	f53f af35 	bmi.w	80182ca <_svfiprintf_r+0x2a>
 8018460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018462:	b01d      	add	sp, #116	; 0x74
 8018464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018468:	ab03      	add	r3, sp, #12
 801846a:	9300      	str	r3, [sp, #0]
 801846c:	4622      	mov	r2, r4
 801846e:	4b07      	ldr	r3, [pc, #28]	; (801848c <_svfiprintf_r+0x1ec>)
 8018470:	a904      	add	r1, sp, #16
 8018472:	4640      	mov	r0, r8
 8018474:	f000 f9c2 	bl	80187fc <_printf_i>
 8018478:	e7ea      	b.n	8018450 <_svfiprintf_r+0x1b0>
 801847a:	bf00      	nop
 801847c:	0801c8d0 	.word	0x0801c8d0
 8018480:	0801c8d6 	.word	0x0801c8d6
 8018484:	0801c8da 	.word	0x0801c8da
 8018488:	00000000 	.word	0x00000000
 801848c:	080181ed 	.word	0x080181ed

08018490 <__sfputc_r>:
 8018490:	6893      	ldr	r3, [r2, #8]
 8018492:	3b01      	subs	r3, #1
 8018494:	2b00      	cmp	r3, #0
 8018496:	b410      	push	{r4}
 8018498:	6093      	str	r3, [r2, #8]
 801849a:	da08      	bge.n	80184ae <__sfputc_r+0x1e>
 801849c:	6994      	ldr	r4, [r2, #24]
 801849e:	42a3      	cmp	r3, r4
 80184a0:	db01      	blt.n	80184a6 <__sfputc_r+0x16>
 80184a2:	290a      	cmp	r1, #10
 80184a4:	d103      	bne.n	80184ae <__sfputc_r+0x1e>
 80184a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184aa:	f7ff bb43 	b.w	8017b34 <__swbuf_r>
 80184ae:	6813      	ldr	r3, [r2, #0]
 80184b0:	1c58      	adds	r0, r3, #1
 80184b2:	6010      	str	r0, [r2, #0]
 80184b4:	7019      	strb	r1, [r3, #0]
 80184b6:	4608      	mov	r0, r1
 80184b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184bc:	4770      	bx	lr

080184be <__sfputs_r>:
 80184be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184c0:	4606      	mov	r6, r0
 80184c2:	460f      	mov	r7, r1
 80184c4:	4614      	mov	r4, r2
 80184c6:	18d5      	adds	r5, r2, r3
 80184c8:	42ac      	cmp	r4, r5
 80184ca:	d101      	bne.n	80184d0 <__sfputs_r+0x12>
 80184cc:	2000      	movs	r0, #0
 80184ce:	e007      	b.n	80184e0 <__sfputs_r+0x22>
 80184d0:	463a      	mov	r2, r7
 80184d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184d6:	4630      	mov	r0, r6
 80184d8:	f7ff ffda 	bl	8018490 <__sfputc_r>
 80184dc:	1c43      	adds	r3, r0, #1
 80184de:	d1f3      	bne.n	80184c8 <__sfputs_r+0xa>
 80184e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080184e4 <_vfiprintf_r>:
 80184e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e8:	460c      	mov	r4, r1
 80184ea:	b09d      	sub	sp, #116	; 0x74
 80184ec:	4617      	mov	r7, r2
 80184ee:	461d      	mov	r5, r3
 80184f0:	4606      	mov	r6, r0
 80184f2:	b118      	cbz	r0, 80184fc <_vfiprintf_r+0x18>
 80184f4:	6983      	ldr	r3, [r0, #24]
 80184f6:	b90b      	cbnz	r3, 80184fc <_vfiprintf_r+0x18>
 80184f8:	f7ff fcda 	bl	8017eb0 <__sinit>
 80184fc:	4b7c      	ldr	r3, [pc, #496]	; (80186f0 <_vfiprintf_r+0x20c>)
 80184fe:	429c      	cmp	r4, r3
 8018500:	d158      	bne.n	80185b4 <_vfiprintf_r+0xd0>
 8018502:	6874      	ldr	r4, [r6, #4]
 8018504:	89a3      	ldrh	r3, [r4, #12]
 8018506:	0718      	lsls	r0, r3, #28
 8018508:	d55e      	bpl.n	80185c8 <_vfiprintf_r+0xe4>
 801850a:	6923      	ldr	r3, [r4, #16]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d05b      	beq.n	80185c8 <_vfiprintf_r+0xe4>
 8018510:	2300      	movs	r3, #0
 8018512:	9309      	str	r3, [sp, #36]	; 0x24
 8018514:	2320      	movs	r3, #32
 8018516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801851a:	2330      	movs	r3, #48	; 0x30
 801851c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018520:	9503      	str	r5, [sp, #12]
 8018522:	f04f 0b01 	mov.w	fp, #1
 8018526:	46b8      	mov	r8, r7
 8018528:	4645      	mov	r5, r8
 801852a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801852e:	b10b      	cbz	r3, 8018534 <_vfiprintf_r+0x50>
 8018530:	2b25      	cmp	r3, #37	; 0x25
 8018532:	d154      	bne.n	80185de <_vfiprintf_r+0xfa>
 8018534:	ebb8 0a07 	subs.w	sl, r8, r7
 8018538:	d00b      	beq.n	8018552 <_vfiprintf_r+0x6e>
 801853a:	4653      	mov	r3, sl
 801853c:	463a      	mov	r2, r7
 801853e:	4621      	mov	r1, r4
 8018540:	4630      	mov	r0, r6
 8018542:	f7ff ffbc 	bl	80184be <__sfputs_r>
 8018546:	3001      	adds	r0, #1
 8018548:	f000 80c2 	beq.w	80186d0 <_vfiprintf_r+0x1ec>
 801854c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801854e:	4453      	add	r3, sl
 8018550:	9309      	str	r3, [sp, #36]	; 0x24
 8018552:	f898 3000 	ldrb.w	r3, [r8]
 8018556:	2b00      	cmp	r3, #0
 8018558:	f000 80ba 	beq.w	80186d0 <_vfiprintf_r+0x1ec>
 801855c:	2300      	movs	r3, #0
 801855e:	f04f 32ff 	mov.w	r2, #4294967295
 8018562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018566:	9304      	str	r3, [sp, #16]
 8018568:	9307      	str	r3, [sp, #28]
 801856a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801856e:	931a      	str	r3, [sp, #104]	; 0x68
 8018570:	46a8      	mov	r8, r5
 8018572:	2205      	movs	r2, #5
 8018574:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018578:	485e      	ldr	r0, [pc, #376]	; (80186f4 <_vfiprintf_r+0x210>)
 801857a:	f7e7 fe41 	bl	8000200 <memchr>
 801857e:	9b04      	ldr	r3, [sp, #16]
 8018580:	bb78      	cbnz	r0, 80185e2 <_vfiprintf_r+0xfe>
 8018582:	06d9      	lsls	r1, r3, #27
 8018584:	bf44      	itt	mi
 8018586:	2220      	movmi	r2, #32
 8018588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801858c:	071a      	lsls	r2, r3, #28
 801858e:	bf44      	itt	mi
 8018590:	222b      	movmi	r2, #43	; 0x2b
 8018592:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018596:	782a      	ldrb	r2, [r5, #0]
 8018598:	2a2a      	cmp	r2, #42	; 0x2a
 801859a:	d02a      	beq.n	80185f2 <_vfiprintf_r+0x10e>
 801859c:	9a07      	ldr	r2, [sp, #28]
 801859e:	46a8      	mov	r8, r5
 80185a0:	2000      	movs	r0, #0
 80185a2:	250a      	movs	r5, #10
 80185a4:	4641      	mov	r1, r8
 80185a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80185aa:	3b30      	subs	r3, #48	; 0x30
 80185ac:	2b09      	cmp	r3, #9
 80185ae:	d969      	bls.n	8018684 <_vfiprintf_r+0x1a0>
 80185b0:	b360      	cbz	r0, 801860c <_vfiprintf_r+0x128>
 80185b2:	e024      	b.n	80185fe <_vfiprintf_r+0x11a>
 80185b4:	4b50      	ldr	r3, [pc, #320]	; (80186f8 <_vfiprintf_r+0x214>)
 80185b6:	429c      	cmp	r4, r3
 80185b8:	d101      	bne.n	80185be <_vfiprintf_r+0xda>
 80185ba:	68b4      	ldr	r4, [r6, #8]
 80185bc:	e7a2      	b.n	8018504 <_vfiprintf_r+0x20>
 80185be:	4b4f      	ldr	r3, [pc, #316]	; (80186fc <_vfiprintf_r+0x218>)
 80185c0:	429c      	cmp	r4, r3
 80185c2:	bf08      	it	eq
 80185c4:	68f4      	ldreq	r4, [r6, #12]
 80185c6:	e79d      	b.n	8018504 <_vfiprintf_r+0x20>
 80185c8:	4621      	mov	r1, r4
 80185ca:	4630      	mov	r0, r6
 80185cc:	f7ff fb12 	bl	8017bf4 <__swsetup_r>
 80185d0:	2800      	cmp	r0, #0
 80185d2:	d09d      	beq.n	8018510 <_vfiprintf_r+0x2c>
 80185d4:	f04f 30ff 	mov.w	r0, #4294967295
 80185d8:	b01d      	add	sp, #116	; 0x74
 80185da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185de:	46a8      	mov	r8, r5
 80185e0:	e7a2      	b.n	8018528 <_vfiprintf_r+0x44>
 80185e2:	4a44      	ldr	r2, [pc, #272]	; (80186f4 <_vfiprintf_r+0x210>)
 80185e4:	1a80      	subs	r0, r0, r2
 80185e6:	fa0b f000 	lsl.w	r0, fp, r0
 80185ea:	4318      	orrs	r0, r3
 80185ec:	9004      	str	r0, [sp, #16]
 80185ee:	4645      	mov	r5, r8
 80185f0:	e7be      	b.n	8018570 <_vfiprintf_r+0x8c>
 80185f2:	9a03      	ldr	r2, [sp, #12]
 80185f4:	1d11      	adds	r1, r2, #4
 80185f6:	6812      	ldr	r2, [r2, #0]
 80185f8:	9103      	str	r1, [sp, #12]
 80185fa:	2a00      	cmp	r2, #0
 80185fc:	db01      	blt.n	8018602 <_vfiprintf_r+0x11e>
 80185fe:	9207      	str	r2, [sp, #28]
 8018600:	e004      	b.n	801860c <_vfiprintf_r+0x128>
 8018602:	4252      	negs	r2, r2
 8018604:	f043 0302 	orr.w	r3, r3, #2
 8018608:	9207      	str	r2, [sp, #28]
 801860a:	9304      	str	r3, [sp, #16]
 801860c:	f898 3000 	ldrb.w	r3, [r8]
 8018610:	2b2e      	cmp	r3, #46	; 0x2e
 8018612:	d10e      	bne.n	8018632 <_vfiprintf_r+0x14e>
 8018614:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018618:	2b2a      	cmp	r3, #42	; 0x2a
 801861a:	d138      	bne.n	801868e <_vfiprintf_r+0x1aa>
 801861c:	9b03      	ldr	r3, [sp, #12]
 801861e:	1d1a      	adds	r2, r3, #4
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	9203      	str	r2, [sp, #12]
 8018624:	2b00      	cmp	r3, #0
 8018626:	bfb8      	it	lt
 8018628:	f04f 33ff 	movlt.w	r3, #4294967295
 801862c:	f108 0802 	add.w	r8, r8, #2
 8018630:	9305      	str	r3, [sp, #20]
 8018632:	4d33      	ldr	r5, [pc, #204]	; (8018700 <_vfiprintf_r+0x21c>)
 8018634:	f898 1000 	ldrb.w	r1, [r8]
 8018638:	2203      	movs	r2, #3
 801863a:	4628      	mov	r0, r5
 801863c:	f7e7 fde0 	bl	8000200 <memchr>
 8018640:	b140      	cbz	r0, 8018654 <_vfiprintf_r+0x170>
 8018642:	2340      	movs	r3, #64	; 0x40
 8018644:	1b40      	subs	r0, r0, r5
 8018646:	fa03 f000 	lsl.w	r0, r3, r0
 801864a:	9b04      	ldr	r3, [sp, #16]
 801864c:	4303      	orrs	r3, r0
 801864e:	f108 0801 	add.w	r8, r8, #1
 8018652:	9304      	str	r3, [sp, #16]
 8018654:	f898 1000 	ldrb.w	r1, [r8]
 8018658:	482a      	ldr	r0, [pc, #168]	; (8018704 <_vfiprintf_r+0x220>)
 801865a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801865e:	2206      	movs	r2, #6
 8018660:	f108 0701 	add.w	r7, r8, #1
 8018664:	f7e7 fdcc 	bl	8000200 <memchr>
 8018668:	2800      	cmp	r0, #0
 801866a:	d037      	beq.n	80186dc <_vfiprintf_r+0x1f8>
 801866c:	4b26      	ldr	r3, [pc, #152]	; (8018708 <_vfiprintf_r+0x224>)
 801866e:	bb1b      	cbnz	r3, 80186b8 <_vfiprintf_r+0x1d4>
 8018670:	9b03      	ldr	r3, [sp, #12]
 8018672:	3307      	adds	r3, #7
 8018674:	f023 0307 	bic.w	r3, r3, #7
 8018678:	3308      	adds	r3, #8
 801867a:	9303      	str	r3, [sp, #12]
 801867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801867e:	444b      	add	r3, r9
 8018680:	9309      	str	r3, [sp, #36]	; 0x24
 8018682:	e750      	b.n	8018526 <_vfiprintf_r+0x42>
 8018684:	fb05 3202 	mla	r2, r5, r2, r3
 8018688:	2001      	movs	r0, #1
 801868a:	4688      	mov	r8, r1
 801868c:	e78a      	b.n	80185a4 <_vfiprintf_r+0xc0>
 801868e:	2300      	movs	r3, #0
 8018690:	f108 0801 	add.w	r8, r8, #1
 8018694:	9305      	str	r3, [sp, #20]
 8018696:	4619      	mov	r1, r3
 8018698:	250a      	movs	r5, #10
 801869a:	4640      	mov	r0, r8
 801869c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186a0:	3a30      	subs	r2, #48	; 0x30
 80186a2:	2a09      	cmp	r2, #9
 80186a4:	d903      	bls.n	80186ae <_vfiprintf_r+0x1ca>
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d0c3      	beq.n	8018632 <_vfiprintf_r+0x14e>
 80186aa:	9105      	str	r1, [sp, #20]
 80186ac:	e7c1      	b.n	8018632 <_vfiprintf_r+0x14e>
 80186ae:	fb05 2101 	mla	r1, r5, r1, r2
 80186b2:	2301      	movs	r3, #1
 80186b4:	4680      	mov	r8, r0
 80186b6:	e7f0      	b.n	801869a <_vfiprintf_r+0x1b6>
 80186b8:	ab03      	add	r3, sp, #12
 80186ba:	9300      	str	r3, [sp, #0]
 80186bc:	4622      	mov	r2, r4
 80186be:	4b13      	ldr	r3, [pc, #76]	; (801870c <_vfiprintf_r+0x228>)
 80186c0:	a904      	add	r1, sp, #16
 80186c2:	4630      	mov	r0, r6
 80186c4:	f3af 8000 	nop.w
 80186c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80186cc:	4681      	mov	r9, r0
 80186ce:	d1d5      	bne.n	801867c <_vfiprintf_r+0x198>
 80186d0:	89a3      	ldrh	r3, [r4, #12]
 80186d2:	065b      	lsls	r3, r3, #25
 80186d4:	f53f af7e 	bmi.w	80185d4 <_vfiprintf_r+0xf0>
 80186d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80186da:	e77d      	b.n	80185d8 <_vfiprintf_r+0xf4>
 80186dc:	ab03      	add	r3, sp, #12
 80186de:	9300      	str	r3, [sp, #0]
 80186e0:	4622      	mov	r2, r4
 80186e2:	4b0a      	ldr	r3, [pc, #40]	; (801870c <_vfiprintf_r+0x228>)
 80186e4:	a904      	add	r1, sp, #16
 80186e6:	4630      	mov	r0, r6
 80186e8:	f000 f888 	bl	80187fc <_printf_i>
 80186ec:	e7ec      	b.n	80186c8 <_vfiprintf_r+0x1e4>
 80186ee:	bf00      	nop
 80186f0:	0801c890 	.word	0x0801c890
 80186f4:	0801c8d0 	.word	0x0801c8d0
 80186f8:	0801c8b0 	.word	0x0801c8b0
 80186fc:	0801c870 	.word	0x0801c870
 8018700:	0801c8d6 	.word	0x0801c8d6
 8018704:	0801c8da 	.word	0x0801c8da
 8018708:	00000000 	.word	0x00000000
 801870c:	080184bf 	.word	0x080184bf

08018710 <_printf_common>:
 8018710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018714:	4691      	mov	r9, r2
 8018716:	461f      	mov	r7, r3
 8018718:	688a      	ldr	r2, [r1, #8]
 801871a:	690b      	ldr	r3, [r1, #16]
 801871c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018720:	4293      	cmp	r3, r2
 8018722:	bfb8      	it	lt
 8018724:	4613      	movlt	r3, r2
 8018726:	f8c9 3000 	str.w	r3, [r9]
 801872a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801872e:	4606      	mov	r6, r0
 8018730:	460c      	mov	r4, r1
 8018732:	b112      	cbz	r2, 801873a <_printf_common+0x2a>
 8018734:	3301      	adds	r3, #1
 8018736:	f8c9 3000 	str.w	r3, [r9]
 801873a:	6823      	ldr	r3, [r4, #0]
 801873c:	0699      	lsls	r1, r3, #26
 801873e:	bf42      	ittt	mi
 8018740:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018744:	3302      	addmi	r3, #2
 8018746:	f8c9 3000 	strmi.w	r3, [r9]
 801874a:	6825      	ldr	r5, [r4, #0]
 801874c:	f015 0506 	ands.w	r5, r5, #6
 8018750:	d107      	bne.n	8018762 <_printf_common+0x52>
 8018752:	f104 0a19 	add.w	sl, r4, #25
 8018756:	68e3      	ldr	r3, [r4, #12]
 8018758:	f8d9 2000 	ldr.w	r2, [r9]
 801875c:	1a9b      	subs	r3, r3, r2
 801875e:	42ab      	cmp	r3, r5
 8018760:	dc28      	bgt.n	80187b4 <_printf_common+0xa4>
 8018762:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018766:	6822      	ldr	r2, [r4, #0]
 8018768:	3300      	adds	r3, #0
 801876a:	bf18      	it	ne
 801876c:	2301      	movne	r3, #1
 801876e:	0692      	lsls	r2, r2, #26
 8018770:	d42d      	bmi.n	80187ce <_printf_common+0xbe>
 8018772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018776:	4639      	mov	r1, r7
 8018778:	4630      	mov	r0, r6
 801877a:	47c0      	blx	r8
 801877c:	3001      	adds	r0, #1
 801877e:	d020      	beq.n	80187c2 <_printf_common+0xb2>
 8018780:	6823      	ldr	r3, [r4, #0]
 8018782:	68e5      	ldr	r5, [r4, #12]
 8018784:	f8d9 2000 	ldr.w	r2, [r9]
 8018788:	f003 0306 	and.w	r3, r3, #6
 801878c:	2b04      	cmp	r3, #4
 801878e:	bf08      	it	eq
 8018790:	1aad      	subeq	r5, r5, r2
 8018792:	68a3      	ldr	r3, [r4, #8]
 8018794:	6922      	ldr	r2, [r4, #16]
 8018796:	bf0c      	ite	eq
 8018798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801879c:	2500      	movne	r5, #0
 801879e:	4293      	cmp	r3, r2
 80187a0:	bfc4      	itt	gt
 80187a2:	1a9b      	subgt	r3, r3, r2
 80187a4:	18ed      	addgt	r5, r5, r3
 80187a6:	f04f 0900 	mov.w	r9, #0
 80187aa:	341a      	adds	r4, #26
 80187ac:	454d      	cmp	r5, r9
 80187ae:	d11a      	bne.n	80187e6 <_printf_common+0xd6>
 80187b0:	2000      	movs	r0, #0
 80187b2:	e008      	b.n	80187c6 <_printf_common+0xb6>
 80187b4:	2301      	movs	r3, #1
 80187b6:	4652      	mov	r2, sl
 80187b8:	4639      	mov	r1, r7
 80187ba:	4630      	mov	r0, r6
 80187bc:	47c0      	blx	r8
 80187be:	3001      	adds	r0, #1
 80187c0:	d103      	bne.n	80187ca <_printf_common+0xba>
 80187c2:	f04f 30ff 	mov.w	r0, #4294967295
 80187c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187ca:	3501      	adds	r5, #1
 80187cc:	e7c3      	b.n	8018756 <_printf_common+0x46>
 80187ce:	18e1      	adds	r1, r4, r3
 80187d0:	1c5a      	adds	r2, r3, #1
 80187d2:	2030      	movs	r0, #48	; 0x30
 80187d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80187d8:	4422      	add	r2, r4
 80187da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80187de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80187e2:	3302      	adds	r3, #2
 80187e4:	e7c5      	b.n	8018772 <_printf_common+0x62>
 80187e6:	2301      	movs	r3, #1
 80187e8:	4622      	mov	r2, r4
 80187ea:	4639      	mov	r1, r7
 80187ec:	4630      	mov	r0, r6
 80187ee:	47c0      	blx	r8
 80187f0:	3001      	adds	r0, #1
 80187f2:	d0e6      	beq.n	80187c2 <_printf_common+0xb2>
 80187f4:	f109 0901 	add.w	r9, r9, #1
 80187f8:	e7d8      	b.n	80187ac <_printf_common+0x9c>
	...

080187fc <_printf_i>:
 80187fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018800:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018804:	460c      	mov	r4, r1
 8018806:	7e09      	ldrb	r1, [r1, #24]
 8018808:	b085      	sub	sp, #20
 801880a:	296e      	cmp	r1, #110	; 0x6e
 801880c:	4617      	mov	r7, r2
 801880e:	4606      	mov	r6, r0
 8018810:	4698      	mov	r8, r3
 8018812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018814:	f000 80b3 	beq.w	801897e <_printf_i+0x182>
 8018818:	d822      	bhi.n	8018860 <_printf_i+0x64>
 801881a:	2963      	cmp	r1, #99	; 0x63
 801881c:	d036      	beq.n	801888c <_printf_i+0x90>
 801881e:	d80a      	bhi.n	8018836 <_printf_i+0x3a>
 8018820:	2900      	cmp	r1, #0
 8018822:	f000 80b9 	beq.w	8018998 <_printf_i+0x19c>
 8018826:	2958      	cmp	r1, #88	; 0x58
 8018828:	f000 8083 	beq.w	8018932 <_printf_i+0x136>
 801882c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018830:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018834:	e032      	b.n	801889c <_printf_i+0xa0>
 8018836:	2964      	cmp	r1, #100	; 0x64
 8018838:	d001      	beq.n	801883e <_printf_i+0x42>
 801883a:	2969      	cmp	r1, #105	; 0x69
 801883c:	d1f6      	bne.n	801882c <_printf_i+0x30>
 801883e:	6820      	ldr	r0, [r4, #0]
 8018840:	6813      	ldr	r3, [r2, #0]
 8018842:	0605      	lsls	r5, r0, #24
 8018844:	f103 0104 	add.w	r1, r3, #4
 8018848:	d52a      	bpl.n	80188a0 <_printf_i+0xa4>
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	6011      	str	r1, [r2, #0]
 801884e:	2b00      	cmp	r3, #0
 8018850:	da03      	bge.n	801885a <_printf_i+0x5e>
 8018852:	222d      	movs	r2, #45	; 0x2d
 8018854:	425b      	negs	r3, r3
 8018856:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801885a:	486f      	ldr	r0, [pc, #444]	; (8018a18 <_printf_i+0x21c>)
 801885c:	220a      	movs	r2, #10
 801885e:	e039      	b.n	80188d4 <_printf_i+0xd8>
 8018860:	2973      	cmp	r1, #115	; 0x73
 8018862:	f000 809d 	beq.w	80189a0 <_printf_i+0x1a4>
 8018866:	d808      	bhi.n	801887a <_printf_i+0x7e>
 8018868:	296f      	cmp	r1, #111	; 0x6f
 801886a:	d020      	beq.n	80188ae <_printf_i+0xb2>
 801886c:	2970      	cmp	r1, #112	; 0x70
 801886e:	d1dd      	bne.n	801882c <_printf_i+0x30>
 8018870:	6823      	ldr	r3, [r4, #0]
 8018872:	f043 0320 	orr.w	r3, r3, #32
 8018876:	6023      	str	r3, [r4, #0]
 8018878:	e003      	b.n	8018882 <_printf_i+0x86>
 801887a:	2975      	cmp	r1, #117	; 0x75
 801887c:	d017      	beq.n	80188ae <_printf_i+0xb2>
 801887e:	2978      	cmp	r1, #120	; 0x78
 8018880:	d1d4      	bne.n	801882c <_printf_i+0x30>
 8018882:	2378      	movs	r3, #120	; 0x78
 8018884:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018888:	4864      	ldr	r0, [pc, #400]	; (8018a1c <_printf_i+0x220>)
 801888a:	e055      	b.n	8018938 <_printf_i+0x13c>
 801888c:	6813      	ldr	r3, [r2, #0]
 801888e:	1d19      	adds	r1, r3, #4
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	6011      	str	r1, [r2, #0]
 8018894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801889c:	2301      	movs	r3, #1
 801889e:	e08c      	b.n	80189ba <_printf_i+0x1be>
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	6011      	str	r1, [r2, #0]
 80188a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80188a8:	bf18      	it	ne
 80188aa:	b21b      	sxthne	r3, r3
 80188ac:	e7cf      	b.n	801884e <_printf_i+0x52>
 80188ae:	6813      	ldr	r3, [r2, #0]
 80188b0:	6825      	ldr	r5, [r4, #0]
 80188b2:	1d18      	adds	r0, r3, #4
 80188b4:	6010      	str	r0, [r2, #0]
 80188b6:	0628      	lsls	r0, r5, #24
 80188b8:	d501      	bpl.n	80188be <_printf_i+0xc2>
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	e002      	b.n	80188c4 <_printf_i+0xc8>
 80188be:	0668      	lsls	r0, r5, #25
 80188c0:	d5fb      	bpl.n	80188ba <_printf_i+0xbe>
 80188c2:	881b      	ldrh	r3, [r3, #0]
 80188c4:	4854      	ldr	r0, [pc, #336]	; (8018a18 <_printf_i+0x21c>)
 80188c6:	296f      	cmp	r1, #111	; 0x6f
 80188c8:	bf14      	ite	ne
 80188ca:	220a      	movne	r2, #10
 80188cc:	2208      	moveq	r2, #8
 80188ce:	2100      	movs	r1, #0
 80188d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80188d4:	6865      	ldr	r5, [r4, #4]
 80188d6:	60a5      	str	r5, [r4, #8]
 80188d8:	2d00      	cmp	r5, #0
 80188da:	f2c0 8095 	blt.w	8018a08 <_printf_i+0x20c>
 80188de:	6821      	ldr	r1, [r4, #0]
 80188e0:	f021 0104 	bic.w	r1, r1, #4
 80188e4:	6021      	str	r1, [r4, #0]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d13d      	bne.n	8018966 <_printf_i+0x16a>
 80188ea:	2d00      	cmp	r5, #0
 80188ec:	f040 808e 	bne.w	8018a0c <_printf_i+0x210>
 80188f0:	4665      	mov	r5, ip
 80188f2:	2a08      	cmp	r2, #8
 80188f4:	d10b      	bne.n	801890e <_printf_i+0x112>
 80188f6:	6823      	ldr	r3, [r4, #0]
 80188f8:	07db      	lsls	r3, r3, #31
 80188fa:	d508      	bpl.n	801890e <_printf_i+0x112>
 80188fc:	6923      	ldr	r3, [r4, #16]
 80188fe:	6862      	ldr	r2, [r4, #4]
 8018900:	429a      	cmp	r2, r3
 8018902:	bfde      	ittt	le
 8018904:	2330      	movle	r3, #48	; 0x30
 8018906:	f805 3c01 	strble.w	r3, [r5, #-1]
 801890a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801890e:	ebac 0305 	sub.w	r3, ip, r5
 8018912:	6123      	str	r3, [r4, #16]
 8018914:	f8cd 8000 	str.w	r8, [sp]
 8018918:	463b      	mov	r3, r7
 801891a:	aa03      	add	r2, sp, #12
 801891c:	4621      	mov	r1, r4
 801891e:	4630      	mov	r0, r6
 8018920:	f7ff fef6 	bl	8018710 <_printf_common>
 8018924:	3001      	adds	r0, #1
 8018926:	d14d      	bne.n	80189c4 <_printf_i+0x1c8>
 8018928:	f04f 30ff 	mov.w	r0, #4294967295
 801892c:	b005      	add	sp, #20
 801892e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018932:	4839      	ldr	r0, [pc, #228]	; (8018a18 <_printf_i+0x21c>)
 8018934:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018938:	6813      	ldr	r3, [r2, #0]
 801893a:	6821      	ldr	r1, [r4, #0]
 801893c:	1d1d      	adds	r5, r3, #4
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	6015      	str	r5, [r2, #0]
 8018942:	060a      	lsls	r2, r1, #24
 8018944:	d50b      	bpl.n	801895e <_printf_i+0x162>
 8018946:	07ca      	lsls	r2, r1, #31
 8018948:	bf44      	itt	mi
 801894a:	f041 0120 	orrmi.w	r1, r1, #32
 801894e:	6021      	strmi	r1, [r4, #0]
 8018950:	b91b      	cbnz	r3, 801895a <_printf_i+0x15e>
 8018952:	6822      	ldr	r2, [r4, #0]
 8018954:	f022 0220 	bic.w	r2, r2, #32
 8018958:	6022      	str	r2, [r4, #0]
 801895a:	2210      	movs	r2, #16
 801895c:	e7b7      	b.n	80188ce <_printf_i+0xd2>
 801895e:	064d      	lsls	r5, r1, #25
 8018960:	bf48      	it	mi
 8018962:	b29b      	uxthmi	r3, r3
 8018964:	e7ef      	b.n	8018946 <_printf_i+0x14a>
 8018966:	4665      	mov	r5, ip
 8018968:	fbb3 f1f2 	udiv	r1, r3, r2
 801896c:	fb02 3311 	mls	r3, r2, r1, r3
 8018970:	5cc3      	ldrb	r3, [r0, r3]
 8018972:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018976:	460b      	mov	r3, r1
 8018978:	2900      	cmp	r1, #0
 801897a:	d1f5      	bne.n	8018968 <_printf_i+0x16c>
 801897c:	e7b9      	b.n	80188f2 <_printf_i+0xf6>
 801897e:	6813      	ldr	r3, [r2, #0]
 8018980:	6825      	ldr	r5, [r4, #0]
 8018982:	6961      	ldr	r1, [r4, #20]
 8018984:	1d18      	adds	r0, r3, #4
 8018986:	6010      	str	r0, [r2, #0]
 8018988:	0628      	lsls	r0, r5, #24
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	d501      	bpl.n	8018992 <_printf_i+0x196>
 801898e:	6019      	str	r1, [r3, #0]
 8018990:	e002      	b.n	8018998 <_printf_i+0x19c>
 8018992:	066a      	lsls	r2, r5, #25
 8018994:	d5fb      	bpl.n	801898e <_printf_i+0x192>
 8018996:	8019      	strh	r1, [r3, #0]
 8018998:	2300      	movs	r3, #0
 801899a:	6123      	str	r3, [r4, #16]
 801899c:	4665      	mov	r5, ip
 801899e:	e7b9      	b.n	8018914 <_printf_i+0x118>
 80189a0:	6813      	ldr	r3, [r2, #0]
 80189a2:	1d19      	adds	r1, r3, #4
 80189a4:	6011      	str	r1, [r2, #0]
 80189a6:	681d      	ldr	r5, [r3, #0]
 80189a8:	6862      	ldr	r2, [r4, #4]
 80189aa:	2100      	movs	r1, #0
 80189ac:	4628      	mov	r0, r5
 80189ae:	f7e7 fc27 	bl	8000200 <memchr>
 80189b2:	b108      	cbz	r0, 80189b8 <_printf_i+0x1bc>
 80189b4:	1b40      	subs	r0, r0, r5
 80189b6:	6060      	str	r0, [r4, #4]
 80189b8:	6863      	ldr	r3, [r4, #4]
 80189ba:	6123      	str	r3, [r4, #16]
 80189bc:	2300      	movs	r3, #0
 80189be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80189c2:	e7a7      	b.n	8018914 <_printf_i+0x118>
 80189c4:	6923      	ldr	r3, [r4, #16]
 80189c6:	462a      	mov	r2, r5
 80189c8:	4639      	mov	r1, r7
 80189ca:	4630      	mov	r0, r6
 80189cc:	47c0      	blx	r8
 80189ce:	3001      	adds	r0, #1
 80189d0:	d0aa      	beq.n	8018928 <_printf_i+0x12c>
 80189d2:	6823      	ldr	r3, [r4, #0]
 80189d4:	079b      	lsls	r3, r3, #30
 80189d6:	d413      	bmi.n	8018a00 <_printf_i+0x204>
 80189d8:	68e0      	ldr	r0, [r4, #12]
 80189da:	9b03      	ldr	r3, [sp, #12]
 80189dc:	4298      	cmp	r0, r3
 80189de:	bfb8      	it	lt
 80189e0:	4618      	movlt	r0, r3
 80189e2:	e7a3      	b.n	801892c <_printf_i+0x130>
 80189e4:	2301      	movs	r3, #1
 80189e6:	464a      	mov	r2, r9
 80189e8:	4639      	mov	r1, r7
 80189ea:	4630      	mov	r0, r6
 80189ec:	47c0      	blx	r8
 80189ee:	3001      	adds	r0, #1
 80189f0:	d09a      	beq.n	8018928 <_printf_i+0x12c>
 80189f2:	3501      	adds	r5, #1
 80189f4:	68e3      	ldr	r3, [r4, #12]
 80189f6:	9a03      	ldr	r2, [sp, #12]
 80189f8:	1a9b      	subs	r3, r3, r2
 80189fa:	42ab      	cmp	r3, r5
 80189fc:	dcf2      	bgt.n	80189e4 <_printf_i+0x1e8>
 80189fe:	e7eb      	b.n	80189d8 <_printf_i+0x1dc>
 8018a00:	2500      	movs	r5, #0
 8018a02:	f104 0919 	add.w	r9, r4, #25
 8018a06:	e7f5      	b.n	80189f4 <_printf_i+0x1f8>
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d1ac      	bne.n	8018966 <_printf_i+0x16a>
 8018a0c:	7803      	ldrb	r3, [r0, #0]
 8018a0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018a12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018a16:	e76c      	b.n	80188f2 <_printf_i+0xf6>
 8018a18:	0801c8e1 	.word	0x0801c8e1
 8018a1c:	0801c8f2 	.word	0x0801c8f2

08018a20 <_sbrk_r>:
 8018a20:	b538      	push	{r3, r4, r5, lr}
 8018a22:	4c06      	ldr	r4, [pc, #24]	; (8018a3c <_sbrk_r+0x1c>)
 8018a24:	2300      	movs	r3, #0
 8018a26:	4605      	mov	r5, r0
 8018a28:	4608      	mov	r0, r1
 8018a2a:	6023      	str	r3, [r4, #0]
 8018a2c:	f7e8 f950 	bl	8000cd0 <_sbrk>
 8018a30:	1c43      	adds	r3, r0, #1
 8018a32:	d102      	bne.n	8018a3a <_sbrk_r+0x1a>
 8018a34:	6823      	ldr	r3, [r4, #0]
 8018a36:	b103      	cbz	r3, 8018a3a <_sbrk_r+0x1a>
 8018a38:	602b      	str	r3, [r5, #0]
 8018a3a:	bd38      	pop	{r3, r4, r5, pc}
 8018a3c:	2000f520 	.word	0x2000f520

08018a40 <__sread>:
 8018a40:	b510      	push	{r4, lr}
 8018a42:	460c      	mov	r4, r1
 8018a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a48:	f000 f8bc 	bl	8018bc4 <_read_r>
 8018a4c:	2800      	cmp	r0, #0
 8018a4e:	bfab      	itete	ge
 8018a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018a52:	89a3      	ldrhlt	r3, [r4, #12]
 8018a54:	181b      	addge	r3, r3, r0
 8018a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018a5a:	bfac      	ite	ge
 8018a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8018a5e:	81a3      	strhlt	r3, [r4, #12]
 8018a60:	bd10      	pop	{r4, pc}

08018a62 <__swrite>:
 8018a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a66:	461f      	mov	r7, r3
 8018a68:	898b      	ldrh	r3, [r1, #12]
 8018a6a:	05db      	lsls	r3, r3, #23
 8018a6c:	4605      	mov	r5, r0
 8018a6e:	460c      	mov	r4, r1
 8018a70:	4616      	mov	r6, r2
 8018a72:	d505      	bpl.n	8018a80 <__swrite+0x1e>
 8018a74:	2302      	movs	r3, #2
 8018a76:	2200      	movs	r2, #0
 8018a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a7c:	f000 f868 	bl	8018b50 <_lseek_r>
 8018a80:	89a3      	ldrh	r3, [r4, #12]
 8018a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018a8a:	81a3      	strh	r3, [r4, #12]
 8018a8c:	4632      	mov	r2, r6
 8018a8e:	463b      	mov	r3, r7
 8018a90:	4628      	mov	r0, r5
 8018a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a96:	f000 b817 	b.w	8018ac8 <_write_r>

08018a9a <__sseek>:
 8018a9a:	b510      	push	{r4, lr}
 8018a9c:	460c      	mov	r4, r1
 8018a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018aa2:	f000 f855 	bl	8018b50 <_lseek_r>
 8018aa6:	1c43      	adds	r3, r0, #1
 8018aa8:	89a3      	ldrh	r3, [r4, #12]
 8018aaa:	bf15      	itete	ne
 8018aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8018aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018ab6:	81a3      	strheq	r3, [r4, #12]
 8018ab8:	bf18      	it	ne
 8018aba:	81a3      	strhne	r3, [r4, #12]
 8018abc:	bd10      	pop	{r4, pc}

08018abe <__sclose>:
 8018abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ac2:	f000 b813 	b.w	8018aec <_close_r>
	...

08018ac8 <_write_r>:
 8018ac8:	b538      	push	{r3, r4, r5, lr}
 8018aca:	4c07      	ldr	r4, [pc, #28]	; (8018ae8 <_write_r+0x20>)
 8018acc:	4605      	mov	r5, r0
 8018ace:	4608      	mov	r0, r1
 8018ad0:	4611      	mov	r1, r2
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	6022      	str	r2, [r4, #0]
 8018ad6:	461a      	mov	r2, r3
 8018ad8:	f7e8 f8a9 	bl	8000c2e <_write>
 8018adc:	1c43      	adds	r3, r0, #1
 8018ade:	d102      	bne.n	8018ae6 <_write_r+0x1e>
 8018ae0:	6823      	ldr	r3, [r4, #0]
 8018ae2:	b103      	cbz	r3, 8018ae6 <_write_r+0x1e>
 8018ae4:	602b      	str	r3, [r5, #0]
 8018ae6:	bd38      	pop	{r3, r4, r5, pc}
 8018ae8:	2000f520 	.word	0x2000f520

08018aec <_close_r>:
 8018aec:	b538      	push	{r3, r4, r5, lr}
 8018aee:	4c06      	ldr	r4, [pc, #24]	; (8018b08 <_close_r+0x1c>)
 8018af0:	2300      	movs	r3, #0
 8018af2:	4605      	mov	r5, r0
 8018af4:	4608      	mov	r0, r1
 8018af6:	6023      	str	r3, [r4, #0]
 8018af8:	f7e8 f8b5 	bl	8000c66 <_close>
 8018afc:	1c43      	adds	r3, r0, #1
 8018afe:	d102      	bne.n	8018b06 <_close_r+0x1a>
 8018b00:	6823      	ldr	r3, [r4, #0]
 8018b02:	b103      	cbz	r3, 8018b06 <_close_r+0x1a>
 8018b04:	602b      	str	r3, [r5, #0]
 8018b06:	bd38      	pop	{r3, r4, r5, pc}
 8018b08:	2000f520 	.word	0x2000f520

08018b0c <_fstat_r>:
 8018b0c:	b538      	push	{r3, r4, r5, lr}
 8018b0e:	4c07      	ldr	r4, [pc, #28]	; (8018b2c <_fstat_r+0x20>)
 8018b10:	2300      	movs	r3, #0
 8018b12:	4605      	mov	r5, r0
 8018b14:	4608      	mov	r0, r1
 8018b16:	4611      	mov	r1, r2
 8018b18:	6023      	str	r3, [r4, #0]
 8018b1a:	f7e8 f8b0 	bl	8000c7e <_fstat>
 8018b1e:	1c43      	adds	r3, r0, #1
 8018b20:	d102      	bne.n	8018b28 <_fstat_r+0x1c>
 8018b22:	6823      	ldr	r3, [r4, #0]
 8018b24:	b103      	cbz	r3, 8018b28 <_fstat_r+0x1c>
 8018b26:	602b      	str	r3, [r5, #0]
 8018b28:	bd38      	pop	{r3, r4, r5, pc}
 8018b2a:	bf00      	nop
 8018b2c:	2000f520 	.word	0x2000f520

08018b30 <_isatty_r>:
 8018b30:	b538      	push	{r3, r4, r5, lr}
 8018b32:	4c06      	ldr	r4, [pc, #24]	; (8018b4c <_isatty_r+0x1c>)
 8018b34:	2300      	movs	r3, #0
 8018b36:	4605      	mov	r5, r0
 8018b38:	4608      	mov	r0, r1
 8018b3a:	6023      	str	r3, [r4, #0]
 8018b3c:	f7e8 f8af 	bl	8000c9e <_isatty>
 8018b40:	1c43      	adds	r3, r0, #1
 8018b42:	d102      	bne.n	8018b4a <_isatty_r+0x1a>
 8018b44:	6823      	ldr	r3, [r4, #0]
 8018b46:	b103      	cbz	r3, 8018b4a <_isatty_r+0x1a>
 8018b48:	602b      	str	r3, [r5, #0]
 8018b4a:	bd38      	pop	{r3, r4, r5, pc}
 8018b4c:	2000f520 	.word	0x2000f520

08018b50 <_lseek_r>:
 8018b50:	b538      	push	{r3, r4, r5, lr}
 8018b52:	4c07      	ldr	r4, [pc, #28]	; (8018b70 <_lseek_r+0x20>)
 8018b54:	4605      	mov	r5, r0
 8018b56:	4608      	mov	r0, r1
 8018b58:	4611      	mov	r1, r2
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	6022      	str	r2, [r4, #0]
 8018b5e:	461a      	mov	r2, r3
 8018b60:	f7e8 f8a8 	bl	8000cb4 <_lseek>
 8018b64:	1c43      	adds	r3, r0, #1
 8018b66:	d102      	bne.n	8018b6e <_lseek_r+0x1e>
 8018b68:	6823      	ldr	r3, [r4, #0]
 8018b6a:	b103      	cbz	r3, 8018b6e <_lseek_r+0x1e>
 8018b6c:	602b      	str	r3, [r5, #0]
 8018b6e:	bd38      	pop	{r3, r4, r5, pc}
 8018b70:	2000f520 	.word	0x2000f520

08018b74 <__malloc_lock>:
 8018b74:	4770      	bx	lr

08018b76 <__malloc_unlock>:
 8018b76:	4770      	bx	lr

08018b78 <_realloc_r>:
 8018b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b7a:	4607      	mov	r7, r0
 8018b7c:	4614      	mov	r4, r2
 8018b7e:	460e      	mov	r6, r1
 8018b80:	b921      	cbnz	r1, 8018b8c <_realloc_r+0x14>
 8018b82:	4611      	mov	r1, r2
 8018b84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018b88:	f7ff bad6 	b.w	8018138 <_malloc_r>
 8018b8c:	b922      	cbnz	r2, 8018b98 <_realloc_r+0x20>
 8018b8e:	f7ff fa85 	bl	801809c <_free_r>
 8018b92:	4625      	mov	r5, r4
 8018b94:	4628      	mov	r0, r5
 8018b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b98:	f000 f826 	bl	8018be8 <_malloc_usable_size_r>
 8018b9c:	42a0      	cmp	r0, r4
 8018b9e:	d20f      	bcs.n	8018bc0 <_realloc_r+0x48>
 8018ba0:	4621      	mov	r1, r4
 8018ba2:	4638      	mov	r0, r7
 8018ba4:	f7ff fac8 	bl	8018138 <_malloc_r>
 8018ba8:	4605      	mov	r5, r0
 8018baa:	2800      	cmp	r0, #0
 8018bac:	d0f2      	beq.n	8018b94 <_realloc_r+0x1c>
 8018bae:	4631      	mov	r1, r6
 8018bb0:	4622      	mov	r2, r4
 8018bb2:	f7fe fe76 	bl	80178a2 <memcpy>
 8018bb6:	4631      	mov	r1, r6
 8018bb8:	4638      	mov	r0, r7
 8018bba:	f7ff fa6f 	bl	801809c <_free_r>
 8018bbe:	e7e9      	b.n	8018b94 <_realloc_r+0x1c>
 8018bc0:	4635      	mov	r5, r6
 8018bc2:	e7e7      	b.n	8018b94 <_realloc_r+0x1c>

08018bc4 <_read_r>:
 8018bc4:	b538      	push	{r3, r4, r5, lr}
 8018bc6:	4c07      	ldr	r4, [pc, #28]	; (8018be4 <_read_r+0x20>)
 8018bc8:	4605      	mov	r5, r0
 8018bca:	4608      	mov	r0, r1
 8018bcc:	4611      	mov	r1, r2
 8018bce:	2200      	movs	r2, #0
 8018bd0:	6022      	str	r2, [r4, #0]
 8018bd2:	461a      	mov	r2, r3
 8018bd4:	f7e8 f80e 	bl	8000bf4 <_read>
 8018bd8:	1c43      	adds	r3, r0, #1
 8018bda:	d102      	bne.n	8018be2 <_read_r+0x1e>
 8018bdc:	6823      	ldr	r3, [r4, #0]
 8018bde:	b103      	cbz	r3, 8018be2 <_read_r+0x1e>
 8018be0:	602b      	str	r3, [r5, #0]
 8018be2:	bd38      	pop	{r3, r4, r5, pc}
 8018be4:	2000f520 	.word	0x2000f520

08018be8 <_malloc_usable_size_r>:
 8018be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018bec:	1f18      	subs	r0, r3, #4
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	bfbc      	itt	lt
 8018bf2:	580b      	ldrlt	r3, [r1, r0]
 8018bf4:	18c0      	addlt	r0, r0, r3
 8018bf6:	4770      	bx	lr

08018bf8 <_init>:
 8018bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bfa:	bf00      	nop
 8018bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bfe:	bc08      	pop	{r3}
 8018c00:	469e      	mov	lr, r3
 8018c02:	4770      	bx	lr

08018c04 <_fini>:
 8018c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c06:	bf00      	nop
 8018c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c0a:	bc08      	pop	{r3}
 8018c0c:	469e      	mov	lr, r3
 8018c0e:	4770      	bx	lr
